cscope 15 $HOME/Downloads/Work/OTA/OTA05032019               0001719269
	@jsmn.c

23 
	~"jsmn.h
"

28 
jsm¡ok_t
 *
	$jsmn_Æloc_tokí
(
jsmn_∑r£r
 *
∑r£r
,

29 
jsm¡ok_t
 *
tokís
, 
size_t
 
num_tokís
) {

30 
jsm¡ok_t
 *
tok
;

31 i‡(
∑r£r
->
tok√xt
 >
num_tokís
) {

32  
NULL
;

34 
tok
 = &
tokís
[
∑r£r
->
tok√xt
++];

35 
tok
->
°¨t
 =Åok->
íd
 = -1;

36 
tok
->
size
 = 0;

37 #ifde‡
JSMN_PARENT_LINKS


38 
tok
->
∑ª¡
 = -1;

40  
tok
;

41 
	}
}

46 
	$jsmn_fûl_tokí
(
jsm¡ok_t
 *
tokí
, 
jsm¡y≥_t
 
ty≥
,

47 
°¨t
, 
íd
) {

48 
tokí
->
ty≥
 =Åype;

49 
tokí
->
°¨t
 = start;

50 
tokí
->
íd
 =Énd;

51 
tokí
->
size
 = 0;

52 
	}
}

57 
	$jsmn_∑r£_¥imôive
(
jsmn_∑r£r
 *
∑r£r
, c⁄° *
js
,

58 
size_t
 
Àn
, 
jsm¡ok_t
 *
tokís
, size_à
num_tokís
) {

59 
jsm¡ok_t
 *
tokí
;

60 
°¨t
;

62 
°¨t
 = 
∑r£r
->
pos
;

64 ; 
∑r£r
->
pos
 < 
Àn
 && 
js
[parser->pos] != '\0';Öarser->pos++) {

65 
js
[
∑r£r
->
pos
]) {

66 #i‚de‡
JSMN_STRICT


72 
found
;

74 i‡(
js
[
∑r£r
->
pos
] < 32 || js[parser->pos] >= 127) {

75 
∑r£r
->
pos
 = 
°¨t
;

76  
JSMN_ERROR_INVAL
;

79 #ifde‡
JSMN_STRICT


81 
∑r£r
->
pos
 = 
°¨t
;

82  
JSMN_ERROR_PART
;

85 
found
:

86 i‡(
tokís
 =
NULL
) {

87 
∑r£r
->
pos
--;

90 
tokí
 = 
	`jsmn_Æloc_tokí
(
∑r£r
, 
tokís
, 
num_tokís
);

91 i‡(
tokí
 =
NULL
) {

92 
∑r£r
->
pos
 = 
°¨t
;

93  
JSMN_ERROR_NOMEM
;

95 
	`jsmn_fûl_tokí
(
tokí
, 
JSMN_PRIMITIVE
, 
°¨t
, 
∑r£r
->
pos
);

96 #ifde‡
JSMN_PARENT_LINKS


97 
tokí
->
∑ª¡
 = 
∑r£r
->
toksu≥r
;

99 
∑r£r
->
pos
--;

101 
	}
}

106 
	$jsmn_∑r£_°rög
(
jsmn_∑r£r
 *
∑r£r
, c⁄° *
js
,

107 
size_t
 
Àn
, 
jsm¡ok_t
 *
tokís
, size_à
num_tokís
) {

108 
jsm¡ok_t
 *
tokí
;

110 
°¨t
 = 
∑r£r
->
pos
;

112 
∑r£r
->
pos
++;

115 ; 
∑r£r
->
pos
 < 
Àn
 && 
js
[parser->pos] != '\0';Öarser->pos++) {

116 
c
 = 
js
[
∑r£r
->
pos
];

119 i‡(
c
 == '\"') {

120 i‡(
tokís
 =
NULL
) {

123 
tokí
 = 
	`jsmn_Æloc_tokí
(
∑r£r
, 
tokís
, 
num_tokís
);

124 i‡(
tokí
 =
NULL
) {

125 
∑r£r
->
pos
 = 
°¨t
;

126  
JSMN_ERROR_NOMEM
;

128 
	`jsmn_fûl_tokí
(
tokí
, 
JSMN_STRING
, 
°¨t
+1, 
∑r£r
->
pos
);

129 #ifde‡
JSMN_PARENT_LINKS


130 
tokí
->
∑ª¡
 = 
∑r£r
->
toksu≥r
;

136 i‡(
c
 ='\\' && 
∑r£r
->
pos
 + 1 < 
Àn
) {

137 
i
;

138 
∑r£r
->
pos
++;

139 
js
[
∑r£r
->
pos
]) {

146 
∑r£r
->
pos
++;

147 
i
 = 0; i < 4 && 
∑r£r
->
pos
 < 
Àn
 && 
js
[parser->pos] != '\0'; i++) {

149 if(!((
js
[
∑r£r
->
pos
] >= 48 && js[parser->pos] <= 57) ||

150 (
js
[
∑r£r
->
pos
] >= 65 && js[parser->pos] <= 70) ||

151 (
js
[
∑r£r
->
pos
] >= 97 && js[parser->pos] <= 102))) {

152 
∑r£r
->
pos
 = 
°¨t
;

153  
JSMN_ERROR_INVAL
;

155 
∑r£r
->
pos
++;

157 
∑r£r
->
pos
--;

161 
∑r£r
->
pos
 = 
°¨t
;

162  
JSMN_ERROR_INVAL
;

166 
∑r£r
->
pos
 = 
°¨t
;

167  
JSMN_ERROR_PART
;

168 
	}
}

173 
	$jsmn_∑r£
(
jsmn_∑r£r
 *
∑r£r
, c⁄° *
js
, 
size_t
 
Àn
,

174 
jsm¡ok_t
 *
tokís
, 
num_tokís
) {

175 
r
;

176 
i
;

177 
jsm¡ok_t
 *
tokí
;

178 
cou¡
 = 
∑r£r
->
tok√xt
;

180 ; 
∑r£r
->
pos
 < 
Àn
 && 
js
[parser->pos] != '\0';Öarser->pos++) {

181 
c
;

182 
jsm¡y≥_t
 
ty≥
;

184 
c
 = 
js
[
∑r£r
->
pos
];

185 
c
) {

187 
cou¡
++;

188 i‡(
tokís
 =
NULL
) {

191 
tokí
 = 
	`jsmn_Æloc_tokí
(
∑r£r
, 
tokís
, 
num_tokís
);

192 i‡(
tokí
 =
NULL
)

193  
JSMN_ERROR_NOMEM
;

194 i‡(
∑r£r
->
toksu≥r
 != -1) {

195 
tokís
[
∑r£r
->
toksu≥r
].
size
++;

196 #ifde‡
JSMN_PARENT_LINKS


197 
tokí
->
∑ª¡
 = 
∑r£r
->
toksu≥r
;

200 
tokí
->
ty≥
 = (
c
 ='{' ? 
JSMN_OBJECT
 : 
JSMN_ARRAY
);

201 
tokí
->
°¨t
 = 
∑r£r
->
pos
;

202 
∑r£r
->
toksu≥r
 =Ö¨£r->
tok√xt
 - 1;

205 i‡(
tokís
 =
NULL
)

207 
ty≥
 = (
c
 ='}' ? 
JSMN_OBJECT
 : 
JSMN_ARRAY
);

208 #ifde‡
JSMN_PARENT_LINKS


209 i‡(
∑r£r
->
tok√xt
 < 1) {

210  
JSMN_ERROR_INVAL
;

212 
tokí
 = &
tokís
[
∑r£r
->
tok√xt
 - 1];

214 i‡(
tokí
->
°¨t
 !-1 &&Åokí->
íd
 == -1) {

215 i‡(
tokí
->
ty≥
 !=Åype) {

216  
JSMN_ERROR_INVAL
;

218 
tokí
->
íd
 = 
∑r£r
->
pos
 + 1;

219 
∑r£r
->
toksu≥r
 = 
tokí
->
∑ª¡
;

222 i‡(
tokí
->
∑ª¡
 == -1) {

225 
tokí
 = &
tokís
[tokí->
∑ª¡
];

228 
i
 = 
∑r£r
->
tok√xt
 - 1; i >= 0; i--) {

229 
tokí
 = &
tokís
[
i
];

230 i‡(
tokí
->
°¨t
 !-1 &&Åokí->
íd
 == -1) {

231 i‡(
tokí
->
ty≥
 !=Åype) {

232  
JSMN_ERROR_INVAL
;

234 
∑r£r
->
toksu≥r
 = -1;

235 
tokí
->
íd
 = 
∑r£r
->
pos
 + 1;

240 i‡(
i
 =-1Ë 
JSMN_ERROR_INVAL
;

241 ; 
i
 >= 0; i--) {

242 
tokí
 = &
tokís
[
i
];

243 i‡(
tokí
->
°¨t
 !-1 &&Åokí->
íd
 == -1) {

244 
∑r£r
->
toksu≥r
 = 
i
;

251 
r
 = 
	`jsmn_∑r£_°rög
(
∑r£r
, 
js
, 
Àn
, 
tokís
, 
num_tokís
);

252 i‡(
r
 < 0) Ñ;

253 
cou¡
++;

254 i‡(
∑r£r
->
toksu≥r
 !-1 && 
tokís
 !
NULL
)

255 
tokís
[
∑r£r
->
toksu≥r
].
size
++;

260 
∑r£r
->
toksu≥r
 =Ö¨£r->
tok√xt
 - 1;

263 i‡(
tokís
 !
NULL
 && 
∑r£r
->
toksu≥r
 != -1 &&

264 
tokís
[
∑r£r
->
toksu≥r
].
ty≥
 !
JSMN_ARRAY
 &&

265 
tokís
[
∑r£r
->
toksu≥r
].
ty≥
 !
JSMN_OBJECT
) {

266 #ifde‡
JSMN_PARENT_LINKS


267 
∑r£r
->
toksu≥r
 = 
tokís
[∑r£r->toksu≥r].
∑ª¡
;

269 
i
 = 
∑r£r
->
tok√xt
 - 1; i >= 0; i--) {

270 i‡(
tokís
[
i
].
ty≥
 =
JSMN_ARRAY
 ||Åokís[i].ty≥ =
JSMN_OBJECT
) {

271 i‡(
tokís
[
i
].
°¨t
 !-1 &&Åokís[i].
íd
 == -1) {

272 
∑r£r
->
toksu≥r
 = 
i
;

280 #ifde‡
JSMN_STRICT


286 i‡(
tokís
 !
NULL
 && 
∑r£r
->
toksu≥r
 != -1) {

287 
jsm¡ok_t
 *
t
 = &
tokís
[
∑r£r
->
toksu≥r
];

288 i‡(
t
->
ty≥
 =
JSMN_OBJECT
 ||

289 (
t
->
ty≥
 =
JSMN_STRING
 &&Å->
size
 != 0)) {

290  
JSMN_ERROR_INVAL
;

297 
r
 = 
	`jsmn_∑r£_¥imôive
(
∑r£r
, 
js
, 
Àn
, 
tokís
, 
num_tokís
);

298 i‡(
r
 < 0) Ñ;

299 
cou¡
++;

300 i‡(
∑r£r
->
toksu≥r
 !-1 && 
tokís
 !
NULL
)

301 
tokís
[
∑r£r
->
toksu≥r
].
size
++;

304 #ifde‡
JSMN_STRICT


307  
JSMN_ERROR_INVAL
;

312 i‡(
tokís
 !
NULL
) {

313 
i
 = 
∑r£r
->
tok√xt
 - 1; i >= 0; i--) {

315 i‡(
tokís
[
i
].
°¨t
 !-1 &&Åokís[i].
íd
 == -1) {

316  
JSMN_ERROR_PART
;

321  
cou¡
;

322 
	}
}

328 
	$jsmn_öô
(
jsmn_∑r£r
 *
∑r£r
) {

329 
∑r£r
->
pos
 = 0;

330 
∑r£r
->
tok√xt
 = 0;

331 
∑r£r
->
toksu≥r
 = -1;

332 
	}
}

	@jsmn.h

23 #i‚de‡
__JSMN_H_


24 
	#__JSMN_H_


	)

26 
	~<°ddef.h
>

28 #ifde‡
__˝lu•lus


40 
JSMN_UNDEFINED
 = 0,

41 
JSMN_OBJECT
 = 1,

42 
JSMN_ARRAY
 = 2,

43 
JSMN_STRING
 = 3,

44 
JSMN_PRIMITIVE
 = 4

45 } 
	tjsm¡y≥_t
;

47 
	ejsm√º
 {

49 
JSMN_ERROR_NOMEM
 = -1,

51 
JSMN_ERROR_INVAL
 = -2,

53 
JSMN_ERROR_PART
 = -3

63 
jsm¡y≥_t
 
ty≥
;

64 
°¨t
;

65 
íd
;

66 
size
;

67 #ifde‡
JSMN_PARENT_LINKS


68 
∑ª¡
;

70 } 
	tjsm¡ok_t
;

77 
pos
;

78 
tok√xt
;

79 
toksu≥r
;

80 } 
	tjsmn_∑r£r
;

85 
jsmn_öô
(
jsmn_∑r£r
 *
∑r£r
);

91 
jsmn_∑r£
(
jsmn_∑r£r
 *
∑r£r
, c⁄° *
js
, 
size_t
 
Àn
,

92 
jsm¡ok_t
 *
tokís
, 
num_tokís
);

94 #ifde‡
__˝lu•lus


	@main.c

7 
	~<°dio.h
>

8 
	~<time.h
>

9 
	~<uni°d.h
>

10 
	~<¨∑/öë.h
>

11 
	~<sys/ùc.h
>

12 
	~<sys/sockë.h
>

13 
	~<±hªad.h
>

14 
	~<°dlib.h
>

15 
	~<√tdb.h
>

16 
	~<°rög.h
>

17 
	~<f˙é.h
>

18 
	~<î∫o.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/msg.h
>

21 
	~"Ÿa_dow∆ﬂd.h
"

22 
	~"Ÿa_upd©e.h
"

23 
	~"Ÿa_utûs.h
"

24 
	~"Ÿa_ödiˇt‹.h
"

25 
	~"jsmn.h
"

27 
	#GW_OTA_UPDATE_SEND_KEY
 4657

	)

29 
	#DOWNLOAD_DESTINATION_DIR
 "/medü/u£rd©a"

	)

30 
	#DOWNLOAD_DESTINATION_FILE_PATH
 
DOWNLOAD_DESTINATION_DIR
"/upd©e.swu"

	)

32 
	#OTA_UPDATE_SECURITY_KEY_FILE_PATH
 "/ëc/keys/public.≥m"

	)

33 
	#PRE_REBOOT_DELAY
 10

	)

34 
	#OTA_COMPLETED_UBOOT_VAR
 "is_Ÿa_d⁄e"

	)

36 
	gŸa_uri
[
JSON_URI_KEY_MAX_SIZE
 + 1];

37 
	gŸa_msg_ty≥
[
JSON_OTA_MSG_TYPE_MAX_SIZE
 + 1];

38 
	gŸa_cmd
[
JSON_OTA_CMD_TYPE_MAX_SIZE
 + 1];

41 
	gg_upd©e_lo›
;

44 
	smsgbuf


46 
	mmty≥
;

47 
	mmsg
[100];

48 }
	gmesßge
,
	guæ
;

50 
	$js⁄eq
(c⁄° *
js⁄
, 
jsm¡ok_t
 *
tok
, c⁄° *
s
) {

51 i‡(
tok
->
ty≥
 =
JSMN_STRING
 && (Ë
	`°æí
(
s
Ë=tok->
íd
 -Åok->
°¨t
 &&

52 
	`°∫cmp
(
js⁄
 + 
tok
->
°¨t
, 
s
,Åok->
íd
 -Åok->start) == 0) {

56 
	}
}

58 
	$Ÿa_∑r£_js⁄_d©a
(*
js⁄_d©a
)

60 
jsmn_∑r£r
 
∑r£r
;

61 
jsm¡ok_t
 
tokís
[
MAX_JSON_TOKEN
];

62 
tokí_˙t
;

63 
i
,
ªs
;

64 
is_⁄löe_upd©e
 = 1;

66 
˘y≥_ch¨
[
JSON_CTYPE_KEY_VALUE_SIZE
];

67 
˘y≥_cmd
 = -1;

69 
	`mem£t
(&
∑r£r
, 0, (parser));

70 
	`mem£t
(&
tokís
[0], 0, (tokens));

71 
tokí_˙t
 = 0;

73 
	`LOGD
("InitializingÅhe jsonÖarser\n");

75 
	`jsmn_öô
(&
∑r£r
);

77 
tokí_˙t
 = 
	`jsmn_∑r£
(&
∑r£r
, 
js⁄_d©a
, 
	`°æí
(js⁄_d©a), 
tokís
, (tokens) / (tokens[0]));

80 i‡(
tokí_˙t
 < 1 || 
tokís
[0].
ty≥
 !
JSMN_OBJECT
)

82 
	`LOGE
("ObjectÉxpected\n");

87 
i
 = 0; i < 
tokí_˙t
; i++)

89 i‡(
	`js⁄eq
(
js⁄_d©a
, &
tokís
[
i
], 
JSON_CTYPE_KEY
) == 0)

95 
	`bzîo
(
˘y≥_ch¨
, 
JSON_CTYPE_KEY_VALUE_SIZE
);

96 
	`°∫˝y
(
˘y≥_ch¨
, 
js⁄_d©a
 + 
tokís
[
i
 + 1].
°¨t
,Åokís[ò+ 1].
íd
 -Åokens[i + 1].start);

97 
˘y≥_cmd
 = 
	`©oi
(
˘y≥_ch¨
);

98 
	`LOGD
("Cty≥Ñe˚ived - %d\n", 
˘y≥_cmd
);

103 
i
 = 0; i < 
tokí_˙t
; i++)

105 i‡(
	`js⁄eq
(
js⁄_d©a
, &
tokís
[
i
], 
JSON_OTA_MSG_TYPE_KEY
) == 0)

111 
	`bzîo
(
Ÿa_msg_ty≥
,
JSON_OTA_MSG_TYPE_MAX_SIZE
+1);

112 
	`°∫˝y
(
Ÿa_msg_ty≥
, 
js⁄_d©a
 + 
tokís
[
i
 + 1].
°¨t
,Åokís[ò+ 1].
íd
 -Åokens[i + 1].start);

113 
	`LOGD
("OTA msgÅy≥:%s\n", 
Ÿa_msg_ty≥
);

115 if(
	`°rcmp
(
Ÿa_msg_ty≥
,"REQ") != 0)

122 
i
 = 0; i < 
tokí_˙t
; i++)

124 i‡(
	`js⁄eq
(
js⁄_d©a
, &
tokís
[
i
], 
JSON_OTA_CMD_TYPE_KEY
) == 0)

130 
	`bzîo
(
Ÿa_cmd
,
JSON_OTA_CMD_TYPE_MAX_SIZE
+1);

131 
	`°∫˝y
(
Ÿa_cmd
, 
js⁄_d©a
 + 
tokís
[
i
 + 1].
°¨t
,Åokís[ò+ 1].
íd
 -Åokens[i + 1].start);

132 
	`LOGD
("OTA cmd:%s\n", 
Ÿa_cmd
);

134 if(
	`°rcmp
(
Ÿa_cmd
,"onlineUpdate") == 0)

136 
is_⁄löe_upd©e
 = 1;

137 
	`LOGD
("Online Update\n");

141 
is_⁄löe_upd©e
 = 0;

142 
	`LOGD
("Offline Update\n");

149 
i
 = 0; i < 
tokí_˙t
; i++)

151 i‡(
	`js⁄eq
(
js⁄_d©a
, &
tokís
[
i
], 
JSON_URI_KEY_NAME
) == 0)

157 
	`bzîo
(
Ÿa_uri
, 
JSON_URI_KEY_MAX_SIZE
 + 1);

158 
	`°∫˝y
(
Ÿa_uri
, 
js⁄_d©a
 + 
tokís
[
i
 + 1].
°¨t
,Åokís[ò+ 1].
íd
 -Åokens[i + 1].start);

161 
	`LOGD
("URI:%s\n", 
Ÿa_uri
);

163 if(
is_⁄löe_upd©e
)

165 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_STARTED
, 
NULL
);

166 
ªs
 = 
	`Ÿa_°¨t
(
Ÿa_uri
);

170 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_STARTED
, 
NULL
);

171 
ªs
 = 
	`Ÿa_°¨t_fûe
(
Ÿa_uri
);

174  
ªs
;

175 
	}
}

178 
	$Ÿa_°¨t_fûe
(*
§c_uæ
)

180 
ªs
;

182 
ªs
 = 
	`Ÿa_upd©e_vîify
(
§c_uæ
,
OTA_UPDATE_SECURITY_KEY_FILE_PATH
);

183 if(
ªs
 != 0) {

184 
	`LOGE
("ERROR: ota_update_verify\n");

185 
îr‹
;

188 
ªs
 = 
	`Ÿa_upd©e_°¨t
(
§c_uæ
,
OTA_UPDATE_SECURITY_KEY_FILE_PATH
);

189 if(
ªs
 != 0) {

190 
	`LOGE
("ERROR: ota_update_start\n");

191 
îr‹
;

194 
	`Ÿa_ªboŸ_devi˚
(
PRE_REBOOT_DELAY
, 1);

196 
îr‹
:

198 
	}
}

201 
	$Ÿa_°¨t
(*
§c_uæ
)

203 
ªs
;

205 
ªs
 = 
	`Ÿa_dow∆ﬂd_s·p
(
§c_uæ
, 
DOWNLOAD_DESTINATION_FILE_PATH
);

206 if(
ªs
 != 0) {

207 
	`LOGE
("ERROR: ota_download_sftp\n");

208 
îr‹
;

211 
ªs
 = 
	`Ÿa_upd©e_vîify
(
DOWNLOAD_DESTINATION_FILE_PATH
,

212 
OTA_UPDATE_SECURITY_KEY_FILE_PATH
);

213 if(
ªs
 != 0) {

214 
	`LOGE
("ERROR: ota_update_verify\n");

215 
îr‹
;

218 
ªs
 = 
	`Ÿa_upd©e_°¨t
(
DOWNLOAD_DESTINATION_FILE_PATH
,

219 
OTA_UPDATE_SECURITY_KEY_FILE_PATH
);

220 if(
ªs
 != 0) {

221 
	`LOGE
("ERROR: ota_update_start\n");

222 
îr‹
;

225 
	`Ÿa_ªboŸ_devi˚
(
PRE_REBOOT_DELAY
, 1);

227 
îr‹
:

229 
	}
}

231 *
	$Ÿa_upd©e_thªad
(*
msg
)

233 
uid
;

234 
uid
 = 
	`msggë
(2,
IPC_CREAT
|0644);

235 if(
uid
<0)

237 
	`≥º‹
("msgget");

241 if(
	`msgrcv
(
uid
,
uæ
,(url),1,0)>0)

243 
	`¥ötf
("thêuæ i†: %s\n",
uæ
.
msg
);

246 
	`Ÿa_∑r£_js⁄_d©a
(
uæ
.
msg
);

247 
	}
}

250 
	$fúmw¨e_upd©e_thªad_öô
()

252 
±hªad_t
 
tid
;

254 if(
	`±hªad_¸óã
(&
tid
,
NULL
, 
Ÿa_upd©e_thªad
,NULL))

256 
	`¥ötf
("threadÇot created\n\r");

260  
tid
;

261 
	}
}

263 *
	$fwupd©e_thªad
(*
d©a
)

265 
msgbuf
 
v
;

266 
±hªad_t
 
tid
;

267 
uid
;

268 
uid
 = (*)
d©a
;

270 if(
	`msgªcv
(
uid
, &
v
, (v), 1, 0)>0)

272 if(
	`°∫cmp
(
v
.
msg
,"dwfw",4) == 0)

274 
tid
 = 
	`fúmw¨e_upd©e_thªad_öô
();

275 if(
tid
 != 0)

277 
	`¥ötf
("ERROR: firmware updateÅhread createÖrocess failed\n\r");

280  
tid
;

283 
	}
}

286 
	$fwupd©e_thªad_öô
()

288 
±hªad_t
 
tid
;

289 
uid
;

291 
uid
 = 
	`msggë
(1,
IPC_CREAT
|0644);

292 if(
uid
<0)

294 
	`≥º‹
("msgget");

298 if(
	`±hªad_¸óã
(&
tid
,
NULL
,
fwupd©e_thªad
,&
uid
)!=0)

300 
	`¥ötf
("ERROR:Çot create fwupdateÅhread\n\r");

304  
thªad
;

305 
	}
}

307 
	$maö
(
¨gc
, **
¨gv
)

309 
±hªad_t
 
tid
;

310 
uid
;

312 
tid
 = 
	`fwupd©e_thªad_öô
();

313 
	}
}

	@ota_app.c

33 
	~<°dio.h
>

34 
	~<time.h
>

35 
	~<uni°d.h
>

36 
	~<¨∑/öë.h
>

37 
	~<sys/ùc.h
>

38 
	~<sys/sockë.h
>

39 
	~<±hªad.h
>

40 
	~<°dlib.h
>

41 
	~<√tdb.h
>

42 
	~<°rög.h
>

43 
	~<f˙é.h
>

44 
	~<î∫o.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<sys/msg.h
>

47 
	~"Ÿa_dow∆ﬂd.h
"

48 
	~"Ÿa_upd©e.h
"

49 
	~"Ÿa_utûs.h
"

50 
	~"Ÿa_ödiˇt‹.h
"

51 
	~"jsmn.h
"

57 
	#GW_OTA_UPDATE_SEND_KEY
 4657

	)

59 
	#DOWNLOAD_DESTINATION_DIR
 "/medü/u£rd©a"

	)

60 
	#DOWNLOAD_DESTINATION_FILE_PATH
 
DOWNLOAD_DESTINATION_DIR
"/upd©e.swu"

	)

62 
	#OTA_UPDATE_SECURITY_KEY_FILE_PATH
 "/ëc/keys/public.≥m"

	)

63 
	#PRE_REBOOT_DELAY
 10

	)

64 
	#OTA_COMPLETED_UBOOT_VAR
 "is_Ÿa_d⁄e"

	)

66 
	gŸa_uri
[
JSON_URI_KEY_MAX_SIZE
 + 1];

67 
	gŸa_msg_ty≥
[
JSON_OTA_MSG_TYPE_MAX_SIZE
 + 1];

68 
	gŸa_cmd
[
JSON_OTA_CMD_TYPE_MAX_SIZE
 + 1];

71 
	gg_upd©e_lo›
;

73 
	$Ÿa_c‹ª˘_uri_∑th
(*
sour˚_°r
)

75 *
ãmp°r
 = 
sour˚_°r
;

77 
ãmp°r
 = 
	`°r°r
(tempstr, "\\/");

78 i‡(
ãmp°r
 !
NULL
) {

79 
	`°∫˝y
(
ãmp°r
,Åemp°∏+ 1, 
	`°æí
(tempstr + 1));

80 
sour˚_°r
[
	`°æí
(source_str) - 1] = '\0';

82 } 
ãmp°r
 !
NULL
);

83 
	}
}

86 
	$js⁄eq
(c⁄° *
js⁄
, 
jsm¡ok_t
 *
tok
, c⁄° *
s
) {

87 i‡(
tok
->
ty≥
 =
JSMN_STRING
 && (Ë
	`°æí
(
s
Ë=tok->
íd
 -Åok->
°¨t
 &&

88 
	`°∫cmp
(
js⁄
 + 
tok
->
°¨t
, 
s
,Åok->
íd
 -Åok->start) == 0) {

92 
	}
}

101 
	$Ÿa_°¨t
(*
§c_uæ
)

103 
ªs
;

105 
ªs
 = 
	`Ÿa_dow∆ﬂd_s·p
(
§c_uæ
, 
DOWNLOAD_DESTINATION_FILE_PATH
);

106 if(
ªs
 != 0) {

107 
	`LOGE
("ERROR: ota_download_sftp\n");

108 
îr‹
;

111 
ªs
 = 
	`Ÿa_upd©e_vîify
(
DOWNLOAD_DESTINATION_FILE_PATH
,

112 
OTA_UPDATE_SECURITY_KEY_FILE_PATH
);

113 if(
ªs
 != 0) {

114 
	`LOGE
("ERROR: ota_update_verify\n");

115 
îr‹
;

118 
ªs
 = 
	`Ÿa_upd©e_°¨t
(
DOWNLOAD_DESTINATION_FILE_PATH
,

119 
OTA_UPDATE_SECURITY_KEY_FILE_PATH
);

120 if(
ªs
 != 0) {

121 
	`LOGE
("ERROR: ota_update_start\n");

122 
îr‹
;

125 
	`Ÿa_ªboŸ_devi˚
(
PRE_REBOOT_DELAY
, 1);

127 
îr‹
:

129 
	}
}

135 
	$Ÿa_°¨t_fûe
(*
§c_uæ
)

137 
ªs
;

139 
ªs
 = 
	`Ÿa_upd©e_vîify
(
§c_uæ
,
OTA_UPDATE_SECURITY_KEY_FILE_PATH
);

140 if(
ªs
 != 0) {

141 
	`LOGE
("ERROR: ota_update_verify\n");

142 
îr‹
;

145 
ªs
 = 
	`Ÿa_upd©e_°¨t
(
§c_uæ
,
OTA_UPDATE_SECURITY_KEY_FILE_PATH
);

146 if(
ªs
 != 0) {

147 
	`LOGE
("ERROR: ota_update_start\n");

148 
îr‹
;

151 
	`Ÿa_ªboŸ_devi˚
(
PRE_REBOOT_DELAY
, 1);

153 
îr‹
:

155 
	}
}

161 
	$Ÿa_∑r£_js⁄_d©a
(*
js⁄_d©a
)

163 
jsmn_∑r£r
 
∑r£r
;

164 
jsm¡ok_t
 
tokís
[
MAX_JSON_TOKEN
];

165 
tokí_˙t
;

166 
i
,
ªs
;

167 
is_⁄löe_upd©e
 = 1;

169 
˘y≥_ch¨
[
JSON_CTYPE_KEY_VALUE_SIZE
];

170 
˘y≥_cmd
 = -1;

172 
	`mem£t
(&
∑r£r
, 0, (parser));

173 
	`mem£t
(&
tokís
[0], 0, (tokens));

174 
tokí_˙t
 = 0;

176 
	`LOGD
("InitializingÅhe jsonÖarser\n");

178 
	`jsmn_öô
(&
∑r£r
);

180 
tokí_˙t
 = 
	`jsmn_∑r£
(&
∑r£r
, 
js⁄_d©a
, 
	`°æí
(js⁄_d©a), 
tokís
,

181 (
tokís
) / (tokens[0]));

184 i‡(
tokí_˙t
 < 1 || 
tokís
[0].
ty≥
 !
JSMN_OBJECT
) {

185 
	`LOGE
("ObjectÉxpected\n");

190 
i
 = 0; i < 
tokí_˙t
; i++) {

191 i‡(
	`js⁄eq
(
js⁄_d©a
, &
tokís
[
i
], 
JSON_CTYPE_KEY
) == 0) {

196 i‡(
i
 >
tokí_˙t
) {

197 
	`LOGE
("InvÆid JSON (%†keyÇŸ found)\n", 
JSON_CTYPE_KEY
);

202 if(
JSON_CTYPE_KEY_VALUE_SIZE
 < (
tokís
[
i
 + 1].
íd
 -Åokís[ò+ 1].
°¨t
)) {

203 
	`LOGE
("Invalid JSON (Device CtypeÜenght isÅooÜong)\n");

207 
	`bzîo
(
˘y≥_ch¨
, 
JSON_CTYPE_KEY_VALUE_SIZE
);

208 
	`°∫˝y
(
˘y≥_ch¨
, 
js⁄_d©a
 + 
tokís
[
i
 + 1].
°¨t
,Åokís[ò+ 1].
íd
 -Åokens[i + 1].start);

209 
˘y≥_cmd
 = 
	`©oi
(
˘y≥_ch¨
);

210 
	`LOGD
("Cty≥Ñe˚ived - %d\n", 
˘y≥_cmd
);

215 
i
 = 0; i < 
tokí_˙t
; i++) {

216 i‡(
	`js⁄eq
(
js⁄_d©a
, &
tokís
[
i
], 
JSON_OTA_MSG_TYPE_KEY
) == 0) {

221 i‡(
i
 >
tokí_˙t
) {

222 
	`LOGE
("InvÆid JSON (%†keyÇŸ found)\n", 
JSON_OTA_MSG_TYPE_KEY
);

226 i‡(
JSON_OTA_MSG_TYPE_MAX_SIZE
 < (
tokís
[
i
 + 1].
íd
 -Åokís[ò+ 1].
°¨t
) ) {

227 
	`LOGE
("Invalid download OTA messageÅype\n");

231 
	`bzîo
(
Ÿa_msg_ty≥
,
JSON_OTA_MSG_TYPE_MAX_SIZE
+1);

232 
	`°∫˝y
(
Ÿa_msg_ty≥
, 
js⁄_d©a
 + 
tokís
[
i
 + 1].
°¨t
,Åokís[ò+ 1].
íd
 -Åokens[i + 1].start);

233 
	`LOGD
("OTA msgÅy≥:%s\n", 
Ÿa_msg_ty≥
);

235 if(
	`°rcmp
(
Ÿa_msg_ty≥
,"REQ") != 0)

242 
i
 = 0; i < 
tokí_˙t
; i++) {

243 i‡(
	`js⁄eq
(
js⁄_d©a
, &
tokís
[
i
], 
JSON_OTA_CMD_TYPE_KEY
) == 0) {

248 i‡(
i
 >
tokí_˙t
) {

249 
	`LOGD
("InvÆid JSON (%†keyÇŸ found)\n", 
JSON_OTA_CMD_TYPE_KEY
);

253 i‡(
JSON_OTA_CMD_TYPE_MAX_SIZE
 < (
tokís
[
i
 + 1].
íd
 -Åokís[ò+ 1].
°¨t
)) {

254 
	`LOGE
("Invalid download OTA messageÅype\n");

258 
	`bzîo
(
Ÿa_cmd
,
JSON_OTA_CMD_TYPE_MAX_SIZE
+1);

259 
	`°∫˝y
(
Ÿa_cmd
, 
js⁄_d©a
 + 
tokís
[
i
 + 1].
°¨t
,

260 
tokís
[
i
 + 1].
íd
 -Åokís[ò+ 1].
°¨t
);

261 
	`LOGD
("OTA cmd:%s\n", 
Ÿa_cmd
);

263 if(
	`°rcmp
(
Ÿa_cmd
,"onlineUpdate") == 0) {

264 
is_⁄löe_upd©e
 = 1;

265 
	`LOGD
("Online Update\n");

267 
is_⁄löe_upd©e
 = 0;

268 
	`LOGD
("Offline Update\n");

275 
i
 = 0; i < 
tokí_˙t
; i++) {

276 i‡(
	`js⁄eq
(
js⁄_d©a
, &
tokís
[
i
], 
JSON_URI_KEY_NAME
) == 0) {

281 i‡(
i
 >
tokí_˙t
) {

282 
	`LOGE
("InvÆid JSON ( %†keyÇŸ found)\n",
JSON_URI_KEY_NAME
);

286 i‡(
JSON_URI_KEY_MAX_SIZE
 < (
tokís
[
i
 + 1].
íd
 -Åokís[ò+ 1].
°¨t
)) {

287 
	`LOGE
("Invalid download URI size\n");

291 
	`bzîo
(
Ÿa_uri
, 
JSON_URI_KEY_MAX_SIZE
 + 1);

292 
	`°∫˝y
(
Ÿa_uri
, 
js⁄_d©a
 + 
tokís
[
i
 + 1].
°¨t
,

293 
tokís
[
i
 + 1].
íd
 -Åokís[ò+ 1].
°¨t
);

295 
	`Ÿa_c‹ª˘_uri_∑th
(
Ÿa_uri
);

296 
	`LOGD
("URI:%s\n", 
Ÿa_uri
);

298 if(
is_⁄löe_upd©e
) {

299 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_STARTED
, 
NULL
);

300 
ªs
 = 
	`Ÿa_°¨t
(
Ÿa_uri
);

302 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_STARTED
, 
NULL
);

303 
ªs
 = 
	`Ÿa_°¨t_fûe
(
Ÿa_uri
);

306  
ªs
;

307 
	}
}

313 *
	$Ÿa_upd©e_thªad
(*
¨g
)

315 
Ÿa_msq_id
;

316 
key_t
 
Ÿa_key
;

317 
mesßge_buf
 
rbuf
;

318 
d©a_ªcv_Àn
 = 0;

319 
is_Ÿa_d⁄e
[16];

321 
	`LOGD
(" Gateway OTA HandlerÅhread started\n");

323 
Ÿa_key
 = 
GW_OTA_UPDATE_SEND_KEY
;

324 i‡((
Ÿa_msq_id
 = 
	`msggë
(
Ÿa_key
, 
IPC_CREAT
 | 0666)) < 0) {

325 
	`LOGE
("msggë(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

326  
NULL
;

329 i‡(
	`Ÿa_gë_uboŸ_ív
(
OTA_COMPLETED_UBOOT_VAR
, 
is_Ÿa_d⁄e
) == 0) {

330 i‡(
	`°∫cmp
(
is_Ÿa_d⁄e
, "y", 1) == 0) {

331 
	`LOGD
("gateway updateápplied successfully\n");

332 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_SUCCESS
, "OTA completed successfully");

333 
	`Ÿa_£t_uboŸ_ív
(
OTA_COMPLETED_UBOOT_VAR
, "n");

335 
	`LOGD
("no gateway updates inÖrevious boot\n");

339 #i‡
	`deföed
(
TEST_IMAGE
)

345 
	`Ÿa_öd_°¨t
();

347 
	`LOGD
("Gateway OTA Queue Initialized successfully..\n");

348 
g_upd©e_lo›
) {

349 
i
;

351 
	`mem£t
(&
rbuf
, 0, (rbuf));

352 
	`LOGD
("Waiting for Message\n");

356 i‡((
d©a_ªcv_Àn
 = 
	`msgrcv
(
Ÿa_msq_id
, &
rbuf
, 
MSGSZ
, 1, 0)) < 0) {

357 
	`LOGE
("msgrcv(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

360 
	`LOGD
("Messageárrived\n");

361 
	`LOGD
("JSON DATA:%s\n",
rbuf
.
mãxt
);

362 
	`Ÿa_∑r£_js⁄_d©a
(&
rbuf
.
mãxt
[0]);

364 
	}
}

369 
	$Ÿa_upd©e_öô
() {

370 
±hªad_t
 
tid
;

372 
g_upd©e_lo›
 = 1;

373 i‡(
	`±hªad_¸óã
(&
tid
, 
NULL
, &
Ÿa_upd©e_thªad
, NULL) != 0) {

374 
	`LOGE
("±hªad_¸óã(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

375 
g_upd©e_lo›
 = 0;

379  
tid
;

380 
	}
}

382 
	$maö
(
¨gc
, *
¨gv
[])

384 
fûíame
[100];

385 
fûëy≥
[100];

386 
±hªad_t
 
Ÿa_upd©e_thªad_èsk_id
;

388 
	`›ílog
(
¨gv
[0], 
LOG_CONS
 | 
LOG_NDELAY
, 
LOG_USER
);

390 i‡(
	`Ÿa_£t_lock
() != 0) {

391 
	`LOGE
("Another otaápp instanceálreadÑunning...\n");

395 
	`Ÿa_£t_gw_id
(
NULL
);

396 i‡(
¨gc
 != 2) {

397 
	`LOGD
("Starting OTAÅhread: \n\n");

398 
Ÿa_upd©e_thªad_èsk_id
 = 
	`Ÿa_upd©e_öô
();

400 i‡(
¨gv
[1] =
NULL
) {

401 
	`LOGD
("Ußge: %†s·p://u£r:∑sswd@192.168.0.1/öputfûe\n",
¨gv
[0]);

402 
	`LOGE
("ERROR: URL isÉmpty \n\n");

404 
	`ssˇnf
(
¨gv
[1], "%99[^:]:/%99[^\n]", 
fûëy≥
, 
fûíame
);

405 i‡(
	`°rcmp
(
fûëy≥
, "file") == 0) {

406 
	`LOGD
("Usög fûe: %s\n", 
fûíame
);

407 
	`Ÿa_°¨t_fûe
(
fûíame
);

409 
	`LOGD
("Dow∆ﬂdög fûe: %†\n\n",
¨gv
[1]);

410 
	`Ÿa_°¨t
(
¨gv
[1]);

415 i‡(
Ÿa_upd©e_thªad_èsk_id
 > 0) {

416 
	`±hªad_joö
–
Ÿa_upd©e_thªad_èsk_id
, 
NULL
);

419 
	`˛o£log
();

421 
	}
}

	@ota_download.c

30 
	~<°dio.h
>

31 
	~<cuæ/cuæ.h
>

32 
	~<°rög.h
>

33 
	~<uni°d.h
>

34 
	~"Ÿa_dow∆ﬂd.h
"

35 
	~"Ÿa_utûs.h
"

38 
	#OTA_DOWNLOAD_KEEPALIVE_IDLE_TIME
 120L

39 
	#OTA_DOWNLOAD_KEEPALIVE_INTVL_TIME
 60L

40 

	)

42 
	s¥ogªss_s
 {

43 
	mœ°_ru¡ime
;

44 
	mœ°_≥r˚¡age
;

45 
CURL
 *
	mcuæ
;

48 
	gª•⁄£_buf
[
MAX_RX_DATA_SIZE_CL
];

49 
	gŸa_§c_fûe_«me
[256];

51 
	$Ÿa_dow∆ﬂd_¥ogªss_cb
(*
p
,

52 
cuæ_off_t
 
d…ŸÆ
, cuæ_off_à
d ow
,

53 
cuæ_off_t
 
u…ŸÆ
, cuæ_off_à
u ow
)

55 
¥ogªss_s
 *
pg
 = (¥ogªss_†*)
p
;

56 
CURL
 *
cuæ
 = 
pg
->curl;

57 
cuπime
 = 0;

58 
≥r˚¡_¥o˚ss
 = 0;

60 
	`cuæ_ósy_gëöfo
(
cuæ
, 
CURLINFO_TOTAL_TIME
, &
cuπime
);

66 if((
cuπime
 - 
pg
->
œ°_ru¡ime
Ë>
MINIMAL_PROGRESS_FUNCTIONALITY_INTERVAL
) {

67 
pg
->
œ°_ru¡ime
 = 
cuπime
;

68 
	`LOGD
–"TOTAL TIME: %‡\r\n", 
cuπime
);

71 if(
d…ŸÆ
 != 0)

72 
≥r˚¡_¥o˚ss
 = ()(
d ow
 * 100.0Ë/ 
d…ŸÆ
;

74 
≥r˚¡_¥o˚ss
 = 0;

76 if(
pg
->
œ°_≥r˚¡age
 !()
≥r˚¡_¥o˚ss
)

78 
pg
->
œ°_≥r˚¡age
 = ()
≥r˚¡_¥o˚ss
;

79 
	`LOGD
("Dow∆ﬂdög Upd©e[%.2‡%%]: %" 
CURL_FORMAT_CURL_OFF_T
 " of %" CURL_FORMAT_CURL_OFF_T"",

80 
≥r˚¡_¥o˚ss
, 
d ow
, 
d…ŸÆ
);

82 
	`bzîo
(
ª•⁄£_buf
, (response_buf));

83 
	`•rötf
(
ª•⁄£_buf
, "Dow∆ﬂd: [%d%%] %s", ()
≥r˚¡_¥o˚ss
,

84 
Ÿa_§c_fûe_«me
);

85 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_INPROGRESS
,
ª•⁄£_buf
);

89 
	}
}

91 
	$Ÿa_dow∆ﬂd_s·p
(*
§c_uæ
, *
de°_fûe
)

93 
CURL
 *
cuæ
;

94 
CURLcode
 
ªs
 = 
CURLE_OK
;

95 
îrbuf
[1024];

96 
FILE
 *
out_fûe
=
NULL
;

97 
¥ogªss_s
 
¥ogªss
;

98 *
fûe_«me
;

99 c⁄° *
îr_°r
;

101 
fûe_«me
 = 
	`°ºchr
(
§c_uæ
,'/');

102 if(
fûe_«me
 !
NULL
)

104 
fûe_«me
++;

105 
	`°r˝y
(
Ÿa_§c_fûe_«me
,
fûe_«me
);

108 
	`cuæ_globÆ_öô
(
CURL_GLOBAL_DEFAULT
);

109 
cuæ
 = 
	`cuæ_ósy_öô
();

110 i‡(
cuæ
)

112 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_URL
, 
§c_uæ
);

113 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_SSH_AUTH_TYPES
, 
CURLSSH_AUTH_PASSWORD
);

116 
	`u∆ök
(
de°_fûe
);

118 
out_fûe
 = 
	`f›í
(
de°_fûe
, "w");

119 i‡(!
out_fûe
)

121 
	`cuæ_ósy_˛ónup
(
cuæ
);

125 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_WRITEDATA
, 
out_fûe
);

126 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_XFERINFOFUNCTION
, 
Ÿa_dow∆ﬂd_¥ogªss_cb
);

127 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_XFERINFODATA
, &
¥ogªss
);

129 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_NOPROGRESS
, 0);

130 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_VERBOSE
, 1L);

132 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_TCP_KEEPALIVE
, 1L);

133 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_TCP_KEEPIDLE
, 
OTA_DOWNLOAD_KEEPALIVE_IDLE_TIME
);

134 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_TCP_KEEPINTVL
, 
OTA_DOWNLOAD_KEEPALIVE_INTVL_TIME
);

136 
ªs
 = 
	`cuæ_ósy_≥rf‹m
(
cuæ
);

137 if(
ªs
 > 0)

139 
îr_°r
 = 
	`cuæ_ósy_°ªº‹
(
ªs
);

140 
	`LOGE
("ERROR(%d): %†\¿", 
ªs
, 
îr_°r
);

141 
	`LOGE
("ERROR: FailedÅo download file \n ");

142 
	`bzîo
(
îrbuf
,(errbuf));

143 
	`•rötf
(
îrbuf
,
OTA_SEND_ERR_DW_FAILED
"%s", 
îr_°r
);

144 if((
ªs
 =
CURLE_REMOTE_ACCESS_DENIED
Ë|| (ª†=
CURLE_LOGIN_DENIED
))

146 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_FAILED
,
OTA_SEND_ERR_DW_AUTH_FAILED
);

148 if(
ªs
 =
CURLE_REMOTE_FILE_NOT_FOUND
)

150 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_FAILED
,
OTA_SEND_ERR_DW_FILE_NOT_FOUND
);

152 if((
ªs
 =
CURLE_WRITE_ERROR
Ë|| (ª†=
CURLE_REMOTE_DISK_FULL
))

154 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_FAILED
,
OTA_SEND_ERR_DW_FILE_WRITE_FAILED
);

156 if(
ªs
 =
CURLE_COULDNT_CONNECT
)

158 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_FAILED
,
OTA_SEND_ERR_DW_NW_FAILED
);

162 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_FAILED
,
îrbuf
);

166 
	`cuæ_ósy_˛ónup
(
cuæ
);

167 
	`cuæ_globÆ_˛ónup
();

168 
	`f˛o£
(
out_fûe
);

170  
ªs
;

173 
	}
}

	@ota_download.h

31 #i‚de‡
_H_OTA_DOWNLOAD_H_


32 
	#_H_OTA_DOWNLOAD_H_


	)

34 
	#MINIMAL_PROGRESS_FUNCTIONALITY_INTERVAL
 3

	)

36 
Ÿa_dow∆ﬂd_s·p
(*
§c_uæ
, *
de°_fûe
);

	@ota_indicator.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

32 
	~<î∫o.h
>

33 
	~<°rög.h
>

34 
	~<f˙é.h
>

35 
	~<°dlib.h
>

36 
	~<sys/ùc.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/msg.h
>

39 
	~<±hªad.h
>

40 
	~"Ÿa_utûs.h
"

41 
	~"Ÿa_ödiˇt‹.h
"

43 #i‡
deföed
(
LED_INDICATION
)

44 
	#LED_MSGQ_KEY
 5335

	)

45 
	#LED_BURST_INTERVAL
 10

	)

46 
	#LED_1
 1

	)

47 
	#LED_2
 2

	)

48 
	#LED_TO_BLINK
 
LED_2


	)

51 #i‡
deföed
(
LED_INDICATION
)

52 
	eLED2_STATE
 {

53 
	mSOM_ON
,

54 
	mCOMMISION_WINDOW
,

55 
	mNFC_TAG_READ_DONE
,

56 
	mDEVICE_COMMISIONED_SUCCESSFULLY
,

57 
	mDEVICE_COMMISION_FAILED
,

58 
	mMG_OTA_INDICATOR


59 } 
	gLED2_STATES
;

61 
	gg_Àdlo›_c⁄t
;

62 
±hªad_t
 
	gÀdlo›_tid
;

65 #i‡
deföed
(
LED_INDICATION
)

66 
	$Ÿa_öd_Àd_˘æ
() {

67 
mesßge_buf
 
rbuf
;

68 
msqid_Àd
 = 0;

69 
buf
[256];

71 i‡(
msqid_Àd
 == 0) {

72 i‡((
msqid_Àd
 = 
	`msggë
(
LED_MSGQ_KEY
, 
IPC_CREAT
 | 0666)) < 0) {

73 
	`LOGE
("msggë(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

79 
	`•rötf
(
buf
,"{\"LED\" : %d, \"°©e\" : %d}", 
LED_TO_BLINK
,

80 
MG_OTA_INDICATOR
);

81 
rbuf
.
mty≥
 = 1;

82 
rbuf
.
mãxt
[0] = 
	`°æí
(
buf
);

83 
	`mem˝y
(&
rbuf
.
mãxt
[1],
buf
,
	`°æí
(buf));

86 i‡(
	`msg¢d
(
msqid_Àd
, &
rbuf
, 
	`°æí
(
buf
), 
IPC_NOWAIT
) < 0) {

87 
	`LOGE
("msg¢d(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

89 
	`LOGD
("sent\n");

90 
	}
}

100 *
	$Ÿa_öd_Àd_lo›
() {

101 
cou¡
 = 0;

103 
	`LOGD
("start.\n");

104 
	`Ÿa_öd_Àd_˘æ
();

106 
g_Àdlo›_c⁄t
) {

107 i‡(
cou¡
 =
LED_BURST_INTERVAL
) {

108 
	`Ÿa_öd_Àd_˘æ
();

109 
cou¡
 = 0;

112 
	`¶ìp
(1);

113 
cou¡
++;

116 
g_Àdlo›_c⁄t
 = 0;

117 
	}
}

120 
	$Ÿa_öd_°¨t
() {

121 #i‡
	`deföed
(
LED_INDICATION
)

122 
rc
;

124 
	`LOGD
("start.\n");

125 
g_Àdlo›_c⁄t
 = 1;

126 
rc
 = 
	`±hªad_¸óã
(&
Àdlo›_tid
, 
NULL
, 
Ÿa_öd_Àd_lo›
, NULL);

127 i‡(
rc
 != 0) {

128 
	`LOGE
("±hªad_¸óã(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

131 
	`LOGD
("built without LED indication");

133 
	}
}

135 
	$Ÿa_öd_°›
() {

136 #i‡
	`deföed
(
LED_INDICATION
)

137 
	`LOGD
("stop.\n");

138 i‡(
g_Àdlo›_c⁄t
) {

139 
g_Àdlo›_c⁄t
 = 0;

140 
	`±hªad_joö
(
Àdlo›_tid
, 
NULL
);

143 
	`LOGD
("built without LED indication");

145 
	}
}

	@ota_indicator.h

30 #i‚de‡
_H_OTA_INDICATOR_H_


31 
	#_H_OTA_INDICATOR_H_


	)

33 
Ÿa_öd_°¨t
();

34 
Ÿa_öd_°›
();

	@ota_update.c

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<uni°d.h
>

33 
	~<sys/waô.h
>

34 
	~<°rög.h
>

35 
	~<î∫o.h
>

36 
	~<sys/ty≥s.h
>

37 
	~<sys/sockë.h
>

38 
	~<sys/un.h
>

39 
	~<±hªad.h
>

40 
	~"Ÿa_upd©e.h
"

41 
	~"Ÿa_utûs.h
"

43 
	~"¥ogªss.h
"

46 
	gg_¥ogªss_lo›
;

48 *
	$Ÿa_swupd©e_¥ogªss_lo›
(*
¨g
) {

49 
c⁄nfd
, 
ªt
, 
is_d⁄e
;

50 
¥ogªss_msg
 
msg
;

51 
sockaddr_un
 
£rvaddr
;

52 
buf
[512];

53 
is_föÆize
 = 0;

55 
c⁄nfd
 = -1;

56 
is_d⁄e
 = 0;

58 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_INPROGRESS
,

59 
OTA_SEND_STATUS_UPDATE_KEY
" [1%] Preparing for update...");

60 
g_¥ogªss_lo›
) {

61 i‡(
c⁄nfd
 < 0) {

63 
c⁄nfd
 = 
	`sockë
(
AF_LOCAL
, 
SOCK_STREAM
, 0);

64 
	`bzîo
(&
£rvaddr
, (servaddr));

65 
£rvaddr
.
sun_Ámûy
 = 
AF_LOCAL
;

66 
	`°r˝y
(
£rvaddr
.
sun_∑th
, 
SOCKET_PROGRESS_PATH
);

68 
	`LOGD
("TryingÅo connectÅo SWUpdate...\n");

69 
ªt
 = 
	`c⁄√˘
(
c⁄nfd
, (
sockaddr
 *Ë&
£rvaddr
,

70 (
£rvaddr
));

71 i‡(
ªt
 != 0) {

73 
c⁄nfd
 = -1;

74 
	`¶ìp
(1);

79 
ªt
 = 
	`ªad
(
c⁄nfd
, &
msg
, (msg));

80 i‡(
ªt
 !(
msg
)) {

82 
	`LOGD
("Connection closing..\n");

83 
	`˛o£
(
c⁄nfd
);

84 
c⁄nfd
 = -1;

88 i‡(!
is_föÆize
) {

89 
	`•rötf
(
buf
, "%†[ %d/%d ] [ %d ] %s", 
OTA_SEND_STATUS_UPDATE_KEY
,

90 
msg
.
cur_°ï
, msg.
n°ïs
, msg.
cur_≥r˚¡
, msg.
cur_image
);

91 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_INPROGRESS
, 
buf
);

92 
	`LOGD
("%s\n", 
buf
);

95 i‡(
msg
.
cur_°ï
 =msg.
n°ïs
 && msg.
cur_≥r˚¡
 == 100) {

97 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_INPROGRESS
,

98 
OTA_SEND_STATUS_UPDATE_KEY
" [99%] Finalizing update...");

99 
is_föÆize
 = 1;

102 
msg
.
°©us
) {

103 
SUCCESS
:

104 
is_d⁄e
 = 1;

105 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_INPROGRESS
,

106 
OTA_SEND_STATUS_UPDATE_KEY
" [100%] Update success");

108 
FAILURE
:

109 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_FAILED
,

110 
OTA_UPDATE_ERROR_FAILED
);

111 
is_d⁄e
 = 1;

113 
DONE
:

114 
	`LOGD
("Update completed\n");

115 
is_d⁄e
 = 1;

121 i‡(
is_d⁄e
)

125 i‡(
c⁄nfd
 > 0)

126 
	`˛o£
(
c⁄nfd
);

129 
	}
}

132 
	$Ÿa_swupd©e_¥ogªss_öô
() {

133 
±hªad_t
 
tid
;

135 
g_¥ogªss_lo›
 = 1;

136 i‡(
	`±hªad_¸óã
(&
tid
, 
NULL
, 
Ÿa_swupd©e_¥ogªss_lo›
, NULL) != 0) {

137 
	`LOGE
("±hªad_¸óã(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

138 
g_¥ogªss_lo›
 = 0;

142  
tid
;

143 
	}
}

146 
	$Ÿa_upd©e_vîify
(*
upd©e_fûe
, *
key_fûe
)

148 
chûd_ªs
, 
chûd_pid
;

150 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_INPROGRESS
,

151 
OTA_SEND_STATUS_VERIFICATION_KEY
" [0%] Verification started");

152 
chûd_pid
 = 
	`f‹k
();

153 if(
chûd_pid
 == 0)

155 
	`exe˛p
("/u§/bö/swupd©e", "swupd©e", "-c", "-i", 
upd©e_fûe
, "-v",

156 "-k", 
key_fûe
, 
NULL
);

157 
	`exô
(-1);

161 
	`LOGD
("[%d]:[%d]Vîifyög OTA upd©êimage\n", 
	`gëpid
(), 
chûd_pid
);

162 
	`waôpid
(
chûd_pid
, &
chûd_ªs
, 0);

163 i‡(
	`WIFEXITED
(
chûd_ªs
)) {

164 
rc
 = 
	`WEXITSTATUS
(
chûd_ªs
);

165 i‡(
rc
)

166 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_FAILED
,

167 
OTA_UPDATE_ERROR_VERIFICATION
);

169 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_INPROGRESS
,

170 
OTA_SEND_STATUS_VERIFICATION_KEY
" [100%] Verification completed");

171  
rc
;

173 
	`LOGE
("swupdate didÇotÅerminate withÉxit\n");

174 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_FAILED
,

175 
OTA_UPDATE_ERROR_VERIFICATION
);

179 
	}
}

183 
	$Ÿa_upd©e_°¨t
(*
upd©e_fûe
, *
key_fûe
)

185 
chûd_ªs
, 
chûd_pid
;

186 
±hªad_t
 
tid
;

188 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_INPROGRESS
,

189 
OTA_SEND_STATUS_UPDATE_KEY
" [0%] Initiating update");

190 
chûd_pid
 = 
	`f‹k
();

191 if(
chûd_pid
 == 0)

193 
	`exe˛p
("/u§/bö/swupd©e","swupd©e", "-i", 
upd©e_fûe
, "-v",

194 "-k", 
key_fûe
, 
NULL
);

195 
	`exô
(-1);

199 
	`LOGD
("[%d]:[%d] In°Ælög OTA upd©êimage\n", 
	`gëpid
(), 
chûd_pid
);

200 
tid
 = 
	`Ÿa_swupd©e_¥ogªss_öô
();

201 
	`waôpid
(
chûd_pid
, &
chûd_ªs
, 0);

202 i‡(
tid
 > 0) {

203 
g_¥ogªss_lo›
 = 0;

204 
	`±hªad_joö
(
tid
, 
NULL
);

206 if(
	`WIFEXITED
(
chûd_ªs
)) {

207  
	`WEXITSTATUS
(
chûd_ªs
);

209 
	`LOGE
("swupdate didÇotÅerminate withÉxit\n");

213 
	}
}

	@ota_update.h

30 #i‚de‡
_H_OTA_UPDATE_H_


31 
	#_H_OTA_UPDATE_H_


	)

33 
Ÿa_upd©e_vîify
(*
upd©e_fûe
, *
key_fûe
);

34 
Ÿa_upd©e_°¨t
(*
upd©e_fûe
, *
key_fûe
);

	@ota_utils.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

32 
	~<î∫o.h
>

33 
	~<°rög.h
>

34 
	~<f˙é.h
>

35 
	~<°dlib.h
>

36 
	~<sys/ùc.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/msg.h
>

39 
	~<√tdb.h
>

40 
	~<sys/sockë.h
>

41 
	~<√töë/ö.h
>

42 
	~<¨∑/öë.h
>

43 
	~<iÁddrs.h
>

44 
	~<löux/if_lök.h
>

45 
	~<sys/io˘l.h
>

46 
	~<√t/if.h
>

47 
	~"Ÿa_utûs.h
"

49 
	#OTA_LOCK_FILE
 "/v¨/lock/.mg_Ÿa_lock"

	)

50 
	#PID_BUF_SIZE
 32

	)

51 
	#POST_REBOOT_DELAY
 600

	)

53 
	#WSN_KEY
 4321

	)

55 
	#MAX_MAC_LEN
 13

	)

56 
	#MAX_ID_LEN
 128

	)

57 
	#DEFAULT_GWID_PREFIX
 "VTBR_"

	)

58 
	#DEFAULT_GWID_CONFIGFILE
 "/medü/u£rd©a/gw_c⁄fig/BR_c⁄fig.txt"

	)

60 
	gg_g©ewayid
[
MAX_ID_LEN
];

62 
	$Ÿa_öô_gw_id
()

64 
FILE
 *
Â
;

65 
fd
 = 0;

66 
buf
[
MAX_ID_LEN
];

67 
maˇddr
[
MAX_MAC_LEN
];

68 
i‰eq
 
s
;

71 
	`mem£t
(
g_g©ewayid
, 0, 
MAX_ID_LEN
);

72 
	`mem£t
(
buf
, 0, 
MAX_ID_LEN
);

73 
	`mem£t
(
maˇddr
, 0, 
MAX_MAC_LEN
);

75 
Â
 = 
	`f›í
(
DEFAULT_GWID_CONFIGFILE
, "r");

76 if(
Â
 =
NULL
) {

77 
fd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 
IPPROTO_IP
);

78 
	`°r˝y
(
s
.
i‰_«me
, "eth0");

79 i‡(0 =
	`io˘l
(
fd
, 
SIOCGIFHWADDR
, &
s
)) {

80 
	`¢¥ötf
(
maˇddr
, 
MAX_MAC_LEN
, "%02X%02X%02X%02X%02X%02X",

81 ()
s
.
i‰_addr
.
ß_d©a
[0],

82 ()
s
.
i‰_addr
.
ß_d©a
[1],

83 ()
s
.
i‰_addr
.
ß_d©a
[2],

84 ()
s
.
i‰_addr
.
ß_d©a
[3],

85 ()
s
.
i‰_addr
.
ß_d©a
[4],

86 ()
s
.
i‰_addr
.
ß_d©a
[5]);

90 
	`•rötf
(
g_g©ewayid
, 
DEFAULT_GWID_PREFIX
"%s",
maˇddr
);

91 
	`LOGD
("[usögÉth0]G©eway ID: %s\n", 
g_g©ewayid
);

94 
	`fsˇnf
(
Â
, "%s", 
buf
);

95 
	`°∫˝y
(
g_g©ewayid
, 
buf
, 
MAX_ID_LEN
);

96 
	`f˛o£
(
Â
);

97 
	`LOGD
("[usög c⁄fig]G©eway ID: %s\n", 
g_g©ewayid
);

101 
	}
}

103 
	$Ÿa_£t_gw_id
(*
id
) {

104 i‡(
id
 =
NULL
) {

106 
	`Ÿa_öô_gw_id
();

109 
	`°∫˝y
(
g_g©ewayid
, 
id
, 
MAX_ID_LEN
);

110 
	`LOGD
("[usögárg]G©eway ID: %s\n", 
g_g©ewayid
);

112 
	}
}

114 
	$Ÿa_gë_gw_id
(*
id
, 
Àn
) {

115 i‡(
id
 !
NULL
) {

116 
	`mem£t
(
id
, 0, 
Àn
);

117 
	`°∫˝y
(
id
, 
g_g©ewayid
, 
Àn
);

119 
	`LOGE
("Invalid input buffer\n");

121 
	}
}

123 
	$Ÿa_£t_lock
() {

124 
fd
, 
rc
;

126 
rc
 = 
	`ac˚ss
(
OTA_LOCK_FILE
, 
F_OK
);

127 i‡(
rc
 == 0) {

129 
	`LOGE
("can'tÜock otaápp instance\n");

130 
rc
 = -1;

133 
fd
 = 
	`›í
(
OTA_LOCK_FILE
, 
O_CREAT
 | 
O_WRONLY
);

134 i‡(
fd
 <= 0) {

137 
	`LOGE
("›í(ËÁûed: %s\n",
	`°ªº‹
(
î∫o
));

138 
rc
 = -1;

141 
buf
[
PID_BUF_SIZE
];

142 
	`•rötf
(
buf
, "%d\n", 
	`gëpid
());

143 
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf));

144 
	`˛o£
(
fd
);

145 
rc
 = 0;

148  
rc
;

149 
	}
}

151 
	$Ÿa_ªboŸ_devi˚
(
dñay_ö_£c⁄ds
, 
£nd_°©us
) {

152 
cou¡
 = 
dñay_ö_£c⁄ds
;

153 
po°_ªboŸ_dñay
 = 
POST_REBOOT_DELAY
;

155 i‡(
£nd_°©us
) {

156 
buf
[128];

157 
	`•rötf
(
buf
, "ReboŸög devi˚ i¿%d sec⁄ds.", 
dñay_ö_£c⁄ds
);

158 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_SUCCESS
, 
buf
);

161 i‡(
cou¡
 > 0) {

162 
	`LOGD
("rebooting device in %d seconds\n",

163 
cou¡
);

164 
cou¡
--) {

165 
	`¶ìp
(1);

169 
	`LOGD
("rebootingÇow...");

170 
	`sy°em
("reboot");

172 
po°_ªboŸ_dñay
--) {

174 
	`¶ìp
(1);

177 i‡(
£nd_°©us
) {

178 
	`Ÿa_£nd_°©us
(
OTA_SEND_STATUS_SUCCESS
,

182 
	`LOGD
("PleaseÑebootÅhe device manually\n");

183 
	}
}

190 
	$Ÿa_£nd_°©us
(c⁄° *
°©us
, c⁄° *
d©a
) {

191 
mesßge_buf
 
sbuf_w¢
;

192 
gwid
[
MAX_ID_LEN
];

193 
Ÿa_msqid_˛oudªs
 = -1;

195 
sbuf_w¢
.
mty≥
 = 1;

196 
	`mem£t
(&
sbuf_w¢
.
mãxt
[0], 0, 
MSGSZ
);

197 
	`LOGD
("Sídög OTA sètu†[%s]Åÿ˛oud\n", 
°©us
);

199 i‡(
Ÿa_msqid_˛oudªs
 < 0) {

200 i‡((
Ÿa_msqid_˛oudªs
 = 
	`msggë
(
WSN_KEY
, 
IPC_CREAT
 | 0666)) < 0) {

201 
	`LOGE
("msgget() failed: %s\n",

202 
	`°ªº‹
(
î∫o
));

207 
	`Ÿa_gë_gw_id
(
gwid
, 
MAX_ID_LEN
);

208 i‡(
d©a
 =
NULL
) {

209 
	`•rötf
(&
sbuf_w¢
.
mãxt
[0],

211 
CTYPE_CMD_GW_OTA_UPDATE
, 
gwid
, 
°©us
);

213 
	`•rötf
(&
sbuf_w¢
.
mãxt
[0],

215 
CTYPE_CMD_GW_OTA_UPDATE
, 
gwid
, 
°©us
, 
d©a
);

221 i‡(
	`msg¢d
(
Ÿa_msqid_˛oudªs
, &
sbuf_w¢
,

222 
	`°æí
(&
sbuf_w¢
.
mãxt
[0]Ë+ 1, 
IPC_NOWAIT
) < 0) {

223 
	`LOGE
("%d, %d, %s, %d\n", 
Ÿa_msqid_˛oudªs
,

224 ()
sbuf_w¢
.
mty≥
, sbuf_w¢.
mãxt
, ()
	`°æí
(&sbuf_wsn.mtext[0]));

225 
	`LOGE
("msg¢d(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

228 
	`LOGD
("Mesßge: \"%s\" Sít\n", 
sbuf_w¢
.
mãxt
);

232 
	}
}

234 
	$Ÿa_gë_uboŸ_ív
(*
v¨
, *
vÆ
) {

235 
FILE
 *
p_Â
 = 
NULL
;

236 
cmd
[128];

237 
buf
[128];

238 
∑r£r
[128];

239 
rc
;

241 
	`•rötf
(
cmd
, "fw_¥öãnv %s", 
v¨
);

242 
	`•rötf
(
∑r£r
, "%lus=%s",
	`°æí
(
v¨
),
cmd
);

243 
p_Â
 = 
	`p›í
(
cmd
, "r");

244 i‡(
p_Â
 !
NULL
) {

245 
rc
 = 
	`fsˇnf
(
p_Â
, 
∑r£r
, 
buf
, 
vÆ
);

246 i‡(
rc
 != 2) {

247 
	`LOGE
("ˇn'àföd %†¨g\n", 
v¨
);

250 
	`p˛o£
(
p_Â
);

251 
p_Â
 = 
NULL
;

255 
	}
}

257 
	$Ÿa_£t_uboŸ_ív
(*
v¨
, *
vÆ
) {

258 
FILE
 *
p_Â
 = 
NULL
;

259 
cmd
[128];

260 
buf
[128];

261 
rc
;

263 
	`•rötf
(
cmd
, "fw_£ãnv %†\"%s\"", 
v¨
, 
vÆ
);

264 
rc
 = 
	`sy°em
(
cmd
);

265 i‡(
rc
 != 0) {

266 
	`LOGE
("ˇn'à£à%†tÿ%s\n", 
v¨
, 
vÆ
);

269  
rc
;

270 
	}
}

	@ota_utils.h

30 #i‚de‡
_H_OTA_UTILS_H_


31 
	#_H_OTA_UTILS_H_


	)

33 
	~<sy¶og.h
>

35 
	#MSGSZ
 512

	)

36 
	#JSON_CTYPE_KEY
 "Ctype"

37 
	#JSON_CTYPE_KEY_VALUE_SIZE
 3

38 

	)

39 
	#JSON_OTA_MSG_TYPE_KEY
 "MsgType"

40 
	#JSON_OTA_MSG_TYPE_MAX_SIZE
 3

41 

	)

42 
	#JSON_OTA_CMD_TYPE_KEY
 "Cmd"

43 
	#JSON_OTA_CMD_TYPE_MAX_SIZE
 15

44 

	)

45 
	#JSON_URI_KEY_NAME
 "Uri"

46 
	#JSON_URI_KEY_MAX_SIZE
 256

47 

	)

48 
	#MAX_RX_DATA_SIZE_CL
 1024

49 
	#MAX_JSON_TOKEN
 20

50 

	)

51 
	#CTYPE_CMD_GW_OTA_UPDATE
 51

	)

53 
	#OTA_SEND_STATUS_STARTED
 "°¨ãd"

	)

54 
	#OTA_SEND_STATUS_INPROGRESS
 "ö¥ogªss"

	)

55 
	#OTA_SEND_STATUS_SUCCESS
 "suc˚ss"

	)

56 
	#OTA_SEND_STATUS_FAILED
 "Áûed"

	)

59 
	#OTA_SEND_ERR_DW_AUTH_FAILED
 "Dow∆ﬂdÉº‹: [101] Authítiˇètoö faûed"

	)

60 
	#OTA_SEND_ERR_DW_FILE_NOT_FOUND
 "Dow∆ﬂdÉº‹: [102] FûênŸ found"

	)

61 
	#OTA_SEND_ERR_DW_FILE_WRITE_FAILED
 "Dow∆ﬂdÉº‹: [103] FûêwrôêÁûed"

	)

62 
	#OTA_SEND_ERR_DW_NW_FAILED
 "Dow∆ﬂdÉº‹: [104] Nëw‹k isuue"

	)

63 
	#OTA_SEND_ERR_DW_FAILED
 "Dow∆ﬂdÉº‹: [105] "

	)

66 
	#OTA_SEND_STATUS_VERIFICATION_KEY
 "Vîifiˇti⁄:"

	)

67 
	#OTA_SEND_STATUS_UPDATE_KEY
 "Upd©e:"

	)

68 
	#OTA_UPDATE_ERROR_VERIFICATION
 \

69 "Vîifiˇti⁄Éº‹: [201] Vîifiˇti⁄ faûed"

	)

70 
	#OTA_UPDATE_ERROR_FAILED
 \

71 "Upd©êîr‹ [301] Upd©êÁûed"

	)

74 
	#DEBUG
 1

	)

75 #i‡
DEBUG


76 
	#LOGD
(
fmt
, ...Ë
	`sy¶og
(
LOG_DEBUG
,"%s:%d: "fmt, 
__func__
, 
__LINE__
, ##
__VA_ARGS__
)

	)

78 
	#LOGD
(...Ëdo{} 0)

	)

81 
	#LOGE
(
fmt
, ...Ë
	`sy¶og
(
LOG_ERR
,"%s:%d: "fmt, 
__func__
, 
__LINE__
, ##
__VA_ARGS__
)

	)

86 
	smsgbuf
 {

87 
	mmty≥
;

88 
	mmãxt
[
MSGSZ
];

89 } 
	tmesßge_buf
;

91 
Ÿa_£t_gw_id
(*
id
);

92 
Ÿa_gë_gw_id
(*
id
, 
Àn
);

93 
Ÿa_£t_lock
();

94 
Ÿa_ªboŸ_devi˚
(
dñay_ö_£c⁄ds
, 
£nd_°©us
);

95 
Ÿa_£nd_°©us
(c⁄° *
°©us
, c⁄° *
d©a
);

96 
Ÿa_gë_uboŸ_ív
(*
v¨
, *
vÆ
);

97 
Ÿa_£t_uboŸ_ív
(*
v¨
, *
vÆ
);

	@progress.h

8 #i‚de‡
_INSTALL_PROGRESS_H


9 
	#_INSTALL_PROGRESS_H


	)

11 
	~"swupd©e_°©us.h
"

12 
	~"¥ogªss_ùc.h
"

19 
swupd©e_¥ogªss_öô
(
n°ïs
);

20 
swupd©e_¥ogªss_upd©e
(
≥rc
);

21 
swupd©e_¥ogªss_öc_°ï
(*
image
);

22 
swupd©e_¥ogªss_°ï_com∂ëed
();

23 
swupd©e_¥ogªss_íd
(
RECOVERY_STATUS
 
°©us
);

24 
swupd©e_¥ogªss_d⁄e
(c⁄° *
öfo
);

25 
swupd©e_¥ogªss_öfo
(
RECOVERY_STATUS
 
°©us
, 
ˇu£
, c⁄° *
msg
);

27 *
¥ogªss_b¨_thªad
 (*
d©a
);

	@progress_ipc.h

8 #i‚de‡
_PROGRESS_IPC_H


9 
	#_PROGRESS_IPC_H


	)

11 
	~<°dboﬁ.h
>

12 
	~"swupd©e_°©us.h
"

14 * 
SOCKET_PROGRESS_PATH
;

20 
	s¥ogªss_msg
 {

21 
	mmagic
;

22 
RECOVERY_STATUS
 
	m°©us
;

23 
	mdwl_≥r˚¡
;

24 
	mn°ïs
;

25 
	mcur_°ï
;

26 
	mcur_≥r˚¡
;

27 
	mcur_image
[256];

28 
	mhnd_«me
[64];

29 
sour˚ty≥
 
	msour˚
;

30 
	möfﬁí
;

31 
	möfo
[2048];

34 
¥ogªss_ùc_c⁄√˘
(
boﬁ
 
ªc⁄√˘
);

35 
¥ogªss_ùc_ª˚ive
(*
c⁄nfd
, 
¥ogªss_msg
 *
msg
);

	@swupdate/bindings/auxiliar.c

10 
	~<°rög.h
>

11 
	~<°dio.h
>

13 
	~"auxûür.h
"

21 
	$auxûür_›í
(
lua_Sèã
 *
L
) {

22 (Ë
L
;

24 
	}
}

30 
	$auxûür_√w˛ass
(
lua_Sèã
 *
L
, c⁄° *
˛as¢ame
, 
luaL_Reg
 *
func
) {

31 
	`luaL_√wmë©abÀ
(
L
, 
˛as¢ame
);

33 
	`lua_push°rög
(
L
, "__index");

34 
	`lua_√wèbÀ
(
L
);

36 
	`lua_push°rög
(
L
, "class");

37 
	`lua_push°rög
(
L
, 
˛as¢ame
);

38 
	`lua_øw£t
(
L
, -3);

41 ; 
func
->
«me
; func++) {

42 
	`lua_push°rög
(
L
, 
func
->
«me
);

43 
	`lua_pushcfun˘i⁄
(
L
, 
func
->func);

44 
	`lua_øw£t
(
L
, 
func
->
«me
[0] == '_' ? -5: -3);

46 
	`lua_øw£t
(
L
, -3);

47 
	`lua_p›
(
L
, 1);

48 
	}
}

53 
	$auxûür_to°rög
(
lua_Sèã
 *
L
) {

54 
buf
[32];

55 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)Ë
îr‹
;

56 
	`lua_push°rög
(
L
, "__index");

57 
	`lua_gëèbÀ
(
L
, -2);

58 i‡(!
	`lua_i°abÀ
(
L
, -1)Ë
îr‹
;

59 
	`lua_push°rög
(
L
, "class");

60 
	`lua_gëèbÀ
(
L
, -2);

61 i‡(!
	`lua_is°rög
(
L
, -1)Ë
îr‹
;

62 
	`•rötf
(
buf
, "%p", 
	`lua_tou£rd©a
(
L
, 1));

63 
	`lua_pushf°rög
(
L
, "%s: %s", 
	`lua_to°rög
(L, -1), 
buf
);

65 
îr‹
:

66 
	`lua_push°rög
(
L
, "invalid objectÖassedÅo 'auxiliar.c:__tostring'");

67 
	`lua_îr‹
(
L
);

69 
	}
}

74 
	$auxûür_add2group
(
lua_Sèã
 *
L
, c⁄° *
˛as¢ame
, c⁄° *
grou≤ame
) {

75 
	`luaL_gëmë©abÀ
(
L
, 
˛as¢ame
);

76 
	`lua_push°rög
(
L
, 
grou≤ame
);

77 
	`lua_pushboﬁón
(
L
, 1);

78 
	`lua_øw£t
(
L
, -3);

79 
	`lua_p›
(
L
, 1);

80 
	}
}

85 
	$auxûür_checkboﬁón
(
lua_Sèã
 *
L
, 
objidx
) {

86 i‡(!
	`lua_isboﬁón
(
L
, 
objidx
))

87 
	`auxûür_ty≥îr‹
(
L
, 
objidx
, 
	`lua_ty≥«me
(L, 
LUA_TBOOLEAN
));

88  
	`lua_toboﬁón
(
L
, 
objidx
);

89 
	}
}

95 *
	$auxûür_check˛ass
(
lua_Sèã
 *
L
, c⁄° *
˛as¢ame
, 
objidx
) {

96 *
d©a
 = 
	`auxûür_gë˛assud©a
(
L
, 
˛as¢ame
, 
objidx
);

97 i‡(!
d©a
) {

98 
msg
[45];

99 
	`•rötf
(
msg
, "%.35†ex≥˘ed", 
˛as¢ame
);

100 
	`luaL_¨gîr‹
(
L
, 
objidx
, 
msg
);

102  
d©a
;

103 
	}
}

109 *
	$auxûür_checkgroup
(
lua_Sèã
 *
L
, c⁄° *
grou≤ame
, 
objidx
) {

110 *
d©a
 = 
	`auxûür_gëgroupud©a
(
L
, 
grou≤ame
, 
objidx
);

111 i‡(!
d©a
) {

112 
msg
[45];

113 
	`•rötf
(
msg
, "%.35†ex≥˘ed", 
grou≤ame
);

114 
	`luaL_¨gîr‹
(
L
, 
objidx
, 
msg
);

116  
d©a
;

117 
	}
}

122 
	$auxûür_£t˛ass
(
lua_Sèã
 *
L
, c⁄° *
˛as¢ame
, 
objidx
) {

123 
	`luaL_gëmë©abÀ
(
L
, 
˛as¢ame
);

124 i‡(
objidx
 < 0) objidx--;

125 
	`lua_£tmë©abÀ
(
L
, 
objidx
);

126 
	}
}

132 *
	$auxûür_gëgroupud©a
(
lua_Sèã
 *
L
, c⁄° *
grou≤ame
, 
objidx
) {

133 i‡(!
	`lua_gëmë©abÀ
(
L
, 
objidx
))

134  
NULL
;

135 
	`lua_push°rög
(
L
, 
grou≤ame
);

136 
	`lua_øwgë
(
L
, -2);

137 i‡(
	`lua_i¢û
(
L
, -1)) {

138 
	`lua_p›
(
L
, 2);

139  
NULL
;

141 
	`lua_p›
(
L
, 2);

142  
	`lua_tou£rd©a
(
L
, 
objidx
);

144 
	}
}

150 *
	$auxûür_gë˛assud©a
(
lua_Sèã
 *
L
, c⁄° *
˛as¢ame
, 
objidx
) {

151  
	`luaL_checkud©a
(
L
, 
objidx
, 
˛as¢ame
);

152 
	}
}

158 
	$auxûür_ty≥îr‹
 (
lua_Sèã
 *
L
, 
«rg
, c⁄° *
äame
) {

159 c⁄° *
msg
 = 
	`lua_pushf°rög
(
L
, "%†ex≥˘ed, gŸ %s", 
äame
,

160 
	`luaL_ty≥«me
(
L
, 
«rg
));

161  
	`luaL_¨gîr‹
(
L
, 
«rg
, 
msg
);

162 
	}
}

	@swupdate/bindings/auxiliar.h

6 #i‚de‡
AUXILIAR_H


7 
	#AUXILIAR_H


	)

37 
	~"lua.h
"

38 
	~"œuxlib.h
"

40 
auxûür_›í
(
lua_Sèã
 *
L
);

41 
auxûür_√w˛ass
(
lua_Sèã
 *
L
, c⁄° *
˛as¢ame
, 
luaL_Reg
 *
func
);

42 
auxûür_add2group
(
lua_Sèã
 *
L
, c⁄° *
˛as¢ame
, c⁄° *
group
);

43 
auxûür_£t˛ass
(
lua_Sèã
 *
L
, c⁄° *
˛as¢ame
, 
objidx
);

44 *
auxûür_check˛ass
(
lua_Sèã
 *
L
, c⁄° *
˛as¢ame
, 
objidx
);

45 *
auxûür_checkgroup
(
lua_Sèã
 *
L
, c⁄° *
grou≤ame
, 
objidx
);

46 *
auxûür_gë˛assud©a
(
lua_Sèã
 *
L
, c⁄° *
grou≤ame
, 
objidx
);

47 *
auxûür_gëgroupud©a
(
lua_Sèã
 *
L
, c⁄° *
grou≤ame
, 
objidx
);

48 
auxûür_checkboﬁón
(
lua_Sèã
 *
L
, 
objidx
);

49 
auxûür_to°rög
(
lua_Sèã
 *
L
);

50 
auxûür_ty≥îr‹
(
lua_Sèã
 *
L
, 
«rg
, c⁄° *
äame
);

	@swupdate/bindings/lua_compat_shared.c

1 
	~<../c‹ñib/lua_com∑t.c
>

	@swupdate/bindings/lua_swupdate.c

8 
	~<¥ogªss_ùc.h
>

9 
	~<lua.h
>

10 
	~<lua_utû.h
>

11 
	~<œuxlib.h
>

12 
	~<°rög.h
>

13 
	~<iÁddrs.h
>

14 
	~<√töë/ö.h
>

15 
	~<√t/if.h
>

16 
	~<¨∑/öë.h
>

17 
	~<uni°d.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/sockë.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/un.h
>

22 
	~<sys/£À˘.h
>

24 
	~"auxûür.h
"

26 
	#WAIT
 1

	)

28 
	#LUA_PUSH_STRING
(
key
, 
d©a
) do { \

29 
	`lua_push°rög
(
L
, 
key
); \

30 
	`lua_push°rög
(
L
, 
d©a
); \

31 
	`lua_£âabÀ
(
L
, -3); \

32 } 0)

	)

34 
	#LUA_PUSH_BOOL
(
key
, 
d©a
) do { \

35 
	`lua_push°rög
(
L
, 
key
); \

36 
	`lua_pushboﬁón
(
L
, 
d©a
); \

37 
	`lua_£âabÀ
(
L
, -3); \

38 } 0)

	)

40 
	#LUA_PUSH_NUMBER
(
key
, 
d©a
) do { \

41 
	`lua_push°rög
(
L
, 
key
); \

42 
	`lua_pushnumbî
(
L
, (Ë
d©a
); \

43 
	`lua_£âabÀ
(
L
, -3); \

44 } 0)

	)

46 
	#LUA_PUSH_INT
(
key
, 
d©a
) do { \

47 
	`lua_push°rög
(
L
, 
key
); \

48 
	`lua_pushöãgî
(
L
, 
d©a
); \

49 
	`lua_£âabÀ
(
L
, -3); \

50 } 0)

	)

52 
¥ogªss
(
lua_Sèã
 *
L
);

53 
¥ogªss_c⁄√˘
(
lua_Sèã
 *
L
);

54 
¥ogªss_ª˚ive
(
lua_Sèã
 *
L
);

55 
¥ogªss_˛o£
(
lua_Sèã
 *
L
);

57 
lua›í_lua_swupd©e
(
lua_Sèã
 *
L
);

62 
	$√tif
(
lua_Sèã
 *
L
)

65 
iÁddrs
 * 
ifAddrSåu˘
=
NULL
;

66 
iÁddrs
 * 
iÁ
=
NULL
;

67 *
tmpAddrPå
=
NULL
;

69 
	`gëiÁddrs
(&
ifAddrSåu˘
);

71 
	`lua_√wèbÀ
(
L
);

73 
iÁ
 = 
ifAddrSåu˘
; iÁ !
NULL
; iÁ = iÁ->
iÁ_√xt
) {

74 i‡(!
iÁ
->
iÁ_addr
) {

78 i‡((
iÁ
->
iÁ_Êags
 & 
IFF_UP
) == 0)

81 i‡((
iÁ
->
iÁ_Êags
 & 
IFF_LOOPBACK
) != 0)

84 i‡(
iÁ
->
iÁ_addr
->
ß_Ámûy
 =
AF_INET
) {

85 
addªssBuf„r
[
INET_ADDRSTRLEN
];

86 
√tmaskBuf„r
[
INET_ADDRSTRLEN
];

87 
buf
[2 * 
INET_ADDRSTRLEN
];

88 
tmpAddrPå
=&((
sockaddr_ö
 *)
iÁ
->
iÁ_addr
)->
sö_addr
;

89 
	`öë_¡›
(
AF_INET
, 
tmpAddrPå
, 
addªssBuf„r
, 
INET_ADDRSTRLEN
);

90 
tmpAddrPå
=&((
sockaddr_ö
 *)
iÁ
->
iÁ_√tmask
)->
sö_addr
;

91 
	`öë_¡›
(
AF_INET
, 
tmpAddrPå
, 
√tmaskBuf„r
, 
INET_ADDRSTRLEN
);

92 
	`¢¥ötf
(
buf
, (buf), "%†%s", 
addªssBuf„r
, 
√tmaskBuf„r
);

93 
	`LUA_PUSH_STRING
(
iÁ
->
iÁ_«me
, 
buf
);

97 i‡(
ifAddrSåu˘
!=
NULL
Ë
	`‰ìiÁddrs
(ifAddrStruct);

100 
	}
}

103 
	s¥og_obj
 {

104 
RECOVERY_STATUS
 
	m°©us
;

105 
	msockë
;

106 
¥ogªss_msg
 
	mmsg
;

110 
luaL_Reg
 
	g¥ogªss_mëhods
[] = {

111 {"__gc", 
¥ogªss_˛o£
},

112 {"__to°rög", 
auxûür_to°rög
},

113 {"˛o£", 
¥ogªss_˛o£
},

114 {"c⁄√˘", 
¥ogªss_c⁄√˘
},

115 {"ª˚ive", 
¥ogªss_ª˚ive
},

116 {
NULL
, NULL}

119 
	$¥ogªss_c⁄√˘
(
lua_Sèã
 *
L
) {

120 
¥og_obj
 *
p
 = (¥og_obj *Ë
	`auxûür_check˛ass
(
L
, "swupdate_progress", 1);

121 
c⁄nfd
;

123 
	`˛o£
(
p
->
sockë
);

124 
c⁄nfd
 = 
	`¥ogªss_ùc_c⁄√˘
(
WAIT
);

125 i‡(
c⁄nfd
 < 0) {

126 
	`lua_pushnû
(
L
);

129 
p
->
sockë
 = 
c⁄nfd
;

130 
p
->
°©us
 = 
IDLE
;

132 
	}
}

134 
¥ogªss_˛o£
(
lua_Sèã
 
__©åibuã__
 ((
__unu£d__
)Ë*
L
) {

138 
	$¥ogªss_ª˚ive
(
lua_Sèã
 *
L
) {

139 
¥og_obj
 *
p
 = (¥og_obj *Ë
	`auxûür_check˛ass
(
L
, "swupdate_progress", 1);

140 
c⁄nfd
 = 
p
->
sockë
;

141 i‡(
	`¥ogªss_ùc_ª˚ive
(&
c⁄nfd
, &
p
->
msg
) == -1) {

142 
	`lua_pushnû
(
L
);

145 
	`lua_√wèbÀ
(
L
);

147 
	`LUA_PUSH_INT
("°©us", 
p
->
msg
.
°©us
);

148 
	`LUA_PUSH_INT
("dow∆ﬂd", 
p
->
msg
.
dwl_≥r˚¡
);

149 
	`LUA_PUSH_INT
("sour˚", 
p
->
msg
.
sour˚
);

150 
	`LUA_PUSH_INT
("n°ïs", 
p
->
msg
.
n°ïs
);

151 
	`LUA_PUSH_INT
("°ï", 
p
->
msg
.
cur_°ï
);

152 
	`LUA_PUSH_INT
("≥r˚¡", 
p
->
msg
.
cur_≥r˚¡
);

153 
	`LUA_PUSH_STRING
("¨tiÁ˘", 
p
->
msg
.
cur_image
);

154 
	`LUA_PUSH_STRING
("h™dÀr", 
p
->
msg
.
hnd_«me
);

155 i‡(
p
->
msg
.
öfﬁí
)

156 
	`LUA_PUSH_STRING
("öfo", 
p
->
msg
.
öfo
);

158 
p
->
°©us
 =Ö->
msg
.status;

161 
	}
}

163 
	$¥ogªss
(
lua_Sèã
 *
L
) {

165 
c⁄nfd
;

167 
c⁄nfd
 = 
	`¥ogªss_ùc_c⁄√˘
(
WAIT
);

169 i‡(
c⁄nfd
 < 0) {

170 
	`lua_pushnû
(
L
);

175 
¥og_obj
 *
p
 = (¥og_obj *Ë
	`lua_√wu£rd©a
(
L
, (*p));

176 
p
->
sockë
 = 
c⁄nfd
;

177 
p
->
°©us
 = 
IDLE
;

180 
	`auxûür_£t˛ass
(
L
, "swupdate_progress", -1);

184 
	}
}

186 c⁄° 
luaL_Reg
 
	glua_swupd©e
[] = {

187 {"¥ogªss", 
¥ogªss
},

188 {"ùv4", 
√tif
},

189 {
NULL
, NULL}

195 
	$lua›í_lua_swupd©e
(
lua_Sèã
 *
L
){

196 
	`luaL_√wlib
(
L
, 
lua_swupd©e
);

197 
	`auxûür_√w˛ass
(
L
, "swupd©e_¥ogªss", 
¥ogªss_mëhods
);

199 
	}
}

	@swupdate/bootloader/ebg.c

9 
	~<uni°d.h
>

10 
	~<°dlib.h
>

11 
	~<limôs.h
>

12 
	~<°dboﬁ.h
>

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~<utû.h
>

16 
	~<efiboŸgu¨d/ebgív.h
>

17 
	~<gíî©ed/autoc⁄f.h
>

18 
	~<°©e.h
>

19 
	~"boŸlﬂdî.h
"

21 #ifde‡
CONFIG_SURICATTA_STATE_CHOICE_BOOTLOADER


22 
	#EXPANDTOKL2
(
tokí
Ë
	)
token

23 
	#EXPANDTOK
(
tokí
Ë
	`EXPANDTOKL2
—okí)

	)

24 
	#STATE_KEY
 
	`EXPANDTOK
(
CONFIG_SURICATTA_STATE_BOOTLOADER
)

	)

26 
	#STATE_KEY
 "n⁄e"

	)

29 
	#RCS_KEY
 "ªcovîy_°©us"

	)

30 
	#RCS_VALUE
 "ö_¥ogªss"

	)

32 
ebgív_t
 
	gebgív
 = {0};

34 
	$boŸlﬂdî_ív_£t
(c⁄° *
«me
, c⁄° *
vÆue
)

36 
ªt
;

38 
î∫o
 = 0;

39 
	`ebg_bevîbo£
(&
ebgív
, 
logÀvñ
 > 
INFOLEVEL
 ? 
åue
 : 
Ál£
);

41 
	`DEBUG
("Sëtög %s=%†ö boŸlﬂdîÉnvú⁄mít", 
«me
, 
vÆue
);

43 i‡((
ªt
 = 
	`ebg_ív_›í_cuºít
(&
ebgív
)) != 0) {

44 
	`ERROR
("C™nŸ o≥¿cuºíàboŸlﬂdîÉnvú⁄mít: %s.", 
	`°ªº‹
(
ªt
));

45  
ªt
;

48 i‡(
	`°∫cmp
(
«me
, 
RCS_KEY
, 
	`°æí
(name) + 1) == 0 &&

49 
	`°∫cmp
(
vÆue
, 
RCS_VALUE
, 
	`°æí
(RCS_VALUE) + 1) == 0) {

53 i‡((
ªt
 = 
	`ebg_ív_¸óã_√w
(&
ebgív
)) != 0) {

54 
	`ERROR
("Cannot open/createÇew bootloaderÉnvironment: %s.",

55 
	`°ªº‹
(
ªt
));

57 } i‡(
	`°∫cmp
(
«me
, (*)
STATE_KEY
, 
	`°æí
((*)STATE_KEY) + 1) == 0) {

59 i‡((
ªt
 = 
	`ebg_ív_£tglobÆ°©e
(&
ebgív
, *
vÆue
 - '0')) != 0) {

60 
	`ERROR
("C™nŸ së %s=%†ö boŸlﬂdîÉnvú⁄mít.", 
STATE_KEY
, 
vÆue
);

66 i‡((
ªt
 = 
	`ebg_ív_¸óã_√w
(&
ebgív
)) != 0) {

67 
	`ERROR
("Cannot open/createÇew bootloaderÉnvironment: %s.",

68 
	`°ªº‹
(
ªt
));

69  
ªt
;

71 i‡((
ªt
 = 
	`ebg_ív_£t
(&
ebgív
, (*)
«me
, (*)
vÆue
)) != 0) {

72 
	`ERROR
("Cannot set %s=%s in bootloaderÉnvironment: %s.",

73 
«me
, 
vÆue
, 
	`°ªº‹
(
ªt
));

76 ()
	`ebg_ív_˛o£
(&
ebgív
);

78  
ªt
;

79 
	}
}

81 
	$boŸlﬂdî_ív_un£t
(c⁄° *
«me
)

83 
ªt
;

85 
	`ebg_bevîbo£
(&
ebgív
, 
logÀvñ
 > 
INFOLEVEL
 ? 
åue
 : 
Ál£
);

87 i‡((
ªt
 = 
	`ebg_ív_›í_cuºít
(&
ebgív
)) != 0) {

88 
	`ERROR
("C™nŸ o≥¿cuºíàboŸlﬂdîÉnvú⁄mít: %s.", 
	`°ªº‹
(
ªt
));

89  
ªt
;

92 i‡(
	`°∫cmp
(
«me
, 
RCS_KEY
, 
	`°æí
(name) + 1) == 0) {

93 
ªt
 = 
	`ebg_ív_föÆize_upd©e
(&
ebgív
);

94 i‡(
ªt
) {

95 
	`ERROR
("C™nŸ un£à%†ö boŸlﬂdîÉnvú⁄mít: %s.", 
RCS_KEY
, 
	`°ªº‹
(
ªt
));

98 
ªt
 = 
	`ebg_ív_£t_ex
(&
ebgív
, (*)
«me
, 
USERVAR_TYPE_DELETED
, (
uöt8_t
 *)"", 1);

100 ()
	`ebg_ív_˛o£
(&
ebgív
);

102  
ªt
;

103 
	}
}

105 *
	$boŸlﬂdî_ív_gë
(c⁄° *
«me
)

107 *
vÆue
 = 
NULL
;

108 
size_t
 
size
;

110 
î∫o
 = 0;

111 
	`ebg_bevîbo£
(&
ebgív
, 
logÀvñ
 > 
INFOLEVEL
 ? 
åue
 : 
Ál£
);

113 
ªt
;

114 i‡((
ªt
 = 
	`ebg_ív_›í_cuºít
(&
ebgív
)) != 0) {

115 
	`ERROR
("Cannot open current bootloaderÉnvironment: %s.",

116 
	`°ªº‹
(
ªt
));

117  
NULL
;

120 i‡(
	`°∫cmp
(
«me
, (*)
STATE_KEY
, 
	`°æí
((*)STATE_KEY) + 1) == 0) {

121 
vÆue
 = (*)
	`mÆloc
(());

122 *
vÆue
 = 
	`ebg_ív_gëglobÆ°©e
(&
ebgív
);

124 i‡((
size
 = 
	`ebg_ív_gë
(&
ebgív
, (*)
«me
, 
NULL
)) != 0) {

125 
vÆue
 = 
	`mÆloc
(
size
);

126 i‡(
vÆue
) {

127 i‡(
	`ebg_ív_gë
(&
ebgív
, (*)
«me
, 
vÆue
) != 0) {

128 
vÆue
 = 
NULL
;

134 ()
	`ebg_ív_˛o£
(&
ebgív
);

136 i‡(
vÆue
 =
NULL
) {

137 
	`ERROR
("Cannot get %s from bootloaderÉnvironment: %s",

138 
«me
, 
	`°ªº‹
(
î∫o
));

142 *
vÆue
 = *value + '0';

143  
vÆue
;

144 
	}
}

146 
	$boŸlﬂdî_≠∂y_li°
(c⁄° *
fûíame
)

148 
FILE
 *
Â
 = 
NULL
;

149 *
löe
 = 
NULL
;

150 *
key
;

151 *
vÆue
;

152 
size_t
 
Àn
 = 0;

153 
ªt
 = 0;

155 
î∫o
 = 0;

156 
	`ebg_bevîbo£
(&
ebgív
, 
logÀvñ
 > 
INFOLEVEL
 ? 
åue
 : 
Ál£
);

158 i‡(!(
Â
 = 
	`f›í
(
fûíame
, "rb"))) {

159 
	`ERROR
("FailedÅo open bootloaderÉnvironment file %s: %s",

160 
fûíame
, 
	`°ªº‹
(
î∫o
));

164 (
	`gëlöe
(&
löe
, &
Àn
, 
Â
)) != -1) {

165 
key
 = 
	`°πok
(
löe
, " \t\n");

166 
vÆue
 = 
	`°πok
(
NULL
, "\t\n");

167 i‡(
vÆue
 !
NULL
 && 
key
 != NULL) {

168 i‡((
ªt
 = 
	`boŸlﬂdî_ív_£t
(
key
, 
vÆue
)) != 0) {

174 i‡(
Â
) {

175 
	`f˛o£
(
Â
);

177 i‡(
löe
) {

178 
	`‰ì
(
löe
);

180  
ªt
;

181 
	}
}

	@swupdate/bootloader/grub.c

8 
	~"boŸlﬂdî.h
"

9 
	~"grub.h
"

13 
	$grubív_›í
(
grubív_t
 *
grubív
)

15 
FILE
 *
Â
 = 
NULL
;

16 
size_t
 
size
;

17 
ªt
 = 0;

18 *
buf
 = 
NULL
, *
key
 = NULL, *
vÆue
 = NULL;

20 
Â
 = 
	`f›í
(
GRUBENV_PATH
, "rb");

21 i‡(!
Â
) {

22 
	`ERROR
("FaûedÅÿ›í grubív fûe: %s", 
GRUBENV_PATH
);

23 
ªt
 = -1;

24 
˛ónup
;

27 i‡(
	`f£ek
(
Â
, 0, 
SEEK_END
)) {

28 
	`ERROR
("FaûedÅÿ£ekÉnd grubív fûe: %s", 
GRUBENV_PATH
);

29 
ªt
 = -1;

30 
˛ónup
;

33 
size
 = (
size_t
)
	`·ñl
(
Â
);

35 i‡(
size
 !
GRUBENV_SIZE
) {

36 
	`ERROR
("IvÆid grubív fûêsize: %d", ()
size
);

37 
ªt
 = -1;

38 
˛ónup
;

41 i‡(
	`f£ek
(
Â
, 0, 
SEEK_SET
)) {

42 
	`ERROR
("FaûedÅÿ£ek së grubív fûe: %s", 
GRUBENV_PATH
);

43 
ªt
 = -1;

44 
˛ónup
;

47 
buf
 = 
	`mÆloc
(
size
);

48 i‡(!
buf
) {

49 
	`ERROR
("NotÉnough memory forÉnvironment");

50 
	`f˛o£
(
Â
);

51 
ªt
 = -
ENOMEM
;

52 
˛ónup
;

55 i‡(
	`‰ód
(
buf
, 1, 
size
, 
Â
) != size) {

56 
	`ERROR
("FaûedÅÿªad fûê%s", 
GRUBENV_PATH
);

57 
ªt
 = 1;

58 
˛ónup
;

61 i‡(
	`memcmp
(
buf
, 
GRUBENV_HEADER
, 
	`°æí
(GRUBENV_HEADER) -1)) {

62 
	`ERROR
("Invalid grubenv header");

63 
ªt
 = -1;

64 
˛ónup
;

68 i‡(!(
	`°πok
(
buf
, "\n"))) {

69 
	`ERROR
("grubenv headerÇot found");

70 
ªt
 = -1;

71 
˛ónup
;

81 
key
 = 
	`°πok
(
NULL
, "=");

82 
vÆue
 = 
	`°πok
(
NULL
, "\n");

84 i‡(!
vÆue
 || !
key
)

86 
ªt
 = 
	`di˘_£t_vÆue
(&
grubív
->
v¨s
, 
key
, 
vÆue
);

87 i‡(
ªt
) {

88 
	`ERROR
("AddingÖair [%s] = %s into dictionaryÜist"

89 "Áûed\n", 
key
, 
vÆue
);

90  
ªt
;

92 } 
vÆue
 && 
key
);

94 
˛ónup
:

95 i‡(
Â
Ë
	`f˛o£
(fp);

97 
	`‰ì
(
buf
);

98  
ªt
;

99 
	}
}

101 
	$grubív_∑r£_s¸ùt
(
grubív_t
 *
grubív
, c⁄° *
s¸ùt
)

103 
FILE
 *
Â
 = 
NULL
;

104 
ªt
 = 0;

105 *
löe
 = 
NULL
, *
key
 = NULL, *
vÆue
 = NULL;

106 
size_t
 
Àn
 = 0;

109 
Â
 = 
	`f›í
(
s¸ùt
, "rb");

110 i‡(!
Â
) {

111 
	`ERROR
("FaûedÅÿ›í grubív s¸ùàfûe: %s", 
s¸ùt
);

112 
ªt
 = -1;

113 
˛ónup
;

124 (
	`gëlöe
(&
löe
, &
Àn
, 
Â
)) != -1) {

125 
key
 = 
	`°πok
(
löe
, " \t\n");

126 
vÆue
 = 
	`°πok
(
NULL
, "\t\n");

127 i‡(
vÆue
 !
NULL
 && 
key
 != NULL) {

128 
ªt
 = 
	`di˘_£t_vÆue
(&
grubív
->
v¨s
, 
key
, 
vÆue
);

129 i‡(
ªt
) {

130 
	`ERROR
("AddingÖair [%s] = %s into dictionary"

131 "li° faûed\n", 
key
, 
vÆue
);

132 
˛ónup
;

137 
˛ónup
:

138 i‡(
Â
Ë
	`f˛o£
(fp);

140 
	`‰ì
(
löe
);

141  
ªt
;

142 
	}
}

148 
ölöe
 
	$grubív_upd©e_size
(
grubív_t
 *
grubív
)

151 
size
 = 0;

152 
di˘_íåy
 *
grubv¨
;

155 
	`LIST_FOREACH
(
grubv¨
, &
grubív
->
v¨s
, 
√xt
) {

156 *
key
 = 
	`di˘_íåy_gë_key
(
grubv¨
);

157 *
vÆue
 = 
	`di˘_íåy_gë_vÆue
(
grubv¨
);

159 
size
 = sizê+ 
	`°æí
(
key
Ë+ såÀn(
vÆue
) + 2;

161 
size
 +
	`°æí
(
GRUBENV_HEADER
);

162 
grubív
->
size
 = size;

163 
	}
}

165 
	$grubív_wrôe
(
grubív_t
 *
grubív
)

167 
FILE
 *
Â
 = 
NULL
;

168 *
buf
 = 
NULL
, *
±r
, 
löe
[
SWUPDATE_GENERAL_STRING_SIZE
];

169 
di˘_íåy
 *
grubv¨
;

170 
ªt
 = 0, 
Œí
 = 0;

172 
	`grubív_upd©e_size
(
grubív
);

173 i‡(
grubív
->
size
 > 
GRUBENV_SIZE
) {

174 
	`ERROR
("NotÉnough free space inÉnvblk file, %ld",

175 
grubív
->
size
);

176 
ªt
 = -1;

177 
˛ónup
;

180 
Â
 = 
	`f›í
(
GRUBENV_PATH_NEW
, "wb");

181 i‡(!
Â
) {

182 
	`ERROR
("FaûedÅÿ›í fûe: %s", 
GRUBENV_PATH_NEW
);

183 
ªt
 = -1;

184 
˛ónup
;

187 
buf
 = 
	`mÆloc
(
GRUBENV_SIZE
);

188 i‡(!
buf
) {

189 
	`ERROR
("NotÉnough memory forÉnvironment");

190 
ªt
 = -
ENOMEM
;

191 
˛ónup
;

196 
	`°∫˝y
(
buf
, 
GRUBENV_HEADER
, 
	`°æí
(GRUBENV_HEADER) + 1);

198 
	`LIST_FOREACH
(
grubv¨
, &
grubív
->
v¨s
, 
√xt
) {

199 *
key
 = 
	`di˘_íåy_gë_key
(
grubv¨
);

200 *
vÆue
 = 
	`di˘_íåy_gë_vÆue
(
grubv¨
);

202 
Œí
 = 
	`°æí
(
key
Ë+ såÀn(
vÆue
) + 2;

204 
	`¢¥ötf
(
löe
, 
Œí
 + 1, "%s=%s\n", 
key
, 
vÆue
);

205 
	`°∫ˇt
(
buf
, 
löe
, 
Œí
);

209 
±r
 = 
buf
 + 
grubív
->
size
;

212 
	`mem£t
(
±r
, '#', 
buf
 + 
GRUBENV_SIZE
 -Ötr);

215 
ªt
 = 
	`fwrôe
(
buf
 , 1, 
GRUBENV_SIZE
, 
Â
);

216 i‡(
ªt
 !
GRUBENV_SIZE
) {

217 
	`ERROR
("FailedÅo write file: %s. Bytes written: %d",

218 
GRUBENV_PATH_NEW
, 
ªt
);

219 
ªt
 = -1;

220 
˛ónup
;

224 i‡(
	`ª«me
(
GRUBENV_PATH_NEW
, 
GRUBENV_PATH
)) {

225 
	`ERROR
("FailedÅo moveÉnvironment: %s into %s",

226 
GRUBENV_PATH_NEW
, 
GRUBENV_PATH
);

227 
ªt
 = -1;

228 
˛ónup
;

231 
ªt
 = 0;

233 
˛ónup
:

234 i‡(
Â
Ë
	`f˛o£
(fp);

236 
	`‰ì
(
buf
);

237  
ªt
;

238 
	}
}

242 
ölöe
 
	$grubív_˛o£
(
grubív_t
 *
grubív
)

244 
	`di˘_dr›_db
(&
grubív
->
v¨s
);

245 
	}
}

250 
	$boŸlﬂdî_ív_£t
(c⁄° *
«me
, c⁄° *
vÆue
)

252 
grubív_t
 
grubív
;

253 
ªt
;

256 i‡((
ªt
 = 
	`grubív_›í
(&
grubív
)))

257 
˛ónup
;

260 i‡((
ªt
 = 
	`di˘_£t_vÆue
(&
grubív
.
v¨s
, (*)
«me
, (*)
vÆue
)))

261 
˛ónup
;

264 i‡((
ªt
 = 
	`grubív_wrôe
(&
grubív
)))

265 
˛ónup
;

267 
˛ónup
:

268 
	`grubív_˛o£
(&
grubív
);

269  
ªt
;

270 
	}
}

272 
	$boŸlﬂdî_ív_un£t
(c⁄° *
«me
)

274 
grubív_t
 
grubív
;

275 
ªt
 = 0;

278 i‡((
ªt
 = 
	`grubív_›í
(&
grubív
)))

279 
˛ónup
;

282 
	`di˘_ªmove
(&
grubív
.
v¨s
, (*)
«me
);

285 i‡((
ªt
 = 
	`grubív_wrôe
(&
grubív
)))

286 
˛ónup
;

288 
˛ónup
:

289 
	`grubív_˛o£
(&
grubív
);

290  
ªt
;

291 
	}
}

293 *
	$boŸlﬂdî_ív_gë
(c⁄° *
«me
)

295 
grubív_t
 
grubív
;

296 *
vÆue
 = 
NULL
, *
v¨
;

297 
ªt
 = 0;

300 i‡((
ªt
 = 
	`grubív_›í
(&
grubív
)))

301 
˛ónup
;

304 
v¨
 = 
	`di˘_gë_vÆue
(&
grubív
.
v¨s
, (*)
«me
);

306 i‡(
v¨
)

307 
vÆue
 = 
	`°rdup
(
v¨
);

308 
˛ónup
:

309 
	`grubív_˛o£
(&
grubív
);

310  
vÆue
;

312 
	}
}

314 
	$boŸlﬂdî_≠∂y_li°
(c⁄° *
s¸ùt
)

316 
grubív_t
 
grubív
;

317 
ªt
 = 0;

320 i‡((
ªt
 = 
	`grubív_›í
(&
grubív
)))

321 
˛ónup
;

324 i‡((
ªt
 = 
	`grubív_∑r£_s¸ùt
(&
grubív
, 
s¸ùt
)))

325 
˛ónup
;

328 i‡((
ªt
 = 
	`grubív_wrôe
(&
grubív
)))

329 
˛ónup
;

331 
˛ónup
:

332 
	`grubív_˛o£
(&
grubív
);

333  
ªt
;

334 
	}
}

	@swupdate/bootloader/grub.h

8 #i‚de‡
_GRUBENV_H


9 
	#_GRUBENV_H


	)

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<î∫o.h
>

15 
	~"utû.h
"

16 
	~"swupd©e_di˘.h
"

19 
	#GRUBENV_SIZE
 1024

	)

20 
	#GRUBENV_HEADER
 "# GRUB Envú⁄míàBlock\n"

	)

21 
	#GRUBENV_DEFAULT_PATH
 "/boŸ/efi/EFI/BOOT/grub/grubív"

	)

23 #ifde‡
CONFIG_GRUBENV_PATH


24 
	#GRUBENV_PATH
 
CONFIG_GRUBENV_PATH


	)

26 
	#GRUBENV_PATH
 
GRUBENV_DEFAULT_PATH


	)

29 
	#GRUBENV_PATH_NEW
 
GRUBENV_PATH
 ".√w"

	)

31 
	sgrubív_t
 {

32 
di˘
 
	mv¨s
;

33 
size_t
 
	msize
;

37 
grubív_£t
(c⁄° *
«me
, c⁄° *
vÆue
);

38 
grubív_un£t
(c⁄° *
«me
);

39 
grubív_≠∂y_li°
(c⁄° *
s¸ùt
);

40 *
grubív_gë
(c⁄° *
«me
);

	@swupdate/bootloader/none.c

8 
	~<uni°d.h
>

9 
	~<°rög.h
>

10 
	~"boŸlﬂdî.h
"

11 
	~"swupd©e_di˘.h
"

13 
di˘
 
	gívú⁄mít
;

15 
boŸlﬂdî_ív_£t
(c⁄° 
__©åibuã__
 ((
__unu£d__
)Ë*
«me
,

16 c⁄° 
__©åibuã__
 ((
__unu£d__
)Ë*
vÆue
)

18 
di˘_£t_vÆue
(&
ívú⁄mít
, 
«me
, 
vÆue
);

23 
	$boŸlﬂdî_ív_un£t
(c⁄° *
«me
)

25 
	`di˘_ªmove
(&
ívú⁄mít
, 
«me
);

28 
	}
}

30 *
boŸlﬂdî_ív_gë
(c⁄° 
__©åibuã__
 ((
__unu£d__
)Ë*
«me
)

32 *
	gvÆue
 = 
NULL
, *
	gv¨
;

34 
	gv¨
 = 
di˘_gë_vÆue
(&
ívú⁄mít
, 
«me
);

36 i‡(
	gv¨
)

37 
	gvÆue
 = 
°rdup
(
v¨
);

39  
	gvÆue
;

42 
	$boŸlﬂdî_≠∂y_li°
(c⁄° *
fûíame
)

44  
	`di˘_∑r£_s¸ùt
(&
ívú⁄mít
, 
fûíame
);

45 
	}
}

	@swupdate/bootloader/uboot.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°dboﬁ.h
>

11 
	~<uni°d.h
>

12 
	~<°rög.h
>

13 
	~<˘y≥.h
>

14 
	~<î∫o.h
>

15 
	~<f˙é.h
>

16 
	~<sys/fûe.h
>

17 
	~<dúít.h
>

18 
	~"gíî©ed/autoc⁄f.h
"

19 
	~"uboŸ.h
"

20 
	~"utû.h
"

21 
	~"boŸlﬂdî.h
"

23 
ív_›ts
 *
	gfw_ív_›ts
 = &(env_opts) {

24 .
c⁄fig_fûe
 = (*)
CONFIG_UBOOT_FWENV


31 c⁄° *
	glock«me
 = "/var/lock/fw_printenv.lock";

32 
	$lock_uboŸ_ív
()

34 
lockfd
 = -1;

35 
lockfd
 = 
	`›í
(
lock«me
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0666);

36 i‡(
lockfd
 < 0) {

37 
	`ERROR
("Eº‹ o≥nög U-BoŸÜock fûê%s, %s", 
lock«me
, 
	`°ªº‹
(
î∫o
));

40 i‡(
	`Êock
(
lockfd
, 
LOCK_EX
) < 0) {

41 
	`ERROR
("Eº‹Üockög fûê%s, %s", 
lock«me
, 
	`°ªº‹
(
î∫o
));

42 
	`˛o£
(
lockfd
);

46  
lockfd
;

47 
	}
}

49 
	$u∆ock_uboŸ_ív
(
lock
)

51 
	`Êock
(
lock
, 
LOCK_UN
);

52 
	`˛o£
(
lock
);

53 
	}
}

55 
	$boŸlﬂdî_ív_£t
(c⁄° *
«me
, c⁄° *
vÆue
)

57 
lock
 = 
	`lock_uboŸ_ív
();

58 
ªt
;

60 i‡(
lock
 < 0)

63 i‡(
	`fw_ív_›í
 (
fw_ív_›ts
)) {

64 
	`ERROR
("Eº‹:Énvú⁄míànŸ inôülized, %s", 
	`°ªº‹
(
î∫o
));

65 
	`u∆ock_uboŸ_ív
(
lock
);

68 
	`fw_ív_wrôe
 ((*)
«me
, (*)
vÆue
);

69 
ªt
 = 
	`fw_ív_Êush
(
fw_ív_›ts
);

70 
	`fw_ív_˛o£
 (
fw_ív_›ts
);

72 
	`u∆ock_uboŸ_ív
(
lock
);

74  
ªt
;

75 
	}
}

77 
	$boŸlﬂdî_ív_un£t
(c⁄° *
«me
)

79  
	`boŸlﬂdî_ív_£t
(
«me
, "");

80 
	}
}

82 *
	$boŸlﬂdî_ív_gë
(c⁄° *
«me
)

84 
lock
;

85 *
vÆue
 = 
NULL
;

86 *
v¨
;

88 
lock
 = 
	`lock_uboŸ_ív
();

89 i‡(
lock
 < 0)

90  
NULL
;

92 i‡(
	`fw_ív_›í
 (
fw_ív_›ts
)) {

93 
	`ERROR
("Eº‹:Énvú⁄míànŸ inôülized, %s", 
	`°ªº‹
(
î∫o
));

94 
	`u∆ock_uboŸ_ív
(
lock
);

95  
NULL
;

98 
v¨
 = 
	`fw_gëív
((*)
«me
);

99 i‡(
v¨
)

100 
vÆue
 = 
	`°rdup
(
v¨
);

102 
	`fw_ív_˛o£
 (
fw_ív_›ts
);

104 
	`u∆ock_uboŸ_ív
(
lock
);

106  
vÆue
;

107 
	}
}

109 
	$boŸlﬂdî_≠∂y_li°
(c⁄° *
fûíame
)

111 
lockfd
;

112 
ªt
;

114 
lockfd
 = 
	`lock_uboŸ_ív
();

115 i‡(
lockfd
 < 0) {

116 
	`ERROR
("Eº‹ o≥nög U-BoŸÜock fûê%s, %s", 
lock«me
, 
	`°ªº‹
(
î∫o
));

117  -
ENODEV
;

120 
ªt
 = 
	`fw_∑r£_s¸ùt
((*)
fûíame
, 
fw_ív_›ts
);

121 
	`fw_ív_˛o£
 (
fw_ív_›ts
);

122 
	`u∆ock_uboŸ_ív
(
lockfd
);

124  
ªt
;

125 
	}
}

	@swupdate/bootloader/uboot.h

8 
	~<°döt.h
>

10 
	#AES_KEY_LENGTH
 (128 / 8)

	)

12 
	sív_›ts
 {

13 *
	mc⁄fig_fûe
;

14 
	m´s_Êag
;

15 
uöt8_t
 
	m´s_key
[
AES_KEY_LENGTH
];

18 
ív_›ts
 *
fw_ív_›ts
;

20 
fw_∑r£_s¸ùt
(*
‚ame
, 
ív_›ts
 *
›ts
);

21 *
fw_gëív
(*
«me
);

22 
fw_ív_›í
(
ív_›ts
 *
›ts
);

23 
fw_ív_wrôe
(*
«me
, *
vÆue
);

24 
fw_ív_˛o£
(
ív_›ts
 *
›ts
);

25 
fw_ív_Êush
(
ív_›ts
 *
›ts
);

27 
¸c32
 (, const *, );

	@swupdate/core/cpio_utils.c

8 
	~<°dboﬁ.h
>

9 
	~<°dlib.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<î∫o.h
>

13 #ifde‡
CONFIG_GUNZIP


14 
	~<zlib.h
>

17 
	~"gíî©ed/autoc⁄f.h
"

18 
	~"˝iohdr.h
"

19 
	~"utû.h
"

20 
	~"s¶≠i.h
"

21 
	~"¥ogªss.h
"

23 
	#MODULE_NAME
 "˝io"

	)

25 
	#BUFF_SIZE
 16384

	)

27 
	#NPAD_BYTES
(
o
Ë((4 - (ÿ% 4)Ë% 4)

	)

29 
	$gë_˝iohdr
(*
buf
, *
size
,

30 *
«mesize
, *
chksum
)

32 
√w_ascii_hódî
 *
˝iohdr
;

34 
˝iohdr
 = (
√w_ascii_hódî
 *)
buf
;

35 i‡(
	`°∫cmp
(
˝iohdr
->
c_magic
, "070702", 6) != 0) {

36 
	`ERROR
("CPIO FormatÇotÑecognized: magicÇot found");

37  -
EINVAL
;

39 *
size
 = 
	`FROM_HEX
(
˝iohdr
->
c_fûesize
);

40 *
«mesize
 = 
	`FROM_HEX
(
˝iohdr
->
c_«mesize
);

41 *
chksum
 = 
	`FROM_HEX
(
˝iohdr
->
c_chksum
);

44 
	}
}

46 
	$fûl_buf„r
(
fd
, *
buf
, 
nbyãs
, *
offs
,

47 
uöt32_t
 *
checksum
, *
dg°
)

49 
ssize_t
 
Àn
;

50 
cou¡
 = 0;

51 
i
;

53 
nbyãs
 > 0) {

54 
Àn
 = 
	`ªad
(
fd
, 
buf
, 
nbyãs
);

55 i‡(
Àn
 < 0) {

56 
	`ERROR
("Faûuª i¿°ªam %d: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

57  -
EFAULT
;

59 i‡(
Àn
 == 0) {

62 i‡(
checksum
)

63 
i
 = 0; i < 
Àn
; i++)

64 *
checksum
 +
buf
[
i
];

66 i‡(
dg°
) {

67 i‡(
	`swupd©e_HASH_upd©e
(
dg°
, 
buf
, 
Àn
) < 0)

68  -
EFAULT
;

70 
buf
 +
Àn
;

71 
cou¡
 +
Àn
;

72 
nbyãs
 -
Àn
;

73 *
offs
 +
Àn
;

76  
cou¡
;

77 
	}
}

83 
	$c›y_wrôe
(*
out
, c⁄° *
buf
, 
Àn
)

85 
ªt
;

86 
fd
 = (
out
 !
NULL
) ? *(*)out : -1;

88 
Àn
) {

89 
î∫o
 = 0;

90 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
Àn
);

91 i‡(
ªt
 < 0) {

92 i‡(
î∫o
 =
EINTR
)

94 
	`ERROR
("ˇ¬Ÿ wrôê%d byãs: %s", 
Àn
, 
	`°ªº‹
(
î∫o
));

98 i‡(
ªt
 == 0) {

99 
	`ERROR
("ˇ¬Ÿ wrôê%d byãs: %s", 
Àn
, 
	`°ªº‹
(
î∫o
));

103 
Àn
 -
ªt
;

104 
buf
 +
ªt
;

108 
	}
}

110 #i‡
deföed
(
__FªeBSD__
)

118 
	$c›y_wrôe_∑dded
(*
out
, c⁄° *
buf
, 
Àn
)

120 i‡(
Àn
 % 512 == 0) {

121  
	`c›y_wrôe
(
out
, 
buf
, 
Àn
);

124 
uöt8_t
 
buf„r
[512] = { 0 };

125 
chunkÀn
 = 
Àn
 - (len % 512);

126 
ªs
 = 
	`c›y_wrôe
(
out
, 
buf
, 
chunkÀn
);

127 i‡(
ªs
 != 0) {

128  
ªs
;

130 
	`mem˝y
(&
buf„r
, 
buf
+
chunkÀn
, 
Àn
-chunklen);

131  
	`c›y_wrôe
(
out
, 
buf„r
, 512);

132 
	}
}

145 (*
	tPùñöeSãp
)(*
	t°©e
, *
	tbuf„r
, 
	tsize_t
 
	tsize
);

147 
	sI≈utSèã


149 
fdö
;

150 
nbyãs
;

151 *
offs
;

152 *
dg°
;

153 
uöt32_t
 
checksum
;

156 
	$öput_°ï
(*
°©e
, *
buf„r
, 
size_t
 
size
)

158 
I≈utSèã
 *
s
 = (I≈utSèã *)
°©e
;

159 i‡(
size
 >
s
->
nbyãs
) {

160 
size
 = 
s
->
nbyãs
;

162 
ªt
 = 
	`fûl_buf„r
(
s
->
fdö
, 
buf„r
, 
size
, s->
offs
, &s->
checksum
, s->
dg°
);

163 i‡(
ªt
 < 0) {

164  
ªt
;

166 
s
->
nbyãs
 -
ªt
;

167  
ªt
;

168 
	}
}

170 
	sDe¸y±Sèã


172 
PùñöeSãp
 
	mup°ªam_°ï
;

173 *
	mup°ªam_°©e
;

175 *
	md¸y±
;

176 
uöt8_t
 
	möput
[
BUFF_SIZE
];

177 
uöt8_t
 
	mouçut
[
BUFF_SIZE
 + 
AES_BLOCK_SIZE
];

178 
	mouéí
;

179 
boﬁ
 
	meof
;

182 
	$de¸y±_°ï
(*
°©e
, *
buf„r
, 
size_t
 
size
)

184 
De¸y±Sèã
 *
s
 = (De¸y±Sèã *)
°©e
;

185 
ªt
;

186 
öÀn
;

188 i‡(
s
->
ouéí
 != 0) {

189 i‡(()
size
 > 
s
->
ouéí
) {

190 
size
 = 
s
->
ouéí
;

192 
	`mem˝y
(
buf„r
, 
s
->
ouçut
, 
size
);

193 
s
->
ouéí
 -
size
;

194 
	`memmove
(
s
->
ouçut
, s->ouçuà+ 
size
, s->
ouéí
);

195  
size
;

198 
ªt
 = 
s
->
	`up°ªam_°ï
(s->
up°ªam_°©e
, s->
öput
,  s->input);

199 i‡(
ªt
 < 0) {

200  
ªt
;

203 
öÀn
 = 
ªt
;

205 i‡(!
s
->
eof
) {

206 i‡(
öÀn
 != 0) {

207 
ªt
 = 
	`swupd©e_DECRYPT_upd©e
(
s
->
d¸y±
,

208 
s
->
ouçut
, &s->
ouéí
, s->
öput
, 
öÀn
);

214 
ªt
 = 
	`swupd©e_DECRYPT_föÆ
(
s
->
d¸y±
,

215 
s
->
ouçut
, &s->
ouéí
);

216 
s
->
eof
 = 
åue
;

218 i‡(
ªt
 < 0) {

219  
ªt
;

223 i‡(
s
->
ouéí
 != 0) {

224 i‡(()
size
 > 
s
->
ouéí
) {

225 
size
 = 
s
->
ouéí
;

227 
	`mem˝y
(
buf„r
, 
s
->
ouçut
, 
size
);

228 
s
->
ouéí
 -
size
;

229 
	`memmove
(
s
->
ouçut
, s->ouçuà+ 
size
, s->
ouéí
);

230  
size
;

234 
	}
}

236 #ifde‡
CONFIG_GUNZIP


238 
	sGunzùSèã


240 
PùñöeSãp
 
	mup°ªam_°ï
;

241 *
	mup°ªam_°©e
;

243 
z_°ªam
 
	m°rm
;

244 
boﬁ
 
	möôülized
;

245 
uöt8_t
 
	möput
[
BUFF_SIZE
];

246 
boﬁ
 
	meof
;

249 
	$gunzù_°ï
(*
°©e
, *
buf„r
, 
size_t
 
size
)

251 
GunzùSèã
 *
s
 = (GunzùSèã *)
°©e
;

252 
ªt
;

253 
ouéí
 = 0;

255 
s
->
°rm
.
√xt_out
 = 
buf„r
;

256 
s
->
°rm
.
avaû_out
 = 
size
;

257 
ouéí
 == 0) {

258 i‡(
s
->
°rm
.
avaû_ö
 == 0) {

259 
ªt
 = 
s
->
	`up°ªam_°ï
(s->
up°ªam_°©e
, s->
öput
,  s->input);

260 i‡(
ªt
 < 0) {

261  
ªt
;

262 } i‡(
ªt
 == 0) {

263 
s
->
eof
 = 
åue
;

265 
s
->
°rm
.
avaû_ö
 = 
ªt
;

266 
s
->
°rm
.
√xt_ö
 = s->
öput
;

268 i‡(
s
->
eof
) {

272 
ªt
 = 
	`öÊ©e
(&
s
->
°rm
, 
Z_NO_FLUSH
);

273 
ouéí
 = 
size
 - 
s
->
°rm
.
avaû_out
;

274 i‡(
ªt
 =
Z_STREAM_END
) {

275 
s
->
eof
 = 
åue
;

278 i‡(
ªt
 !
Z_OK
 &&Ñë !
Z_BUF_ERROR
) {

279 
	`ERROR
("öÊ©êÁûed (ªtu∫ed %d)", 
ªt
);

283  
ouéí
;

284 
	}
}

288 
c›yfûe
(
fdö
, *
out
, 
nbyãs
, *
offs
, 
£ek
,

289 
skù_fûe
, 
__©åibuã__
 ((
__unu£d__
)Ë
com¥es£d
,

290 
uöt32_t
 *
checksum
, *
hash
, 
í¸y±ed
, 
wrôeimage
 
ˇŒback
)

292 
	g≥r˚¡
, 
	g¥ev≥r˚¡
 = 0;

293 
	gªt
 = 0;

294 
	gÀn
;

295 
	gmd_vÆue
[64];

299 
	gmd_Àn
 = 0;

300 *
	g´s_key
 = 
NULL
;

301 *
	givt
 = 
NULL
;

302 *
	gß…
;

304 
I≈utSèã
 
	göput_°©e
 = {

305 .
fdö
 = fdin,

306 .
	gnbyãs
 = 
nbyãs
,

307 .
	goffs
 = 
offs
,

308 .
	gdg°
 = 
NULL
,

309 .
	gchecksum
 = 0

312 
De¸y±Sèã
 
	gde¸y±_°©e
 = {

313 .
up°ªam_°ï
 = 
NULL
, .
	gup°ªam_°©e
 = NULL,

314 .
	gd¸y±
 = 
NULL
,

315 .
	gouéí
 = 0, .
	geof
 = 
Ál£


318 #ifde‡
CONFIG_GUNZIP


319 
GunzùSèã
 
	ggunzù_°©e
 = {

320 .
up°ªam_°ï
 = 
NULL
, .
	gup°ªam_°©e
 = NULL,

321 .
	g°rm
 = {

322 .
zÆloc
 = 
Z_NULL
, .
	gz‰ì
 = Z_NULL, .
	g›aque
 = Z_NULL,

323 .
	gavaû_ö
 = 0, .
	g√xt_ö
 = 
Z_NULL
,

324 .
	gavaû_out
 = 0, .
	g√xt_out
 = 
Z_NULL


326 .
	göôülized
 = 
Ál£
,

327 .
	geof
 = 
Ál£


331 
PùñöeSãp
 
	g°ï
 = 
NULL
;

332 *
	g°©e
 = 
NULL
;

333 
uöt8_t
 
	gbuf„r
[
BUFF_SIZE
];

335 i‡(!
	gˇŒback
) {

336 
	gˇŒback
 = 
c›y_wrôe
;

339 i‡(
	gchecksum
)

340 *
	gchecksum
 = 0;

342 i‡(
IsVÆidHash
(
hash
)) {

343 
	göput_°©e
.
	gdg°
 = 
swupd©e_HASH_öô
(
SHA_DEFAULT
);

344 i‡(!
	göput_°©e
.
	gdg°
)

345  -
	gEFAULT
;

348 i‡(
	gí¸y±ed
) {

349 
	g´s_key
 = 
gë_´s_key
();

350 
	givt
 = 
gë_´s_ivt
();

351 
	gß…
 = 
gë_´s_ß…
();

352 
	gde¸y±_°©e
.
	gd¸y±
 = 
swupd©e_DECRYPT_öô
(
´s_key
, 
ivt
, 
ß…
);

353 i‡(!
	gde¸y±_°©e
.
	gd¸y±
) {

354 
ERROR
("decrypt initialization failure,áborting");

355 
	gªt
 = -
EFAULT
;

356 
	gc›yfûe_exô
;

360 i‡(
	gcom¥es£d
) {

361 #ifde‡
CONFIG_GUNZIP


366 i‡(
öÊ©eInô2
(&
gunzù_°©e
.
°rm
, 16 + 
MAX_WBITS
Ë!
Z_OK
) {

367 
ERROR
("inflateInit2 failed");

368 
	gªt
 = -
EFAULT
;

369 
	gc›yfûe_exô
;

371 
	ggunzù_°©e
.
	göôülized
 = 
åue
;

373 
TRACE
("Request decompressing, but CONFIG_GUNZIPÇot set !");

374 
	gªt
 = -
EINVAL
;

375 
	gc›yfûe_exô
;

379 i‡(
	g£ek
) {

380 
	gfdout
 = (
out
 !
NULL
) ? *(*)out : -1;

381 
TRACE
("off£àha†bì¿deföed: %Œu byãs", 
£ek
);

382 i‡(
l£ek
(
fdout
, 
£ek
, 
SEEK_SET
) < 0) {

383 
ERROR
("offsetárgument: seek failed");

384 
	gªt
 = -
EFAULT
;

385 
	gc›yfûe_exô
;

389 #ifde‡
CONFIG_GUNZIP


390 i‡(
	gcom¥es£d
) {

391 i‡(
	gí¸y±ed
) {

392 
	gde¸y±_°©e
.
	gup°ªam_°ï
 = &
öput_°ï
;

393 
	gde¸y±_°©e
.
	gup°ªam_°©e
 = &
öput_°©e
;

394 
	ggunzù_°©e
.
	gup°ªam_°ï
 = &
de¸y±_°ï
;

395 
	ggunzù_°©e
.
	gup°ªam_°©e
 = &
de¸y±_°©e
;

397 
	ggunzù_°©e
.
	gup°ªam_°ï
 = &
öput_°ï
;

398 
	ggunzù_°©e
.
	gup°ªam_°©e
 = &
öput_°©e
;

400 
	g°ï
 = &
gunzù_°ï
;

401 
	g°©e
 = &
gunzù_°©e
;

404 i‡(
	gí¸y±ed
) {

405 
	gde¸y±_°©e
.
	gup°ªam_°ï
 = &
öput_°ï
;

406 
	gde¸y±_°©e
.
	gup°ªam_°©e
 = &
öput_°©e
;

407 
	g°ï
 = &
de¸y±_°ï
;

408 
	g°©e
 = &
de¸y±_°©e
;

410 
	g°ï
 = &
öput_°ï
;

411 
	g°©e
 = &
öput_°©e
;

413 #ifde‡
CONFIG_GUNZIP


418 
	gªt
 = 
°ï
(
°©e
, 
buf„r
,  buffer);

419 i‡(
	gªt
 < 0) {

420 
	gc›yfûe_exô
;

422 i‡(
	gªt
 == 0) {

425 i‡(
	gskù_fûe
) {

428 
	gÀn
 = 
ªt
;

435 i‡(
ˇŒback
(
out
, 
buf„r
, 
Àn
) < 0) {

436 
	gªt
 = -
ENOSPC
;

437 
	gc›yfûe_exô
;

440 
	g≥r˚¡
 = ()(100ULL * (
nbyãs
 - 
öput_°©e
.nbytes) /Çbytes);

441 i‡(
	g≥r˚¡
 !
¥ev≥r˚¡
) {

442 
¥ev≥r˚¡
 = 
≥r˚¡
;

443 
swupd©e_¥ogªss_upd©e
(
≥r˚¡
);

447 i‡(
IsVÆidHash
(
hash
)) {

448 i‡(
swupd©e_HASH_föÆ
(
öput_°©e
.
dg°
, 
md_vÆue
, &
md_Àn
) < 0) {

449 
	gªt
 = -
EFAULT
;

450 
	gc›yfûe_exô
;

458 i‡(
	gmd_Àn
 !
SHA256_HASH_LENGTH
 || 
swupd©e_HASH_com∑ª
(
hash
, 
md_vÆue
)) {

459 
	ghash°rög
[2 * 
SHA256_HASH_LENGTH
 + 1];

460 
	g√whash°rög
[2 * 
SHA256_HASH_LENGTH
 + 1];

462 
hash_to_ascii
(
hash
, 
hash°rög
);

463 
hash_to_ascii
(
md_vÆue
, 
√whash°rög
);

465 
ERROR
("HASH mismatch : %s <--> %s",

466 
hash°rög
, 
√whash°rög
);

467 
	gªt
 = -
EFAULT
;

468 
	gc›yfûe_exô
;

472 
fûl_buf„r
(
fdö
, 
buf„r
, 
NPAD_BYTES
(*
offs
), offs, 
checksum
, 
NULL
);

474 i‡(
	gchecksum
 !
NULL
) {

475 *
checksum
 = 
öput_°©e
.checksum;

478 
	gªt
 = 0;

480 
	gc›yfûe_exô
:

481 i‡(
de¸y±_°©e
.
d¸y±
) {

482 
swupd©e_DECRYPT_˛ónup
(
de¸y±_°©e
.
d¸y±
);

484 i‡(
	göput_°©e
.
	gdg°
) {

485 
swupd©e_HASH_˛ónup
(
öput_°©e
.
dg°
);

487 #ifde‡
CONFIG_GUNZIP


488 i‡(
	ggunzù_°©e
.
	göôülized
) {

489 
öÊ©eEnd
(&
gunzù_°©e
.
°rm
);

493  
	gªt
;

496 
	$c›yimage
(*
out
, 
img_ty≥
 *
img
, 
wrôeimage
 
ˇŒback
)

498  
	`c›yfûe
(
img
->
fdö
,

499 
out
,

500 
img
->
size
,

501 (*)&
img
->
off£t
,

502 
img
->
£ek
,

504 
img
->
com¥es£d
,

505 &
img
->
checksum
,

506 
img
->
sha256
,

507 
img
->
is_í¸y±ed
,

508 
ˇŒback
);

509 
	}
}

511 
	$exåa˘_˝io_hódî
(
fd
, 
fûehdr
 *
fhdr
, *
off£t
)

513 
buf
[256];

514 i‡(
	`fûl_buf„r
(
fd
, 
buf
, (
√w_ascii_hódî
), 
off£t
, 
NULL
, NULL) < 0)

515  -
EINVAL
;

516 i‡(
	`gë_˝iohdr
(
buf
, &
fhdr
->
size
, &fhdr->
«mesize
, &fhdr->
chksum
) < 0) {

517 
	`ERROR
("CPIO Header corrupted, cannot beÖarsed");

518  -
EINVAL
;

520 i‡(
fhdr
->
«mesize
 >(fhdr->
fûíame
))

522 
	`ERROR
("CPIO Header filelengthÅoo big %u >= %u (max)",

523 ()
fhdr
->
«mesize
,

524 ()(
fhdr
->
fûíame
));

525  -
EINVAL
;

528 i‡(
	`fûl_buf„r
(
fd
, 
buf
, 
fhdr
->
«mesize
 , 
off£t
, 
NULL
, NULL) < 0)

529  -
EINVAL
;

530 
	`°∫˝y
(
fhdr
->
fûíame
, (*)
buf
, (fhdr->filename));

533 i‡(
	`fûl_buf„r
(
fd
, 
buf
, (4 - (*
off£t
 % 4)Ë% 4, off£t, 
NULL
, NULL) < 0)

534  -
EINVAL
;

537 
	}
}

539 
	$exåa˘_sw_des¸ùti⁄
(
fd
, c⁄° *
descfûe
, 
off_t
 *
offs
)

541 
fûehdr
 
fdh
;

542 
off£t
 = *
offs
;

543 
ouçut_fûe
[64];

544 
uöt32_t
 
checksum
;

545 
fdout
;

546 c⁄° * 
TMPDIR
 = 
	`gë_tmpdú
();

548 i‡(
	`exåa˘_˝io_hódî
(
fd
, &
fdh
, &
off£t
)) {

549 
	`ERROR
("CPIO Header wrong");

553 i‡(
	`°rcmp
(
fdh
.
fûíame
, 
descfûe
)) {

554 
	`ERROR
("Expected %s but found %s.",

555 
descfûe
,

556 
fdh
.
fûíame
);

559 i‡((
	`°æí
(
TMPDIR
Ë+ såÀn(
fdh
.
fûíame
)Ë> (
ouçut_fûe
)) {

560 
	`ERROR
("FûêNamêtoÿl⁄g : %s", 
fdh
.
fûíame
);

563 
	`°∫˝y
(
ouçut_fûe
, 
TMPDIR
, (output_file));

564 
	`°rˇt
(
ouçut_fûe
, 
fdh
.
fûíame
);

565 
fdout
 = 
	`›ífûeouçut
(
ouçut_fûe
);

567 i‡(
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
) < 0) {

568 
	`ERROR
("CPIO fûêc‹ru±ed : %s", 
	`°ªº‹
(
î∫o
));

569 
	`˛o£
(
fdout
);

572 i‡(
	`c›yfûe
(
fd
, &
fdout
, 
fdh
.
size
, &
off£t
, 0, 0, 0, &
checksum
, 
NULL
, 0, NULL) < 0) {

573 
	`ERROR
("%†c‹ru±ed o∏nŸ vÆid", 
descfûe
);

574 
	`˛o£
(
fdout
);

578 
	`˛o£
(
fdout
);

580 
	`TRACE
("Found file:\n\tfilename %s\n\tsize %lu\n\tchecksum 0x%lx %s",

581 
fdh
.
fûíame
,

582 ()
fdh
.
size
,

583 ()
checksum
,

584 (
checksum
 =
fdh
.
chksum
) ? "VERIFIED" : "WRONG");

586 i‡(
checksum
 !
fdh
.
chksum
) {

587 
	`ERROR
("Checksum WRONG ! Computed 0x%lx, it should be 0x%lx",

588 ()
checksum
, 
fdh
.
chksum
);

592 *
offs
 = 
off£t
;

595 
	}
}

597 
	$exåa˘_img_‰om_˝io
(
fd
, 
off£t
, 
fûehdr
 *
fdh
)

600 i‡(
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
) < 0) {

601 
	`ERROR
("CPIO file corrupted : %s",

602 
	`°ªº‹
(
î∫o
));

603  -
EBADF
;

605 i‡(
	`exåa˘_˝io_hódî
(
fd
, 
fdh
, &
off£t
)) {

606 
	`ERROR
("CPIO Header wrong");

609 i‡(
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
) < 0) {

610 
	`ERROR
("CPIO fûêc‹ru±ed : %s", 
	`°ªº‹
(
î∫o
));

615 
	}
}

617 
off_t
 
	$exåa˘_√xt_fûe
(
fd
, 
fdout
, 
off_t
 
°¨t
, 
com¥es£d
,

618 
í¸y±ed
, *
hash
)

620 
ªt
;

621 
fûehdr
 
fdh
;

622 
uöt32_t
 
checksum
 = 0;

623 
off£t
 = 
°¨t
;

625 
ªt
 = 
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
);

626 i‡(
ªt
 < 0) {

627 
	`ERROR
("CPIO file corrupted : %s",

628 
	`°ªº‹
(
î∫o
));

629  
ªt
;

632 
ªt
 = 
	`exåa˘_˝io_hódî
(
fd
, &
fdh
, &
off£t
);

633 i‡(
ªt
) {

634 
	`ERROR
("CPIO Header wrong");

635  
ªt
;

638 
ªt
 = 
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
);

639 i‡(
ªt
 < 0) {

640 
	`ERROR
("CPIO fûêc‹ru±ed : %s", 
	`°ªº‹
(
î∫o
));

641  
ªt
;

644 
ªt
 = 
	`c›yfûe
(
fd
, &
fdout
, 
fdh
.
size
, &
off£t
, 0, 0, 
com¥es£d
, &
checksum
, 
hash
, 
í¸y±ed
, 
NULL
);

645 i‡(
ªt
 < 0) {

646 
	`ERROR
("Error copyingÉxtracted file");

647  
ªt
;

650 
	`TRACE
("Copied file:\n\tfilename %s\n\tsize %u\n\tchecksum 0x%lx %s",

651 
fdh
.
fûíame
,

652 ()
fdh
.
size
,

653 ()
checksum
,

654 (
checksum
 =
fdh
.
chksum
) ? "VERIFIED" : "WRONG");

656 i‡(
checksum
 !
fdh
.
chksum
) {

657 
	`ERROR
("Checksum WRONG ! Computed 0x%lx, it should be 0x%lx",

658 ()
checksum
, 
fdh
.
chksum
);

659  -
EINVAL
;

662  
off£t
;

663 
	}
}

665 
	$˝io_sˇn
(
fd
, 
swupd©e_cfg
 *
cfg
, 
off_t
 
°¨t
)

667 
fûehdr
 
fdh
;

668 
off£t
 = 
°¨t
;

669 
fûe_li°ed
;

670 
uöt32_t
 
checksum
;

674 
fûe_li°ed
 = 0;

675 
°¨t
 = 
off£t
;

676 i‡(
	`exåa˘_˝io_hódî
(
fd
, &
fdh
, &
off£t
)) {

679 i‡(
	`°rcmp
("TRAILER!!!", 
fdh
.
fûíame
) == 0) {

683 
img_ty≥
 *
img
 = 
NULL
;

684 
	`SEARCH_FILE
(
img
, 
cfg
->
images
, 
fûe_li°ed
, 
°¨t
);

685 
	`SEARCH_FILE
(
img
, 
cfg
->
s¸ùts
, 
fûe_li°ed
, 
°¨t
);

686 
	`SEARCH_FILE
(
img
, 
cfg
->
boŸs¸ùts
, 
fûe_li°ed
, 
°¨t
);

688 
	`TRACE
("Found file:\n\tfilename %s\n\tsize %lu\n\t%s",

689 
fdh
.
fûíame
,

690 
fdh
.
size
,

691 
fûe_li°ed
 ? "REQUIRED" : "notÑequired");

697 i‡(
	`c›yfûe
(
fd
, 
NULL
, 
fdh
.
size
, &
off£t
, 0, 1, 0, &
checksum
, 
img
 ? img->
sha256
 : NULL,

698 0, 
NULL
) != 0) {

699 
	`ERROR
("invalidárchive");

703 i‡((
uöt32_t
)(
fdh
.
chksum
Ë!
checksum
) {

704 
	`ERROR
("Checksum verification failed for %s: %x != %x",

705 
fdh
.
fûíame
, (
uöt32_t
)fdh.
chksum
, 
checksum
);

710 
off£t
 +
	`NPAD_BYTES
(offset);

711 i‡(
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
) < 0) {

712 
	`ERROR
("CPIO fûêc‹ru±ed : %s", 
	`°ªº‹
(
î∫o
));

718 
	}
}

	@swupdate/core/handler.c

9 
	~<°dlib.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<°rög.h
>

13 
	~<limôs.h
>

15 
	~"swupd©e.h
"

16 
	~"h™dÀr.h
"

17 
	~"lua_utû.h
"

19 
	#MAX_INSTALLER_HANDLER
 64

	)

20 
ö°ÆÀr_h™dÀr
 
	gsuµ‹ãd_ty≥s
[
MAX_INSTALLER_HANDLER
];

21 
	gƒ_ö°ÆÀrs
 = 0;

22 
	gh™dÀr_ödex
 = 
ULONG_MAX
;

24 
	$ªgi°î_h™dÀr
(c⁄° *
desc
,

25 
h™dÀr
 
ö°ÆÀr
, 
HANDLER_MASK
 
mask
, *
d©a
)

28 i‡(
ƒ_ö°ÆÀrs
 > 
MAX_INSTALLER_HANDLER
 - 1)

31 
	`°∫˝y
(
suµ‹ãd_ty≥s
[
ƒ_ö°ÆÀrs
].
desc
, desc,

32 (
suµ‹ãd_ty≥s
[
ƒ_ö°ÆÀrs
].
desc
));

33 
suµ‹ãd_ty≥s
[
ƒ_ö°ÆÀrs
].
ö°ÆÀr
 = installer;

34 
suµ‹ãd_ty≥s
[
ƒ_ö°ÆÀrs
].
d©a
 = data;

35 
suµ‹ãd_ty≥s
[
ƒ_ö°ÆÀrs
].
mask
 = mask;

36 
ƒ_ö°ÆÀrs
++;

39 
	}
}

41 
	$¥öt_ªgi°îed_h™dÀrs
()

43 
i
;

45 i‡(!
ƒ_ö°ÆÀrs
)

48 
	`¥ötf
("Registered handlers:\n");

49 
i
 = 0; i < 
ƒ_ö°ÆÀrs
; i++) {

50 
	`¥ötf
("\t%s\n", 
suµ‹ãd_ty≥s
[
i
].
desc
);

52 
	}
}

54 
ö°ÆÀr_h™dÀr
 *
	$föd_h™dÀr
(
img_ty≥
 *
img
)

56 
i
;

58 
i
 = 0; i < 
ƒ_ö°ÆÀrs
; i++) {

59 i‡((
	`°æí
(
img
->
ty≥
Ë=°æí(
suµ‹ãd_ty≥s
[
i
].
desc
)) &&

60 
	`°rcmp
(
img
->
ty≥
,

61 
suµ‹ãd_ty≥s
[
i
].
desc
) == 0)

64 i‡(
i
 >
ƒ_ö°ÆÀrs
)

65  
NULL
;

66  &
suµ‹ãd_ty≥s
[
i
];

67 
	}
}

69 
ö°ÆÀr_h™dÀr
 *
	$gë_√xt_h™dÀr
()

71 i‡(
h™dÀr_ödex
 =
ULONG_MAX
) {

72 
h™dÀr_ödex
 = 0;

74 i‡(
h™dÀr_ödex
 >
ƒ_ö°ÆÀrs
) {

75 
h™dÀr_ödex
 = 
ULONG_MAX
;

76  
NULL
;

78  &
suµ‹ãd_ty≥s
[
h™dÀr_ödex
++];

79 
	}
}

	@swupdate/core/notifier.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<uni°d.h
>

12 
	~<î∫o.h
>

13 
	~<sys/£À˘.h
>

14 
	~<sys/sockë.h
>

15 
	~<sys/un.h
>

16 
	~<¨∑/öë.h
>

17 
	~<√töë/ö.h
>

18 
	~<±hªad.h
>

20 
	~"bsdqueue.h
"

21 
	~"utû.h
"

22 
	~"p˘l.h
"

23 
	~"¥ogªss.h
"

25 #ifde‡
CONFIG_SYSTEMD


26 
	~<sys/°©.h
>

27 
	~<sy°emd/sd-d´m⁄.h
>

35 
	snŸify_ñem
 {

36 
nŸifõr
 
	m˛õ¡
;

37 
STAILQ_ENTRY
(
nŸify_ñem
Ë
	m√xt
;

40 
STAILQ_HEAD
(
nŸifyli°
, 
nŸify_ñem
);

42 
nŸifyli°
 
	g˛õ¡s
;

52 
	snŸify_ùc_msg
 {

53 
RECOVERY_STATUS
 
	m°©us
;

54 
	mîr‹
;

55 
	mÀvñ
;

56 
	mbuf
[
NOTIFY_BUF_SIZE
];

59 
sockaddr_un
 
	gnŸify_˛õ¡
;

60 
sockaddr_un
 
	gnŸify_£rvî
;

61 
	gnŸifyfd
 = -1;

62 
boﬁ
 
	gc⁄sﬁe_¥i‹ôy_¥efix
 = 
Ál£
;

63 
boﬁ
 
	gc⁄sﬁe_™si_cﬁ‹s
 = 
Ál£
;

71 
	$ªgi°î_nŸifõr
(
nŸifõr
 
˛õ¡
)

74 
nŸify_ñem
 *
√w˛õ¡
;

76 i‡(!
˛õ¡
)

79 
√w˛õ¡
 = (
nŸify_ñem
 *)
	`ˇŒoc
(1, (notify_elem));

80 
√w˛õ¡
->
˛õ¡
 = client;

82 
	`STAILQ_INSERT_TAIL
(&
˛õ¡s
, 
√w˛õ¡
, 
√xt
);

85 
	}
}

94 
	$nŸify
(
RECOVERY_STATUS
 
°©us
, 
îr‹
, 
Àvñ
, c⁄° *
msg
)

96 
nŸify_ñem
 *
ñem
;

97 
nŸify_ùc_msg
 
nŸifymsg
;

99 i‡(
pid
 =
	`gëpid
()) {

100 i‡(
nŸifyfd
 > 0) {

101 
nŸifymsg
.
°©us
 = status;

102 
nŸifymsg
.
îr‹
 =Érror;

103 
nŸifymsg
.
Àvñ
 =Üevel;

104 i‡(
msg
)

105 
	`°r˝y
(
nŸifymsg
.
buf
, 
msg
);

107 
nŸifymsg
.
buf
[0] = '\0';

108 
	`£ndto
(
nŸifyfd
, &
nŸifymsg
, (notifymsg), 0,

109 (
sockaddr
 *Ë&
nŸify_£rvî
,

110 (
sockaddr_un
));

113 
	`STAILQ_FOREACH
(
ñem
, &
˛õ¡s
, 
√xt
)

114 (
ñem
->
˛õ¡
)(
°©us
, 
îr‹
, 
Àvñ
, 
msg
);

116 
	}
}

121 
	$c⁄sﬁe_nŸifõr
 (
RECOVERY_STATUS
 
°©us
, 
îr‹
, 
Àvñ
, c⁄° *
msg
)

123 
cuºít
[80];

124 
°©us
) {

125 
IDLE
:

126 
	`°∫˝y
(
cuºít
, "No SWUPDATEÑunning : ", (current));

128 
DOWNLOAD
:

129 
	`°∫˝y
(
cuºít
, "SWUPDATE downloading : ", (current));

131 
START
:

132 
	`°∫˝y
(
cuºít
, "SWUPDATE started : ", (current));

134 
RUN
:

135 
	`°∫˝y
(
cuºít
, "SWUPDATEÑunning : ", (current));

137 
SUCCESS
:

138 
	`°∫˝y
(
cuºít
, "SWUPDATE successful !", (current));

140 
FAILURE
:

141 
	`¢¥ötf
(
cuºít
, (cuºít), "SWUPDATE faûed [%d]", 
îr‹
);

143 
SUBPROCESS
:

144 
	`¢¥ötf
(
cuºít
, (cuºít), "EVENT [%d] : ", 
îr‹
 );

146 
DONE
:

147 
	`°∫˝y
(
cuºít
, "SWUPDATE done : ", (current));

151 
Àvñ
) {

152 
ERRORLEVEL
:

153 
	`Ârötf
(
°dîr
, "%s%s[ERROR]",

154 
c⁄sﬁe_™si_cﬁ‹s
 ? "\033[01;31m" : "",

155 
c⁄sﬁe_¥i‹ôy_¥efix
 ? "<3>" : "");

157 
WARNLEVEL
:

158 
	`Ârötf
(
°dout
, "%s%s[WARN ]",

159 
c⁄sﬁe_™si_cﬁ‹s
 ? "\033[01;33m" : "",

160 
c⁄sﬁe_¥i‹ôy_¥efix
 ? "<4>" : "");

162 
INFOLEVEL
:

163 
	`Ârötf
(
°dout
, "%s%s[INFO ]",

164 
c⁄sﬁe_™si_cﬁ‹s
 ? "\033[01;32m" : "",

165 
c⁄sﬁe_¥i‹ôy_¥efix
 ? "<6>" : "");

167 
DEBUGLEVEL
:

168 
	`Ârötf
(
°dout
, "%s%s[DEBUG]",

169 
c⁄sﬁe_™si_cﬁ‹s
 ? "\033[01;30m" : "",

170 
c⁄sﬁe_¥i‹ôy_¥efix
 ? "<7>" : "");

172 
TRACELEVEL
:

173 
	`Ârötf
(
°dout
, "%s%s[TRACE]",

174 
c⁄sﬁe_™si_cﬁ‹s
 ? "\033[01;30m" : "",

175 
c⁄sﬁe_¥i‹ôy_¥efix
 ? "<7>" : "");

179 
	`Ârötf
(
Àvñ
 =
ERRORLEVEL
 ? 
°dîr
 : 
°dout
,

180 " : %†%s%s\n", 
cuºít
, 
msg
 ? msg : "", 
c⁄sﬁe_™si_cﬁ‹s
 ? "\x1b[0m" : "");

181 
	`fÊush
(
°dout
);

182 
	}
}

188 
	$¥o˚ss_nŸifõr
 (
RECOVERY_STATUS
 
°©us
, 
evít
, 
Àvñ
, c⁄° *
msg
)

190 ()
Àvñ
;

193 i‡(
°©us
 !
SUBPROCESS
)

196 
evít
) {

197 (
CANCELUPDATE
):

198 
°©us
 = 
FAILURE
;

202 
	`swupd©e_¥ogªss_öfo
(
°©us
, 
evít
, 
msg
);

204 
	}
}

206 #i‡
deföed
(
__FªeBSD__
)

207 * 
	gsockë_∑th
 = 
NULL
;

208 
	$u∆ök_sockë
()

210 i‡(
sockë_∑th
) {

211 
	`u∆ök
(
sockë_∑th
);

212 
	`‰ì
(
sockë_∑th
);

214 
	}
}

216 
	$£tup_sockë_˛ónup
(
sockaddr_un
 *
addr
)

218 
sockë_∑th
 = 
	`°∫du∑
(
addr
->
sun_∑th
, (addr->sun_path));

219 i‡(
	`©exô
(
u∆ök_sockë
) != 0) {

220 
	`TRACE
("C™nŸ sëu∞sockë cÀ™u∞⁄Éxô, %†w⁄'àbêu∆öked.", 
sockë_∑th
);

222 
	`u∆ök
(
sockë_∑th
);

223 
	}
}

229 
	$addr_öô
(
sockaddr_un
 *
addr
, c⁄° *
∑th
)

231 
	`mem£t
(
addr
, 0, (
sockaddr_un
));

232 
addr
->
sun_Ámûy
 = 
AF_UNIX
;

233 #i‡
	`deföed
(
__löux__
)

237 
	`°r˝y
(&
addr
->
sun_∑th
[1], 
∑th
);

238 
addr
->
sun_∑th
[0] = '\0';

239 #ñi‡
	`deföed
(
__FªeBSD__
)

244 
	`°∫˝y
(
addr
->
sun_∑th
, 
CONFIG_SOCKET_NOTIFIER_DIRECTORY
, (addr->sun_path));

245 
	`°∫ˇt
(
addr
->
sun_∑th
, 
∑th
,

246 (
addr
->
sun_∑th
)-
	`°æí
(
CONFIG_SOCKET_NOTIFIER_DIRECTORY
));

248 
	`ERROR
("Undetected OS,Örobably sockets won't functionásÉxpected.");

250 
	}
}

258 *
nŸifõr_thªad
 (
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

260 
	g£rvîfd
;

261 
	gÀn
;

262 
	g©ãm±
 = 0;

263 
nŸify_ùc_msg
 
	gmsg
;

266 
	g£rvîfd
 = 
sockë
(
AF_UNIX
, 
SOCK_DGRAM
, 0);

267 i‡(
	g£rvîfd
 < 0) {

268 
Ârötf
(
°dîr
, "Error creatingÇotifier daemon,Éxiting.");

269 
exô
(2);

272 #i‡
deföed
(
__FªeBSD__
)

273 
£tup_sockë_˛ónup
(&
nŸify_£rvî
);

276 
	gÀn_sockë_«me
 = 
°æí
(&
nŸify_£rvî
.
sun_∑th
[1]);

279 
	gî∫o
 = 0;

280 i‡(
böd
(
£rvîfd
, (c⁄° 
sockaddr
 *Ë&
nŸify_£rvî
,

281 (
sockaddr_un
)) < 0) {

282 i‡(
	gî∫o
 =
EADDRINUSE
 && 
©ãm±
 < 10) {

283 
©ãm±
++;

288 
	gnŸify_£rvî
.
	gsun_∑th
[
Àn_sockë_«me
 + 1] = '0' + 
©ãm±
;

290 
Ârötf
(
°dîr
, "Eº‹ bödögÇŸifõ∏sockë: %s,Éxôög.\n", 
°ªº‹
(
î∫o
));

291 
˛o£
(
£rvîfd
);

292 
exô
(2);

299 
	gÀn
 = 
ªcv‰om
(
£rvîfd
, &
msg
, (msg), 0, 
NULL
, NULL);

301 i‡(
	gÀn
 > 0) {

302 
nŸify
(
msg
.
°©us
, msg.
îr‹
, msg.
Àvñ
, msg.
buf
);

308 
	$nŸify_öô
()

311 #ifde‡
CONFIG_SYSTEMD


321 i‡(
	`sd_boŸed
(Ë&& 
	`gëív
("JOURNAL_STREAM"Ë!
NULL
) {

322 
dev_t
 
devi˚
;

323 
öo_t
 
öode
;

324 i‡(
	`ssˇnf
(
	`gëív
("JOURNAL_STREAM"), "%lu:%lu", &
devi˚
, &
öode
) == 2) {

325 
°©
 
°©buf„r
;

326 i‡(
	`f°©
(
	`fûío
(
°dîr
), &
°©buf„r
) == 0) {

327 i‡(
öode
 =
°©buf„r
.
°_öo
 && 
devi˚
 =°©buf„r.
°_dev
) {

328 
c⁄sﬁe_¥i‹ôy_¥efix
 = 
åue
;

335 
c⁄sﬁe_™si_cﬁ‹s
 = (
	`ißây
(
	`fûío
(
°dout
)Ë&& ißây(fûío(
°dîr
)))

336 ? 
åue
 : 
Ál£
;

338 i‡(
pid
 =
	`gëpid
()) {

339 
buf
[60];

340 
	`¢¥ötf
(
buf
, (buf), "NŸify%d", 
pid
);

341 
	`addr_öô
(&
nŸify_˛õ¡
, 
buf
);

342 #i‡
	`deföed
(
__FªeBSD__
)

343 
	`£tup_sockë_˛ónup
(&
nŸify_˛õ¡
);

345 
nŸifyfd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_DGRAM
, 0);

346 i‡(
nŸifyfd
 < 0) {

347 
	`¥ötf
("Eº‹ cª©ögÇŸifõ∏sockë f‹Öid %d", 
pid
);

350 i‡(
	`böd
(
nŸifyfd
, (c⁄° 
sockaddr
 *Ë&
nŸify_˛õ¡
,

351 (
sockaddr_un
)) < 0) {

353 
	`Ârötf
(
°dîr
, "Cannot initializeÇotification forÖid %d\n",

354 
pid
);

355 
	`˛o£
(
nŸifyfd
);

364 
	`addr_öô
(&
nŸify_£rvî
, "NotifyServer");

365 
	`STAILQ_INIT
(&
˛õ¡s
);

366 
	`ªgi°î_nŸifõr
(
c⁄sﬁe_nŸifõr
);

367 
	`ªgi°î_nŸifõr
(
¥o˚ss_nŸifõr
);

368 
	`°¨t_thªad
(
nŸifõr_thªad
, 
NULL
);

370 
	}
}

	@swupdate/core/parser.c

8 
	~<uni°d.h
>

9 
	~<°dlib.h
>

10 
	~<°dio.h
>

11 
	~<f˙é.h
>

12 
	~<°rög.h
>

13 
	~<î∫o.h
>

14 
	~"swupd©e.h
"

15 
	~"∑r£rs.h
"

16 
	~"s¶≠i.h
"

17 
	~"utû.h
"

18 
	~"¥ogªss.h
"

19 
	~"h™dÀr.h
"

21 
∑r£r_‚
 
	g∑r£rs
[] = {

22 
∑r£_cfg
,

23 
∑r£_js⁄
,

24 
∑r£_exã∫Æ


28 
	mIS_IMAGE_FILE
,

29 
	mIS_SCRIPT
,

30 
	mIS_PARTITION
,

31 
	mIS_UNKNOWN


32 } 
	tIMGTYPE
;

34 
ölöe
 
IMGTYPE
 
	$gë_íåy_ty≥
(
img_ty≥
 *
img
)

36 i‡(!
img
->
is_s¸ùt
 && !img->
is_∑πôi⁄î
)

37  
IS_IMAGE_FILE
;

38 i‡(
img
->
is_s¸ùt
)

39  
IS_SCRIPT
;

40 i‡(
img
->
is_∑πôi⁄î
)

41  
IS_PARTITION
;

42  
IS_UNKNOWN
;

43 
	}
}

46 #i‚de‡
CONFIG_HASH_VERIFY


47 
	$check_hash_ab£¡
(
imgli°
 *
li°
)

49 
img_ty≥
 *
image
;

50 
	`LIST_FOREACH
(
image
, 
li°
, 
√xt
) {

51 i‡(
	`°∫Àn
((c⁄° *)
image
->
sha256
, 
SHA256_HASH_LENGTH
) > 0) {

52 
	`ERROR
("hash verificationÇotÉnabled but hash supplied for %s",

53 
image
->
‚ame
);

54  -
EINVAL
;

58 
	}
}

61 #ifde‡
CONFIG_SIGNED_IMAGES


65 
	$check_missög_hash
(
imgli°
 *
li°
)

67 
img_ty≥
 *
image
;

69 
	`LIST_FOREACH
(
image
, 
li°
, 
√xt
) {

74 i‡–(
	`°rcmp
(
image
->
ty≥
, "ubipartition")) &&

75 (!
	`IsVÆidHash
(
image
->
sha256
))) {

76 
	`ERROR
("HashÇot set for %s Type %s",

77 
image
->
‚ame
,

78 
image
->
ty≥
);

79  -
EINVAL
;

84 
	}
}

87 
	$check_h™dÀr
(
img_ty≥
 *
ôem
, 
mask
, c⁄° *
desc
)

89 
ö°ÆÀr_h™dÀr
 *
hnd
;

91 
hnd
 = 
	`föd_h™dÀr
(
ôem
);

92 i‡(!
hnd
) {

93 
	`ERROR
("feature '%s'Ñequired for "

95 
ôem
->
ty≥
, iãm->
‚ame
,

96 
SW_DESCRIPTION_FILENAME
);

97  -
EINVAL
;

100 i‡(!(
hnd
->
mask
 & mask)) {

101 
	`ERROR
("feature '%s' isÇotállowed for "

103 
ôem
->
ty≥
, 
desc
,

104 
SW_DESCRIPTION_FILENAME
);

105  -
EINVAL
;

109 
	}
}

111 
	$check_h™dÀr_li°
(
imgli°
 *
li°
,

112 
Ælowedmask
,

113 
IMGTYPE
 
ty≥
,

114 c⁄° *
desc
)

116 
img_ty≥
 *
ôem
;

117 
ªt
;

118 i‡(!
	`LIST_EMPTY
(
li°
)) {

119 
	`LIST_FOREACH
(
ôem
, 
li°
, 
√xt
)

121 i‡(
	`gë_íåy_ty≥
(
ôem
Ë!
ty≥
)

123 
ªt
 = 
	`check_h™dÀr
(
ôem
, 
Ælowedmask
, 
desc
);

125 i‡(
ªt
 < 0)

126  
ªt
;

131 
	}
}

133 
	$is_image_ö°ÆÀd
(
swvî
 *
sw_vî_li°
,

134 
img_ty≥
 *
img
)

136 
sw_vîsi⁄
 *
swvî
;

138 i‡(!
sw_vî_li°
)

139  
Ál£
;

141 i‡(!
	`°æí
(
img
->
id
.
«me
Ë|| !°æí(img->id.
vîsi⁄
) ||

142 !
img
->
id
.
ö°Æl_if_dif„ª¡
)

143  
Ál£
;

145 
	`LIST_FOREACH
(
swvî
, 
sw_vî_li°
, 
√xt
) {

149 i‡(!
	`°∫cmp
(
img
->
id
.
«me
, 
swvî
->name, (img->id.name)) &&

150 !
	`°∫cmp
(
img
->
id
.
vîsi⁄
, 
swvî
->version, (img->id.version))) {

151 
	`TRACE
("%s(%s)álready installed, skipping...",

152 
img
->
id
.
«me
,

153 
img
->
id
.
vîsi⁄
);

155  
åue
;

159  
Ál£
;

160 
	}
}

165 
	$ªmove_ö°ÆÀd_image_li°
(
imgli°
 *
img_li°
,

166 
swvî
 *
sw_vî_li°
)

168 
img_ty≥
 *
img
;

170 
	`LIST_FOREACH
(
img
, 
img_li°
, 
√xt
) {

171 i‡(
	`is_image_ö°ÆÀd
(
sw_vî_li°
, 
img
)) {

172 
	`LIST_REMOVE
(
img
, 
√xt
);

173 
	`‰ì_image
(
img
);

176 
	}
}

178 
	$∑r£
(
swupd©e_cfg
 *
sw
, c⁄° *
descfûe
)

180 
ªt
 = -1;

181 
∑r£r_‚
 
cuºít
;

182 #ifde‡
CONFIG_SIGNED_IMAGES


183 *
sigfûe
;

185 
sigfûe
 = 
	`mÆloc
(
	`°æí
(
descfûe
) + strlen(".sig") + 1);

186 i‡(!
sigfûe
)

187  -
ENOMEM
;

188 
	`°r˝y
(
sigfûe
, 
descfûe
);

189 
	`°rˇt
(
sigfûe
, ".sig");

191 
ªt
 = 
	`swupd©e_vîify_fûe
(
sw
->
dg°
, 
sigfûe
, 
descfûe
,

192 
sw
->
globÆs
.
f‹˚d_sig√r_«me
);

193 
	`‰ì
(
sigfûe
);

195 i‡(
ªt
)

196  
ªt
;

199 
i
 = 0; i < 
	`ARRAY_SIZE
(
∑r£rs
); i++) {

200 
cuºít
 = 
∑r£rs
[
i
];

202 
ªt
 = 
	`cuºít
(
sw
, 
descfûe
);

204 i‡(
ªt
 == 0)

208 i‡(
ªt
 != 0) {

209 
	`ERROR
("nÿ∑r£∏avaûabÀÅÿ∑r£ " 
SW_DESCRIPTION_FILENAME
 "!");

210  
ªt
;

213 
ªt
 = 
	`check_h™dÀr_li°
(&
sw
->
s¸ùts
, 
SCRIPT_HANDLER
, 
IS_SCRIPT
, "scripts");

214 
ªt
 |
	`check_h™dÀr_li°
(&
sw
->
images
, 
IMAGE_HANDLER
 | 
FILE_HANDLER
, 
IS_IMAGE_FILE
,

216 
ªt
 |
	`check_h™dÀr_li°
(&
sw
->
images
, 
PARTITION_HANDLER
, 
IS_PARTITION
,

218 
ªt
 |
	`check_h™dÀr_li°
(&
sw
->
boŸs¸ùts
, 
BOOTLOADER_HANDLER
, 
IS_SCRIPT
,

220 i‡(
ªt
)

221  -
EINVAL
;

227 
img_ty≥
 
ôem_uboŸ
 = {.
ty≥
 = "uboot"};

228 
img_ty≥
 
ôem_boŸlﬂdî
 = {.
ty≥
 = "bootenv"};

229 i‡(!
	`LIST_EMPTY
(&
sw
->
boŸlﬂdî
) &&

230 (!
	`föd_h™dÀr
(&
ôem_uboŸ
) &&

231 !
	`föd_h™dÀr
(&
ôem_boŸlﬂdî
))) {

232 
	`ERROR
("bootloader supportábsent but %s has bootloader section!",

233 
SW_DESCRIPTION_FILENAME
);

234  -
EINVAL
;

237 #ifde‡
CONFIG_SIGNED_IMAGES


243 i‡(
	`check_missög_hash
(&
sw
->
images
) ||

244 
	`check_missög_hash
(&
sw
->
s¸ùts
))

245 
ªt
 = -
EINVAL
;

247 #i‚de‡
CONFIG_HASH_VERIFY


248 i‡(
	`check_hash_ab£¡
(&
sw
->
images
) ||

249 
	`check_hash_ab£¡
(&
sw
->
s¸ùts
))

250 
ªt
 = -
EINVAL
;

259 i‡(
sw
->
globÆs
.
no_downgødög
) {

260 
__u64
 
möimum_vîsi⁄
 = 
	`vîsi⁄_to_numbî
(
sw
->
globÆs
.minimum_version);

261 
__u64
 
√wvîsi⁄
 = 
	`vîsi⁄_to_numbî
(
sw
->
vîsi⁄
);

263 i‡(
√wvîsi⁄
 < 
möimum_vîsi⁄
) {

264 
	`ERROR
("No downgradingállowed:Çew version %s <= installed %s",

265 
sw
->
vîsi⁄
, sw->
globÆs
.
möimum_vîsi⁄
);

266  -
EPERM
;

274 i‡(
sw
->
globÆs
.
no_ªö°Ælög
) {

276 i‡(
	`°rcmp
(
sw
->
vîsi⁄
, sw->
globÆs
.
cuºít_vîsi⁄
) == 0) {

277 
	`ERROR
("NoÑeinstallingállowed:Çew version %s == installed %s",

278 
sw
->
vîsi⁄
, sw->
globÆs
.
cuºít_vîsi⁄
);

279  -
EPERM
;

283 
	`ªmove_ö°ÆÀd_image_li°
(&
sw
->
images
, &sw->
ö°ÆÀd_sw_li°
);

289 
	`swupd©e_¥ogªss_öô
(
	`cou¡_ñem_li°
(&
sw
->
images
));

291  
ªt
;

292 
	}
}

	@swupdate/core/pctl.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/sockë.h
>

13 #i‡
deföed
(
__löux__
)

14 
	~<sys/¥˘l.h
>

16 
	~<î∫o.h
>

17 
	~<±hªad.h
>

18 
	~<√tw‹k_ùc.h
>

19 
	~<p˘l.h
>

20 
	~<utû.h
>

21 
	~<sig«l.h
>

22 
	~<sys/waô.h
>

23 
	~<∑r£lib.h
>

24 
	~<swupd©e_£âögs.h
>

26 #i‚de‡
WAIT_ANY


27 
	#WAIT_ANY
 (-1)

	)

31 
	#MAX_PROCESSES
 10

	)

32 
swupd©e_èsk
 
	g¥ocs
[
MAX_PROCESSES
];

33 
	g≈rocs
 = 0;

43 
	gpid
 = 0;

50 
	gsw_sockfd
 = -1;

52 #i‡
deföed
(
__löux__
)

53 
∑ª¡_dód_h™dÀr
(
__©åibuã__
 ((
__unu£d__
)Ë
dummy
)

55 
exô
(1);

62 
±hªad_t
 
	$°¨t_thªad
(*(* 
°¨t_routöe
Ë(*), *
¨g
)

64 
ªt
;

65 
±hªad_t
 
id
;

66 
±hªad_©å_t
 
©å
;

68 
	`±hªad_©å_öô
(&
©å
);

69 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

71 
ªt
 = 
	`±hªad_¸óã
(&
id
, &
©å
, 
°¨t_routöe
, 
¨g
);

72 i‡(
ªt
) {

73 
	`exô
(1);

75  
id
;

76 
	}
}

82 
	$•awn_¥o˚ss
(
swupd©e_èsk
 *
èsk
,

83 
uid_t
 
run_as_u£rid
, 
gid_t
 
run_as_groupid
,

84 c⁄° *
cfg«me
,

85 
ac
, **
av
,

86 
swupd©e_¥o˚ss
 
°¨t
,

87 c⁄° *
cmdlöe
)

89 
¥o˚ss_id
;

90 
sockfd
[2];

96 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
sockfd
) < 0) {

97 
	`ERROR
("sockë∑ú faû†: %s", 
	`°ªº‹
(
î∫o
));

101 
¥o˚ss_id
 = 
	`f‹k
();

111 i‡(
¥o˚ss_id
) {

113 
	`˛o£
(
sockfd
[1]);

114 
èsk
->
pid
 = 
¥o˚ss_id
;

115 
èsk
->
pùe
 = 
sockfd
[0];

120 
	`˛o£
(
sockfd
[0]);

122 
sw_sockfd
 = 
sockfd
[1];

125 i‡(
	`gëuid
() == 0) {

126 i‡(
	`£tgid
(
run_as_groupid
) != 0) {

127 
	`ERROR
("£tgid: U«bÀÅÿdr› grou∞¥ivûeges: %s", 
	`°ªº‹
(
î∫o
));

131 i‡(
	`£tuid
(
run_as_u£rid
) != 0) {

132 
	`ERROR
("£tuid: U«bÀÅÿdr› u£∏¥ivûeges: %s", 
	`°ªº‹
(
î∫o
));

138 
pid
 = 
	`gëpid
();

140 
	`nŸify_öô
();

142 #i‡
	`deföed
(
__löux__
)

143 i‡(
	`sig«l
(
SIGUSR1
, 
∑ª¡_dód_h™dÀr
Ë=
SIG_ERR
) {

147 
	`WARN
("CannotÅrack ifÖarent dies, sorry...");

150 i‡(
	`¥˘l
(
PR_SET_PDEATHSIG
, 
SIGUSR1
) < 0)

151 
	`ERROR
("Error callingÖrctl");

153 
	`WARN
("CannotÅrack ifÖarent dies onÇon-Linux OSes, sorry...");

156 i‡(
°¨t
)

157  (*
°¨t
)(
cfg«me
, 
ac
, 
av
);

159 i‡(
	`execvp
(
cmdlöe
, 
av
) == -1) {

160 
	`INFO
("S∑wnögÖro˚s†%†Áûed: %s", 
av
[0], 
	`°ªº‹
(
î∫o
));

165 
	}
}

167 
	$°¨t_swupd©e_sub¥o˚ss
(
sour˚ty≥
 
ty≥
,

168 c⁄° *
«me
, c⁄° *
cfgfûe
,

169 
¨gc
, **
¨gv
,

170 
swupd©e_¥o˚ss
 
°¨t
,

171 c⁄° *
cmdlöe
)

173 
uid_t
 
uid
;

174 
gid_t
 
gid
;

176 
	`ªad_£âögs_u£r_id
(
cfgfûe
, 
«me
, &
uid
, &
gid
);

177 
¥ocs
[
≈rocs
].
«me
 =Çame;

178 
¥ocs
[
≈rocs
].
ty≥
 =Åype;

179 i‡(
	`•awn_¥o˚ss
(&
¥ocs
[
≈rocs
], 
uid
, 
gid
, 
cfgfûe
, 
¨gc
, 
¨gv
, 
°¨t
, 
cmdlöe
) < 0) {

180 
	`ERROR
("S∑wnög %†Áûed,ÉxôögÖro˚ss...", 
«me
);

181 
	`exô
(1);

184 
	`TRACE
("Sèπed %†wôhÖid %dánd fd %d", 
«me
, 
¥ocs
[
≈rocs
].
pid
,Örocs[≈rocs].
pùe
);

185 
≈rocs
++;

186 
	}
}

189 
	$°¨t_sub¥o˚ss_‰om_fûe
(
sour˚ty≥
 
ty≥
, c⁄° *
«me
,

190 c⁄° *
cfgfûe
,

191 
¨gc
, **
¨gv
,

192 c⁄° *
cmdlöe
)

194 
	`°¨t_swupd©e_sub¥o˚ss
(
ty≥
, 
«me
, 
cfgfûe
, 
¨gc
, 
¨gv
, 
NULL
, 
cmdlöe
);

195 
	}
}

197 
	$°¨t_sub¥o˚ss
(
sour˚ty≥
 
ty≥
, c⁄° *
«me
, c⁄° *
cfgfûe
,

198 
¨gc
, **
¨gv
,

199 
swupd©e_¥o˚ss
 
°¨t
)

202 
	`°¨t_swupd©e_sub¥o˚ss
(
ty≥
, 
«me
, 
cfgfûe
, 
¨gc
, 
¨gv
, 
°¨t
, 
NULL
);

203 
	}
}

211 
sigchld_h™dÀr
 (
__©åibuã__
 ((
__unu£d__
)Ë
signum
)

213 
	gchûdpid
, 
	g°©us
, 
	g£ºno
;

214 
	gexô°©us
;

215 
	ghasdõd
 = 0;

216 
	gi
;

218 
	g£ºno
 = 
î∫o
;

223 
	gi
 = 0; i < 
	g≈rocs
; i++) {

224 
	gchûdpid
 = 
waôpid
 (
¥ocs
[
i
].
pid
, &
°©us
, 
WNOHANG
);

225 i‡(
	gchûdpid
 < 0) {

226 
≥º‹
 ("waitpid,Ço child");

229 i‡(
	gchûdpid
 == 0)

232 i‡(
	g¥ocs
[
i
].
	gpid
 =
chûdpid
) {

233 
¥ötf
("Chûd %d(%sË", 
chûdpid
, 
¥ocs
[
i
].
«me
);

234 
	ghasdõd
 = 0;

235 i‡(
WIFEXITED
(
°©us
)) {

236 
	ghasdõd
 = 1;

237 
	gexô°©us
 = 
WEXITSTATUS
(
°©us
);

238 
¥ötf
("exôed, sètus=%d\n", 
exô°©us
);

239 } i‡(
WIFSIGNALED
(
°©us
)) {

240 
	ghasdõd
 = 1;

241 
	gexô°©us
 = 
WTERMSIG
(
°©us
);

242 
¥ötf
("kûÀd by sig«»%d\n", 
WTERMSIG
(
°©us
));

243 } i‡(
WIFSTOPPED
(
°©us
)) {

244 
¥ötf
("°›≥d by sig«»%d\n", 
WSTOPSIG
(
°©us
));

245 } i‡(
WIFCONTINUED
(
°©us
)) {

246 
¥ötf
("continued\n");

256 i‡(
	ghasdõd
) {

257 
sig«l
(
SIGCHLD
, 
SIG_IGN
);

258 
	gi
 = 0; i < 
	g≈rocs
; i++) {

259 i‡(
	g¥ocs
[
i
].
	gpid
 !
chûdpid
) {

260 
kûl
(
¥ocs
[
i
].
pid
, 
SIGTERM
);

264 
exô
(
exô°©us
);

267 
	gî∫o
 = 
£ºno
;

270 
	$p˘l_gëfd_‰om_ty≥
(
sour˚ty≥
 
s
)

272 
i
;

274 
i
 = 0; i < 
≈rocs
; i++) {

275 i‡(
s
 =
¥ocs
[
i
].
ty≥
)

276  
¥ocs
[
i
].
pùe
;

279  -
ENODEV
;

280 
	}
}

282 c⁄° *
	$p˘l_gë«me_‰om_ty≥
(
sour˚ty≥
 
s
)

284 
i
;

286 
i
 = 0; i < 
≈rocs
; i++) {

287 i‡(
s
 =
¥ocs
[
i
].
ty≥
)

288  
¥ocs
[
i
].
«me
;

292 
	}
}

	@swupdate/core/state.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°dboﬁ.h
>

11 
	~<î∫o.h
>

12 
	~<utû.h
>

13 
	~<boŸlﬂdî.h
>

14 
	~<°©e.h
>

21 
	#CHECK_STATE_VAR
(
v
) do { \

22 i‡(
	`°∫Àn
(
v
, 
BOOTLOADER_VAR_LENGTH
) == 0) { \

23 
	`WARN
("Update Status Storage Key " \

25 
v
 = (*)"ustate"; \

27 } 0)

	)

29 
boﬁ
 
	$is_°©e_vÆid
(
upd©e_°©e_t
 
°©e
) {

30 i‡((
°©e
 < 
STATE_OK
Ë|| (°©ê> 
STATE_ERROR
)) {

31 
	`ERROR
("Unknow¿upd©ê°©e=%c", 
°©e
);

32  
Ál£
;

34  
åue
;

35 
	}
}

37 
£rvî_›_ªs_t
 
	$ßve_°©e
(*
key
, 
upd©e_°©e_t
 
vÆue
)

39 
ªt
;

40 
vÆue_°r
[2] = {
vÆue
, '\0'};

42 
	`CHECK_STATE_VAR
(
key
);

44 
ªt
 = 
	`boŸlﬂdî_ív_£t
(
key
, 
vÆue_°r
);

46  
ªt
 =0 ? 
SERVER_OK
 : 
SERVER_EERR
;

47 
	}
}

49 
£rvî_›_ªs_t
 
	$ªad_°©e
(*
key
, 
upd©e_°©e_t
 *
vÆue
)

51 *
ívvÆ
;

52 
	`CHECK_STATE_VAR
(
key
);

54 
ívvÆ
 = 
	`boŸlﬂdî_ív_gë
(
key
);

55 i‡(
ívvÆ
 =
NULL
) {

56 
	`INFO
("Key '%s'ÇŸ found i¿BoŸlﬂdî'†ívú⁄mít.", 
key
);

57 *
vÆue
 = 
STATE_NOT_AVAILABLE
;

58  
SERVER_OK
;

62 *
vÆue
 = (
upd©e_°©e_t
)*
ívvÆ
;

65 
	`‰ì
(
ívvÆ
);

67  
SERVER_OK
;

68 
	}
}

69 
£rvî_›_ªs_t
 
	$ª£t_°©e
(*
key
)

71 
ªt
;

73 
	`CHECK_STATE_VAR
(
key
);

74 
ªt
 = 
	`boŸlﬂdî_ív_un£t
(
key
);

75  
ªt
 =0 ? 
SERVER_OK
 : 
SERVER_EERR
;

76 
	}
}

78 
upd©e_°©e_t
 
	$gë_°©e
() {

79 
upd©e_°©e_t
 
°©e
;

81 i‡(
	`ªad_°©e
((*)
STATE_KEY
, &
°©e
Ë!
SERVER_OK
) {

82 
	`ERROR
("CannotÑead stored update state.\n");

83  
STATE_ERROR
;

85 
	`TRACE
("Ród sèã=%¯‰omÖîsi°íà°‹age.\n", 
°©e
);

87  
	`is_°©e_vÆid
(
°©e
Ë? sèã : 
STATE_ERROR
;

88 
	}
}

	@swupdate/core/swupdate.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°döt.h
>

11 
	~<dúít.h
>

12 
	~<uni°d.h
>

13 
	~<°rög.h
>

14 
	~<gë›t.h
>

15 
	~<libgí.h
>

16 
	~<‚m©ch.h
>

17 
	~<î∫o.h
>

18 
	~<˘y≥.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<f˙é.h
>

21 
	~<sys/°©.h
>

22 
	~<sys/mou¡.h
>

23 
	~<±hªad.h
>

24 
	~<sig«l.h
>

25 
	~<sys/waô.h
>

26 
	~<·w.h
>

28 
	~"bsdqueue.h
"

29 
	~"˝iohdr.h
"

30 
	~"utû.h
"

31 
	~"swupd©e.h
"

32 
	~"∑r£rs.h
"

33 
	~"√tw‹k_öãrÁ˚.h
"

34 
	~"h™dÀr.h
"

35 
	~"ö°ÆÀr.h
"

36 #ifde‡
CONFIG_MTD


37 
	~"Êash.h
"

39 
	~"lua_utû.h
"

40 
	~"m⁄goo£_öãrÁ˚.h
"

41 
	~"dow∆ﬂd_öãrÁ˚.h
"

42 
	~"√tw‹k_ùc.h
"

43 
	~"s¶≠i.h
"

44 
	~"suriˇâa/suriˇâa.h
"

45 
	~"¥ogªss.h
"

46 
	~"∑r£lib.h
"

47 
	~"swupd©e_£âögs.h
"

48 
	~"p˘l.h
"

49 
	~"boŸlﬂdî.h
"

51 #ifde‡
CONFIG_SYSTEMD


52 
	~<sy°emd/sd-d´m⁄.h
>

55 
	#MODULE_NAME
 "swupd©e"

	)

57 
±hªad_t
 
	g√tw‹k_d´m⁄
;

60 
swupd©e_cfg
 
	gswcfg
;

62 #ifde‡
CONFIG_MTD


64 
Êash_des¸ùti⁄
 
	gÊashdesc
;

66 
Êash_des¸ùti⁄
 *
	$gë_Êash_öfo
() {

67  &
Êashdesc
;

68 
	}
}

71 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

72 {"vîbo£", 
no_¨gumít
, 
NULL
, 'v'},

73 {"vîsi⁄", 
no_¨gumít
, 
NULL
, '0'},

74 {"image", 
ªquúed_¨gumít
, 
NULL
, 'i'},

75 {"fûe", 
ªquúed_¨gumít
, 
NULL
, 'f'},

76 {"logÀvñ", 
ªquúed_¨gumít
, 
NULL
, 'l'},

77 {"sy¶og", 
no_¨gumít
, 
NULL
, 'L' },

78 {"£À˘", 
ªquúed_¨gumít
, 
NULL
, 'e'},

79 {"ouçut", 
ªquúed_¨gumít
, 
NULL
, 'o'},

80 {"dry-run", 
no_¨gumít
, 
NULL
, 'n'},

81 {"no-downgødög", 
ªquúed_¨gumít
, 
NULL
, 'N'},

82 {"no-ªö°Ælög", 
ªquúed_¨gumít
, 
NULL
, 'R'},

83 #ifde‡
CONFIG_SIGNED_IMAGES


84 {"key", 
ªquúed_¨gumít
, 
NULL
, 'k'},

85 {"ˇ-∑th", 
ªquúed_¨gumít
, 
NULL
, 'k'},

86 {"˚π-puΩo£", 
ªquúed_¨gumít
, 
NULL
, '1'},

87 {"f‹˚d-sig√r-«me", 
ªquúed_¨gumít
, 
NULL
, '2'},

89 #ifde‡
CONFIG_ENCRYPTED_IMAGES


90 {"key-´s", 
ªquúed_¨gumít
, 
NULL
, 'K'},

92 #ifde‡
CONFIG_UBIATTACH


93 {"bœckli°", 
ªquúed_¨gumít
, 
NULL
, 'b'},

95 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

96 #ifde‡
CONFIG_HW_COMPATIBILITY


97 {"hwªvisi⁄", 
ªquúed_¨gumít
, 
NULL
, 'H'},

99 #ifde‡
CONFIG_DOWNLOAD


100 {"dow∆ﬂd", 
ªquúed_¨gumít
, 
NULL
, 'd'},

102 #ifde‡
CONFIG_SURICATTA


103 {"suriˇâa", 
ªquúed_¨gumít
, 
NULL
, 'u'},

105 #ifde‡
CONFIG_WEBSERVER


106 {"web£rvî", 
ªquúed_¨gumít
, 
NULL
, 'w'},

108 {"check", 
no_¨gumít
, 
NULL
, 'c'},

109 {"po°upd©e", 
ªquúed_¨gumít
, 
NULL
, 'p'},

110 {
NULL
, 0, NULL, 0}

113 
	glogÀvñ
 = 
ERRORLEVEL
;

115 
	$ußge
(*
¥ogøm«me
)

117 
	`Ârötf
(
°dout
, "%†(compûed %s)\n", 
¥ogøm«me
, 
__DATE__
);

118 
	`Ârötf
(
°dout
, "Usage %s [OPTION]\n",

119 
¥ogøm«me
);

120 
	`Ârötf
(
°dout
,

122 #ifde‡
CONFIG_UBIATTACH


131 #ifde‡
CONFIG_SIGNED_IMAGES


138 #ifde‡
CONFIG_ENCRYPTED_IMAGES


148 #ifde‡
CONFIG_HW_COMPATIBILITY


154 #ifde‡
CONFIG_DOWNLOAD


155 
	`Ârötf
(
°dout
,

157 
	`dow∆ﬂd_¥öt_hñp
();

159 #ifde‡
CONFIG_SURICATTA


160 
	`Ârötf
(
°dout
,

162 
	`suriˇâa_¥öt_hñp
();

164 #ifde‡
CONFIG_WEBSERVER


165 
	`Ârötf
(
°dout
,

167 
	`m⁄goo£_¥öt_hñp
();

169 
	}
}

171 
	$check_¥ovided
(
imgli°
 *
li°
)

173 
ªt
 = 0;

174 
img_ty≥
 *
p
;

176 
p
 = 
li°
->
lh_fú°
;Ö !
NULL
;

177 
p
 =Ö->
√xt
.
À_√xt
) {

178 i‡(!
p
->
¥ovided
) {

179 
	`ERROR
("Requested fileÇot found in image: %s", \

180 
p
->
‚ame
);

181 
ªt
 = -1;

185  
ªt
;

186 
	}
}

188 
swupd©e_cfg
 *
	$gë_swupd©e_cfg
() {

189  &
swcfg
;

190 
	}
}

196 
	$›t_to_hwªv
(*
∑øm
, 
hw_ty≥
 *
hw
)

198 *
s
;

201 i‡(!
∑øm
)

204 
s
 = 
	`°rchr
(
∑øm
, ':');

206 i‡(!
s
) {

207 
	`ERROR
("YouÖass Hardware Revision in wrong format: %s",

208 
∑øm
);

209  -
EINVAL
;

212 
	`°∫˝y
(
hw
->
ªvisi⁄
, 
s
 + 1, (hw->revision));

213 *
s
 = '\0';

214 
	`°∫˝y
(
hw
->
bﬂrd«me
, 
∑øm
, (hw->boardname));

216 i‡(!
	`°æí
(
hw
->
bﬂrd«me
Ë|| !°æí(hw->
ªvisi⁄
))

217  -
EINVAL
;

220 
	}
}

222 
	$£¨chög_f‹_image
(*
«me
)

224 *
dú
, *
dúc
, *
ba£c
;

225 *
Â©ã∫
;

226 
DIR
 *
∑th
;

227 
dúít
 *
dp
;

228 
fd
 = -1;

229 
found
;

230 
‚ame
[
MAX_IMAGE_FNAME
];

231 *
buf
;

232 
hex
[4];

234 
dúc
 = 
	`°rdup
(
«me
);

235 
ba£c
 = 
	`°rdup
(
«me
);

236 
dú
 = 
	`dú«me
(
dúc
);

237 
Â©ã∫
 = 
	`ba£«me
(
ba£c
);

238 
∑th
 = 
	`›ídú
(
dú
);

240 
	`TRACE
("Searching image: check %s into %s",

241 
ba£c
, 
dúc
);

242 i‡(!
∑th
) {

243 
	`‰ì
(
dúc
);

244 
	`‰ì
(
ba£c
);

245  -
EBADF
;

248 
dp
 = 
	`ªaddú
(
∑th
);

250 i‡(!
dp
)

252 i‡(!
	`°rcmp
(
dp
->
d_«me
, ".") ||

253 !
	`°rcmp
(
dp
->
d_«me
, "..") ||

254 !
	`°æí
(
dp
->
d_«me
))

256 
found
 = !
	`‚m©ch
(
Â©ã∫
, 
dp
->
d_«me
, 
FNM_CASEFOLD
);

258 i‡(
found
) {

259 
	`TRACE
("Fûêfound: %†:", 
dp
->
d_«me
);

261 
buf
 = (*)
	`mÆloc
(3 * 
	`°æí
(
dp
->
d_«me
) + 1);

262 i‡(
buf
) {

263 
size_t
 
i
 = 0; i < 
	`°æí
(
dp
->
d_«me
); i++) {

264 
	`¢¥ötf
(
hex
, (hex), "%x ", 
dp
->
d_«me
[
i
]);

265 
	`mem˝y
(&
buf
[3 * 
i
], 
hex
, 3);

267 
buf
[3 * 
	`°æí
(
dp
->
d_«me
)] = '\0';

268 
	`TRACE
("\nFûê«mê(hex): %s", 
buf
);

271 i‡(
fd
 < 0) {

272 i‡(
	`¢¥ötf
(
‚ame
, (fname), "%s/%s",

273 
dúc
, 
dp
->
d_«me
Ë>()(
‚ame
)) {

274 
	`ERROR
("P©hÅoÿl⁄g: %s/%s", 
dúc
, 
dp
->
d_«me
);

276 
fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
);

277 i‡(
fd
 > 0)

278 
	`TRACE
("\t\t**Used for upgrade");

280 
	`‰ì
(
buf
);

283 } (
dp
 = 
	`ªaddú
(
∑th
)Ë!=
NULL
);

285 
	`‰ì
(
dúc
);

286 
	`‰ì
(
ba£c
);

288  
fd
;

289 
	}
}

291 
	$ö°Æl_‰om_fûe
(*
‚ame
, 
check
)

293 
fdsw
;

294 
off_t
 
pos
;

295 
ªt
;

298 i‡(!
	`°æí
(
‚ame
)) {

299 
	`ERROR
("ImageÇot found...pleaseÑeboot");

300 
	`exô
(
EXIT_FAILURE
);

303 
fdsw
 = 
	`›í
(
‚ame
, 
O_RDONLY
);

304 i‡(
fdsw
 < 0) {

305 
fdsw
 = 
	`£¨chög_f‹_image
(
‚ame
);

306 i‡(
fdsw
 < 0) {

307 
	`ERROR
("Image Software cannot beÑead...exiting !");

308 
	`exô
(
EXIT_FAILURE
);

312 
pos
 = 0;

313 
ªt
 = 
	`exåa˘_sw_des¸ùti⁄
(
fdsw
, 
SW_DESCRIPTION_FILENAME
, &
pos
);

314 #ifde‡
CONFIG_SIGNED_IMAGES


315 
ªt
 |
	`exåa˘_sw_des¸ùti⁄
(
fdsw
, 
SW_DESCRIPTION_FILENAME
 ".sig",

316 &
pos
);

321 i‡(
ªt
) {

322 
	`ERROR
("FailedÅoÉxtract meta information");

323 
	`exô
(
EXIT_FAILURE
);

326 * 
swdescfûíame
 = 
	`Æloˇ
(
	`°æí
(
	`gë_tmpdú
())+°æí(
SW_DESCRIPTION_FILENAME
)+1);

327 
	`•rötf
(
swdescfûíame
, "%s%s", 
	`gë_tmpdú
(), 
SW_DESCRIPTION_FILENAME
);

328 
ªt
 = 
	`∑r£
(&
swcfg
, 
swdescfûíame
);

329 i‡(
ªt
) {

330 
	`ERROR
("ÁûedÅÿ∑r£ " 
SW_DESCRIPTION_FILENAME
 "!");

331 
	`exô
(
EXIT_FAILURE
);

334 i‡(
	`check_hw_com∑tibûôy
(&
swcfg
)) {

335 
	`ERROR
("SWÇot compatible with hardware");

336 
	`exô
(
EXIT_FAILURE
);

339 i‡(
	`˝io_sˇn
(
fdsw
, &
swcfg
, 
pos
) < 0) {

340 
	`ERROR
("ÁûedÅÿsˇ¿f‹Öo†'%ld'!", 
pos
);

341 
	`˛o£
(
fdsw
);

342 
	`exô
(
EXIT_FAILURE
);

349 
ªt
 = 
	`check_¥ovided
(&
swcfg
.
images
);

350 i‡(
ªt
) {

351 
	`ERROR
("failedÅo check images!");

352 
	`exô
(
EXIT_FAILURE
);

354 
ªt
 = 
	`check_¥ovided
(&
swcfg
.
s¸ùts
);

355 i‡(
ªt
) {

356 
	`ERROR
("failedÅo check scripts!");

357 
	`exô
(
EXIT_FAILURE
);

360 i‡(
check
) {

361 
	`Ârötf
(
°dout
, "suc˚ssfuŒy checked '%s'\n", 
‚ame
);

362 
	`exô
(
EXIT_SUCCESS
);

365 #ifde‡
CONFIG_MTD


366 
	`mtd_˛ónup
();

367 
	`sˇn_mtd_devi˚s
();

372 
	`boŸlﬂdî_ív_£t
(
BOOTVAR_TRANSACTION
, "in_progress");

374 
ªt
 = 
	`ö°Æl_images
(&
swcfg
, 
fdsw
, 1);

376 
	`swupd©e_¥ogªss_íd
(
ªt
 =0 ? 
SUCCESS
 : 
FAILURE
);

378 
	`˛o£
(
fdsw
);

380 i‡(
ªt
) {

381 
	`Ârötf
(
°dout
, "Software updated failed\n");

382  
EXIT_FAILURE
;

385 
	`boŸlﬂdî_ív_un£t
(
BOOTVAR_TRANSACTION
);

386 
	`Ârötf
(
°dout
, "Software updated successfully\n");

387 
	`Ârötf
(
°dout
, "PleaseÑebootÅhe deviceÅo startÅheÇew software\n");

389  
EXIT_SUCCESS
;

390 
	}
}

392 
	$∑r£_image_£À˘‹
(c⁄° *
£À˘‹
, 
swupd©e_cfg
 *
sw
)

394 *
pos
;

395 
size_t
 
Àn
;

397 
pos
 = 
	`°rchr
(
£À˘‹
, ',');

398 i‡(
pos
 =
NULL
)

399  -
EINVAL
;

401 
Àn
 = 
pos
 - 
£À˘‹
;

402 i‡(
Àn
 > (
sw
->
so·w¨e_£t
))

403 
Àn
 = (
sw
->
so·w¨e_£t
);

405 
	`°∫˝y
(
sw
->
so·w¨e_£t
, 
£À˘‹
, 
Àn
);

407 
	`°∫˝y
(
sw
->
ru¬ög_mode
, 
pos
 + 1, (sw->running_mode));

409 i‡(
	`°æí
(
sw
->
so·w¨e_£t
Ë=0 || såÀn(sw->
ru¬ög_mode
) == 0)

410  -
EINVAL
;

413 
	}
}

415 
	$¸óã_dúe˘‹y
(c⁄° * 
∑th
) {

416 * 
d∑th
 = 
	`Æloˇ
(
	`°æí
(
	`gë_tmpdú
())+°æí(
∑th
)+1);

417 
	`•rötf
(
d∑th
, "%s%s", 
	`gë_tmpdú
(), 
∑th
);

418 
	`mkdú
(
d∑th
, 0777);

419 
	}
}

421 #i‚de‡
CONFIG_NOCLEANUP


422 
	$_ªmove_dúe˘‹y_cb
(c⁄° *
Â©h
, c⁄° 
°©
 *
sb
,

423 
ty≥Êag
, 
FTW
 *
·wbuf
)

425 ()
sb
;

426 ()
ty≥Êag
;

427 ()
·wbuf
;

428  
	`ªmove
(
Â©h
);

429 
	}
}

431 
	$ªmove_dúe˘‹y
(c⁄° * 
∑th
)

433 * 
d∑th
 = 
	`Æloˇ
(
	`°æí
(
	`gë_tmpdú
())+°æí(
∑th
)+1);

434 
	`•rötf
(
d∑th
, "%s%s", 
	`gë_tmpdú
(), 
∑th
);

435  
	`n·w
(
d∑th
, 
_ªmove_dúe˘‹y_cb
, 64, 
FTW_DEPTH
 | 
FTW_PHYS
);

436 
	}
}

439 
	$swupd©e_˛ónup
()

441 #i‚de‡
CONFIG_NOCLEANUP


442 
	`ªmove_dúe˘‹y
(
SCRIPTS_DIR_SUFFIX
);

443 
	`ªmove_dúe˘‹y
(
DATADST_DIR_SUFFIX
);

445 
	}
}

447 
	$swupd©e_öô
(
swupd©e_cfg
 *
sw
)

450 
	`mem£t
(
sw
, 0, (*sw));

451 
	`LIST_INIT
(&
sw
->
images
);

452 
	`LIST_INIT
(&
sw
->
h¨dw¨e
);

453 
	`LIST_INIT
(&
sw
->
s¸ùts
);

454 
	`LIST_INIT
(&
sw
->
boŸs¸ùts
);

455 
	`LIST_INIT
(&
sw
->
boŸlﬂdî
);

456 
	`LIST_INIT
(&
sw
->
exçrocs
);

457 
sw
->
globÆs
.
˚π_puΩo£
 = 
SSL_PURPOSE_DEFAULT
;

461 
	`¸óã_dúe˘‹y
(
SCRIPTS_DIR_SUFFIX
);

462 
	`¸óã_dúe˘‹y
(
DATADST_DIR_SUFFIX
);

464 i‡(
	`©exô
(
swupd©e_˛ónup
) != 0) {

465 
	`TRACE
("Cannot setup SWUpdate cleanup onÉxit");

468 #ifde‡
CONFIG_MTD


469 
	`mtd_öô
();

470 
	`ubi_öô
();

472 
	}
}

474 
	$∑r£_˚π_puΩo£
(c⁄° *
ãxt
)

476 c⁄° 
CODE_SIGN
[] = "codeSigning";

477 c⁄° 
EMAIL_PROT
[] = "emailProtection";

479 i‡(
	`°∫cmp
(
CODE_SIGN
, 
ãxt
, (CODE_SIGN)) == 0)

480  
SSL_PURPOSE_CODE_SIGN
;

482 i‡(
	`°∫cmp
(
EMAIL_PROT
, 
ãxt
, (EMAIL_PROT)) == 0)

483  
SSL_PURPOSE_EMAIL_PROT
;

485 
	`ERROR
("unknow¿˚πifiˇãÖuΩo£ '%s'\n", 
ãxt
);

486 
	`exô
(
EXIT_FAILURE
);

487 
	}
}

489 
	$ªad_globÆs_£âögs
(*
ñem
, *
d©a
)

491 
tmp
[
SWUPDATE_GENERAL_STRING_SIZE
] = "";

492 
swupd©e_cfg
 *
sw
 = (swupd©e_cfg *)
d©a
;

494 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
,

495 "public-key-fûe", 
sw
->
globÆs
.
publickey‚ame
);

496 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
,

497 "ˇ-∑th", 
sw
->
globÆs
.
publickey‚ame
);

498 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
,

499 "´s-key-fûe", 
sw
->
globÆs
.
´skey‚ame
);

500 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
,

501 "mtd-bœckli°", 
sw
->
globÆs
.
mtdbœckli°
);

502 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
,

503 "po°upd©ecmd", 
sw
->
globÆs
.
po°upd©ecmd
);

504 
	`gë_fõld
(
LIBCFG_PARSER
, 
ñem
, "vîbo£", &
sw
->
globÆs
.
vîbo£
);

505 
	`gë_fõld
(
LIBCFG_PARSER
, 
ñem
, "logÀvñ", &
sw
->
globÆs
.
logÀvñ
);

506 
	`gë_fõld
(
LIBCFG_PARSER
, 
ñem
, "sy¶og", &
sw
->
globÆs
.
sy¶og_íabÀd
);

507 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
,

508 "no-downgødög", 
sw
->
globÆs
.
möimum_vîsi⁄
);

509 i‡(
	`°æí
(
sw
->
globÆs
.
möimum_vîsi⁄
))

510 
sw
->
globÆs
.
no_downgødög
 = 1;

511 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
,

512 "no-ªö°Ælög", 
sw
->
globÆs
.
cuºít_vîsi⁄
);

513 i‡(
	`°æí
(
sw
->
globÆs
.
cuºít_vîsi⁄
))

514 
sw
->
globÆs
.
no_ªö°Ælög
 = 1;

515 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
,

516 "˚π-puΩo£", 
tmp
);

517 i‡(
tmp
[0] != '\0')

518 
sw
->
globÆs
.
˚π_puΩo£
 = 
	`∑r£_˚π_puΩo£
(
tmp
);

519 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
, "forced-signer-name",

520 
sw
->
globÆs
.
f‹˚d_sig√r_«me
);

523 
	}
}

525 
	$ªad_¥o˚s£s_£âögs
(*
£âögs
, *
d©a
)

527 
swupd©e_cfg
 *
sw
 = (swupd©e_cfg *)
d©a
;

528 *
ñem
;

529 
cou¡
, 
i
;

530 
exçroc
 *
¥oc
, *
œ°
 = 
NULL
;

532 
cou¡
 = 
	`gë_¨øy_Àngth
(
LIBCFG_PARSER
, 
£âögs
);

534 
i
 = 0; i < 
cou¡
; ++i) {

535 
ñem
 = 
	`gë_ñem_‰om_idx
(
LIBCFG_PARSER
, 
£âögs
, 
i
);

537 i‡(!
ñem
)

540 if(!(
	`exi°_fõld_°rög
(
LIBCFG_PARSER
, 
ñem
, "name")))

542 if(!(
	`exi°_fõld_°rög
(
LIBCFG_PARSER
, 
ñem
, "exec")))

545 
¥oc
 = (
exçroc
 *)
	`ˇŒoc
(1, (extproc));

547 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
, "«me", 
¥oc
->
«me
);

548 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
, "exec", 
¥oc
->
exec
);

550 i‡(!
œ°
)

551 
	`LIST_INSERT_HEAD
(&
sw
->
exçrocs
, 
¥oc
, 
√xt
);

553 
	`LIST_INSERT_AFTER
(
œ°
, 
¥oc
, 
√xt
);

555 
œ°
 = 
¥oc
;

557 
	`TRACE
("ExternalÖrocess \"%s\": \"%s %s\" will be started",

558 
¥oc
->
«me
,Öroc->
exec
,Öroc->
›ti⁄s
);

562 
	}
}

564 
sigãrm_h™dÀr
(
__©åibuã__
 ((
__unu£d__
)Ë
signum
)

566 
±hªad_ˇn˚l
(
√tw‹k_d´m⁄
);

569 
	$maö
(
¨gc
, **
¨gv
)

571 
c
;

572 
‚ame
[
MAX_IMAGE_FNAME
];

573 *
cfg‚ame
 = 
NULL
;

574 c⁄° *
so·w¨e_£À˘
 = 
NULL
;

575 
›t_i
 = 0;

576 
›t_e
 = 0;

577 
›t_c
 = 0;

578 
image_uæ
[
MAX_URL
];

579 
maö_›ti⁄s
[256];

580 
public_key_m™d©‹y
 = 0;

581 
siga˘i⁄
 
ß
;

582 
ªsu…
 = 
EXIT_SUCCESS
;

583 #ifde‡
CONFIG_SURICATTA


584 
›t_u
 = 0;

585 
suriˇâa›ti⁄s
[1024];

586 **
¨gvÆues
 = 
NULL
;

587 
¨gcou¡
 = 0;

589 #ifde‡
CONFIG_WEBSERVER


590 
›t_w
 = 0;

591 
web›ti⁄s
[1024];

592 **
av
 = 
NULL
;

593 
ac
 = 0;

595 #ifde‡
CONFIG_DOWNLOAD


596 
›t_d
 = 0;

597 
dwl›ti⁄s
[1024];

599 **
dwœv
 = 
NULL
;

600 
dwœc
 = 0;

602 #ifde‡
CONFIG_MTD


603 
	`mem£t
(&
Êashdesc
, 0, (flashdesc));

605 
	`mem£t
(
maö_›ti⁄s
, 0, (main_options));

606 
	`mem£t
(
image_uæ
, 0, (image_url));

607 
	`°r˝y
(
maö_›ti⁄s
, "vhni:e:l:Lcf:p:o:N:R:");

608 #ifde‡
CONFIG_MTD


609 
	`°rˇt
(
maö_›ti⁄s
, "b:");

611 #ifde‡
CONFIG_DOWNLOAD


612 
	`°rˇt
(
maö_›ti⁄s
, "d:");

614 #ifde‡
CONFIG_SURICATTA


615 
	`°rˇt
(
maö_›ti⁄s
, "u:");

617 #ifde‡
CONFIG_WEBSERVER


618 
	`°rˇt
(
maö_›ti⁄s
, "w:");

620 #ifde‡
CONFIG_HW_COMPATIBILITY


621 
	`°rˇt
(
maö_›ti⁄s
, "H:");

623 #ifde‡
CONFIG_SIGNED_IMAGES


624 
	`°rˇt
(
maö_›ti⁄s
, "k:");

625 
public_key_m™d©‹y
 = 1;

627 #ifde‡
CONFIG_ENCRYPTED_IMAGES


628 
	`°rˇt
(
maö_›ti⁄s
, "K:");

631 
	`mem£t
(
‚ame
, 0, (fname));

634 
	`swupd©e_öô
(&
swcfg
);

640 
	`nŸify_öô
();

647 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
maö_›ti⁄s
,

648 
l⁄g_›ti⁄s
, 
NULL
)Ë!
EOF
) {

649 
c
) {

651 
cfg‚ame
 = 
	`sdup
(
›èrg
);

652 i‡(
	`ªad_moduÀ_£âögs
(
cfg‚ame
, "globals",

653 
ªad_globÆs_£âögs
, &
swcfg
)) {

654 
	`Ârötf
(
°dîr
,

656 
	`exô
(
EXIT_FAILURE
);

659 
logÀvñ
 = 
swcfg
.
globÆs
.loglevel;

660 i‡(
swcfg
.
globÆs
.
vîbo£
)

661 
logÀvñ
 = 
TRACELEVEL
;

663 
ªt
 = 
	`ªad_moduÀ_£âögs
(
cfg‚ame
, "processes",

664 
ªad_¥o˚s£s_£âögs
,

665 &
swcfg
);

669 i‡(
ªt
 =-
EINVAL
) {

670 
	`Ârötf
(
°dîr
,

672 
	`exô
(
EXIT_FAILURE
);

676 
	`¥ötf
("%s", 
BANNER
);

677 
	`exô
(
EXIT_SUCCESS
);

681 
	`¥ötf
("%s\n", 
BANNER
);

682 
	`¥ötf
("Licensed under GPLv2. See source distribution for detailed "

692 
›töd
 = 0;

695 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
maö_›ti⁄s
,

696 
l⁄g_›ti⁄s
, 
NULL
)Ë!
EOF
) {

697 i‡(
›èrg
 && *›èrg ='-' && (
c
 != 'd' && c != 'u' && c != 'w')) {

702 
c
 = '?';

704 
c
) {

706 
logÀvñ
 = 
TRACELEVEL
;

708 #ifde‡
CONFIG_UBIATTACH


710 
	`mtd_£t_ubibœckli°
(
›èrg
);

714 
	`°∫˝y
(
‚ame
, 
›èrg
, (fname));

715 
›t_i
 = 1;

718 
	`°∫˝y
(
swcfg
.
ouçut
, 
›èrg
, (swcfg.output));

721 
logÀvñ
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

724 
swcfg
.
globÆs
.
dry_run
 = 1;

727 
swcfg
.
globÆs
.
sy¶og_íabÀd
 = 1;

730 
	`°∫˝y
(
swcfg
.
globÆs
.
publickey‚ame
,

731 
›èrg
,

732 (
swcfg
.
globÆs
.
publickey‚ame
));

735 
swcfg
.
globÆs
.
˚π_puΩo£
 = 
	`∑r£_˚π_puΩo£
(
›èrg
);

738 
	`°∫˝y
(
swcfg
.
globÆs
.
f‹˚d_sig√r_«me
, 
›èrg
,

739 (
swcfg
.
globÆs
.
f‹˚d_sig√r_«me
));

741 #ifde‡
CONFIG_ENCRYPTED_IMAGES


743 
	`°∫˝y
(
swcfg
.
globÆs
.
´skey‚ame
,

744 
›èrg
,

745 (
swcfg
.
globÆs
.
´skey‚ame
));

749 
swcfg
.
globÆs
.
no_downgødög
 = 1;

750 
	`°∫˝y
(
swcfg
.
globÆs
.
möimum_vîsi⁄
, 
›èrg
,

751 (
swcfg
.
globÆs
.
möimum_vîsi⁄
));

754 
swcfg
.
globÆs
.
no_ªö°Ælög
 = 1;

755 
	`°∫˝y
(
swcfg
.
globÆs
.
cuºít_vîsi⁄
, 
›èrg
,

756 (
swcfg
.
globÆs
.
cuºít_vîsi⁄
));

759 
so·w¨e_£À˘
 = 
›èrg
;

760 
›t_e
 = 1;

766 
	`ußge
(
¨gv
[0]);

767 
	`exô
(
EXIT_SUCCESS
);

769 #ifde‡
CONFIG_DOWNLOAD


771 ()
	`¢¥ötf
(
dwl›ti⁄s
, (dwl›ti⁄s), "%†%s", 
¨gv
[0], 
›èrg
);

772 
dwœv
 = 
	`•lô¨gs
(
dwl›ti⁄s
, &
dwœc
);

773 
›t_d
 = 1;

777 i‡(
	`›t_to_hwªv
(
›èrg
, &
swcfg
.
hw
) < 0)

778 
	`exô
(
EXIT_FAILURE
);

780 #ifde‡
CONFIG_SURICATTA


782 ()
	`¢¥ötf
(
suriˇâa›ti⁄s
, (suriˇâa›ti⁄s), "%†%s", 
¨gv
[0], 
›èrg
);

783 
¨gvÆues
 = 
	`•lô¨gs
(
suriˇâa›ti⁄s
, &
¨gcou¡
);

784 
›t_u
 = 1;

787 #ifde‡
CONFIG_WEBSERVER


789 
	`¢¥ötf
(
web›ti⁄s
, (web›ti⁄s), "%†%s", 
¨gv
[0], 
›èrg
);

790 
av
 = 
	`•lô¨gs
(
web›ti⁄s
, &
ac
);

791 
›t_w
 = 1;

795 
›t_c
 = 1;

798 
	`°∫˝y
(
swcfg
.
globÆs
.
po°upd©ecmd
, 
›èrg
,

799 (
swcfg
.
globÆs
.
po°upd©ecmd
));

802 
	`ußge
(
¨gv
[0]);

803 
	`exô
(
EXIT_FAILURE
);

808 i‡(
›töd
 < 
¨gc
) {

810 
	`ußge
(
¨gv
[0]);

811 
	`exô
(
EXIT_FAILURE
);

818 i‡(
public_key_m™d©‹y
 && !
	`°æí
(
swcfg
.
globÆs
.
publickey‚ame
)) {

819 
	`Ârötf
(
°dîr
,

821 
	`ußge
(
¨gv
[0]);

822 
	`exô
(
EXIT_FAILURE
);

825 i‡(
›t_c
 && !
›t_i
) {

826 
	`Ârötf
(
°dîr
,

828 
	`ußge
(
¨gv
[0]);

829 
	`exô
(
EXIT_FAILURE
);

832 i‡(
›t_i
 && 
	`°æí
(
swcfg
.
ouçut
)) {

833 
	`Ârötf
(
°dîr
,

835 
	`ußge
(
¨gv
[0]);

836 
	`exô
(
EXIT_FAILURE
);

839 #ifde‡
CONFIG_SURICATTA


840 i‡(
›t_u
 && (
›t_c
 || 
›t_i
)) {

841 
	`Ârötf
(
°dîr
, "invalid mode combination with suricatta.\n");

842 
	`exô
(
EXIT_FAILURE
);

846 
	`swupd©e_¸y±o_öô
();

848 i‡(
	`°æí
(
swcfg
.
globÆs
.
publickey‚ame
)) {

849 i‡(
	`swupd©e_dg°_öô
(&
swcfg
, swcfg.
globÆs
.
publickey‚ame
)) {

850 
	`Ârötf
(
°dîr
,

852 
	`exô
(
EXIT_FAILURE
);

860 
	`mem£t
(&
ß
, 0, (sa));

861 
ß
.
ß_h™dÀr
 = 
sigchld_h™dÀr
;

862 
	`siga˘i⁄
(
SIGCHLD
, &
ß
, 
NULL
);

868 i‡(!
›t_c
) {

870 #i‡
	`deföed
(
CONFIG_MONGOOSE
)

871 i‡(
›t_w
) {

872 
	`°¨t_sub¥o˚ss
(
SOURCE_WEBSERVER
, "webserver",

873 
cfg‚ame
, 
ac
, 
av
,

874 
°¨t_m⁄goo£
);

875 
	`‰ì¨gs
(
av
);

879 #i‡
	`deföed
(
CONFIG_SURICATTA
)

880 i‡(
›t_u
) {

881 
	`°¨t_sub¥o˚ss
(
SOURCE_SURICATTA
, "suricatta",

882 
cfg‚ame
, 
¨gcou¡
,

883 
¨gvÆues
, 
°¨t_suriˇâa
);

885 
	`‰ì¨gs
(
¨gvÆues
);

889 #ifde‡
CONFIG_DOWNLOAD


890 i‡(
›t_d
) {

891 
	`°¨t_sub¥o˚ss
(
SOURCE_DOWNLOADER
, "download",

892 
cfg‚ame
, 
dwœc
,

893 
dwœv
, 
°¨t_dow∆ﬂd
);

894 
	`‰ì¨gs
(
dwœv
);

901 
exçroc
 *
¥oc
;

903 
	`LIST_FOREACH
(
¥oc
, &
swcfg
.
exçrocs
, 
√xt
) {

904 
dwœv
 = 
	`•lô¨gs
(
¥oc
->
exec
, &
dwœc
);

906 
dwœv
[
dwœc
] = 
NULL
;

908 
	`°¨t_sub¥o˚ss_‰om_fûe
(
SOURCE_UNKNOWN
, 
¥oc
->
«me
,

909 
cfg‚ame
, 
dwœc
,

910 
dwœv
, dwlav[0]);

912 
	`‰ì¨gs
(
dwœv
);

916 #ifde‡
CONFIG_UBIATTACH


917 i‡(
	`°æí
(
swcfg
.
globÆs
.
mtdbœckli°
))

918 
	`mtd_£t_ubibœckli°
(
swcfg
.
globÆs
.
mtdbœckli°
);

925 i‡(
	`°æí
(
swcfg
.
globÆs
.
´skey‚ame
)) {

926 i‡(
	`lﬂd_de¸y±i⁄_key
(
swcfg
.
globÆs
.
´skey‚ame
)) {

927 
	`Ârötf
(
°dîr
,

929 
	`exô
(
EXIT_FAILURE
);

933 
	`lua_h™dÀrs_öô
();

935 if(!
	`gë_hw_ªvisi⁄
(&
swcfg
.
hw
))

936 
	`¥ötf
("Ru¬ög o¿%†Revisi⁄ %s\n", 
swcfg
.
hw
.
bﬂrd«me
, swcfg.hw.
ªvisi⁄
);

938 
	`¥öt_ªgi°îed_h™dÀrs
();

939 i‡(
swcfg
.
globÆs
.
sy¶og_íabÀd
) {

940 i‡(
	`sy¶og_öô
()) {

941 
	`ERROR
("failedÅo initialize syslogÇotifier");

945 i‡(
›t_e
) {

946 i‡(
	`∑r£_image_£À˘‹
(
so·w¨e_£À˘
, &
swcfg
)) {

947 
	`Ârötf
(
°dîr
, "Incorrect select option format\n");

948 
	`exô
(
EXIT_FAILURE
);

950 
	`Ârötf
(
°dîr
, "software set: %s mode: %s\n",

951 
swcfg
.
so·w¨e_£t
, swcfg.
ru¬ög_mode
);

955 
	`gë_sw_vîsi⁄s
(
cfg‚ame
, &
swcfg
);

961 i‡(!
›t_c
) {

962 
√tw‹k_d´m⁄
 = 
	`°¨t_thªad
(
√tw‹k_öôülizî
, &
swcfg
);

964 
	`°¨t_thªad
(
¥ogªss_b¨_thªad
, 
NULL
);

967 i‡(
›t_i
) {

969 
ªsu…
 = 
	`ö°Æl_‰om_fûe
(
‚ame
, 
›t_c
);

970 
ªsu…
) {

971 
EXIT_FAILURE
:

972 
	`boŸlﬂdî_ív_£t
(
BOOTVAR_TRANSACTION
, "failed");

974 
EXIT_SUCCESS
:

975 
	`nŸify
(
SUCCESS
, 0, 
INFOLEVEL
, 
NULL
);

976 i‡(
	`po°upd©e
(&
swcfg
, 
NULL
) != 0) {

977 
	`ERROR
("Post-update commandÉxecution failed.");

981 
	`˛ónup_fûes
(&
swcfg
);

984 #ifde‡
CONFIG_SYSTEMD


985 i‡(
	`sd_boŸed
()) {

986 
	`sd_nŸify
(0, "READY=1");

995 
	`mem£t
(&
ß
, 0, (sa));

996 
ß
.
ß_h™dÀr
 = 
sigãrm_h™dÀr
;

997 
	`siga˘i⁄
(
SIGTERM
, &
ß
, 
NULL
);

1002 i‡(!
›t_c
 && !
›t_i
)

1003 
	`±hªad_joö
(
√tw‹k_d´m⁄
, 
NULL
);

1005  
ªsu…
;

1006 
	}
}

	@swupdate/core/syslog.c

7 
	~<sy¶og.h
>

8 
	~<°dio.h
>

9 
	~"utû.h
"

11 
sy¶og_nŸifõr
(
RECOVERY_STATUS
 
°©us
, 
îr‹
, 
Àvñ
, c⁄° *
msg
);

13 
	$sy¶og_öô
()

15 
	`£éogmask
(
	`LOG_UPTO
(
LOG_DEBUG
));

16  
	`ªgi°î_nŸifõr
(
sy¶og_nŸifõr
);

17 
	}
}

19 
	$sy¶og_nŸifõr
(
RECOVERY_STATUS
 
°©us
, 
îr‹
, 
Àvñ
, c⁄° *
msg
)

21 c⁄° * 
°©usMsg
;

23 
	`›ílog
("swupd©e", 0, 
LOG_USER
);

25 
°©us
) {

26 
IDLE
: 
°©usMsg
 = "IDLE"; ;

27 
DOWNLOAD
: 
°©usMsg
 = "DOWNLOAD"; ;

28 
START
: 
°©usMsg
 = "START"; ;

29 
RUN
: 
°©usMsg
 = "RUN"; ;

30 
SUCCESS
: 
°©usMsg
 = "SUCCESS"; ;

31 
FAILURE
: 
°©usMsg
 = "FAILURE"; ;

32 
DONE
: 
°©usMsg
 = "DONE"; ;

33 : 
°©usMsg
 = "UNKNOWN"; ;

36 
log¥io
 = 
LOG_INFO
;

37 
Àvñ
) {

38 
ERRORLEVEL
: 
log¥io
 = 
LOG_ERR
; ;

39 
WARNLEVEL
: 
log¥io
 = 
LOG_WARNING
; ;

40 
INFOLEVEL
: 
log¥io
 = 
LOG_INFO
; ;

41 
DEBUGLEVEL
:

42 
TRACELEVEL
: 
log¥io
 = 
LOG_DEBUG
; ;

45 
	`sy¶og
(
log¥io
, "%s%†%s\n", ((
îr‹
 !()
RECOVERY_NO_ERROR
Ë? "FATAL_" : ""), 
°©usMsg
, 
msg
);

47 
	`˛o£log
();

48 
	}
}

	@swupdate/core/util.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<°rög.h
>

12 
	~<˘y≥.h
>

13 
	~<î∫o.h
>

14 
	~<f˙é.h
>

15 
	~<sys/fûe.h
>

16 
	~<sys/°©.h
>

17 
	~<sys/∑øm.h
>

18 
	~<sys/mou¡.h
>

19 
	~<sys/time.h
>

20 
	~<sys/uio.h
>

21 
	~<dúít.h
>

22 
	~<limôs.h
>

23 
	~<time.h
>

24 
	~<libgí.h
>

26 
	~"swupd©e.h
"

27 
	~"utû.h
"

28 
	~"gíî©ed/autoc⁄f.h
"

35 
	sde¸y±i⁄_key
 {

36 
	mkey
[32];

37 
	mivt
[16];

38 
	mß…
[8];

41 
de¸y±i⁄_key
 *
	g´s_key
 = 
NULL
;

43 *
	$sdup
(c⁄° *
°r
) {

44 *
p
;

45 i‡((
p
 = (*Ë
	`mÆloc
(
	`°æí
(
°r
Ë+ 1)Ë!
NULL
) {

46 
	`°r˝y
(
p
, 
°r
);

48  
p
;

49 
	}
}

51 * 
	gTMPDIR
 = 
NULL
;

52 * 
	gTMPDIRSCRIPT
 = 
NULL
;

54 c⁄° * 
	$gë_tmpdú
()

56 i‡(
TMPDIR
 !
NULL
) {

57  
TMPDIR
;

60 *
ív_tmpdú
 = 
	`gëív
("TMPDIR");

61 i‡(
ív_tmpdú
 =
NULL
) {

62 
TMPDIR
 = (*)"/tmp/";

63  
TMPDIR
;

66 i‡(
ív_tmpdú
[
	`°æí
(env_tmpdir)] == '/') {

67 
TMPDIR
 = 
ív_tmpdú
;

68  
TMPDIR
;

71 i‡(
	`a•rötf
(&
TMPDIR
, "%s/", 
ív_tmpdú
) == -1) {

72 
TMPDIR
 = (*)"/tmp/";

74  
TMPDIR
;

75 
	}
}

77 c⁄° * 
	$gë_tmpdús¸ùts
()

79 i‡(
TMPDIRSCRIPT
 !
NULL
) {

80  
TMPDIRSCRIPT
;

83 i‡(
	`a•rötf
(&
TMPDIRSCRIPT
, "%s%s", 
	`gë_tmpdú
(), 
SCRIPTS_DIR_SUFFIX
) == -1) {

84 
TMPDIRSCRIPT
 = (*)"/tmp/" 
SCRIPTS_DIR_SUFFIX
;

86  
TMPDIRSCRIPT
;

87 
	}
}

89 
	$cou¡¨gc
(*
¨gs
, **
¨gv
)

91 
cou¡
 = 0;

93 
	`is•a˚
 (*
¨gs
))

94 ++
¨gs
;

95 *
¨gs
) {

96 i‡(
¨gv
)

97 
¨gv
[
cou¡
] = 
¨gs
;

98 *
¨gs
 && !
	`is•a˚
 (*args))

99 ++
¨gs
;

100 i‡(
¨gv
 && *
¨gs
)

101 *
¨gs
++ = '\0';

102 
	`is•a˚
 (*
¨gs
))

103 ++
¨gs
;

104 
cou¡
++;

106  
cou¡
;

107 
	}
}

109 **
	$•lô¨gs
(*
¨gs
, *
¨gc
)

111 **
¨gv
 = 
NULL
;

112 
¨gn
 = 0;

114 i‡(
¨gs
 && *args

115 && (
¨gs
 = 
	`°rdup
(args))

116 && (
¨gn
 = 
	`cou¡¨gc
(
¨gs
, 
NULL
))

117 && (
¨gv
 = 
	`mÆloc
((
¨gn
 + 2) *  (*)))) {

118 *
¨gv
++ = 
¨gs
;

119 
¨gn
 = 
	`cou¡¨gc
(
¨gs
, 
¨gv
);

120 
¨gv
[
¨gn
] = 
NULL
;

123 i‡(
¨gs
 && !
¨gv
)

124 
	`‰ì
 (
¨gs
);

126 *
¨gc
 = 
¨gn
;

127  
¨gv
;

128 
	}
}

130 
	$‰ì¨gs
 (**
¨gv
)

132 i‡(
¨gv
) {

133 
	`‰ì
(
¨gv
[-1]);

134 
	`‰ì
(
¨gv
 - 1);

136 
	}
}

143 *
	$m°rˇt
(c⁄° **
nodes
, c⁄° *
dñim
)

145 c⁄° **
node
;

146 *
de°
 = 
NULL
, *
buf
 = NULL;

148 i‡(!
dñim
)

149 
dñim
 = "";

150 
node
 = 
nodes
; *nodê!
NULL
;Çode++) {

152 i‡(!
de°
) {

153 
de°
 = 
	`°rdup
(*
node
);

154 i‡(!
de°
)

155  
NULL
;

157 i‡(
	`a•rötf
(&
buf
, "%s%s%s", 
de°
, 
dñim
, *
node
) ==

158 
ENOMEM_ASPRINTF
) {

159 
	`ERROR
("PathÅooÜong, OOM");

160 
	`‰ì
(
de°
);

161  
NULL
;

167 
	`‰ì
(
de°
);

168 
de°
 = 
buf
;

171  
de°
;

172 
	}
}

174 
	$›ífûeouçut
(c⁄° *
fûíame
)

176 
fdout
;

178 
fdout
 = 
	`›í
(
fûíame
, 
O_CREAT
 | 
O_WRONLY
 | 
O_TRUNC
, 
S_IRUSR
 | 
S_IWUSR
 );

179 i‡(
fdout
 < 0)

180 
	`ERROR
("I c™nŸ o≥¿%†%d", 
fûíame
, 
î∫o
);

182  
fdout
;

183 
	}
}

185 
	$mk∑th
(*
dú
, 
mode_t
 
mode
)

187 i‡(!
dú
) {

188  -
EINVAL
;

191 i‡(
	`°æí
(
dú
) == 1 && dir[0] == '/')

194 
	`mk∑th
(
	`dú«me
(
	`°rdu∑
(
dú
)), 
mode
);

196 i‡(
	`mkdú
(
dú
, 
mode
) == -1) {

197 i‡(
î∫o
 !
EEXIST
)

201 
	}
}

207 
	$gë_hw_ªvisi⁄
(
hw_ty≥
 *
hw
)

209 
FILE
 *
Â
;

210 
ªt
;

211 *
b1
, *
b2
;

212 #ifde‡
CONFIG_HW_COMPATIBILITY_FILE


213 
	#HW_FILE
 
CONFIG_HW_COMPATIBILITY_FILE


	)

215 
	#HW_FILE
 "/ëc/hwªvisi⁄"

	)

218 i‡(!
hw
)

219  -
EINVAL
;

225 i‡(
	`°æí
(
hw
->
bﬂrd«me
))

228 
	`mem£t
(
hw
->
bﬂrd«me
, 0, (hw->boardname));

229 
	`mem£t
(
hw
->
ªvisi⁄
, 0, (hw->revision));

235 
Â
 = 
	`f›í
(
HW_FILE
, "r");

236 i‡(!
Â
)

239 
ªt
 = 
	`fsˇnf
(
Â
, "%m†%ms", &
b1
, &
b2
);

240 
	`f˛o£
(
Â
);

242 i‡(
ªt
 != 2) {

243 
	`TRACE
("Cannot find Board Revision");

244 if(
ªt
 == 1)

245 
	`‰ì
(
b1
);

249 i‡((
	`°æí
(
b1
Ë> (
SWUPDATE_GENERAL_STRING_SIZE
) - 1) ||

250 (
	`°æí
(
b2
Ë> (
SWUPDATE_GENERAL_STRING_SIZE
 - 1))) {

251 
	`ERROR
("BoardÇame orÑevisionÅooÜong");

255 
	`°∫˝y
(
hw
->
bﬂrd«me
, 
b1
, (hw->boardname));

256 
	`°∫˝y
(
hw
->
ªvisi⁄
, 
b2
, (hw->revision));

258 
	`‰ì
(
b1
);

259 
	`‰ì
(
b2
);

262 
	}
}

268 #ifde‡
CONFIG_HW_COMPATIBILITY


269 
	$check_hw_com∑tibûôy
(
swupd©e_cfg
 *
cfg
)

271 
hw_ty≥
 *
hw
;

272 
ªt
;

274 
ªt
 = 
	`gë_hw_ªvisi⁄
(&
cfg
->
hw
);

275 i‡(
ªt
 < 0)

278 
	`TRACE
("H¨dw¨ê%†Revisi⁄: %s", 
cfg
->
hw
.
bﬂrd«me
, cfg->hw.
ªvisi⁄
);

279 
	`LIST_FOREACH
(
hw
, &
cfg
->
h¨dw¨e
, 
√xt
) {

280 i‡(
hw
 && 
	`°æí
(hw->
ªvisi⁄
Ë=°æí(
cfg
->hw.revision) &&

281 (!
	`°rcmp
(
hw
->
ªvisi⁄
, 
cfg
->hw.revision))) {

282 
	`TRACE
("Hardware compatibility verified");

288 
	}
}

290 
check_hw_com∑tibûôy
(
swupd©e_cfg


291 
__©åibuã__
 ((
__unu£d__
)Ë*
cfg
)

297 
uötmax_t


298 
	$‰om_ascii
 (c⁄° *
whîe
, 
size_t
 
digs
, 
logba£
)

300 
uötmax_t
 
vÆue
 = 0;

301 c⁄° *
buf
 = 
whîe
;

302 c⁄° *
íd
 = 
buf
 + 
digs
;

303 
ovîÊow
 = 0;

304 
codëab
[] = "0123456789ABCDEF";

306 ; *
buf
 == ' '; buf++)

308 i‡(
buf
 =
íd
)

312 i‡(
buf
 =
íd
 || *buf == 0)

316 
d
;

318 *
p
 = 
	`°rchr
 (
codëab
, 
	`touµî
 (*
buf
));

319 i‡(!
p
)

321 
	`ERROR
("MÆf‹medÇumbî %.*s", ()
digs
, 
whîe
);

325 
d
 = 
p
 - 
codëab
;

326 i‡((
d
 >> 
logba£
) > 1)

328 
	`ERROR
("MÆf‹medÇumbî %.*s", ()
digs
, 
whîe
);

331 
vÆue
 +
d
;

332 i‡(++
buf
 =
íd
 || *buf == 0)

334 
ovîÊow
 |
vÆue
 ^ (vÆuê<< 
logba£
 >>Üogbase);

335 
vÆue
 <<
logba£
;

337 i‡(
ovîÊow
)

338 
	`ERROR
("Archive value %.*s is out ofÑange",

339 ()
digs
, 
whîe
);

340  
vÆue
;

341 
	}
}

347 
	$ascii_to_bö
(*
hash
, c⁄° *
s
, 
size_t
 
Àn
)

349 
i
;

350 
vÆ
;

352 i‡(
s
 =
NULL
) {

356 i‡(
Àn
 % 2)

357  -
EINVAL
;

358 i‡(
	`°æí
(
s
Ë=
Àn
) {

359 
i
 = 0; i < 
Àn
; i+= 2) {

360 
vÆ
 = 
	`‰om_ascii
(&
s
[
i
], 2, 
LG_16
);

361 
hash
[
i
 / 2] = 
vÆ
;

367 
	}
}

369 
	$ascii_to_hash
(*
hash
, c⁄° *
s
)

371  
	`ascii_to_bö
(
hash
, 
s
, 64);

372 
	}
}

374 
	$hash_to_ascii
(c⁄° *
hash
, *
°r
)

376 
i
;

377 *
s
 = 
°r
;

379 
i
 = 0; i < 
SHA256_HASH_LENGTH
; i++) {

380 
	`•rötf
(
s
, "%02x", 
hash
[
i
]);

381 
s
 += 2;

383 *
s
 = '\0';

384 
	}
}

389 
	$IsVÆidHash
(c⁄° *
hash
)

391 
i
;

393 i‡(!
hash
)

396 
i
 = 0; i < 
SHA256_HASH_LENGTH
; i++) {

397 i‡(
hash
[
i
] != 0)

402 
	}
}

404 
	$cou¡_ñem_li°
(
imgli°
 *
li°
)

406 
cou¡
 = 0;

407 
img_ty≥
 *
img
;

409 
	`LIST_FOREACH
(
img
, 
li°
, 
√xt
) {

410 
cou¡
++;

413  
cou¡
;

414 
	}
}

416 
	$lﬂd_de¸y±i⁄_key
(*
‚ame
)

418 
FILE
 *
Â
;

419 *
b1
 = 
NULL
, *
b2
 = NULL, *
b3
 = NULL;

420 
ªt
;

422 
Â
 = 
	`f›í
(
‚ame
, "r");

423 i‡(!
Â
)

424  -
EBADF
;

426 
ªt
 = 
	`fsˇnf
(
Â
, "%m†%m†%ms", &
b1
, &
b2
, &
b3
);

427 
ªt
) {

429 
b3
 = 
NULL
;

430 
	`DEBUG
("Ród de¸y±i⁄ keyánd inôüliz©i⁄ ve˘‹ from fûê%s.", 
‚ame
);

433 
	`DEBUG
("Ród de¸y±i⁄ key, inôüliz©i⁄ ve˘‹,ánd sÆà‰om fûê%s.", 
‚ame
);

436 i‡(
b1
 !
NULL
)

437 
	`‰ì
(
b1
);

438 
	`Ârötf
(
°dîr
, "File with decryption key isÇot inÅhe format <key> <ivt>Çor <key> <ivt> <salt>\n");

439 
	`f˛o£
(
Â
);

440  -
EINVAL
;

442 
	`f˛o£
(
Â
);

444 i‡(
´s_key
)

445 
	`‰ì
(
´s_key
);

447 
´s_key
 = (
de¸y±i⁄_key
 *)
	`ˇŒoc
(1, (*aes_key));

448 i‡(!
´s_key
)

449  -
ENOMEM
;

451 
ªt
 = 
	`ascii_to_bö
(
´s_key
->
key
, 
b1
, (aes_key->key) * 2) |

452 
	`ascii_to_bö
(
´s_key
->
ivt
, 
b2
, (aes_key->ivt) * 2) |

453 
	`ascii_to_bö
(
´s_key
->
ß…
, 
b3
, (aes_key->salt) * 2);

455 i‡(
b1
 !
NULL
)

456 
	`‰ì
(
b1
);

457 i‡(
b2
 !
NULL
)

458 
	`‰ì
(
b2
);

459 i‡(
b3
 !
NULL
)

460 
	`‰ì
(
b3
);

462 i‡(
ªt
) {

463 
	`Ârötf
(
°dîr
, "Keysáre invalid\n");

464  -
EINVAL
;

468 
	}
}

470 *
	$gë_´s_key
() {

471 i‡(!
´s_key
)

472  
NULL
;

473  
´s_key
->
key
;

474 
	}
}

476 *
	$gë_´s_ivt
() {

477 i‡(!
´s_key
)

478  
NULL
;

479  
´s_key
->
ivt
;

480 
	}
}

482 *
	$gë_´s_ß…
() {

483 i‡(!
´s_key
)

484  
NULL
;

485  
´s_key
->
ß…
;

486 
	}
}

488 ** 
	$°rög_•lô
(c⁄° * 
ö
, c⁄° 
d
)

490 ** 
ªsu…
 = 0;

491 
size_t
 
cou¡
 = 0;

492 * 
œ°_dñim
 = 0;

493 
dñim
[2];

494 
dñim
[0] = 
d
;

495 
dñim
[1] = 0;

496 *
s
 = 
	`°rdup
(
ö
);

497 * 
tmp
 = 
s
;

498 i‡(!
s
)

499  
NULL
;

502 *
tmp
)

504 i‡(
d
 =*
tmp
)

506 
cou¡
++;

507 
œ°_dñim
 = 
tmp
;

509 
tmp
++;

513 
cou¡
 +
œ°_dñim
 < (
s
 + 
	`°æí
(s) - 1);

517 
cou¡
++;

519 
ªsu…
 = 
	`mÆloc
((*Ë* 
cou¡
);

521 i‡(
ªsu…
)

523 
size_t
 
idx
 = 0;

524 * 
tokí
 = 
	`°πok
(
s
, 
dñim
);

526 
tokí
)

528 *(
ªsu…
 + 
idx
++Ë
	`°rdup
(
tokí
);

529 
tokí
 = 
	`°πok
(0, 
dñim
);

531 *(
ªsu…
 + 
idx
) = 0;

534 
	`‰ì
(
s
);

536  
ªsu…
;

537 
	}
}

543 
	$cou¡_°rög_¨øy
(c⁄° **
nodes
)

545 c⁄° **
ôî
 = 
nodes
;

546 
cou¡
 = 0;

548 *
ôî
 !
NULL
) {

549 
ôî
++;

550 
cou¡
++;

552  
cou¡
;

553 
	}
}

555 
	$‰ì_°rög_¨øy
(**
nodes
)

557 **
ôî
;

558 i‡(!
nodes
)

560 
ôî
 = 
nodes
; *ôî !
NULL
; iter++)

561 
	`‰ì
(*
ôî
);

562 
	`‰ì
(
nodes
);

563 
	}
}

565 
	$u°πouŒ
(c⁄° *
˝
, 
ba£
)

567 
î∫o
 = 0;

568 *
ídp
 = 
NULL
;

570 i‡(
	`°∫Àn
(
˝
, 
MAX_SEEK_STRING_SIZE
) == 0) {

574 
ªsu…
 = 
	`°πouŒ
(
˝
, &
ídp
, 
ba£
);

576 i‡(
˝
 =
ídp
 || (
ªsu…
 =
ULLONG_MAX
 && 
î∫o
 =
ERANGE
)) {

577 
î∫o
 = 
ERANGE
;

581 *
ídp
) {

583 
ªsu…
 *= 1024;

586 
ªsu…
 *= 1024;

590 
ªsu…
 *= 1024;

591 i‡(
ídp
[1] == 'i') {

592 i‡(
ídp
[2] == 'B')

593 
ídp
 += 3;

595 
ídp
 += 2;

598  
ªsu…
;

599 
	}
}

601 
	$swupd©e_mou¡
(c⁄° *
devi˚
, c⁄° *
dú
, c⁄° *
f°y≥
)

603 #i‡
	`deföed
(
__löux__
)

604  
	`mou¡
(
devi˚
, 
dú
, 
f°y≥
, 0, 
NULL
);

605 #ñi‡
	`deföed
(
__FªeBSD__
)

606 
iovÀn
 = 8;

607 
iovec
 
iov
[
iovÀn
];

608 
m¡Êags
 = 0;

609 
îrmsg
[255];

610 
	`mem£t
(
îrmsg
, 0, (errmsg));

611 
iov
[0].
iov_ba£
 = (*)"fstype";

612 
iov
[0].
iov_Àn
 = 
	`°æí
("fstype") + 1;

613 
iov
[1].
iov_ba£
 = (*)
f°y≥
;

614 
iov
[1].
iov_Àn
 = 
	`°æí
(
f°y≥
) + 1;

615 
iov
[2].
iov_ba£
 = (*)"fspath";

616 
iov
[2].
iov_Àn
 = 
	`°æí
("fspath") + 1;

617 
iov
[3].
iov_ba£
 = (*)
dú
;

618 
iov
[3].
iov_Àn
 = 
	`°æí
(
dú
) + 1;

619 
iov
[4].
iov_ba£
 = (*)"from";

620 
iov
[4].
iov_Àn
 = 
	`°æí
("from") + 1;

621 
iov
[5].
iov_ba£
 = (*)
devi˚
;

622 
iov
[5].
iov_Àn
 = 
	`°æí
(
devi˚
) + 1;

626 
iov
[6].
iov_ba£
 = (*)"errmsg";

627 
iov
[6].
iov_Àn
 = 
	`°æí
("errmsg") + 1;

628 
iov
[7].
iov_ba£
 = 
îrmsg
;

629 
iov
[7].
iov_Àn
 = 
	`°æí
(
îrmsg
) + 1;

630  
	`nmou¡
(
iov
, 
iovÀn
, 
m¡Êags
);

633 
î∫o
 = 0;

636 
	}
}

638 
	$swupd©e_umou¡
(c⁄° *
dú
)

640 #i‡
	`deföed
(
__löux__
)

641  
	`umou¡
(
dú
);

642 #ñi‡
	`deföed
(
__FªeBSD__
)

643 
m¡Êags
 = 0;

644  
	`unmou¡
(
dú
, 
m¡Êags
);

647 
î∫o
 = 0;

650 
	}
}

656 *
	$swupd©e_time_iso8601
()

658 
	#DATE_SIZE_ISO8601
 128

	)

659 
timevÆ
 
now
;

660 
ms
;

661 
msbuf
[4];

663 *
buf
 = (*)
	`mÆloc
(
DATE_SIZE_ISO8601
);

665 i‡(!
buf
)

666  
NULL
;

668 
	`gëtimeofday
(&
now
, 
NULL
);

669 
ms
 = 
now
.
tv_u£c
 / 1000;

671 ()
	`°r·ime
(
buf
, 
DATE_SIZE_ISO8601
, "%Y-%m-%dT%T.***%z", 
	`loˇ…ime
(&
now
.
tv_£c
));

676 
	`¢¥ötf
(
msbuf
, (msbuf), "%03d", 
ms
);

677 
	`mem˝y
(
	`°rchr
(
buf
, '*'), 
msbuf
, 3);

683 
buf
[
	`°æí
(buf) - 2] = '\0';

685  
buf
;

686 
	}
}

	@swupdate/corelib/artifacts_versions.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

14 
	~<î∫o.h
>

15 
	~<sys/°©.h
>

16 #i‡
deföed
(
__löux__
)

17 
	~<löux/ty≥s.h
>

19 
	~<com∑t.h
>

20 
	~<limôs.h
>

21 
	~<as£π.h
>

22 
	~"gíî©ed/autoc⁄f.h
"

23 
	~"bsdqueue.h
"

24 
	~"utû.h
"

25 
	~"swupd©e.h
"

26 
	~"∑r£lib.h
"

27 
	~"swupd©e_£âögs.h
"

34 #ifde‡
CONFIG_SW_VERSIONS_FILE


35 
	#SW_VERSIONS_FILE
 
CONFIG_SW_VERSIONS_FILE


	)

37 
	#SW_VERSIONS_FILE
 "/ëc/sw-vîsi⁄s"

	)

39 
	$ªad_sw_vîsi⁄_fûe
(
swupd©e_cfg
 *
sw
)

41 
FILE
 *
Â
;

42 
ªt
;

43 *
«me
, *
vîsi⁄
;

44 
sw_vîsi⁄
 *
swcomp
;

51 
Â
 = 
	`f›í
(
SW_VERSIONS_FILE
, "r");

52 i‡(!
Â
)

53  -
EACCES
;

56 
ªt
 = 
	`fsˇnf
(
Â
, "%m†%ms", &
«me
, &
vîsi⁄
);

58 i‡(
ªt
 == 2) {

59 
swcomp
 = (
sw_vîsi⁄
 *)
	`ˇŒoc
(1, (sw_version));

60 i‡(!
swcomp
) {

61 
	`ERROR
("AllocationÉrror");

62  -
ENOMEM
;

64 
	`°∫˝y
(
swcomp
->
«me
,Çame, (swcomp->name));

65 
	`°∫˝y
(
swcomp
->
vîsi⁄
, version, (swcomp->version));

66 
	`LIST_INSERT_HEAD
(&
sw
->
ö°ÆÀd_sw_li°
, 
swcomp
, 
√xt
);

67 
	`TRACE
("Installed %s: Version %s",

68 
swcomp
->
«me
,

69 
swcomp
->
vîsi⁄
);

70 
	`‰ì
(
«me
);

71 
	`‰ì
(
vîsi⁄
);

73 i‡(
ªt
 =
EOF
)

75 i‡(
î∫o
) {

76 
	`ERROR
("Malformed sw-versions file, skipped !");

84 i‡(
ªt
 == 1)

85 
	`‰ì
(
«me
);

88 
	`f˛o£
(
Â
);

91 
	}
}

93 #ifde‡
CONFIG_LIBCONFIG


94 
	$vîsi⁄s_£âögs
(*
£âög
, *
d©a
)

96 
swupd©e_cfg
 *
sw
 = (swupd©e_cfg *)
d©a
;

97 *
ñem
;

98 
cou¡
, 
i
;

99 
sw_vîsi⁄
 *
swcomp
;

101 
cou¡
 = 
	`gë_¨øy_Àngth
(
LIBCFG_PARSER
, 
£âög
);

103 
i
 = 0; i < 
cou¡
; ++i) {

104 
ñem
 = 
	`gë_ñem_‰om_idx
(
LIBCFG_PARSER
, 
£âög
, 
i
);

106 i‡(!
ñem
)

109 
swcomp
 = (
sw_vîsi⁄
 *)
	`ˇŒoc
(1, (sw_version));

110 i‡(!
swcomp
) {

111 
	`ERROR
("AllocationÉrror");

112  -
ENOMEM
;

115 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
, "«me", 
swcomp
->
«me
);

116 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
, "vîsi⁄", 
swcomp
->
vîsi⁄
);

118 
	`LIST_INSERT_HEAD
(&
sw
->
ö°ÆÀd_sw_li°
, 
swcomp
, 
√xt
);

119 
	`TRACE
("Installed %s: Version %s",

120 
swcomp
->
«me
,

121 
swcomp
->
vîsi⁄
);

125 
	}
}

127 
	$gë_sw_vîsi⁄s
(*
cfg«me
, 
swupd©e_cfg
 *
sw
)

129 
ªt
 = -
EINVAL
;

136 i‡(
cfg«me
)

137 
ªt
 = 
	`ªad_moduÀ_£âögs
(
cfg«me
, "versions",

138 
vîsi⁄s_£âögs
,

139 
sw
);

141 i‡(
ªt
)

142 
ªt
 = 
	`ªad_sw_vîsi⁄_fûe
(
sw
);

144 
	}
}

147 
gë_sw_vîsi⁄s
(
__©åibuã__
 ((
__unu£d__
)Ë*
cfg«me
,

148 
swupd©e_cfg
 *
sw
)

150 
ªad_sw_vîsi⁄_fûe
(
sw
);

164 
__u64
 
	$vîsi⁄_to_numbî
(c⁄° *
vîsi⁄_°rög
)

166 **
vîsi⁄s
 = 
NULL
;

167 **
vî
;

168 
cou¡
 = 0;

169 
__u64
 
vîsi⁄
 = 0;

171 
vîsi⁄s
 = 
	`°rög_•lô
(
vîsi⁄_°rög
, '.');

172 
vî
 = 
vîsi⁄s
; *vî !
NULL
; vî++, 
cou¡
 ++) {

173 i‡(
cou¡
 < 4) {

174 
Êd
 = 
	`°πoul
(*
vî
, 
NULL
, 10);

176 i‡(
Êd
 !
ULONG_MAX
) {

177 
Êd
 &= 0xffff;

178 
vîsi⁄
 = (vîsi⁄ << 16Ë| 
Êd
;

181 
	`‰ì
(*
vî
);

183 i‡(
cou¡
 < 4)

184 
vîsi⁄
 <<16 * (4 - 
cou¡
);

185 
	`‰ì
(
vîsi⁄s
);

187  
vîsi⁄
;

188 
	}
}

	@swupdate/corelib/channel_curl.c

8 
	~<°dboﬁ.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<˘y≥.h
>

12 
	~<î∫o.h
>

13 
	~<as£π.h
>

14 
	~<°d¨g.h
>

15 
	~<uni°d.h
>

16 
	~<m©h.h
>

17 
	~<cuæ/cuæ.h
>

18 
	~<gíî©ed/autoc⁄f.h
>

19 
	~<uni°d.h
>

20 
	~<√tw‹k_ùc.h
>

21 
	~<utû.h
>

22 
	~"s¶≠i.h
"

23 
	~"ch™√l.h
"

24 
	~"ch™√l_cuæ.h
"

25 #ifde‡
CONFIG_JSON


26 
	~<js⁄-c/js⁄.h
>

29 
	#SPEED_LOW_BYTES_SEC
 8

	)

30 
	#SPEED_LOW_TIME_SEC
 300

	)

31 
	#KEEPALIVE_DELAY
 204L

	)

32 
	#KEEPALIVE_INTERVAL
 120L

	)

35 *
	mmem‹y
;

36 
size_t
 
	msize
;

37 } 
	touçut_d©a_t
;

40 *
	m¥oxy
;

41 *
	mef„˘ive_uæ
;

42 *
	mªdúe˘_uæ
;

43 
CURL
 *
	mh™dÀ
;

44 
cuæ_¶i°
 *
	mhódî
;

45 } 
	tch™√l_cuæ_t
;

48 
ch™√l_d©a_t
 *
	mch™√l_d©a
;

49 
	mouçut
;

50 
ouçut_d©a_t
 *
	moutd©a
;

51 } 
	twrôe_ˇŒback_t
;

56 
size_t
 
ch™√l_ˇŒback_wrôe_fûe
(*
°ªamd©a
, size_à
size
, size_à
nmemb
,

57 
wrôe_ˇŒback_t
 *
d©a
);

58 
size_t
 
ch™√l_ˇŒback_membuf„r
(*
°ªamd©a
, size_à
size
, size_à
nmemb
,

59 
wrôe_ˇŒback_t
 *
d©a
);

60 
ch™√l_›_ªs_t
 
ch™√l_m≠_hâp_code
(
ch™√l_t
 *
this
, *
hâp_ª•⁄£_code
);

61 
ch™√l_›_ªs_t
 
ch™√l_m≠_cuæ_îr‹
(
CURLcode
 
ªs
);

62 
ch™√l_›_ªs_t
 
ch™√l_£t_›ti⁄s
(
ch™√l_t
 *
this
, 
ch™√l_d©a_t
 *
ch™√l_d©a
,

63 
ch™√l_mëhod_t
 
mëhod
);

64 *
ch™√l_gë_ªdúe˘_uæ
(
ch™√l_t
 *
this
);

66 
ch™√l_log_ef„˘ive_uæ
(
ch™√l_t
 *
this
);

69 
ch™√l_›_ªs_t
 
ch™√l_cuæ_öô
();

70 
ch™√l_›_ªs_t
 
ch™√l_˛o£
(
ch™√l_t
 *
this
);

71 
ch™√l_›_ªs_t
 
ch™√l_›í
(
ch™√l_t
 *
this
, *
cfg
);

72 
ch™√l_›_ªs_t
 
ch™√l_gë
(
ch™√l_t
 *
this
, *
d©a
);

73 
ch™√l_›_ªs_t
 
ch™√l_gë_fûe
(
ch™√l_t
 *
this
, *
d©a
);

74 
ch™√l_›_ªs_t
 
ch™√l_put
(
ch™√l_t
 *
this
, *
d©a
);

75 
ch™√l_t
 *
ch™√l_√w
();

78 
ch™√l_›_ªs_t
 
	$ch™√l_cuæ_öô
()

80 #i‡
	`deföed
(
CONFIG_SURICATTA_SSL
Ë|| deföed(
CONFIG_CHANNEL_CURL_SSL
)

81 
	#CURL_FLAGS
 
CURL_GLOBAL_SSL


	)

83 
	#CURL_FLAGS
 
CURL_GLOBAL_NOTHING


	)

85 
CURLcode
 
cuærc
 = 
	`cuæ_globÆ_öô
(
CURL_FLAGS
);

86 i‡(
cuærc
 !
CURLE_OK
) {

87 
	`ERROR
("Inôüliz©i⁄ o‡ch™√»Áûed (%d): '%s'", 
cuærc
,

88 
	`cuæ_ósy_°ªº‹
(
cuærc
));

89  
CHANNEL_EINIT
;

91 #unde‡
CURL_FLAGS


92  
CHANNEL_OK
;

93 
	}
}

95 
ch™√l_t
 *
	$ch™√l_√w
()

97 
ch™√l_t
 *
√wch™
 = (ch™√l_à*)
	`ˇŒoc
(1, (*newchan) +

98 (
ch™√l_cuæ_t
));

100 i‡(
√wch™
) {

101 
√wch™
->
¥iv
 = (*)newchan + (*newchan);

102 
√wch™
->
›í
 = &
ch™√l_›í
;

103 
√wch™
->
˛o£
 = &
ch™√l_˛o£
;

104 
√wch™
->
gë
 = &
ch™√l_gë
;

105 
√wch™
->
gë_fûe
 = &
ch™√l_gë_fûe
;

106 
√wch™
->
put
 = &
ch™√l_put
;

107 
√wch™
->
gë_ªdúe˘_uæ
 = &
ch™√l_gë_ªdúe˘_uæ
;

110  
√wch™
;

111 
	}
}

113 
ch™√l_›_ªs_t
 
	$ch™√l_˛o£
(
ch™√l_t
 *
this
)

115 
ch™√l_cuæ_t
 *
ch™√l_cuæ
 = 
this
->
¥iv
;

117 i‡((
ch™√l_cuæ
->
¥oxy
 !
NULL
) &&

118 (
ch™√l_cuæ
->
¥oxy
 !
USE_PROXY_ENV
)) {

119 
	`‰ì
(
ch™√l_cuæ
->
¥oxy
);

121 i‡(
ch™√l_cuæ
->
ªdúe˘_uæ
)

122 
	`‰ì
(
ch™√l_cuæ
->
ªdúe˘_uæ
);

123 i‡(
ch™√l_cuæ
->
h™dÀ
 =
NULL
) {

124  
CHANNEL_OK
;

126 
	`cuæ_ósy_˛ónup
(
ch™√l_cuæ
->
h™dÀ
);

127 
ch™√l_cuæ
->
h™dÀ
 = 
NULL
;

129  
CHANNEL_OK
;

130 
	}
}

132 
ch™√l_›_ªs_t
 
	$ch™√l_›í
(
ch™√l_t
 *
this
, *
cfg
)

134 
	`as£π
(
this
 !
NULL
);

135 
ch™√l_cuæ_t
 *
ch™√l_cuæ
 = 
this
->
¥iv
;

136 
	`as£π
(
ch™√l_cuæ
->
h™dÀ
 =
NULL
);

138 
ch™√l_d©a_t
 *
ch™√l_cfg
 = (ch™√l_d©a_à*)
cfg
;

140 i‡((
ch™√l_cfg
 !
NULL
Ë&& (ch™√l_cfg->
¥oxy
 != NULL)) {

141 
ch™√l_cuæ
->
¥oxy
 = 
ch™√l_cfg
->¥oxy =
USE_PROXY_ENV


142 ? 
USE_PROXY_ENV


143 : 
	`°rdup
(
ch™√l_cfg
->
¥oxy
);

144 i‡(
ch™√l_cuæ
->
¥oxy
 =
NULL
) {

145  
CHANNEL_EINIT
;

149 i‡((
ch™√l_cuæ
->
h™dÀ
 = 
	`cuæ_ósy_öô
()Ë=
NULL
) {

150 
	`ERROR
("Initialization of channel failed.");

151  
CHANNEL_EINIT
;

154  
CHANNEL_OK
;

155 
	}
}

157 
ch™√l_›_ªs_t
 
	gªsu…_ch™√l_ˇŒback_wrôe_fûe
;

158 
size_t
 
	$ch™√l_ˇŒback_wrôe_fûe
(*
°ªamd©a
, 
size_t
 
size
, size_à
nmemb
,

159 
wrôe_ˇŒback_t
 *
d©a
)

161 i‡(!
nmemb
) {

164 i‡(!
d©a
)

166 
ªsu…_ch™√l_ˇŒback_wrôe_fûe
 = 
CHANNEL_OK
;

168 i‡(
d©a
->
ch™√l_d©a
->
u£s¶
) {

169 i‡(
	`swupd©e_HASH_upd©e
(
d©a
->
ch™√l_d©a
->
dg°
,

170 
°ªamd©a
,

171 
size
 * 
nmemb
) < 0) {

172 
	`ERROR
("Updating checksum of chunk failed.");

173 
ªsu…_ch™√l_ˇŒback_wrôe_fûe
 = 
CHANNEL_EIO
;

178 i‡(
	`ùc_£nd_d©a
(
d©a
->
ouçut
, 
°ªamd©a
, ()(
size
 * 
nmemb
)) <

180 
	`ERROR
("Writing into SWUpdate IPC stream failed.");

181 
ªsu…_ch™√l_ˇŒback_wrôe_fûe
 = 
CHANNEL_EIO
;

185 i‡(
d©a
->
ch™√l_d©a
->
checkdwl
 && d©a->ch™√l_d©a->
	`checkdwl
())

192  
size
 * 
nmemb
;

193 
	}
}

195 
size_t
 
	$ch™√l_ˇŒback_membuf„r
(*
°ªamd©a
, 
size_t
 
size
, size_à
nmemb
,

196 
wrôe_ˇŒback_t
 *
d©a
)

198 i‡(!
nmemb
) {

201 i‡(!
d©a
) {

205 
size_t
 
ªÆsize
 = 
size
 * 
nmemb
;

206 
ouçut_d©a_t
 *
mem
 = 
d©a
->
outd©a
;

208 
mem
->
mem‹y
 = 
	`ªÆloc
(mem->mem‹y, mem->
size
 + 
ªÆsize
 + 1);

209 i‡(
mem
->
mem‹y
 =
NULL
) {

210 
	`ERROR
("Channel get operation failed with OOM");

213 
	`mem˝y
(&(
mem
->
mem‹y
[mem->
size
]), 
°ªamd©a
, 
ªÆsize
);

214 
mem
->
size
 +
ªÆsize
;

215 
mem
->
mem‹y
[mem->
size
] = 0;

216  
ªÆsize
;

217 
	}
}

219 
	$ch™√l_log_ef„˘ive_uæ
(
ch™√l_t
 *
this
)

221 
ch™√l_cuæ_t
 *
ch™√l_cuæ
 = 
this
->
¥iv
;

223 
CURLcode
 
cuærc
 =

224 
	`cuæ_ósy_gëöfo
(
ch™√l_cuæ
->
h™dÀ
, 
CURLINFO_EFFECTIVE_URL
,

225 &
ch™√l_cuæ
->
ef„˘ive_uæ
);

226 i‡(
cuærc
 !
CURLE_OK
 && cuær¯=
CURLE_UNKNOWN_OPTION
) {

227 
	`ERROR
("Get channel'sÉffective URLÑesponse unsupported by "

229 
LIBCURL_VERSION
);

232 
	`TRACE
("Channel'sÉffective URLÑesolvedÅo %s",

233 
ch™√l_cuæ
->
ef„˘ive_uæ
);

234 
	}
}

236 *
	$ch™√l_gë_ªdúe˘_uæ
(
ch™√l_t
 *
this
)

238 
ch™√l_cuæ_t
 *
ch™√l_cuæ
 = 
this
->
¥iv
;

239 
	`TRACE
("Redúe˘ URL %s", 
ch™√l_cuæ
->
ªdúe˘_uæ
);

240  
ch™√l_cuæ
->
ªdúe˘_uæ
;

241 
	}
}

243 
ch™√l_›_ªs_t
 
	$ch™√l_m≠_hâp_code
(
ch™√l_t
 *
this
, *
hâp_ª•⁄£_code
)

245 *
uæ
 = 
NULL
;

246 
ch™√l_cuæ_t
 *
ch™√l_cuæ
 = 
this
->
¥iv
;

247 
CURLcode
 
cuærc
 =

248 
	`cuæ_ósy_gëöfo
(
ch™√l_cuæ
->
h™dÀ
, 
CURLINFO_RESPONSE_CODE
,

249 
hâp_ª•⁄£_code
);

250 i‡(
cuærc
 !
CURLE_OK
 && cuær¯=
CURLE_UNKNOWN_OPTION
) {

251 
	`ERROR
("Get channel HTTPÑesponse code unsupported byÜibcURL "

253 
LIBCURL_VERSION
);

254  
CHANNEL_EINIT
;

256 *
hâp_ª•⁄£_code
) {

258 
	`DEBUG
("No HTTPÑesponse code has beenÑeceived yet!");

259  
CHANNEL_EBADMSG
;

265  
CHANNEL_EACCES
;

269  
CHANNEL_EBADMSG
;

271  
CHANNEL_ENOTFOUND
;

273  
CHANNEL_EAGAIN
;

276  
CHANNEL_OK
;

278 
cuærc
 = 
	`cuæ_ósy_gëöfo
(
ch™√l_cuæ
->
h™dÀ
, 
CURLINFO_REDIRECT_URL
,

279 &
uæ
);

280 i‡(
cuærc
 =
CURLE_OK
) {

281 i‡(
ch™√l_cuæ
->
ªdúe˘_uæ
)

282 
	`‰ì
(
ch™√l_cuæ
->
ªdúe˘_uæ
);

283 
ch™√l_cuæ
->
ªdúe˘_uæ
 = 
	`°rdup
(
uæ
);

284 } i‡(
cuærc
 =
CURLE_UNKNOWN_OPTION
) {

285 
	`ERROR
("channel_curl_getinfoÑesponse unsupported by "

287 
LIBCURL_VERSION
);

289  
CHANNEL_EREDIRECT
;

291  
CHANNEL_EBADMSG
;

293 
	`ERROR
("Channel operationÑeturned unhandled HTTPÉrror code "

295 *
hâp_ª•⁄£_code
);

296  
CHANNEL_EBADMSG
;

298 
	}
}

300 
ch™√l_›_ªs_t
 
	$ch™√l_m≠_cuæ_îr‹
(
CURLcode
 
ªs
)

302 
ªs
) {

303 
CURLE_NOT_BUILT_IN
:

304 
CURLE_BAD_FUNCTION_ARGUMENT
:

305 
CURLE_UNKNOWN_OPTION
:

306 
CURLE_SSL_ENGINE_NOTFOUND
:

307 
CURLE_SSL_ENGINE_SETFAILED
:

308 
CURLE_SSL_CERTPROBLEM
:

309 
CURLE_SSL_CIPHER
:

310 
CURLE_SSL_ENGINE_INITFAILED
:

311 
CURLE_SSL_CACERT_BADFILE
:

312 
CURLE_SSL_CRL_BADFILE
:

313 
CURLE_SSL_ISSUER_ERROR
:

314 #i‡
LIBCURL_VERSION_NUM
 >= 0x072900

315 
CURLE_SSL_INVALIDCERTSTATUS
:

317 #i‡
LIBCURL_VERSION_NUM
 >= 0x072700

318 
CURLE_SSL_PINNEDPUBKEYNOTMATCH
:

320  
CHANNEL_EINIT
;

321 
CURLE_COULDNT_RESOLVE_PROXY
:

322 
CURLE_COULDNT_RESOLVE_HOST
:

323 
CURLE_COULDNT_CONNECT
:

324 
CURLE_INTERFACE_FAILED
:

325 
CURLE_SSL_CONNECT_ERROR
:

326 
CURLE_PEER_FAILED_VERIFICATION
:

327 #i‡
LIBCURL_VERSION_NUM
 < 0x073E00

328 
CURLE_SSL_CACERT
:

330 
CURLE_USE_SSL_FAILED
:

331  
CHANNEL_ENONET
;

332 
CURLE_OPERATION_TIMEDOUT
:

333 
CURLE_SEND_ERROR
:

334 
CURLE_RECV_ERROR
:

335 
CURLE_GOT_NOTHING
:

336 
CURLE_HTTP_POST_ERROR
:

337 
CURLE_PARTIAL_FILE
:

338  
CHANNEL_EAGAIN
;

339 
CURLE_OUT_OF_MEMORY
:

340  
CHANNEL_ENOMEM
;

341 
CURLE_REMOTE_FILE_NOT_FOUND
:

342  
CHANNEL_ENOENT
;

343 
CURLE_FILESIZE_EXCEEDED
:

344 
CURLE_ABORTED_BY_CALLBACK
:

345 
CURLE_WRITE_ERROR
:

346 
CURLE_CHUNK_FAILED
:

347 
CURLE_SSL_SHUTDOWN_FAILED
:

348  
CHANNEL_EIO
;

349 
CURLE_TOO_MANY_REDIRECTS
:

350  
CHANNEL_ELOOP
;

351 
CURLE_BAD_CONTENT_ENCODING
:

352 
CURLE_CONV_FAILED
:

353 
CURLE_CONV_REQD
:

354  
CHANNEL_EILSEQ
;

355 
CURLE_REMOTE_ACCESS_DENIED
:

356 
CURLE_LOGIN_DENIED
:

357  
CHANNEL_EACCES
;

358 
CURLE_OK
:

359  
CHANNEL_OK
;

361  
CHANNEL_EINIT
;

363 
	}
}

365 
ch™√l_ˇŒback_x„röfo
(*
p
, 
cuæ_off_t
 
d…ŸÆ
, cuæ_off_à
d ow
,

366 
cuæ_off_t
 
__©åibuã__
((
__unu£d__
)Ë
u…ŸÆ
,

367 
cuæ_off_t
 
__©åibuã__
((
__unu£d__
)Ë
u ow
)

369 i‡((
	gd…ŸÆ
 <0Ë|| (
d ow
 > 
d…ŸÆ
)) {

372 
	g≥r˚¡
 = 100.0 * (
d ow
/1024.0Ë/ (
d…ŸÆ
/1024.0);

373 *
	gœ°_≥r˚¡
 = (*)
p
;

374 i‡(()*
	gœ°_≥r˚¡
 =()
≥r˚¡
) {

377 *
	gœ°_≥r˚¡
 = 
≥r˚¡
;

378 *
	göfo
;

379 i‡(
a•rötf
(&
öfo
,

380 "{\"≥r˚¡\": %d, \"msg\":\"Re˚ived %" 
CURL_FORMAT_CURL_OFF_T
 "B "

381 "o‡%" 
CURL_FORMAT_CURL_OFF_T
 "B\"}",

382 ()
≥r˚¡
, 
d ow
, 
d…ŸÆ
Ë!
ENOMEM_ASPRINTF
) {

383 
nŸify
(
SUBPROCESS
, 
RECOVERY_NO_ERROR
, 
TRACELEVEL
, 
öfo
);

384 
‰ì
(
öfo
);

389 
	$ch™√l_ˇŒback_x„röfo_Àgacy
(*
p
, 
d…ŸÆ
, 
d ow
,

390 
u…ŸÆ
, 
u ow
)

392  
	`ch™√l_ˇŒback_x„röfo
(
p
, (
cuæ_off_t
)
d…ŸÆ
, (cuæ_off_t)
d ow
,

393 (
cuæ_off_t
)
u…ŸÆ
, (cuæ_off_t)
u ow
);

394 
	}
}

396 
size_t
 
	$ch™√l_ˇŒback_hódîs
(*
buf„r
, 
size_t
 
size
, size_à
nôems
, *
u£rd©a
)

398 
di˘
 *di˘ = (di˘ *)
u£rd©a
;

399 *
öfo
 = 
	`mÆloc
(
size
 * 
nôems
 + 1);

400 *
p
, *
key
, *
vÆ
;

402 i‡(!
öfo
) {

403 
	`ERROR
("No memoryállocated for headers, headersÇot collected !!");

404  
nôems
 * 
size
;

410 
	`mem˝y
(
öfo
, 
buf„r
, 
size
 * 
nôems
);

411 
öfo
[
size
 * 
nôems
] = '\0';

412 
p
 = 
	`memchr
(
öfo
, ':', 
size
 * 
nôems
);

413 i‡(
p
) {

414 *
p
 = '\0';

415 
key
 = 
öfo
;

416 
vÆ
 = 
p
 + 1;

417 
	`is•a˚
(()*
vÆ
)) val++;

418 
	`di˘_ö£π_vÆue
(
di˘
, 
key
, 
vÆ
);

419 
	`TRACE
("%†: %s", 
key
, 
vÆ
);

421 
	`TRACE
("HódîÇŸÖro˚s£d: %s", 
öfo
);

424 
	`‰ì
(
öfo
);

425  
nôems
 * 
size
;

426 
	}
}

428 
ch™√l_›_ªs_t
 
	$ch™√l_£t_c⁄ã¡_ty≥
(
ch™√l_t
 *
this
,

429 
ch™√l_d©a_t
 *
ch™√l_d©a
)

431 
ch™√l_cuæ_t
 *
ch™√l_cuæ
 = 
this
->
¥iv
;

432 c⁄° *
c⁄ã¡
;

433 *
c⁄ã¡ty≥
, *
ac˚±
;

434 
	`as£π
(
ch™√l_cuæ
->
h™dÀ
 !
NULL
);

436 
ch™√l_›_ªs_t
 
ªsu…
 = 
CHANNEL_OK
;

438 i‡(
ch™√l_d©a
->
c⁄ã¡_ty≥
 && 
	`°æí
(channel_data->content_type))

439 
c⁄ã¡
 = 
ch™√l_d©a
->
c⁄ã¡_ty≥
;

441 
c⁄ã¡
 = "application/json";

443 i‡(
ENOMEM_ASPRINTF
 ==

444 
	`a•rötf
(&
c⁄ã¡ty≥
, "Content-Type: %s",

445 
c⁄ã¡
)) {

446 
ªsu…
 = 
CHANNEL_EINIT
;

447 
	`ERROR
("OOM when setting Content-type.");

450 i‡(
ENOMEM_ASPRINTF
 ==

451 
	`a•rötf
(&
ac˚±
, "Accept: %s",

452 
c⁄ã¡
)) {

453 
ªsu…
 = 
CHANNEL_EINIT
;

454 
	`ERROR
("OOM when setting Content-type.");

457 i‡(
ªsu…
 =
CHANNEL_OK
) {

458 i‡(((
ch™√l_cuæ
->
hódî
 = 
	`cuæ_¶i°_≠≥nd
(

459 
ch™√l_cuæ
->
hódî
, 
c⁄ã¡ty≥
)) ==

460 
NULL
) ||

461 ((
ch™√l_cuæ
->
hódî
 = 
	`cuæ_¶i°_≠≥nd
(

462 
ch™√l_cuæ
->
hódî
, 
ac˚±
)Ë=
NULL
) ||

463 ((
ch™√l_cuæ
->
hódî
 = 
	`cuæ_¶i°_≠≥nd
(

464 
ch™√l_cuæ
->
hódî
, "ch¨£ts: utf-8")Ë=
NULL
)) {

465 
	`ERROR
("Set channel header failed.");

466 
ªsu…
 = 
CHANNEL_EINIT
;

470  
ªsu…
;

471 
	}
}

473 
ch™√l_›_ªs_t
 
	$ch™√l_£t_›ti⁄s
(
ch™√l_t
 *
this
,

474 
ch™√l_d©a_t
 *
ch™√l_d©a
,

475 
ch™√l_mëhod_t
 
mëhod
)

477 i‡(
ch™√l_d©a
->
low_•ìd_timeout
 == 0) {

478 
ch™√l_d©a
->
low_•ìd_timeout
 = 
SPEED_LOW_TIME_SEC
;

479 
	`DEBUG
("cURL'sÜow download speedÅimeout is disabled, "

481 "Ad≠ãd iàtÿ%u†ö°ód.\n", 
SPEED_LOW_TIME_SEC
);

483 
ch™√l_cuæ_t
 *
ch™√l_cuæ
 = 
this
->
¥iv
;

484 
ch™√l_›_ªs_t
 
ªsu…
 = 
CHANNEL_OK
;

485 i‡((
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_URL
,

486 
ch™√l_d©a
->
uæ
Ë!
CURLE_OK
) ||

487 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_USERAGENT
,

488 "libcuæ-agít/1.0"Ë!
CURLE_OK
) ||

489 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_LOW_SPEED_LIMIT
,

490 
SPEED_LOW_BYTES_SEC
Ë!
CURLE_OK
) ||

491 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_LOW_SPEED_TIME
,

492 
ch™√l_d©a
->
low_•ìd_timeout
Ë!
CURLE_OK
) ||

493 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_HTTPHEADER
,

494 
ch™√l_cuæ
->
hódî
Ë!
CURLE_OK
) ||

495 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_MAXREDIRS
, -1) !=

496 
CURLE_OK
) ||

497 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_REDIR_PROTOCOLS
,

498 
CURLPROTO_HTTP
 | 
CURLPROTO_HTTPS
Ë!
CURLE_OK
) ||

499 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
,

500 
CURLOPT_CAINFO
,

501 
ch™√l_d©a
->
ˇfûe
Ë!
CURLE_OK
) ||

502 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
,

503 
CURLOPT_SSLKEY
,

504 
ch™√l_d©a
->
s¶key
Ë!
CURLE_OK
) ||

505 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
,

506 
CURLOPT_SSLCERT
,

507 
ch™√l_d©a
->
s¶˚π
Ë!
CURLE_OK
)) {

508 
ªsu…
 = 
CHANNEL_EINIT
;

509 
˛ónup
;

512 i‡((!
ch™√l_d©a
->
nofﬁlow
) &&

513 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_FOLLOWLOCATION
, 1) !=

514 
CURLE_OK
)) {

515 
ªsu…
 = 
CHANNEL_EINIT
;

516 
˛ónup
;

519 
≥r˚¡
 = -
INFINITY
;

520 i‡((
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_PROGRESSFUNCTION
,

521 
ch™√l_ˇŒback_x„röfo_Àgacy
Ë!
CURLE_OK
) ||

522 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_PROGRESSDATA
,

523 &
≥r˚¡
Ë!
CURLE_OK
)) {

524 
ªsu…
 = 
CHANNEL_EINIT
;

525 
˛ónup
;

527 #i‡
LIBCURL_VERSION_NUM
 >= 0x072000

528 i‡((
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_XFERINFOFUNCTION
,

529 
ch™√l_ˇŒback_x„röfo
Ë!
CURLE_OK
) ||

530 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_XFERINFODATA
,

531 &
≥r˚¡
Ë!
CURLE_OK
)) {

532 
ªsu…
 = 
CHANNEL_EINIT
;

533 
˛ónup
;

536 i‡(
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_NOPROGRESS
, 0LË!
CURLE_OK
) {

537 
ªsu…
 = 
CHANNEL_EINIT
;

538 
˛ónup
;

548 i‡(
ch™√l_d©a
->
hódîs
) {

549 i‡((
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
,

550 
CURLOPT_HEADERFUNCTION
,

551 
ch™√l_ˇŒback_hódîs
Ë!
CURLE_OK
) ||

552 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_HEADERDATA
,

553 
ch™√l_d©a
->
hódîs
Ë!
CURLE_OK
)) {

554 
ªsu…
 = 
CHANNEL_EINIT
;

555 
˛ónup
;

559 i‡(
ch™√l_d©a
->
°ri˘s¶
 =
åue
) {

560 i‡((
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
,

561 
CURLOPT_SSL_VERIFYHOST
,

562 2LË!
CURLE_OK
) ||

563 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
,

564 
CURLOPT_SSL_VERIFYPEER
,

565 1LË!
CURLE_OK
)) {

566 
ªsu…
 = 
CHANNEL_EINIT
;

567 
˛ónup
;

571 i‡((
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
,

572 
CURLOPT_SSL_VERIFYHOST
,

573 0LË!
CURLE_OK
) ||

574 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
,

575 
CURLOPT_SSL_VERIFYPEER
,

576 0LË!
CURLE_OK
)) {

577 
ªsu…
 = 
CHANNEL_EINIT
;

578 
˛ónup
;

585 i‡(
ch™√l_d©a
->
cùhîs
) {

586 i‡(
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
,

587 
CURLOPT_SSL_CIPHER_LIST
,

588 
ch™√l_d©a
->
cùhîs
Ë!
CURLE_OK
) {

589 
ªsu…
 = 
CHANNEL_EINIT
;

590 
˛ónup
;

594 i‡(
ch™√l_d©a
->
hódî
 !
NULL
) {

595 i‡(((
ch™√l_cuæ
->
hódî
 = 
	`cuæ_¶i°_≠≥nd
(

596 
ch™√l_cuæ
->
hódî
, 
ch™√l_d©a
->hódî)Ë=
NULL
)) {

597 
ªsu…
 = 
CHANNEL_EINIT
;

598 
˛ónup
;

602 
mëhod
) {

603 
CHANNEL_GET
:

604 i‡(
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_CUSTOMREQUEST
,

605 "GET"Ë!
CURLE_OK
) {

606 
ªsu…
 = 
CHANNEL_EINIT
;

607 
˛ónup
;

610 
CHANNEL_PUT
:

611 i‡((
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_PUT
, 1L) !=

612 
CURLE_OK
) ||

613 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_UPLOAD
, 1L) !=

614 
CURLE_OK
)) {

615 
ªsu…
 = 
CHANNEL_EINIT
;

616 
˛ónup
;

619 
CHANNEL_POST
:

620 i‡((
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_POST
, 1L) !=

621 
CURLE_OK
) ||

622 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_POSTFIELDS
,

623 
ch™√l_d©a
->
ªque°_body
Ë!
CURLE_OK
)) {

624 
ªsu…
 = 
CHANNEL_EINIT
;

625 
˛ónup
;

627 i‡(
ch™√l_d©a
->
debug
) {

628 
	`TRACE
("Po°ed: %s", 
ch™√l_d©a
->
ªque°_body
);

633 i‡(
ch™√l_cuæ
->
¥oxy
 !
NULL
) {

634 i‡(
ch™√l_cuæ
->
¥oxy
 !
USE_PROXY_ENV
) {

635 i‡(
	`cuæ_ósy_£t›t
(

636 
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_PROXY
,

637 
ch™√l_cuæ
->
¥oxy
Ë!
CURLE_OK
) {

638 
ªsu…
 = 
CHANNEL_EINIT
;

639 
˛ónup
;

642 i‡(
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_NETRC
,

643 
CURL_NETRC_OPTIONAL
Ë!
CURLE_OK
) {

644 
ªsu…
 = 
CHANNEL_EINIT
;

645 
˛ónup
;

649 
CURLcode
 
cuærc
 =

650 
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_TCP_KEEPALIVE
, 1L);

651 i‡(
cuærc
 =
CURLE_OK
) {

652 i‡((
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_TCP_KEEPIDLE
,

653 
KEEPALIVE_DELAY
Ë!
CURLE_OK
) ||

654 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
,

655 
CURLOPT_TCP_KEEPINTVL
,

656 
KEEPALIVE_INTERVAL
Ë!
CURLE_OK
)) {

657 
	`ERROR
("TCP Keep-alive intervalánd delay couldÇot be "

659 
ªsu…
 = 
CHANNEL_EINIT
;

660 
˛ónup
;

663 i‡(
cuærc
 !
CURLE_UNKNOWN_OPTION
) {

664 
	`ERROR
("Channel couldÇot be configuredÅo sent "

666 
ªsu…
 = 
CHANNEL_EINIT
;

667 
˛ónup
;

671 i‡(
ch™√l_d©a
->
auth
) {

672 i‡(
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_USERPWD
,

673 
ch™√l_d©a
->
auth
Ë!
CURLE_OK
) {

674 
	`ERROR
("Basic Auth credentials couldÇot be set.");

675 
ªsu…
 = 
CHANNEL_EINIT
;

676 
˛ónup
;

680 
˛ónup
:

681  
ªsu…
;

682 
	}
}

684 
size_t
 
	$put_ªad_ˇŒback
(*
±r
, 
size_t
 
size
, size_à
nmemb
, *
d©a
)

686 
ch™√l_d©a_t
 *
ch™√l_d©a
 = (ch™√l_d©a_à*)
d©a
;

687 
byãs
;

688 
size_t
 
n
;

691 
byãs
 = 
	`°æí
(
ch™√l_d©a
->
ªque°_body
Ë- ch™√l_d©a->
offs
;

693 i‡(!
byãs
)

696 
n
 = 
	`mö
(
byãs
, 
size
 * 
nmemb
);

698 
	`mem˝y
(
±r
, &
ch™√l_d©a
->
ªque°_body
[ch™√l_d©a->
offs
], 
n
);

699 
ch™√l_d©a
->
offs
 +
n
;

701  
n
;

702 
	}
}

704 
ch™√l_›_ªs_t
 
	$ch™√l_po°_mëhod
(
ch™√l_t
 *
this
, *
d©a
)

706 
ch™√l_cuæ_t
 *
ch™√l_cuæ
 = 
this
->
¥iv
;

707 
	`as£π
(
d©a
 !
NULL
);

708 
	`as£π
(
ch™√l_cuæ
->
h™dÀ
 !
NULL
);

710 
ch™√l_›_ªs_t
 
ªsu…
 = 
CHANNEL_OK
;

711 
ch™√l_d©a_t
 *
ch™√l_d©a
 = (ch™√l_d©a_à*)
d©a
;

713 i‡(
ch™√l_d©a
->
debug
) {

714 
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_VERBOSE
, 1L);

717 i‡((
ªsu…
 = 
	`ch™√l_£t_c⁄ã¡_ty≥
(
this
, 
ch™√l_d©a
)) !=

718 
CHANNEL_OK
) {

719 
	`ERROR
("Set content-type option failed.");

720 
˛ónup_hódî
;

723 i‡((
ªsu…
 = 
	`ch™√l_£t_›ti⁄s
(
this
, 
ch™√l_d©a
, 
CHANNEL_POST
)) !=

724 
CHANNEL_OK
) {

725 
	`ERROR
("Set channel option failed.");

726 
˛ónup_hódî
;

729 
CURLcode
 
cuærc
 = 
	`cuæ_ósy_≥rf‹m
(
ch™√l_cuæ
->
h™dÀ
);

730 i‡(
cuærc
 !
CURLE_OK
) {

731 
	`ERROR
("Ch™√»puà›î©i⁄ faûed (%d): '%s'", 
cuærc
,

732 
	`cuæ_ósy_°ªº‹
(
cuærc
));

733 
ªsu…
 = 
	`ch™√l_m≠_cuæ_îr‹
(
cuærc
);

734 
˛ónup_hódî
;

737 
	`ch™√l_log_ef„˘ive_uæ
(
this
);

739 
hâp_ª•⁄£_code
;

740 i‡((
ªsu…
 = 
	`ch™√l_m≠_hâp_code
(
this
, &
hâp_ª•⁄£_code
)) !=

741 
CHANNEL_OK
) {

742 
	`ERROR
("Channel operationÑeturned HTTPÉrror code %ld.",

743 
hâp_ª•⁄£_code
);

744 
˛ónup_hódî
;

746 i‡(
ch™√l_d©a
->
debug
) {

747 
	`TRACE
("ChannelÖut operationÑeturned HTTP status code %ld.",

748 
hâp_ª•⁄£_code
);

751 
˛ónup_hódî
:

752 
	`cuæ_ósy_ª£t
(
ch™√l_cuæ
->
h™dÀ
);

753 
	`cuæ_¶i°_‰ì_Æl
(
ch™√l_cuæ
->
hódî
);

754 
ch™√l_cuæ
->
hódî
 = 
NULL
;

756  
ªsu…
;

757 
	}
}

759 
ch™√l_›_ªs_t
 
	$ch™√l_put_mëhod
(
ch™√l_t
 *
this
, *
d©a
)

761 
ch™√l_cuæ_t
 *
ch™√l_cuæ
 = 
this
->
¥iv
;

762 
	`as£π
(
d©a
 !
NULL
);

763 
	`as£π
(
ch™√l_cuæ
->
h™dÀ
 !
NULL
);

765 
ch™√l_›_ªs_t
 
ªsu…
 = 
CHANNEL_OK
;

766 
ch™√l_d©a_t
 *
ch™√l_d©a
 = (ch™√l_d©a_à*)
d©a
;

767 
ch™√l_d©a
->
offs
 = 0;

769 i‡(
ch™√l_d©a
->
debug
) {

770 
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_VERBOSE
, 1L);

773 i‡((
ªsu…
 = 
	`ch™√l_£t_c⁄ã¡_ty≥
(
this
, 
ch™√l_d©a
)) !=

774 
CHANNEL_OK
) {

775 
	`ERROR
("Set content-type option failed.");

776 
˛ónup_hódî
;

779 i‡((
ªsu…
 = 
	`ch™√l_£t_›ti⁄s
(
this
, 
ch™√l_d©a
, 
CHANNEL_PUT
)) !=

780 
CHANNEL_OK
) {

781 
	`ERROR
("Set channel option failed.");

782 
˛ónup_hódî
;

785 i‡((
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_READFUNCTION
, 
put_ªad_ˇŒback
) !=

786 
CURLE_OK
) ||

787 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_INFILESIZE_LARGE
,

788 (
cuæ_off_t
)
	`°æí
(
ch™√l_d©a
->
ªque°_body
)Ë!
CURLE_OK
) ||

789 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_READDATA
, 
ch™√l_d©a
) !=

790 
CURLE_OK
)) {

791 
	`ERROR
("Set channel option failed.");

792 
˛ónup_hódî
;

795 
CURLcode
 
cuærc
 = 
	`cuæ_ósy_≥rf‹m
(
ch™√l_cuæ
->
h™dÀ
);

796 i‡(
cuærc
 !
CURLE_OK
) {

797 
	`ERROR
("Ch™√»puà›î©i⁄ faûed (%d): '%s'", 
cuærc
,

798 
	`cuæ_ósy_°ªº‹
(
cuærc
));

799 
ªsu…
 = 
	`ch™√l_m≠_cuæ_îr‹
(
cuærc
);

800 
˛ónup_hódî
;

803 
	`ch™√l_log_ef„˘ive_uæ
(
this
);

805 
hâp_ª•⁄£_code
;

806 i‡((
ªsu…
 = 
	`ch™√l_m≠_hâp_code
(
this
, &
hâp_ª•⁄£_code
)Ë!
CHANNEL_OK
) {

807 
	`ERROR
("Channel operationÑeturned HTTPÉrror code %ld.",

808 
hâp_ª•⁄£_code
);

809 
˛ónup_hódî
;

811 
	`TRACE
("ChannelÖut operationÑeturned HTTPÉrror code %ld.",

812 
hâp_ª•⁄£_code
);

814 
˛ónup_hódî
:

815 
	`cuæ_ósy_ª£t
(
ch™√l_cuæ
->
h™dÀ
);

816 
	`cuæ_¶i°_‰ì_Æl
(
ch™√l_cuæ
->
hódî
);

817 
ch™√l_cuæ
->
hódî
 = 
NULL
;

819  
ªsu…
;

820 
	}
}

822 
ch™√l_›_ªs_t
 
	$ch™√l_put
(
ch™√l_t
 *
this
, *
d©a
)

824 
	`as£π
(
d©a
 !
NULL
);

826 
ch™√l_d©a_t
 *
ch™√l_d©a
 = (ch™√l_d©a_à*)
d©a
;

828 
ch™√l_d©a
->
mëhod
) {

829 
CHANNEL_PUT
:

830  
	`ch™√l_put_mëhod
(
this
, 
d©a
);

831 
CHANNEL_POST
:

832  
	`ch™√l_po°_mëhod
(
this
, 
d©a
);

834 
	`TRACE
("Channel method (POST, PUT) isÇot set !");

835  
CHANNEL_EINIT
;

837 
	}
}

839 
ch™√l_›_ªs_t
 
	$ch™√l_gë_fûe
(
ch™√l_t
 *
this
, *
d©a
)

841 
ch™√l_cuæ_t
 *
ch™√l_cuæ
 = 
this
->
¥iv
;

842 
fûe_h™dÀ
;

843 
	`as£π
(
d©a
 !
NULL
);

844 
	`as£π
(
ch™√l_cuæ
->
h™dÀ
 !
NULL
);

846 
ch™√l_›_ªs_t
 
ªsu…
 = 
CHANNEL_OK
;

847 
ch™√l_d©a_t
 *
ch™√l_d©a
 = (ch™√l_d©a_à*)
d©a
;

849 i‡(
ch™√l_d©a
->
u£s¶
) {

850 
	`mem£t
(
ch™√l_d©a
->
sha1hash
, 0x0, 
SWUPDATE_SHA_DIGEST_LENGTH
 * 2 + 1);

851 
ch™√l_d©a
->
dg°
 = 
	`swupd©e_HASH_öô
("sha1");

852 i‡(!
ch™√l_d©a
->
dg°
) {

853 
ªsu…
 = 
CHANNEL_EINIT
;

854 
	`ERROR
("Cannot initialize sha1 checksum context.");

855  
ªsu…
;

859 i‡(
ch™√l_d©a
->
debug
) {

860 
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_VERBOSE
, 1L);

863 i‡(((
ch™√l_cuæ
->
hódî
 = 
	`cuæ_¶i°_≠≥nd
(

864 
ch™√l_cuæ
->
hódî
,

865 "C⁄ã¡-Ty≥:áµliˇti⁄/o˘ë-°ªam")Ë=
NULL
) ||

866 ((
ch™√l_cuæ
->
hódî
 = 
	`cuæ_¶i°_≠≥nd
(

867 
ch™√l_cuæ
->
hódî
, "Accept:ápplication/octet-stream")) ==

868 
NULL
)) {

869 
ªsu…
 = 
CHANNEL_EINIT
;

870 
	`ERROR
("Set channel header failed.");

871 
˛ónup_hódî
;

874 i‡((
ªsu…
 = 
	`ch™√l_£t_›ti⁄s
(
this
, 
ch™√l_d©a
, 
CHANNEL_GET
)) !=

875 
CHANNEL_OK
) {

876 
	`ERROR
("Set channel option failed.");

877 
˛ónup_hódî
;

880 
ªåõs
 = 3;Ñetries >= 0;Ñetries--) {

881 
fûe_h™dÀ
 = 
	`ùc_ö°_°¨t_ext
(
ch™√l_d©a
->
sour˚
,

882 
ch™√l_d©a
->
öfo
 =
NULL
 ? 0 : 
	`°æí
(channel_data->info),

883 
ch™√l_d©a
->
öfo
,

884 
Ál£
 );

885 i‡(
fûe_h™dÀ
 > 0)

887 
	`¶ìp
(1);

889 i‡(
fûe_h™dÀ
 < 0) {

890 
	`ERROR
("C™nŸ o≥¿SWUpd©êIPC såóm: %s", 
	`°ªº‹
(
î∫o
));

891 
ªsu…
 = 
CHANNEL_EIO
;

892 
˛ónup_hódî
;

895 
wrôe_ˇŒback_t
 
wrd©a
;

896 
wrd©a
.
ch™√l_d©a
 = channel_data;

897 
wrd©a
.
ouçut
 = 
fûe_h™dÀ
;

898 
ªsu…_ch™√l_ˇŒback_wrôe_fûe
 = 
CHANNEL_OK
;

899 i‡((
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_WRITEFUNCTION
,

900 
ch™√l_ˇŒback_wrôe_fûe
Ë!
CURLE_OK
) ||

901 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_WRITEDATA
,

902 &
wrd©a
Ë!
CURLE_OK
)) {

903 
	`ERROR
("Cannot setup file writer callback function.");

904 
ªsu…
 = 
CHANNEL_EINIT
;

905 
˛ónup_fûe
;

914 
tŸÆ_byãs_dow∆ﬂded
 = 0;

915 
åy_cou¡
 = 0;

916 
CURLcode
 
cuærc
 = 
CURLE_OK
;

918 i‡(
åy_cou¡
 > 0) {

919 i‡(
ch™√l_d©a
->
ªåõs
 == 0) {

920 
	`ERROR
(

922 
cuærc
, 
	`cuæ_ósy_°ªº‹
(curlrc));

923 
ªsu…
 = 
	`ch™√l_m≠_cuæ_îr‹
(
cuærc
);

924 
˛ónup_fûe
;

927 i‡(
åy_cou¡
 > 
ch™√l_d©a
->
ªåõs
) {

928 
	`ERROR
("Channel get operationáborted because "

931 
ch™√l_d©a
->
ªåõs
);

932 
ªsu…
 = 
CHANNEL_ELOOP
;

933 
˛ónup_fûe
;

936 
	`DEBUG
("Channel connection interrupted,ÅryingÑesume "

938 
tŸÆ_byãs_dow∆ﬂded
);

939 i‡(
	`cuæ_ósy_£t›t
(

940 
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_RESUME_FROM_LARGE
,

941 
tŸÆ_byãs_dow∆ﬂded
Ë!
CURLE_OK
) {

942 
	`ERROR
("CouldÇot set ChannelÑesume seek (%d): "

944 
cuærc
, 
	`cuæ_ósy_°ªº‹
(curlrc));

945 
ªsu…
 = 
	`ch™√l_m≠_cuæ_îr‹
(
cuærc
);

946 
˛ónup_fûe
;

948 
	`TRACE
("Channel sleeps for %d secondsÇow.",

949 
ch™√l_d©a
->
ªåy_¶ìp
);

950 i‡(
	`¶ìp
(
ch™√l_d©a
->
ªåy_¶ìp
) > 0) {

951 
	`TRACE
("Channel's sleep got interrupted, "

954 
	`TRACE
("Channeláwakened from sleep.");

957 
cuærc
 = 
	`cuæ_ósy_≥rf‹m
(
ch™√l_cuæ
->
h™dÀ
);

958 
ªsu…
 = 
	`ch™√l_m≠_cuæ_îr‹
(
cuærc
);

959 i‡((
ªsu…
 !
CHANNEL_OK
Ë&& (ªsu… !
CHANNEL_EAGAIN
)) {

960 
	`ERROR
("Channel operationÑeturnedÉrror (%d): '%s'",

961 
cuærc
, 
	`cuæ_ósy_°ªº‹
(curlrc));

962 
˛ónup_fûe
;

965 
byãs_dow∆ﬂded
;

966 
CURLcode
 
ªsdÕrogªss
 = 
	`cuæ_ósy_gëöfo
(

967 
ch™√l_cuæ
->
h™dÀ
, 
CURLINFO_SIZE_DOWNLOAD
,

968 &
byãs_dow∆ﬂded
);

969 i‡(
ªsdÕrogªss
 !
CURLE_OK
) {

970 
	`ERROR
("Channel doesÇotÑeport bytes downloaded (%d): "

972 
ªsdÕrogªss
, 
	`cuæ_ósy_°ªº‹
(resdlprogress));

973 
ªsu…
 = 
	`ch™√l_m≠_cuæ_îr‹
(
ªsdÕrogªss
);

974 
˛ónup_fûe
;

976 
tŸÆ_byãs_dow∆ﬂded
 +
byãs_dow∆ﬂded
;

978 } ++
åy_cou¡
 && (
ªsu…
 !
CHANNEL_OK
));

980 
	`ch™√l_log_ef„˘ive_uæ
(
this
);

982 
	`DEBUG
("Channel downloaded %llu bytes ~ %llu MiB.",

983 
tŸÆ_byãs_dow∆ﬂded
,Åotal_bytes_downloaded / 1024 / 1024);

985 
hâp_ª•⁄£_code
;

986 i‡((
ªsu…
 = 
	`ch™√l_m≠_hâp_code
(
this
, &
hâp_ª•⁄£_code
)) !=

987 
CHANNEL_OK
) {

988 
	`ERROR
("Channel operationÑeturned HTTPÉrror code %ld.",

989 
hâp_ª•⁄£_code
);

990 
˛ónup_fûe
;

992 i‡(
ch™√l_d©a
->
debug
) {

993 
	`TRACE
("Channel operationÑeturned HTTP status code %ld.",

994 
hâp_ª•⁄£_code
);

997 i‡(
ªsu…_ch™√l_ˇŒback_wrôe_fûe
 !
CHANNEL_OK
) {

998 
ªsu…
 = 
CHANNEL_EIO
;

999 
˛ónup_fûe
;

1002 i‡(
ch™√l_d©a
->
u£s¶
) {

1003 
sha1hash
[
SWUPDATE_SHA_DIGEST_LENGTH
];

1004 
md_Àn
;

1005 ()
md_Àn
;

1006 i‡(
	`swupd©e_HASH_föÆ
(
ch™√l_d©a
->
dg°
, 
sha1hash
, &
md_Àn
) != 1) {

1007 
	`ERROR
("Cannot compute checksum.");

1008 
˛ónup_fûe
;

1011 
sha1hexch¨
[3];

1012 
i
 = 0; i < 
SWUPDATE_SHA_DIGEST_LENGTH
; i++) {

1013 
	`•rötf
(
sha1hexch¨
, "%02x", 
sha1hash
[
i
]);

1014 
	`°rˇt
(
ch™√l_d©a
->
sha1hash
, 
sha1hexch¨
);

1018 
˛ónup_fûe
:

1023 i‡(
	`˛o£
(
fûe_h™dÀ
) != 0) {

1024 
	`ERROR
("ChannelÉrror while closing downloadÅarget handle: '%s'",

1025 
	`°ªº‹
(
î∫o
));

1027 i‡(
ch™√l_d©a
->
dg°
) {

1028 
	`swupd©e_HASH_˛ónup
(
ch™√l_d©a
->
dg°
);

1031 
˛ónup_hódî
:

1032 
	`cuæ_ósy_ª£t
(
ch™√l_cuæ
->
h™dÀ
);

1033 
	`cuæ_¶i°_‰ì_Æl
(
ch™√l_cuæ
->
hódî
);

1034 
ch™√l_cuæ
->
hódî
 = 
NULL
;

1036  
ªsu…
;

1037 
	}
}

1039 
ch™√l_›_ªs_t
 
	$ch™√l_gë
(
ch™√l_t
 *
this
, *
d©a
)

1041 
ch™√l_cuæ_t
 *
ch™√l_cuæ
 = 
this
->
¥iv
;

1042 
	`as£π
(
d©a
 !
NULL
);

1043 
	`as£π
(
ch™√l_cuæ
.
h™dÀ
 !
NULL
);

1045 
ch™√l_›_ªs_t
 
ªsu…
 = 
CHANNEL_OK
;

1046 
ch™√l_d©a_t
 *
ch™√l_d©a
 = (ch™√l_d©a_à*)
d©a
;

1048 i‡(
ch™√l_d©a
->
debug
) {

1049 
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_VERBOSE
, 1L);

1052 i‡((
ªsu…
 = 
	`ch™√l_£t_c⁄ã¡_ty≥
(
this
, 
ch™√l_d©a
)) !=

1053 
CHANNEL_OK
) {

1054 
	`ERROR
("Set content-type option failed.");

1055 
˛ónup_hódî
;

1058 i‡((
ªsu…
 = 
	`ch™√l_£t_›ti⁄s
(
this
, 
ch™√l_d©a
, 
CHANNEL_GET
)) !=

1059 
CHANNEL_OK
) {

1060 
	`ERROR
("Set channel option failed.");

1061 
˛ónup_hódî
;

1064 
ouçut_d©a_t
 
chunk
 = {.
mem‹y
 = 
NULL
, .
size
 = 0};

1065 i‡((
chunk
.
mem‹y
 = 
	`mÆloc
(1)Ë=
NULL
) {

1066 
	`ERROR
("Channel bufferÑeservation failed with OOM.");

1067 
ªsu…
 = 
CHANNEL_ENOMEM
;

1068 
˛ónup_hódî
;

1071 
wrôe_ˇŒback_t
 
wrd©a
;

1072 
wrd©a
.
ch™√l_d©a
 = channel_data;

1073 
wrd©a
.
outd©a
 = &
chunk
;

1075 i‡((
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_WRITEFUNCTION
,

1076 
ch™√l_ˇŒback_membuf„r
Ë!
CURLE_OK
) ||

1077 (
	`cuæ_ósy_£t›t
(
ch™√l_cuæ
->
h™dÀ
, 
CURLOPT_WRITEDATA
,

1078 (*)&
wrd©a
Ë!
CURLE_OK
)) {

1079 
	`ERROR
("Cannot setup memory buffer writer callback function.");

1080 
ªsu…
 = 
CHANNEL_EINIT
;

1081 
˛ónup_chunk
;

1084 i‡(
ch™√l_d©a
->
debug
) {

1085 
	`DEBUG
("TryögÅÿGET %s", 
ch™√l_d©a
->
uæ
);

1087 
CURLcode
 
cuærc
 = 
	`cuæ_ósy_≥rf‹m
(
ch™√l_cuæ
->
h™dÀ
);

1088 i‡(
cuærc
 !
CURLE_OK
) {

1089 
	`ERROR
("Ch™√»gë o≥øti⁄ faûed (%d): '%s'", 
cuærc
,

1090 
	`cuæ_ósy_°ªº‹
(
cuærc
));

1091 
ªsu…
 = 
	`ch™√l_m≠_cuæ_îr‹
(
cuærc
);

1092 
˛ónup_chunk
;

1095 i‡(
ch™√l_d©a
->
debug
) {

1096 
	`ch™√l_log_ef„˘ive_uæ
(
this
);

1099 
hâp_ª•⁄£_code
;

1100 
ªsu…
 = 
	`ch™√l_m≠_hâp_code
(
this
, &
hâp_ª•⁄£_code
);

1102 i‡(
ch™√l_d©a
->
nocheck™swî
)

1103 
˛ónup_chunk
;

1105 i‡((
ªsu…
 = 
	`ch™√l_m≠_hâp_code
(
this
, &
hâp_ª•⁄£_code
)) !=

1106 
CHANNEL_OK
) {

1107 
	`ERROR
("Channel operationÑeturned HTTPÉrror code %ld.",

1108 
hâp_ª•⁄£_code
);

1109 
hâp_ª•⁄£_code
) {

1113 
	`DEBUG
("Thêîr‹'†mesßgêis: '%s'\n", 
chunk
.
mem‹y
);

1118 
˛ónup_chunk
;

1120 i‡(
ch™√l_d©a
->
debug
) {

1121 
	`TRACE
("Channel operationÑeturned HTTP status code %ld.",

1122 
hâp_ª•⁄£_code
);

1125 #ifde‡
CONFIG_JSON


1126 
	`as£π
(
ch™√l_d©a
->
js⁄_ª∂y
 =
NULL
);

1127 
js⁄_tokíî_îr‹
 
js⁄_ªs
;

1128 
js⁄_tokíî
 *
js⁄_tokíizî
 = 
	`js⁄_tokíî_√w
();

1130 
ch™√l_d©a
->
js⁄_ª∂y
 = 
	`js⁄_tokíî_∑r£_ex
(

1131 
js⁄_tokíizî
, 
chunk
.
mem‹y
, ()chunk.
size
);

1132 } (
js⁄_ªs
 = 
	`js⁄_tokíî_gë_îr‹
(
js⁄_tokíizî
)) ==

1133 
js⁄_tokíî_c⁄töue
);

1134 i‡(
js⁄_ªs
 !
js⁄_tokíî_suc˚ss
) {

1135 
	`ERROR
("Error whileÖarsing channel'sÑeturned JSON data: %s",

1136 
	`js⁄_tokíî_îr‹_desc
(
js⁄_ªs
));

1137 
ªsu…
 = 
CHANNEL_EBADMSG
;

1138 
˛ónup_js⁄_tokíizî
;

1140 i‡(
ch™√l_d©a
->
debug
) {

1141 
	`TRACE
("Gë JSON: %s", 
chunk
.
mem‹y
);

1144 
˛ónup_js⁄_tokíizî
:

1145 
	`js⁄_tokíî_‰ì
(
js⁄_tokíizî
);

1147 
˛ónup_chunk
:

1148 
chunk
.
mem‹y
 !
NULL
 ? 
	`‰ì
(chunk.memory) : ()0;

1149 
˛ónup_hódî
:

1150 
	`cuæ_ósy_ª£t
(
ch™√l_cuæ
->
h™dÀ
);

1151 
	`cuæ_¶i°_‰ì_Æl
(
ch™√l_cuæ
->
hódî
);

1152 
ch™√l_cuæ
->
hódî
 = 
NULL
;

1154  
ªsu…
;

1155 
	}
}

	@swupdate/corelib/downloader.c

8 
	~<°dlib.h
>

9 
	~<î∫o.h
>

10 
	~<gë›t.h
>

12 
	~"utû.h
"

13 
	~"√tw‹k_ùc.h
"

14 
	~"dow∆ﬂd_öãrÁ˚.h
"

15 
	~"ch™√l.h
"

16 
	~"ch™√l_cuæ.h
"

17 
	~"∑r£lib.h
"

18 
	~"swupd©e_£âögs.h
"

25 
	#DL_LOWSPEED_TIME
 300

	)

27 
	#DL_DEFAULT_RETRIES
 3

	)

29 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

30 {"uæ", 
ªquúed_¨gumít
, 
NULL
, 'u'},

31 {"ªåõs", 
ªquúed_¨gumít
, 
NULL
, 'r'},

32 {"timeout", 
ªquúed_¨gumít
, 
NULL
, 't'},

33 {"authítifiˇti⁄", 
ªquúed_¨gumít
, 
NULL
, 'a'},

34 {
NULL
, 0, NULL, 0}};

41 
RECOVERY_STATUS
 
	$dow∆ﬂd_‰om_uæ
(
ch™√l_d©a_t
* 
ch™√l_d©a
)

43 
ch™√l_t
 *
ch™√l
 = 
	`ch™√l_√w
();

44 i‡(
ch™√l
->
	`›í
(ch™√l, 
ch™√l_d©a
Ë!
CHANNEL_OK
) {

45 
	`‰ì
(
ch™√l
);

46  
FAILURE
;

49 
	`TRACE
("Imagêdow∆ﬂd sèπed : %s", 
ch™√l_d©a
->
uæ
);

50 
	`nŸify
(
DOWNLOAD
, 0, 
INFOLEVEL
, 
NULL
);

52 
RECOVERY_STATUS
 
ªsu…
 = 
SUCCESS
;

53 
ch™√l_›_ªs_t
 
ch™ªsu…
 = 
ch™√l
->
	`gë_fûe
(ch™√l, 
ch™√l_d©a
);

54 i‡(
ch™ªsu…
 !
CHANNEL_OK
) {

55 
ªsu…
 = 
FAILURE
;

57 
	`ùc_waô_f‹_com∂ëe
(
NULL
);

58 
ch™√l
->
	`˛o£
(channel);

59 
	`‰ì
(
ch™√l
);

60  
ªsu…
;

61 
	}
}

63 
dow∆ﬂd_£âögs
(*
ñem
, 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

65 
ch™√l_d©a_t
 *
	g›t
 = (ch™√l_d©a_à*)
d©a
;

66 
	gtmp
[
SWUPDATE_GENERAL_STRING_SIZE
];

68 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "uæ", 
tmp
);

69 i‡(
°æí
(
tmp
)) {

70 
SETSTRING
(
›t
->
uæ
, 
tmp
);

73 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "authítiˇti⁄", 
tmp
);

74 i‡(
°æí
(
tmp
)) {

75 
SETSTRING
(
›t
->
auth
, 
tmp
);

77 
	g›t
->
	gauth
 = 
NULL
;

80 
gë_fõld
(
LIBCFG_PARSER
, 
ñem
, "retries",

81 &
›t
->
ªåõs
);

82 
gë_fõld
(
LIBCFG_PARSER
, 
ñem
, "timeout",

83 &
›t
->
low_•ìd_timeout
);

88 
	$dow∆ﬂd_¥öt_hñp
()

90 
	`Ârötf
(

91 
°dout
,

98 
DL_DEFAULT_RETRIES
, 
DL_LOWSPEED_TIME
);

99 
	}
}

101 
ch™√l_d©a_t
 
	gch™√l_›ti⁄s
 = {

102 .
sour˚
 = 
SOURCE_DOWNLOADER
,

103 .
	gdebug
 = 
Ál£
,

104 .
	gªåõs
 = 
DL_DEFAULT_RETRIES
,

105 .
	glow_•ìd_timeout
 = 
DL_LOWSPEED_TIME


108 
	$°¨t_dow∆ﬂd
(c⁄° *
‚ame
, 
¨gc
, *
¨gv
[])

110 i‡(
‚ame
) {

111 
	`ªad_moduÀ_£âögs
(
‚ame
, "dow∆ﬂd", 
dow∆ﬂd_£âögs
, &
ch™√l_›ti⁄s
);

115 
›töd
 = 1;

116 
choi˚
 = 0;

117 (
choi˚
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "t:u:r:a:",

118 
l⁄g_›ti⁄s
, 
NULL
)) != -1) {

119 
choi˚
) {

121 
ch™√l_›ti⁄s
.
low_•ìd_timeout
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

124 
	`SETSTRING
(
ch™√l_›ti⁄s
.
uæ
, 
›èrg
);

127 
	`SETSTRING
(
ch™√l_›ti⁄s
.
auth
, 
›èrg
);

130 
ch™√l_›ti⁄s
.
ªåõs
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

134  -
EINVAL
;

138 
RECOVERY_STATUS
 
ªsu…
 = 
	`dow∆ﬂd_‰om_uæ
(&
ch™√l_›ti⁄s
);

139 i‡(
ªsu…
 !
FAILURE
) {

140 
ùc_mesßge
 
msg
;

141 i‡(
	`ùc_po°upd©e
(&
msg
) != 0) {

142 
ªsu…
 = 
FAILURE
;

144 
ªsu…
 = 
msg
.
ty≥
 =
ACK
 ?Ñesu… : 
FAILURE
;

148 i‡(
ch™√l_›ti⁄s
.
uæ
 !
NULL
) {

149 
	`‰ì
(
ch™√l_›ti⁄s
.
uæ
);

151 i‡(
ch™√l_›ti⁄s
.
auth
 !
NULL
) {

152 
	`‰ì
(
ch™√l_›ti⁄s
.
auth
);

155 
	`exô
(
ªsu…
 =
SUCCESS
 ? 
EXIT_SUCCESS
 :Ñesult);

156 
	}
}

	@swupdate/corelib/installer.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°dboﬁ.h
>

12 
	~<°döt.h
>

13 
	~<uni°d.h
>

14 
	~<°rög.h
>

15 
	~<gë›t.h
>

16 
	~<î∫o.h
>

17 
	~<˘y≥.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/waô.h
>

20 
	~<f˙é.h
>

21 
	~<sys/°©.h
>

22 
	~<sys/mou¡.h
>

24 
	~"gíî©ed/autoc⁄f.h
"

25 
	~"bsdqueue.h
"

26 
	~"globÆs.h
"

27 
	~"utû.h
"

28 
	~"swupd©e.h
"

29 
	~"ö°ÆÀr.h
"

30 
	~"h™dÀr.h
"

31 
	~"˝iohdr.h
"

32 
	~"∑r£rs.h
"

33 
	~"boŸlﬂdî.h
"

34 
	~"¥ogªss.h
"

43 
	$check_if_ªquúed
(
imgli°
 *
li°
, 
fûehdr
 *
pfdh
,

44 c⁄° *
de°dú
,

45 
img_ty≥
 **
pimg
)

47 
skù
 = 
SKIP_FILE
;

48 
img_ty≥
 *
img
;

53 
ö°Æl_dúe˘
 = 0;

55 
	`LIST_FOREACH
(
img
, 
li°
, 
√xt
) {

56 i‡(
	`°rcmp
(
pfdh
->
fûíame
, 
img
->
‚ame
) == 0) {

57 
skù
 = 
COPY_FILE
;

58 
img
->
¥ovided
 = 1;

59 
img
->
size
 = ()
pfdh
->size;

61 i‡(
	`¢¥ötf
(
img
->
exåa˘_fûe
,

62 (
img
->
exåa˘_fûe
), "%s%s",

63 
de°dú
, 
pfdh
->
fûíame
Ë>()(
img
->
exåa˘_fûe
)) {

64 
	`ERROR
("P©hÅoÿl⁄g: %s%s", 
de°dú
, 
pfdh
->
fûíame
);

65  -
EBADF
;

72 i‡(
ö°Æl_dúe˘
) {

73 
	`ERROR
("sw-description: streamÅo several handlers unsupported");

74  -
EINVAL
;

77 i‡(
img
->
ö°Æl_dúe˘ly
) {

78 
skù
 = 
INSTALL_FROM_STREAM
;

79 
ö°Æl_dúe˘
++;

82 *
pimg
 = 
img
;

86  
skù
;

87 
	}
}

94 
	$exåa˘_s¸ùts
(
fd
, 
imgli°
 *
hód
, 
‰omfûe
)

96 
img_ty≥
 *
s¸ùt
;

97 
fdout
;

98 
ªt
 = 0;

99 c⁄° * 
tmpdú_s¸ùts
 = 
	`gë_tmpdús¸ùts
();

101 
	`LIST_FOREACH
(
s¸ùt
, 
hód
, 
√xt
) {

102 i‡(
s¸ùt
->
¥ovided
 == 0) {

103 
	`ERROR
("Required script %sÇot found in image",

104 
s¸ùt
->
‚ame
);

108 
	`¢¥ötf
(
s¸ùt
->
exåa˘_fûe
, (script->extract_file), "%s%s",

109 
tmpdú_s¸ùts
 , 
s¸ùt
->
‚ame
);

111 
fdout
 = 
	`›ífûeouçut
(
s¸ùt
->
exåa˘_fûe
);

112 i‡(
fdout
 < 0)

113  
fdout
;

115 i‡(
‰omfûe
)

116 
ªt
 = 
	`exåa˘_√xt_fûe
(
fd
, 
fdout
, 
s¸ùt
->
off£t
, 0,

117 
s¸ùt
->
is_í¸y±ed
, s¸ùt->
sha256
);

119 
fdö
;

120 *
tmpfûe
;

121 
off£t
 = 0;

122 
uöt32_t
 
checksum
;

124 i‡(
	`a•rötf
(&
tmpfûe
, "%s%s", 
	`gë_tmpdú
(), 
s¸ùt
->
‚ame
) ==

125 
ENOMEM_ASPRINTF
) {

126 
	`ERROR
("P©hÅoÿl⁄g: %s%s", 
	`gë_tmpdú
(), 
s¸ùt
->
‚ame
);

127 
	`˛o£
(
fdout
);

128  -
ENOMEM
;

131 
fdö
 = 
	`›í
(
tmpfûe
, 
O_RDONLY
);

132 
	`‰ì
(
tmpfûe
);

133 i‡(
fdö
 < 0) {

134 
	`ERROR
("Extracted scriptÇot found in %s: %s %d",

135 
	`gë_tmpdú
(), 
s¸ùt
->
exåa˘_fûe
, 
î∫o
);

136  -
ENOENT
;

139 
ªt
 = 
	`c›yfûe
(
fdö
, &
fdout
, 
s¸ùt
->
size
, &
off£t
, 0, 0,

140 
s¸ùt
->
com¥es£d
,

141 &
checksum
,

142 
s¸ùt
->
sha256
,

143 
s¸ùt
->
is_í¸y±ed
,

144 
NULL
);

145 
	`˛o£
(
fdö
);

147 
	`˛o£
(
fdout
);

149 i‡(
ªt
 < 0)

150  
ªt
;

153 
	}
}

155 
	$upd©e_boŸlﬂdî_ív
(
swupd©e_cfg
 *
cfg
, c⁄° *
s¸ùt
)

157 
fd
;

158 
ªt
 = 0;

159 
di˘_íåy
 *
boŸv¨
;

160 
buf
[
MAX_BOOT_SCRIPT_LINE_LENGTH
];

162 
fd
 = 
	`›ífûeouçut
(
s¸ùt
);

163 i‡(
fd
 < 0)

166 
	`LIST_FOREACH
(
boŸv¨
, &
cfg
->
boŸlﬂdî
, 
√xt
) {

167 *
key
 = 
	`di˘_íåy_gë_key
(
boŸv¨
);

168 *
vÆue
 = 
	`di˘_íåy_gë_vÆue
(
boŸv¨
);

170 i‡(!
key
 || !
vÆue
)

172 
	`¢¥ötf
(
buf
, (buf), "%†%s\n", 
key
, 
vÆue
);

173 i‡(
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf)Ë!(
ssize_t
)strlen(buf)) {

174 
	`TRACE
("Error savingÅemporary bootloaderÉnvironment file");

175 
	`˛o£
(
fd
);

179 
	`˛o£
(
fd
);

181 i‡((
ªt
 = 
	`boŸlﬂdî_≠∂y_li°
(
s¸ùt
)) < 0) {

182 
	`ERROR
("BoŸlﬂdî-•ecifi¯îr‹ %d upd©ög it†ívú⁄mít", 
ªt
);

184  
ªt
;

185 
	}
}

187 
	$run_¥ïo°_s¸ùts
(
imgli°
 *
li°
, 
s¸ùt_‚
 
ty≥
)

189 
ªt
;

190 
img_ty≥
 *
img
;

191 
ö°ÆÀr_h™dÀr
 *
hnd
;

194 
	`LIST_FOREACH
(
img
, 
li°
, 
√xt
) {

195 i‡(!
img
->
is_s¸ùt
)

197 
hnd
 = 
	`föd_h™dÀr
(
img
);

198 i‡(
hnd
) {

199 
ªt
 = 
hnd
->
	`ö°ÆÀr
(
img
, &
ty≥
);

200 i‡(
ªt
)

201  
ªt
;

206 
	}
}

208 
	$ö°Æl_sögÀ_image
(
img_ty≥
 *
img
, 
dry_run
)

210 
ö°ÆÀr_h™dÀr
 *
hnd
;

211 
ªt
;

217 i‡(
dry_run
)

218 
	`°r˝y
(
img
->
ty≥
, "dummy");

220 
hnd
 = 
	`föd_h™dÀr
(
img
);

221 i‡(!
hnd
) {

222 
	`TRACE
("ImagêTy≥ %†nŸ suµ‹ãd", 
img
->
ty≥
);

225 
	`TRACE
("Found in°ÆÀ∏f‹ såóm %†%s", 
img
->
‚ame
, 
hnd
->
desc
);

227 
	`swupd©e_¥ogªss_öc_°ï
(
img
->
‚ame
);

230 
ªt
 = 
hnd
->
	`ö°ÆÀr
(
img
, hnd->
d©a
);

231 i‡(
ªt
 != 0) {

232 
	`TRACE
("Installer for %sÇot successful !",

233 
hnd
->
desc
);

236 
	`swupd©e_¥ogªss_°ï_com∂ëed
();

238  
ªt
;

239 
	}
}

247 
	$ö°Æl_images
(
swupd©e_cfg
 *
sw
, 
fdsw
, 
‰omfûe
)

249 
ªt
;

250 
img_ty≥
 *
img
;

251 *
fûíame
;

252 
fûehdr
 
fdh
;

253 
°©
 
buf
;

254 c⁄° * 
TMPDIR
 = 
	`gë_tmpdú
();

255 
dry_run
 = 
sw
->
globÆs
.dry_run;

258 c⁄° * 
tmpdú_s¸ùts
 = 
	`gë_tmpdús¸ùts
();

259 
ªt
 = 
	`exåa˘_s¸ùts
(
fdsw
, &
sw
->
s¸ùts
, 
‰omfûe
);

260 
ªt
 |
	`exåa˘_s¸ùts
(
fdsw
, &
sw
->
boŸs¸ùts
, 
‰omfûe
);

261 i‡(
ªt
) {

262 
	`ERROR
("exåa˘ög s¸ùàtÿ%†Áûed", 
tmpdú_s¸ùts
);

263  
ªt
;

267 i‡(!
dry_run
) {

268 
ªt
 = 
	`run_¥ïo°_s¸ùts
(&
sw
->
s¸ùts
, 
PREINSTALL
);

269 i‡(
ªt
) {

270 
	`ERROR
("executeÖreinstall scripts failed");

271  
ªt
;

275 
	`LIST_FOREACH
(
img
, &
sw
->
images
, 
√xt
) {

284 i‡(!
‰omfûe
 && 
img
->
ö°Æl_dúe˘ly
)

287 i‡(!
‰omfûe
) {

288 i‡(
	`a•rötf
(&
fûíame
, "%s%s", 
TMPDIR
, 
img
->
‚ame
) ==

289 
ENOMEM_ASPRINTF
) {

290 
	`ERROR
("P©hÅoÿl⁄g: %s%s", 
TMPDIR
, 
img
->
‚ame
);

294 
ªt
 = 
	`°©
(
fûíame
, &
buf
);

295 i‡(
ªt
) {

296 
	`TRACE
("%†nŸ found o∏wr⁄g", 
fûíame
);

297 
	`‰ì
(
fûíame
);

300 
img
->
size
 = 
buf
.
°_size
;

302 
img
->
fdö
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

303 
	`‰ì
(
fûíame
);

304 i‡(
img
->
fdö
 < 0) {

305 
	`ERROR
("Image %s cannot be opened",

306 
img
->
‚ame
);

310 i‡(
	`exåa˘_img_‰om_˝io
(
fdsw
, 
img
->
off£t
, &
fdh
) < 0)

312 
img
->
size
 = 
fdh
.size;

313 
img
->
checksum
 = 
fdh
.
chksum
;

314 
img
->
fdö
 = 
fdsw
;

317 i‡((
	`°æí
(
img
->
∑th
) > 0) &&

318 (
	`°æí
(
img
->
exåa˘_fûe
) > 0) &&

319 (
	`°∫cmp
(
img
->
∑th
, img->
exåa˘_fûe
, (img->path)) == 0)){

320 
img_ty≥
 *
tmpimg
;

321 
	`WARN
("Temporaryánd finalÜocation for %s is identical, skip "

322 "¥o˚ssög.", 
img
->
∑th
);

323 
	`LIST_REMOVE
(
img
, 
√xt
);

324 
	`LIST_FOREACH
(
tmpimg
, &
sw
->
images
, 
√xt
) {

325 i‡(
	`°∫cmp
(
tmpimg
->
‚ame
, 
img
->fname, (img->fname)) == 0) {

326 
	`WARN
("%s will beÑemoved, it'sÑeferenced more "

327 "th™ on˚.", 
img
->
∑th
);

331 
	`‰ì_image
(
img
);

332 
ªt
 = 0;

334 
ªt
 = 
	`ö°Æl_sögÀ_image
(
img
, 
dry_run
);

337 i‡(!
‰omfûe
)

338 
	`˛o£
(
img
->
fdö
);

340 i‡(
ªt
)

341  
ªt
;

348 i‡(
dry_run
) {

349  
ªt
;

352 
ªt
 = 
	`run_¥ïo°_s¸ùts
(&
sw
->
s¸ùts
, 
POSTINSTALL
);

353 i‡(
ªt
) {

354 
	`ERROR
("executeÖostinstall scripts failed");

355  
ªt
;

358 i‡(!
	`LIST_EMPTY
(&
sw
->
boŸlﬂdî
)) {

359 * 
boŸs¸ùt
 = 
	`Æloˇ
(
	`°æí
(
TMPDIR
)+°æí(
BOOT_SCRIPT_SUFFIX
)+1);

360 
	`•rötf
(
boŸs¸ùt
, "%s%s", 
TMPDIR
, 
BOOT_SCRIPT_SUFFIX
);

361 
ªt
 = 
	`upd©e_boŸlﬂdî_ív
(
sw
, 
boŸs¸ùt
);

362 i‡(
ªt
) {

363  
ªt
;

367 
ªt
 |
	`run_¥ïo°_s¸ùts
(&
sw
->
boŸs¸ùts
, 
POSTINSTALL
);

369  
ªt
;

370 
	}
}

372 
ªmove_sw_fûe
(
__©åibuã__
 ((
__unu£d__
)Ë*
‚ame
)

374 #i‚de‡
CONFIG_NOCLEANUP


376 
u∆ök
(
‚ame
);

380 
	$˛óup_img_íåy
(
img_ty≥
 *
img
)

382 *
‚
;

383 c⁄° *
tmp
[] = { 
	`gë_tmpdús¸ùts
(), 
	`gë_tmpdú
() };

385 i‡(
img
->
‚ame
[0]) {

386 
i
 = 0; i < 
	`ARRAY_SIZE
(
tmp
); i++) {

387 i‡(
	`a•rötf
(&
‚
, "%s%s", 
tmp
[
i
], 
img
->
‚ame
Ë=
ENOMEM_ASPRINTF
) {

388 
	`ERROR
("P©hÅoÿl⁄g: %s%s", 
tmp
[
i
], 
img
->
‚ame
);

390 
	`ªmove_sw_fûe
(
‚
);

391 
	`‰ì
(
‚
);

395 
	}
}

397 
	$‰ì_image
(
img_ty≥
 *
img
) {

398 
	`di˘_dr›_db
(&
img
->
¥›îtõs
);

399 
	`‰ì
(
img
);

400 
	}
}

402 
	$˛ónup_fûes
(
swupd©e_cfg
 *
so·w¨e
) {

403 *
‚
;

404 
img_ty≥
 *
img
;

405 
img_ty≥
 *
img_tmp
;

406 
hw_ty≥
 *
hw
;

407 
hw_ty≥
 *
hw_tmp
;

408 c⁄° * 
TMPDIR
 = 
	`gë_tmpdú
();

409 
imgli°
 *
li°
[] = {&
so·w¨e
->
s¸ùts
, &so·w¨e->
boŸs¸ùts
};

411 
	`LIST_FOREACH_SAFE
(
img
, &
so·w¨e
->
images
, 
√xt
, 
img_tmp
) {

412 i‡(
img
->
‚ame
[0]) {

413 i‡(
	`a•rötf
(&
‚
, "%s%s", 
TMPDIR
,

414 
img
->
‚ame
Ë=
ENOMEM_ASPRINTF
) {

415 
	`ERROR
("P©hÅoÿl⁄g: %s%s", 
TMPDIR
, 
img
->
‚ame
);

417 
	`ªmove_sw_fûe
(
‚
);

418 
	`‰ì
(
‚
);

420 
	`LIST_REMOVE
(
img
, 
√xt
);

421 
	`‰ì_image
(
img
);

424 
cou¡
 = 0; cou¡ < 
	`ARRAY_SIZE
(
li°
); count++) {

425 
	`LIST_FOREACH_SAFE
(
img
, 
li°
[
cou¡
], 
√xt
, 
img_tmp
) {

426 
	`˛óup_img_íåy
(
img
);

428 
	`LIST_REMOVE
(
img
, 
√xt
);

429 
	`‰ì_image
(
img
);

433 
	`di˘_dr›_db
(&
so·w¨e
->
boŸlﬂdî
);

435 i‡(
	`a•rötf
(&
‚
, "%s%s", 
TMPDIR
, 
BOOT_SCRIPT_SUFFIX
Ë!
ENOMEM_ASPRINTF
) {

436 
	`ªmove_sw_fûe
(
‚
);

437 
	`‰ì
(
‚
);

440 
	`LIST_FOREACH_SAFE
(
hw
, &
so·w¨e
->
h¨dw¨e
, 
√xt
, 
hw_tmp
) {

441 
	`LIST_REMOVE
(
hw
, 
√xt
);

442 
	`‰ì
(
hw
);

444 i‡(
	`a•rötf
(&
‚
, "%s%s", 
TMPDIR
, 
SW_DESCRIPTION_FILENAME
Ë!
ENOMEM_ASPRINTF
) {

445 
	`ªmove_sw_fûe
(
‚
);

446 
	`‰ì
(
‚
);

448 #ifde‡
CONFIG_SIGNED_IMAGES


449 i‡(
	`a•rötf
(&
‚
, "%s%s.sig", 
TMPDIR
, 
SW_DESCRIPTION_FILENAME
Ë!
ENOMEM_ASPRINTF
) {

450 
	`ªmove_sw_fûe
(
‚
);

451 
	`‰ì
(
‚
);

454 
	}
}

456 
	$po°upd©e
(
swupd©e_cfg
 *
swcfg
, c⁄° *
öfo
)

458 
	`swupd©e_¥ogªss_d⁄e
(
öfo
);

460 i‡((
swcfg
Ë&& (
	`°∫Àn
(swcfg->
globÆs
.
po°upd©ecmd
,

461 
SWUPDATE_GENERAL_STRING_SIZE
) > 0)) {

462 
	`DEBUG
("ExecutingÖost-update command '%s'",

463 
swcfg
->
globÆs
.
po°upd©ecmd
);

464 
ªt
 = 
	`sy°em
(
swcfg
->
globÆs
.
po°upd©ecmd
);

465 i‡(
	`WIFEXITED
(
ªt
)) {

466 
	`DEBUG
("Po°-upd©êcomm™dÑëu∫ed %d", 
	`WEXITSTATUS
(
ªt
));

468 
	`ERROR
("Po°-upd©êcomm™dÑëu∫ed %d: '%s'", 
ªt
, 
	`°ªº‹
(
î∫o
));

474 
	}
}

	@swupdate/corelib/lua_compat.c

8 
	~<lua.h
>

9 
	~<lua_utû.h
>

15 #i‡!
deföed
(
LUA_VERSION_NUM
) || LUA_VERSION_NUM == 501

16 *
	$luaL_¥ïbuffsize
(
luaL_Buf„r_52
 *
B
, 
size_t
 
s
)

18 i‡(
B
->
ˇ∑côy
 - B->
√Àms
 < 
s
) {

19 * 
√w±r
 = 
NULL
;

20 
size_t
 
√wˇp
 = 
B
->
ˇ∑côy
 * 2;

21 i‡(
√wˇp
 - 
B
->
√Àms
 < 
s
)

22 
√wˇp
 = 
B
->
√Àms
 + 
s
;

23 i‡(
√wˇp
 < 
B
->
ˇ∑côy
)

24 
	`luaL_îr‹
(
B
->
L2
, "bufferÅooÜarge");

25 
√w±r
 = 
	`lua_√wu£rd©a
(
B
->
L2
, 
√wˇp
);

26 
	`mem˝y
(
√w±r
, 
B
->
±r
, B->
√Àms
);

27 i‡(
B
->
±r
 !B->
b
.
buf„r
)

28 
	`lua_ª∂a˚
(
B
->
L2
, -2);

29 
B
->
±r
 = 
√w±r
;

30 
B
->
ˇ∑côy
 = 
√wˇp
;

32  
B
->
±r
+B->
√Àms
;

33 
	}
}

35 
	$luaL_bufföô
(
lua_Sèã
 *
L
, 
luaL_Buf„r_52
 *
B
)

38 
B
->
b
.
p
 = 
NULL
;

39 
B
->
b
.
L
 = 
NULL
;

40 
B
->
b
.
lvl
 = 0;

42 
B
->
±r
 = B->
b
.
buf„r
;

43 
B
->
ˇ∑côy
 = 
LUAL_BUFFERSIZE
;

44 
B
->
√Àms
 = 0;

45 
B
->
L2
 = 
L
;

46 
	}
}

48 
	$luaL_pushªsu…
(
luaL_Buf„r_52
 *
B
)

50 
	`lua_pushl°rög
(
B
->
L2
, B->
±r
, B->
√Àms
);

51 i‡(
B
->
±r
 !B->
b
.
buf„r
)

52 
	`lua_ª∂a˚
(
B
->
L2
, -2);

53 
	}
}

55 
	$luaL_£tfuncs
(
lua_Sèã
 *
L
, c⁄° 
luaL_Reg
 *
l
, 
nup
)

57 
	`luaL_check°ack
(
L
, 
nup
+1, "too many upvalues");

58 ; 
l
->
«me
 !
NULL
;Ü++) {

59 
i
;

60 
	`lua_push°rög
(
L
, 
l
->
«me
);

61 
i
 = 0; i < 
nup
; i++)

62 
	`lua_pushvÆue
(
L
, -(
nup
 + 1));

63 
	`lua_pushc˛osuª
(
L
, 
l
->
func
, 
nup
);

64 
	`lua_£âabÀ
(
L
, -(
nup
 + 3));

66 
	`lua_p›
(
L
, 
nup
);

67 
	}
}

69 
	$luaL_ªquúef
(
lua_Sèã
 *
L
, c⁄°* 
mod«me
, 
lua_CFun˘i⁄
 
›íf
, 
glb
)

71 
	`luaL_check°ack
(
L
, 3, "notÉnough stack slots");

72 
	`lua_pushcfun˘i⁄
(
L
, 
›íf
);

73 
	`lua_push°rög
(
L
, 
mod«me
);

74 
	`lua_ˇŒ
(
L
, 1, 1);

75 
	`lua_gëglobÆ
(
L
, "package");

76 
	`lua_gëfõld
(
L
, -1, "loaded");

77 
	`lua_ª∂a˚
(
L
, -2);

78 
	`lua_pushvÆue
(
L
, -2);

79 
	`lua_£tfõld
(
L
, -2, 
mod«me
);

80 
	`lua_p›
(
L
, 1);

81 i‡(
glb
) {

82 
	`lua_pushvÆue
(
L
, -1);

83 
	`lua_£tglobÆ
(
L
, 
mod«me
);

85 
	}
}

	@swupdate/corelib/lua_interface.c

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<°dboﬁ.h
>

12 
	~<î∫o.h
>

14 
	~"lua.h
"

15 
	~"œuxlib.h
"

16 
	~"luÆib.h
"

17 
	~"lua_utû.h
"

18 
	~"utû.h
"

19 
	~"h™dÀr.h
"

20 
	~"boŸlﬂdî.h
"

22 
	#LUA_TYPE_PEMBSCR
 1

	)

23 
	#LUA_TYPE_HANDLER
 2

	)

25 #i‡
deföed
(
CONFIG_EMBEDDED_LUA_HANDLER
)

26 c⁄° 
EMBEDDED_LUA_SRC_START
[];

27 c⁄° 
EMBEDDED_LUA_SRC_END
[];

30 
	#LUA_PUSH_IMG_STRING
(
img
, 
©å
, 
fõld
) do { \

31 
	`lua_push°rög
(
L
, 
©å
); \

32 
	`lua_push°rög
(
L
, 
img
->
fõld
); \

33 
	`lua_£âabÀ
(
L
, -3); \

34 } 0)

	)

36 
	#LUA_PUSH_IMG_BOOL
(
img
, 
©å
, 
fõld
) do { \

37 
	`lua_push°rög
(
L
, 
©å
); \

38 
	`lua_pushboﬁón
(
L
, 
img
->
fõld
); \

39 
	`lua_£âabÀ
(
L
, -3); \

40 } 0)

	)

42 
	#LUA_PUSH_IMG_NUMBER
(
img
, 
©å
, 
fõld
) do { \

43 
	`lua_push°rög
(
L
, 
©å
); \

44 
	`lua_pushnumbî
(
L
, ()
img
->
fõld
); \

45 
	`lua_£âabÀ
(
L
, -3); \

46 } 0)

	)

48 #ifde‡
CONFIG_HANDLER_IN_LUA


49 
l_ªgi°î_h™dÀr
–
lua_Sèã
 *
L
 );

50 
l_ˇŒ_h™dÀr
(
lua_Sèã
 *
L
);

52 
image2èbÀ
(
lua_Sèã
* 
L
, 
img_ty≥
 *
img
);

53 
èbÀ2image
(
lua_Sèã
* 
L
, 
img_ty≥
 *
img
);

54 
upd©e_èbÀ
(
lua_Sèã
* 
L
, 
img_ty≥
 *
img
);

55 
lua›í_swupd©e
(
lua_Sèã
 *
L
);

57 #ifde‡
CONFIG_HANDLER_IN_LUA


58 
boﬁ
 
	$is_ty≥
(
lua_Sèã
 *
L
, 
uöçå_t
 
ty≥
)

60 
	`lua_gëglobÆ
(
L
, "SWUPDATE_LUA_TYPE");

61 
boﬁ
 
ªt
 = 
	`lua_tou£rd©a
(
L
, -1Ë=(*)
ty≥
 ? 
åue
 : 
Ál£
;

62 
	`lua_p›
(
L
, 1);

63  
ªt
;

64 
	}
}

67 
	$lua_dump_èbÀ
(
lua_Sèã
 *
L
, *
°r
, 
img_ty≥
 *
img
, c⁄° *
key
)

70 
	`lua_pushnû
(
L
);

72 
	`lua_√xt
(
L
, -2)) {

74 
	`lua_pushvÆue
(
L
, -2);

76 
	`lua_ty≥
(
L
, -2)) {

77 
LUA_TSTRING
:

78 
LUA_TNUMBER
:

79 
	`TRACE
("%†%†%s", 
°r
,

80 
	`lua_to°rög
(
L
, -1),

81 
	`lua_to°rög
(
L
, -2));

82 i‡(
img
) {

83 
	`TRACE
("InsertingÖroperty %s[%s] = %s",

84 
key
,

85 
	`lua_to°rög
(
L
, -1),

86 
	`lua_to°rög
(
L
, -2));

87 
	`di˘_ö£π_vÆue
(&
img
->
¥›îtõs
, 
key
,

88 
	`lua_to°rög
(
L
, -2));

91 
LUA_TFUNCTION
:

92 
	`TRACE
("%†%s()", 
°r
,

93 
	`lua_to°rög
(
L
, -1));

95 
LUA_TTABLE
: {

96 *
s
;

97 *
¥›key
;

99 i‡(
	`a•rötf
(&
¥›key
, "%s", 
	`lua_to°rög
(
L
, -1)Ë=
ENOMEM_ASPRINTF
) {

100 
	`TRACE
("Out of memory, dump stopped");

104 i‡(
	`a•rötf
(&
s
, "%†%s:", 
°r
, 
¥›key
Ë!
ENOMEM_ASPRINTF
) {

105 
	`lua_pushvÆue
(
L
, -2);

106 
	`lua_dump_èbÀ
(
L
, 
s
, 
img
, 
¥›key
);

107 
	`lua_p›
(
L
, 1);

108 
	`‰ì
(
s
);

110 
	`‰ì
(
¥›key
);

113 
LUA_TBOOLEAN
:

114 
	`TRACE
("%†%†%s", 
°r
,

115 
	`lua_to°rög
(
L
, -1),

116 (
	`lua_toboﬁón
(
L
, -2) ? "true" : "false"));

117 i‡(
img
)

118 
	`di˘_ö£π_vÆue
(&
img
->
¥›îtõs
, 
°r
,

119 (
	`lua_toboﬁón
(
L
, -2) ? "true" : "false"));

122 
	`TRACE
("%†%†<u≈¨£dÅy≥>", 
°r
,

123 
	`lua_to°rög
(
L
, -1));

125 
	`lua_p›
(
L
, 2);

129 
	}
}

131 
	$LUA°ackDump
(
lua_Sèã
 *
L
)

133 
t›
 = 
	`lua_gët›
(
L
);

134 
i
 = 1; i <
t›
; i++) {

135 
t
 = 
	`lua_ty≥
(
L
, 
i
);

136 
t
) {

137 
LUA_TSTRING
: {

138 
	`TRACE
("(%dË[°rög] %s", 
i
, 
	`lua_to°rög
(
L
, i));

141 
LUA_TBOOLEAN
: {

142 
	`TRACE
("(%dË[boﬁ ] %s", 
i
, (
	`lua_toboﬁón
(
L
, i) ? "true" : "false"));

145 
LUA_TFUNCTION
: {

146 
	`TRACE
("(%dË[fun¯ ] %s()", 
i
, 
	`lua_to°rög
(
L
, i));

149 
LUA_TNUMBER
: {

150 
	`TRACE
("(%dË[numbî] %g", 
i
, 
	`lua_t⁄umbî
(
L
, i));

153 
LUA_TTABLE
: {

154 *
s
;

156 i‡(
	`a•rötf
(&
s
, "(%dË[èbÀ ]", 
i
Ë!
ENOMEM_ASPRINTF
) {

157 
	`lua_pushvÆue
(
L
, -1);

158 
	`lua_dump_èbÀ
(
L
, 
s
, 
NULL
, NULL);

159 
	`lua_p›
(
L
, 1);

160 
	`‰ì
(
s
);

165 
	`TRACE
("(%dË[ ] u≈¨£dÅy≥ %s", 
i
, 
	`lua_ty≥«me
(
L
, 
t
));

170 
	}
}

172 
	$run_lua_s¸ùt
(c⁄° *
s¸ùt
, c⁄° *
fun˘i⁄
, *
∑rms
)

174 
ªt
;

175 c⁄° *
ouçut
;

177 
lua_Sèã
 *
L
 = 
	`luaL_√w°©e
();

178 
	`luaL_›ílibs
(
L
);

179 
	`luaL_ªquúef
(
L
, "swupd©e", 
lua›í_swupd©e
, 1 );

181 i‡(
	`luaL_lﬂdfûe
(
L
, 
s¸ùt
)) {

182 
	`ERROR
("ERRORÜﬂdög %s", 
s¸ùt
);

183 
	`lua_˛o£
(
L
);

187 
ªt
 = 
	`lua_pˇŒ
(
L
, 0, 0, 0);

188 i‡(
ªt
) {

189 
	`LUA°ackDump
(
L
);

190 
	`ERROR
("ERRORÖreparing Lua script %s %d",

191 
s¸ùt
, 
ªt
);

192 
	`lua_˛o£
(
L
);

196 
	`lua_gëglobÆ
(
L
, 
fun˘i⁄
);

197 if(!
	`lua_isfun˘i⁄
(
L
,
	`lua_gët›
(L))) {

198 
	`lua_˛o£
(
L
);

199 
	`TRACE
("S¸ùà:Çÿ%†ö %†s¸ùt,Éxôög", 
fun˘i⁄
, 
s¸ùt
);

204 
	`lua_push°rög
(
L
, 
∑rms
);

206 i‡(
	`lua_pˇŒ
(
L
, 1, 2, 0)) {

207 
	`LUA°ackDump
(
L
);

208 
	`ERROR
("ERROR CÆlög Lu®s¸ùà%s", 
s¸ùt
);

209 
	`lua_˛o£
(
L
);

213 
ªt
 = -1;

215 i‡(
	`lua_ty≥
(
L
, -2Ë=
LUA_TBOOLEAN
) {

216 
	`TRACE
("LUA Exô: i†boﬁó¿%d", 
	`lua_toboﬁón
(
L
, -2));

217 
ªt
 = 
	`lua_toboﬁón
(
L
, -2) ? 0 : 1;

220 i‡(
	`lua_ty≥
(
L
, -1Ë=
LUA_TSTRING
) {

221 
ouçut
 = 
	`lua_to°rög
(
L
, -1);

222 
	`TRACE
("S¸ùàouçut: %†s¸ùàíd", 
ouçut
);

225 
	`lua_˛o£
(
L
);

227  
ªt
;

228 
	}
}

237 
	$lua_°rög_to_img
(
img_ty≥
 *
img
, c⁄° *
key
,

238 c⁄° *
vÆue
)

240 c⁄° 
off£t
[] = "offset";

241 
£ek_°r
[
MAX_SEEK_STRING_SIZE
];

243 i‡(!
	`°rcmp
(
key
, "name")) {

244 
	`°∫˝y
(
img
->
id
.
«me
, 
vÆue
,

245 (
img
->
id
.
«me
));

247 i‡(!
	`°rcmp
(
key
, "version")) {

248 
	`°∫˝y
(
img
->
id
.
vîsi⁄
, 
vÆue
,

249 (
img
->
id
.
vîsi⁄
));

251 i‡(!
	`°rcmp
(
key
, "filename")) {

252 
	`°∫˝y
(
img
->
‚ame
, 
vÆue
,

253 (
img
->
‚ame
));

255 i‡(!
	`°rcmp
(
key
, "volume"))

256 
	`°∫˝y
(
img
->
vﬁ«me
, 
vÆue
,

257 (
img
->
vﬁ«me
));

258 i‡(!
	`°rcmp
(
key
, "type"))

259 
	`°∫˝y
(
img
->
ty≥
, 
vÆue
,

260 (
img
->
ty≥
));

261 i‡(!
	`°rcmp
(
key
, "device"))

262 
	`°∫˝y
(
img
->
devi˚
, 
vÆue
,

263 (
img
->
devi˚
));

264 i‡(!
	`°rcmp
(
key
, "mtdname"))

265 
	`°∫˝y
(
img
->
∑th
, 
vÆue
,

266 (
img
->
∑th
));

267 i‡(!
	`°rcmp
(
key
, "path"))

268 
	`°∫˝y
(
img
->
∑th
, 
vÆue
,

269 (
img
->
∑th
));

270 i‡(!
	`°rcmp
(
key
, "data"))

271 
	`°∫˝y
(
img
->
ty≥_d©a
, 
vÆue
,

272 (
img
->
ty≥_d©a
));

273 i‡(!
	`°rcmp
(
key
, "filesystem"))

274 
	`°∫˝y
(
img
->
fûesy°em
, 
vÆue
,

275 (
img
->
fûesy°em
));

276 i‡(!
	`°rcmp
(
key
, "sha256"))

277 
	`ascii_to_hash
(
img
->
sha256
, 
vÆue
);

279 i‡(!
	`°∫cmp
(
key
, 
off£t
, (offset))) {

280 
	`°∫˝y
(
£ek_°r
, 
vÆue
,

281 (
£ek_°r
));

283 
img
->
£ek
 = 
	`u°πouŒ
(
£ek_°r
, 0);

284 i‡(
î∫o
){

285 
	`ERROR
("offsetárgument: ustrtoull failed");

288 
	}
}

291 
	$lua_boﬁ_to_img
(
img_ty≥
 *
img
, c⁄° *
key
,

292 
boﬁ
 
vÆ
)

294 i‡(!
	`°rcmp
(
key
, "compressed"))

295 
img
->
com¥es£d
 = (
boﬁ
)
vÆ
;

296 i‡(!
	`°rcmp
(
key
, "installed_directly"))

297 
img
->
ö°Æl_dúe˘ly
 = (
boﬁ
)
vÆ
;

298 i‡(!
	`°rcmp
(
key
, "install_if_different"))

299 
img
->
id
.
ö°Æl_if_dif„ª¡
 = (
boﬁ
)
vÆ
;

300 i‡(!
	`°rcmp
(
key
, "encrypted"))

301 
img
->
is_í¸y±ed
 = (
boﬁ
)
vÆ
;

302 i‡(!
	`°rcmp
(
key
, "partition"))

303 
img
->
is_∑πôi⁄î
 = (
boﬁ
)
vÆ
;

304 i‡(!
	`°rcmp
(
key
, "script"))

305 
img
->
is_s¸ùt
 = (
boﬁ
)
vÆ
;

306 
	}
}

308 
	$lua_numbî_to_img
(
img_ty≥
 *
img
, c⁄° *
key
,

309 
vÆ
)

311 i‡(!
	`°rcmp
(
key
, "offset"))

312 
img
->
£ek
 = ()
vÆ
;

313 i‡(!
	`°rcmp
(
key
, "size"))

314 
img
->
size
 = ()
vÆ
;

315 i‡(!
	`°rcmp
(
key
, "checksum"))

316 
img
->
checksum
 = ()
vÆ
;

318 
	}
}

320 #ifde‡
CONFIG_HANDLER_IN_LUA


321 
	$l_c›y2fûe
(
lua_Sèã
 *
L
)

323 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

324 
	`luaL_checkty≥
(
L
, 2, 
LUA_TSTRING
);

326 
fdout
 = 
	`›ífûeouçut
(
	`lua_to°rög
(
L
, 2));

327 
	`lua_p›
(
L
, 1);

328 i‡(
fdout
 < 0) {

329 
	`lua_p›
(
L
, 1);

330 
	`lua_pushöãgî
(
L
, -1);

331 
	`lua_push°rög
(
L
, 
	`°ªº‹
(
î∫o
));

335 
img_ty≥
 
img
 = {};

336 
uöt32_t
 
checksum
 = 0;

338 
	`èbÀ2image
(
L
, &
img
);

339 
ªt
 = 
	`c›yfûe
(
img
.
fdö
,

340 &
fdout
,

341 
img
.
size
,

342 (*)&
img
.
off£t
,

343 
img
.
£ek
,

345 
img
.
com¥es£d
,

346 &
checksum
,

347 
img
.
sha256
,

348 
img
.
is_í¸y±ed
,

349 
NULL
);

350 
	`upd©e_èbÀ
(
L
, &
img
);

351 
	`lua_p›
(
L
, 1);

353 i‡(
ªt
 < 0) {

354 
	`lua_pushöãgî
(
L
, -1);

355 
	`lua_push°rög
(
L
, 
	`°ªº‹
(
î∫o
));

356 
c›yfûe_exô
;

358 i‡((
img
.
checksum
 != 0) && (checksum != img.checksum)) {

359 
	`lua_pushöãgî
(
L
, -1);

360 
	`lua_pushf°rög
(
L
, "Checksums WRONG! Computed 0x%d, should be 0x%d\n",

361 
checksum
, 
img
.checksum);

362 
c›yfûe_exô
;

365 
	`lua_pushöãgî
(
L
, 0);

366 
	`lua_pushnû
(
L
);

368 
c›yfûe_exô
:

369 
	`˛o£
(
fdout
);

371 
	}
}

373 
	$i°ªam_ªad_ˇŒback
(*
out
, c⁄° *
buf
, 
Àn
)

375 
lua_Sèã
* 
L
 = (lua_Sèã*)
out
;

376 i‡(
Àn
 > 
LUAL_BUFFERSIZE
) {

377 
	`ERROR
("I/O buf„∏sizêi†œrgîÅh™ Lua'†buf„∏sizê%d", 
LUAL_BUFFERSIZE
);

381 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

382 
	`lua_pushvÆue
(
L
, 2);

384 
luaL_Buf„r
 
lbuf„r
;

385 
	`luaL_bufföô
(
L
, &
lbuf„r
);

386 *
buf„r
 = 
	`luaL_¥ïbuffsize
(&
lbuf„r
, 
Àn
);

387 
	`mem˝y
(
buf„r
, 
buf
, 
Àn
);

388 
	`luaL_addsize
(&
lbuf„r
, 
Àn
);

389 
	`luaL_pushªsu…
(&
lbuf„r
);

390 i‡(
	`lua_pˇŒ
(
L
, 1, 0, 0Ë!
LUA_OK
) {

391 
	`ERROR
("Lu®îr‹ i¿ˇŒback: %s", 
	`lua_to°rög
(
L
, -1));

392 
	`lua_p›
(
L
, 1);

396 
	}
}

398 
	$l_i°ªam_ªad
(
lua_Sèã
* 
L
)

400 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

401 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

403 
img_ty≥
 
img
 = {};

404 
uöt32_t
 
checksum
 = 0;

406 
	`lua_pushvÆue
(
L
, 1);

407 
	`èbÀ2image
(
L
, &
img
);

408 
	`lua_p›
(
L
, 1);

410 
ªt
 = 
	`c›yfûe
(
img
.
fdö
,

411 
L
,

412 
img
.
size
,

413 (*)&
img
.
off£t
,

414 
img
.
£ek
,

416 
img
.
com¥es£d
,

417 &
checksum
,

418 
img
.
sha256
,

419 
img
.
is_í¸y±ed
,

420 
i°ªam_ªad_ˇŒback
);

422 
	`lua_p›
(
L
, 1);

423 
	`upd©e_èbÀ
(
L
, &
img
);

424 
	`lua_p›
(
L
, 1);

426 i‡(
ªt
 < 0) {

427 
	`lua_pushöãgî
(
L
, -1);

428 
	`lua_push°rög
(
L
, 
	`°ªº‹
(
î∫o
));

431 i‡((
img
.
checksum
 != 0) && (checksum != img.checksum)) {

432 
	`lua_pushöãgî
(
L
, -1);

433 
	`lua_pushf°rög
(
L
, "Checksums WRONG! Computed 0x%d, should be 0x%d\n",

434 
checksum
, 
img
.checksum);

437 
	`lua_pushöãgî
(
L
, 0);

438 
	`lua_pushnû
(
L
);

440 
	}
}

443 
	$upd©e_èbÀ
(
lua_Sèã
* 
L
, 
img_ty≥
 *
img
)

445 i‡(
L
 && 
img
) {

446 
di˘_íåy
 *
¥›îty
;

448 
	`luaL_checkty≥
(
L
, -1, 
LUA_TTABLE
);

450 
	`LUA_PUSH_IMG_STRING
(
img
, "«me", 
id
.
«me
);

451 
	`LUA_PUSH_IMG_STRING
(
img
, "vîsi⁄", 
id
.
vîsi⁄
);

452 
	`LUA_PUSH_IMG_STRING
(
img
, "fûíame", 
‚ame
);

453 
	`LUA_PUSH_IMG_STRING
(
img
, "vﬁume", 
vﬁ«me
);

454 
	`LUA_PUSH_IMG_STRING
(
img
, "ty≥", 
ty≥
);

455 
	`LUA_PUSH_IMG_STRING
(
img
, "devi˚", 
devi˚
);

456 
	`LUA_PUSH_IMG_STRING
(
img
, "∑th", 
∑th
);

457 
	`LUA_PUSH_IMG_STRING
(
img
, "mtd«me", 
∑th
);

458 
	`LUA_PUSH_IMG_STRING
(
img
, "d©a", 
ty≥_d©a
);

459 
	`LUA_PUSH_IMG_STRING
(
img
, "fûesy°em", 
fûesy°em
);

461 
	`LUA_PUSH_IMG_BOOL
(
img
, "com¥es£d", 
com¥es£d
);

462 
	`LUA_PUSH_IMG_BOOL
(
img
, "ö°ÆÀd_dúe˘ly", 
ö°Æl_dúe˘ly
);

463 
	`LUA_PUSH_IMG_BOOL
(
img
, "ö°Æl_if_dif„ª¡", 
id
.
ö°Æl_if_dif„ª¡
);

464 
	`LUA_PUSH_IMG_BOOL
(
img
, "í¸y±ed", 
is_í¸y±ed
);

465 
	`LUA_PUSH_IMG_BOOL
(
img
, "∑πôi⁄", 
is_∑πôi⁄î
);

466 
	`LUA_PUSH_IMG_BOOL
(
img
, "s¸ùt", 
is_s¸ùt
);

468 
	`LUA_PUSH_IMG_NUMBER
(
img
, "off£t", 
£ek
);

469 
	`LUA_PUSH_IMG_NUMBER
(
img
, "size", 
size
);

470 
	`LUA_PUSH_IMG_NUMBER
(
img
, "checksum", 
checksum
);

472 
	`lua_push°rög
(
L
, "properties");

473 
	`lua_√wèbÀ
 (
L
);

474 
	`LIST_FOREACH
(
¥›îty
, &
img
->
¥›îtõs
, 
√xt
) {

475 
di˘_li°_ñem
 *
ñem
 = 
	`LIST_FIRST
(&
¥›îty
->
li°
);

477 
	`lua_push°rög
(
L
, 
	`di˘_íåy_gë_key
(
¥›îty
));

478 i‡(
	`LIST_NEXT
(
ñem
, 
√xt
Ë=
	`LIST_END
(&
¥›îty
->
li°
)) {

479 
	`lua_push°rög
(
L
, 
ñem
->
vÆue
);

481 
i
 = 1;

483 
	`lua_√wèbÀ
 (
L
);

484 
	`LIST_FOREACH
(
ñem
, &
¥›îty
->
li°
, 
√xt
) {

485 
	`lua_pushnumbî
(
L
, 
i
++);

486 
	`lua_push°rög
(
L
, 
ñem
->
vÆue
);

487 
	`lua_£âabÀ
(
L
, -3);

490 
	`lua_£âabÀ
(
L
, -3);

492 
	`lua_£âabÀ
(
L
, -3);

494 #ifde‡
CONFIG_HANDLER_IN_LUA


495 i‡(
	`is_ty≥
(
L
, 
LUA_TYPE_HANDLER
)) {

496 
	`lua_push°rög
(
L
, "copy2file");

497 
	`lua_pushcfun˘i⁄
(
L
, &
l_c›y2fûe
);

498 
	`lua_£âabÀ
(
L
, -3);

500 
	`lua_push°rög
(
L
, "read");

501 
	`lua_pushcfun˘i⁄
(
L
, &
l_i°ªam_ªad
);

502 
	`lua_£âabÀ
(
L
, -3);

506 
	`lua_gëfõld
(
L
, -1, "_private");

507 
	`LUA_PUSH_IMG_NUMBER
(
img
, "off£t", 
off£t
);

508 
	`lua_p›
(
L
, 1);

510 *
hash°rög
 = 
	`Æloˇ
(2 * 
SHA256_HASH_LENGTH
 + 1);

511 
	`hash_to_ascii
(
img
->
sha256
, 
hash°rög
);

512 
	`lua_push°rög
(
L
, "sha256");

513 
	`lua_push°rög
(
L
, 
hash°rög
);

514 
	`lua_£âabÀ
(
L
, -3);

516 
	}
}

518 #ifde‡
CONFIG_HANDLER_IN_LUA


519 #i‡
LUA_VERSION_NUM
 > 501

520 
	$l_i°ªam_f˛o£
(
lua_Sèã
 *
L
)

523 
	`lua_pushboﬁón
(
L
, 
åue
);

525 
	}
}

529 
	$image2èbÀ
(
lua_Sèã
* 
L
, 
img_ty≥
 *
img
)

531 i‡(
L
 && 
img
) {

532 
	`lua_√wèbÀ
 (
L
);

545 
	`lua_√wèbÀ
(
L
);

546 
	`lua_pushvÆue
(
L
, -1);

547 
	`lua_push°rög
(
L
, "_private");

548 
	`lua_√wèbÀ
(
L
);

549 
	`lua_£âabÀ
(
L
, -3);

550 
	`lua_£tfõld
(
L
, -2, "__index");

551 
	`lua_£tmë©abÀ
(
L
, -2);

553 
	`upd©e_èbÀ
(
L
, 
img
);

555 #ifde‡
CONFIG_HANDLER_IN_LUA


556 i‡(
	`is_ty≥
(
L
, 
LUA_TYPE_HANDLER
)) {

557 
	`lua_gëfõld
(
L
, -1, "_private");

558 
	`lua_push°rög
(
L
, "istream");

559 
luaL_Såóm
 *
l°ªam
 = (luaL_Såóm *)
	`lua_√wu£rd©a
(
L
, (luaL_Stream));

560 
	`luaL_gëmë©abÀ
(
L
, 
LUA_FILEHANDLE
);

561 
	`lua_£tmë©abÀ
(
L
, -2);

562 #i‡
LUA_VERSION_NUM
 > 501

563 
l°ªam
->
˛o£f
 = 
l_i°ªam_f˛o£
;

565 
l°ªam
->
f
 = 
	`fd›í
(
img
->
fdö
, "r");

566 i‡(
l°ªam
->
f
 =
NULL
) {

567 
	`WARN
("C™nŸ fd›í fûêdes¸ùt‹ %d: %s", 
img
->
fdö
, 
	`°ªº‹
(
î∫o
));

569 
	`lua_£âabÀ
(
L
, -3);

570 
	`lua_p›
(
L
, 1);

574 
	}
}

576 
	$èbÀ2image
(
lua_Sèã
* 
L
, 
img_ty≥
 *
img
) {

577 i‡(
L
 && 
img
 && (
	`lua_ty≥
(L, -1Ë=
LUA_TTABLE
)) {

578 
	`lua_pushnû
(
L
);

579 
	`lua_√xt
(
L
, -2) != 0) {

580 
t
 = 
	`lua_ty≥
(
L
, -1);

581 
t
) {

582 
LUA_TSTRING
:

583 
	`lua_°rög_to_img
(
img
, 
	`lua_to°rög
(
L
, -2),Üua_tostring(L, -1));

585 
LUA_TBOOLEAN
:

586 
	`lua_boﬁ_to_img
(
img
, 
	`lua_to°rög
(
L
, -2), 
	`lua_toboﬁón
(L, -1));

588 
LUA_TNUMBER
:

589 
	`lua_numbî_to_img
(
img
, 
	`lua_to°rög
(
L
, -2), 
	`lua_t⁄umbî
(L, -1));

591 
LUA_TTABLE
:

592 i‡(!
	`°rcmp
 (
	`lua_to°rög
(
L
, -2), "properties")) {

593 
	`di˘_dr›_db
(&
img
->
¥›îtõs
);

594 
	`lua_pushvÆue
(
L
, -1);

595 
	`lua_dump_èbÀ
(
L
, (*)"¥›îtõs", 
img
, 
NULL
);

596 
	`lua_p›
(
L
, 1);

600 
	`lua_p›
(
L
, 1);

603 
	`lua_gëfõld
(
L
, -1, "_private");

604 
	`lua_gëfõld
(
L
, -1, "offset");

605 
img
->
off£t
 = (
off_t
)
	`luaL_checknumbî
(
L
, -1);

606 #ifde‡
CONFIG_HANDLER_IN_LUA


607 i‡(
	`is_ty≥
(
L
, 
LUA_TYPE_HANDLER
)) {

608 
	`lua_p›
(
L
, 1);

609 
	`lua_gëfõld
(
L
, -1, "istream");

610 
luaL_Såóm
 *
l°ªam
 = (÷uaL_Såóm *)
	`luaL_checkud©a
(
L
, -1, 
LUA_FILEHANDLE
));

611 i‡(
l°ªam
->
f
 =
NULL
) {

612 
img
->
fdö
 = -1;

614 
img
->
fdö
 = 
	`fûío
(
l°ªam
->
f
);

618 
	`lua_p›
(
L
,2);

620 
	}
}

631 
	$l_nŸify
 (
lua_Sèã
 *
L
) {

632 
lua_Numbî
 
°©us
 = 
	`luaL_checknumbî
 (
L
, 1);

633 
lua_Numbî
 
îr‹
 = 
	`luaL_checknumbî
 (
L
, 2);

634 c⁄° *
msg
 = 
	`luaL_check°rög
 (
L
, 3);

636 i‡(
msg
 && 
	`°æí
(msg))

637 
	`nŸify
((
RECOVERY_STATUS
)
°©us
, ()
îr‹
, 
INFOLEVEL
, 
msg
);

639 
	`lua_p›
(
L
, 3);

641 
	}
}

643 
	$nŸify_hñ≥r
(
lua_Sèã
 *
L
, 
LOGLEVEL
 
Àvñ
)

645 
	`luaL_checkty≥
(
L
, 1, 
LUA_TSTRING
);

646 
	`lua_gëglobÆ
(
L
, "string");

647 
	`lua_pushlôîÆ
(
L
, "format");

648 
	`lua_gëèbÀ
(
L
, -2);

649 
	`lua_ö£π
(
L
, 1);

650 
	`lua_p›
(
L
, 1);

651 i‡(
	`lua_pˇŒ
(
L
, 
	`lua_gët›
(LË- 1, 1, 0Ë!
LUA_OK
) {

652 
	`ERROR
("îr‹ whûênŸify cÆl: %s", 
	`lua_to°rög
(
L
, -1));

654 
Àvñ
) {

655 
ERRORLEVEL
:

656 
	`ERROR
("%s", 
	`lua_to°rög
(
L
, -1));

658 
WARNLEVEL
:

659 
	`WARN
("%s", 
	`lua_to°rög
(
L
, -1));

661 
INFOLEVEL
:

662 
	`INFO
("%s", 
	`lua_to°rög
(
L
, -1));

664 
DEBUGLEVEL
:

665 
	`DEBUG
("%s", 
	`lua_to°rög
(
L
, -1));

667 
TRACELEVEL
:

668 
	`TRACE
("%s", 
	`lua_to°rög
(
L
, -1));

670 
OFF
:

674 
	`lua_p›
(
L
, 1);

676 
	}
}

678 
	$l_åa˚
(
lua_Sèã
 *
L
) {

679  
	`nŸify_hñ≥r
(
L
, 
TRACELEVEL
);

680 
	}
}

682 
	$l_îr‹
(
lua_Sèã
 *
L
) {

683  
	`nŸify_hñ≥r
(
L
, 
ERRORLEVEL
);

684 
	}
}

686 
	$l_öfo
(
lua_Sèã
 *
L
) {

687  
	`nŸify_hñ≥r
(
L
, 
INFOLEVEL
);

688 
	}
}

690 
	$l_w¨n
(
lua_Sèã
 *
L
)

692  
	`nŸify_hñ≥r
(
L
, 
WARNLEVEL
);

693 
	}
}

695 
	$l_debug
(
lua_Sèã
 *
L
)

697  
	`nŸify_hñ≥r
(
L
, 
DEBUGLEVEL
);

698 
	}
}

700 
	$l_mou¡
(
lua_Sèã
 *
L
) {

701 c⁄° *
devi˚
 = 
	`luaL_check°rög
(
L
, 1);

702 c⁄° *
fûesy°em
 = 
	`luaL_check°rög
(
L
, 2);

703 *
èrgë
;

705 i‡(!
devi˚
 || !
	`°æí
(devi˚Ë|| !
fûesy°em
 || !strlen(filesystem))

706 
l_mou¡_exô
;

708 i‡(
	`a•rötf
(&
èrgë
, "%s%sXXXXXX", 
	`gë_tmpdú
(), 
DATADST_DIR_SUFFIX
) == -1) {

709 
	`TRACE
("UnableÅoállocate memory");

710 
l_mou¡_exô
;

713 i‡(!
	`mkdãmp
(
èrgë
)) {

714 
	`TRACE
("UnableÅo createá uniqueÅemporary directory %s: %s",

715 
èrgë
, 
	`°ªº‹
(
î∫o
));

716 
l_mou¡_‰ì_exô
;

719 i‡(
	`swupd©e_mou¡
(
devi˚
, 
èrgë
, 
fûesy°em
) == -1) {

720 
	`TRACE
("Device %s with filesystem %s cannot be mounted: %s",

721 
devi˚
, 
fûesy°em
, 
	`°ªº‹
(
î∫o
));

722 
l_mou¡_rmdú_exô
;

725 
	`lua_p›
(
L
, 2);

726 
	`lua_push°rög
(
L
, 
èrgë
);

728 
	`‰ì
(
èrgë
);

732 
l_mou¡_rmdú_exô
:

733 
	`rmdú
(
èrgë
);

734 
l_mou¡_‰ì_exô
:

735 
	`‰ì
(
èrgë
);

736 
l_mou¡_exô
:

737 
	`lua_p›
(
L
, 2);

738 
	`lua_pushnû
(
L
);

740 
	}
}

742 
	$l_umou¡
(
lua_Sèã
 *
L
) {

743 c⁄° *
èrgë
 = 
	`luaL_check°rög
(
L
, 1);

745 i‡(
	`swupd©e_umou¡
(
èrgë
) == -1) {

746 
	`TRACE
("U«bÀÅÿunmou¡ %s: %s", 
èrgë
, 
	`°ªº‹
(
î∫o
));

747 
l_umou¡_exô
;

750 i‡(
	`rmdú
(
èrgë
) == -1) {

751 
	`TRACE
("U«bÀÅÿªmovêdúe˘‹y %s: %s", 
èrgë
, 
	`°ªº‹
(
î∫o
));

752 
l_umou¡_exô
;

755 
	`lua_p›
(
L
, 1);

756 
	`lua_pushboﬁón
(
L
, 
åue
);

760 
l_umou¡_exô
:

761 
	`lua_p›
(
L
, 1);

762 
	`lua_pushnû
(
L
);

764 
	}
}

766 
	$l_gë_boŸív
(
lua_Sèã
 *
L
) {

767 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

768 *
vÆue
 = 
NULL
;

770 i‡(
«me
 && 
	`°æí
(name))

771 
vÆue
 = 
	`boŸlﬂdî_ív_gë
(
«me
);

772 
	`lua_p›
(
L
, 1);

774 
	`lua_push°rög
(
L
, 
vÆue
);

775 
	`‰ì
(
vÆue
);

778 
	}
}

780 
	$l_£t_boŸív
(
lua_Sèã
 *
L
) {

781 
di˘
 *
boŸív
 = (di˘ *)
	`lua_tou£rd©a
(
L
, 
	`lua_upvÆueödex
(1));

782 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

783 c⁄° *
vÆue
 = 
	`luaL_check°rög
(
L
, 2);

785 i‡(
«me
 && 
	`°æí
(name))

786 
	`di˘_£t_vÆue
(
boŸív
, 
«me
, 
vÆue
 ? value : "");

787 
	`lua_p›
(
L
, 2);

790 
	}
}

792 #ifde‡
CONFIG_HANDLER_IN_LUA


793 
	$l_gë_tmpdú
(
lua_Sèã
 *
L
)

795 
	`lua_push°rög
(
L
, 
	`gë_tmpdú
());

797 
	}
}

799 
	$l_gë_tmpdú_s¸ùts
(
lua_Sèã
 *
L
)

801 
	`lua_push°rög
(
L
, 
	`gë_tmpdús¸ùts
());

803 
	}
}

809 c⁄° 
luaL_Reg
 
	gl_swupd©e
[] = {

810 { "nŸify", 
l_nŸify
 },

811 { "îr‹", 
l_îr‹
 },

812 { "åa˚", 
l_åa˚
 },

813 { "öfo", 
l_öfo
 },

814 { "w¨n", 
l_w¨n
 },

815 { "debug", 
l_debug
 },

816 { "mou¡", 
l_mou¡
 },

817 { "umou¡", 
l_umou¡
 },

818 { 
NULL
, NULL }

821 c⁄° 
luaL_Reg
 
	gl_swupd©e_boŸív
[] = {

822 { "gë_boŸív", 
l_gë_boŸív
 },

823 { "£t_boŸív", 
l_£t_boŸív
 },

824 { 
NULL
, NULL }

827 #ifde‡
CONFIG_HANDLER_IN_LUA


828 c⁄° 
luaL_Reg
 
	gl_swupd©e_h™dÀr
[] = {

829 { "ªgi°î_h™dÀr", 
l_ªgi°î_h™dÀr
 },

830 { "ˇŒ_h™dÀr", 
l_ˇŒ_h™dÀr
 },

831 { "tmpdús¸ùts", 
l_gë_tmpdú_s¸ùts
 },

832 { "tmpdú", 
l_gë_tmpdú
 },

833 { 
NULL
, NULL }

837 
	$lua_push_íum
(
lua_Sèã
 *
L
, c⁄° *
«me
, 
vÆue
)

839 
	`lua_push°rög
(
L
, 
«me
);

840 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë
vÆue
 );

841 
	`lua_£âabÀ
(
L
, -3);

842 
	}
}

850 
	$lua›í_swupd©e
(
lua_Sèã
 *
L
)

852 
	`luaL_√wlib
 (
L
, 
l_swupd©e
);

855 
	`lua_push°rög
(
L
, "RECOVERY_STATUS");

856 
	`lua_√wèbÀ
 (
L
);

857 
	`lua_push_íum
(
L
, "IDLE", 
IDLE
);

858 
	`lua_push_íum
(
L
, "START", 
START
);

859 
	`lua_push_íum
(
L
, "RUN", 
RUN
);

860 
	`lua_push_íum
(
L
, "SUCCESS", 
SUCCESS
);

861 
	`lua_push_íum
(
L
, "FAILURE", 
FAILURE
);

862 
	`lua_push_íum
(
L
, "DOWNLOAD", 
DOWNLOAD
);

863 
	`lua_push_íum
(
L
, "DONE", 
DONE
);

864 
	`lua_push_íum
(
L
, "SUBPROCESS", 
SUBPROCESS
);

865 
	`lua_£âabÀ
(
L
, -3);

867 #ifde‡
CONFIG_HANDLER_IN_LUA


868 i‡(
	`is_ty≥
(
L
, 
LUA_TYPE_HANDLER
)) {

870 
	`luaL_£tfuncs
(
L
, 
l_swupd©e_h™dÀr
, 0);

873 
	`lua_push°rög
(
L
, "HANDLER_MASK");

874 
	`lua_√wèbÀ
 (
L
);

875 
	`lua_push_íum
(
L
, "IMAGE_HANDLER", 
IMAGE_HANDLER
);

876 
	`lua_push_íum
(
L
, "FILE_HANDLER", 
FILE_HANDLER
);

877 
	`lua_push_íum
(
L
, "SCRIPT_HANDLER", 
SCRIPT_HANDLER
);

878 
	`lua_push_íum
(
L
, "BOOTLOADER_HANDLER", 
BOOTLOADER_HANDLER
);

879 
	`lua_push_íum
(
L
, "PARTITION_HANDLER", 
PARTITION_HANDLER
);

880 
	`lua_push_íum
(
L
, "ANY_HANDLER", 
ANY_HANDLER
);

881 
	`lua_£âabÀ
(
L
, -3);

883 
	`lua_push°rög
(
L
, "handler");

884 
	`lua_√wèbÀ
 (
L
);

885 
ö°ÆÀr_h™dÀr
 *
hnd
;

886 (
hnd
 = 
	`gë_√xt_h™dÀr
()Ë!
NULL
) {

887 
	`lua_pushöãgî
(
L
, 1);

888 
	`lua_£tfõld
(
L
, -2, 
hnd
->
desc
);

890 
	`lua_£âabÀ
(
L
, -3);

895 
	}
}

897 #ifde‡
CONFIG_HANDLER_IN_LUA


898 
lua_Sèã
 *
	ggL
 = 
NULL
;

914 
	$l_h™dÀr_wøµî
(
img_ty≥
 *
img
, *
d©a
) {

915 
ªs
 = 0;

916 
lua_Numbî
 
ªsu…
;

917 
l_func_ªf
;

919 i‡(!
gL
 || !
img
 || !
d©a
) {

923 i‡(
img
->
boŸlﬂdî
) {

924 
	`lua_gëglobÆ
(
gL
, "swupdate");

925 i‡(!
	`lua_i°abÀ
(
gL
, -1)) {

926 
	`ERROR
("Lua stack corrupted.");

929 
	`lua_pushlightu£rd©a
(
gL
, (*)
img
->
boŸlﬂdî
);

930 
	`luaL_£tfuncs
(
gL
, 
l_swupd©e_boŸív
, 1);

931 
	`lua_p›
(
gL
, 1);

934 
l_func_ªf
 = *((*)
d©a
);

936 
	`lua_øwgëi
(
gL
, 
LUA_REGISTRYINDEX
, 
l_func_ªf
 );

937 
	`image2èbÀ
(
gL
, 
img
);

939 i‡(
LUA_OK
 !(
ªs
 = 
	`lua_pˇŒ
(
gL
, 1, 1, 0))) {

940 
	`ERROR
("Error %d whileÉxecutingÅhe Lua callback: %s",

941 
ªs
, 
	`lua_to°rög
(
gL
, -1));

946 i‡(!
	`lua_i¢umbî
(
gL
, -1)) {

947 
	`¥ötf
(" Lua Handler mustÑeturnáÇumber");

951 
ªsu…
 = 
	`lua_t⁄umbî
(
gL
, -1);

952 
	`lua_p›
(
gL
, 1);

953 
	`TRACE
("[Lu®h™dÀr]Ñëu∫ed: %d",()
ªsu…
);

955  (Ë
ªsu…
;

956 
	}
}

967 
	$l_ªgi°î_h™dÀr
–
lua_Sèã
 *
L
 ) {

968 *
l_func_ªf
 = 
	`mÆloc
(());

969 if(!
l_func_ªf
) {

970 
	`ERROR
("Lua handler: unableÅoállocate memory");

971 
	`lua_p›
(
L
, 2);

974 
mask
 = 
ANY_HANDLER
;

975 i‡(
	`lua_i¢umbî
(
L
, 3)) {

976 
mask
 = 
	`luaL_checknumbî
(
L
, 3);

977 
	`lua_p›
(
L
, 1);

979 c⁄° *
h™dÀr_desc
 = 
	`luaL_check°rög
(
L
, 1);

981 *
l_func_ªf
 = 
	`luaL_ªf
 (
L
, 
LUA_REGISTRYINDEX
);

983 
	`lua_p›
 (
L
, 1);

985 
	`ªgi°î_h™dÀr
(
h™dÀr_desc
, 
l_h™dÀr_wøµî
,

986 
mask
, 
l_func_ªf
);

989 
	}
}

991 
	$l_ˇŒ_h™dÀr
(
lua_Sèã
 *
L
)

993 
ö°ÆÀr_h™dÀr
 *
hnd
;

994 
img_ty≥
 
img
 = {};

995 *
‹ighndty≥
 = 
NULL
;

996 *
msg
 = 
NULL
;

997 
ªt
 = 0;

999 
	`luaL_checkty≥
(
L
, 1, 
LUA_TSTRING
);

1000 
	`luaL_checkty≥
(
L
, 2, 
LUA_TTABLE
);

1002 
	`èbÀ2image
(
L
, &
img
);

1003 i‡((
‹ighndty≥
 = 
	`°∫du∑
(
img
.
ty≥
, (img.ty≥))Ë=
NULL
) {

1004 
	`lua_p›
(
L
, 2);

1005 
	`lua_pushnumbî
(
L
, 1);

1006 
	`lua_push°rög
(
L
, "Errorállocating memory");

1009 
	`°∫˝y
(
img
.
ty≥
, 
	`lua_to°rög
(
L
, 1), (img.type));

1011 i‡((
hnd
 = 
	`föd_h™dÀr
(&
img
)Ë=
NULL
) {

1012 i‡(
	`a•rötf
(&
msg
, "Imagêty≥ %†nŸ suµ‹ãd!", 
img
.
ty≥
) == -1) {

1013 
msg
 = 
NULL
;

1015 
ªt
 = 1;

1016 
ˇŒ_h™dÀr_exô
;

1018 i‡((
hnd
->
	`ö°ÆÀr
(&
img
, hnd->
d©a
)) != 0) {

1019 i‡(
	`a•rötf
(&
msg
, "Executög h™dÀ∏%†Áûed!", 
hnd
->
desc
) == -1) {

1020 
msg
 = 
NULL
;

1022 
ªt
 = 1;

1023 
ˇŒ_h™dÀr_exô
;

1026 
ˇŒ_h™dÀr_exô
:

1027 
	`°∫˝y
(
img
.
ty≥
, 
‹ighndty≥
, (img.type));

1028 
	`upd©e_èbÀ
(
L
, &
img
);

1029 
	`lua_p›
(
L
, 2);

1030 
	`lua_pushnumbî
(
L
, 
ªt
);

1031 i‡(
msg
 !
NULL
) {

1032 
	`lua_push°rög
(
L
, 
msg
);

1033 
	`‰ì
(
msg
);

1035 
	`lua_pushnû
(
L
);

1038 
	}
}

1040 
	$lua_h™dÀrs_öô
()

1042 
ªt
 = -1;

1044 
gL
 = 
	`luaL_√w°©e
();

1045 i‡(
gL
) {

1047 
	`lua_pushlightu£rd©a
(
gL
, (*)
LUA_TYPE_HANDLER
);

1048 
	`lua_£tglobÆ
(
gL
, "SWUPDATE_LUA_TYPE");

1050 
	`luaL_›ílibs
(
gL
);

1051 
	`luaL_ªquúef
–
gL
, "swupd©e", 
lua›í_swupd©e
, 1 );

1052 
	`lua_p›
(
gL
, 1);

1054 #i‡
	`deföed
(
CONFIG_EMBEDDED_LUA_HANDLER
)

1055 i‡((
ªt
 = (
	`luaL_lﬂdbuf„r
(
gL
, 
EMBEDDED_LUA_SRC_START
, 
EMBEDDED_LUA_SRC_END
-EMBEDDED_LUA_SRC_START, "LuaHandler") ||

1056 
	`lua_pˇŒ
(
gL
, 0, 
LUA_MULTRET
, 0))) != 0) {

1057 
	`INFO
("No compiled-in Lua handler(s) found.");

1058 
	`TRACE
("Lu®ex˚±i⁄:\n%s", 
	`lua_to°rög
(
gL
, -1));

1059 
	`lua_p›
(
gL
, 1);

1061 
	`INFO
("Compiled-in Lua handler(s) foundándÜoaded.");

1064 i‡((
ªt
 = 
	`luaL_do°rög
(
gL
, "require (\"swupdate_handlers\")")) != 0) {

1065 
	`INFO
("No Lua handler(s) found.");

1066 i‡(
	`luaL_do°rög
(
gL
, "returnÖackage.path:gsub(';','\\n'):gsub('?','swupdate_handlers')") == 0) {

1067 
	`lua_p›
(
gL
, 1);

1068 
	`TRACE
("Lu®h™dÀ∏£¨chÖ©h:\n%s", 
	`lua_to°rög
(
gL
, -1));

1069 
	`lua_p›
(
gL
, 1);

1072 
	`INFO
("Lua handler(s) found.");

1076 
	`WARN
("UnableÅoÑegister Lua context for callbacks");

1079  
ªt
;

1080 
	}
}

1082 
	$lua_h™dÀrs_öô
(Ë{ 0;
	}
}

1085 
lua_Sèã
 *
	$lua_∑r£r_öô
(c⁄° *
buf
, 
di˘
 *
boŸív
)

1087 
lua_Sèã
 *
L
 = 
	`luaL_√w°©e
();

1089 i‡(!
L
)

1090  
NULL
;

1092 
	`lua_pushlightu£rd©a
(
L
, (*)
LUA_TYPE_PEMBSCR
);

1093 
	`lua_£tglobÆ
(
L
, "SWUPDATE_LUA_TYPE");

1094 
	`luaL_›ílibs
(
L
);

1095 
	`luaL_ªquúef
(
L
, "swupd©e", 
lua›í_swupd©e
, 1 );

1096 
	`lua_pushlightu£rd©a
(
L
, (*)
boŸív
);

1097 
	`luaL_£tfuncs
(
L
, 
l_swupd©e_boŸív
, 1);

1098 
	`lua_p›
(
L
, 1);

1100 i‡(
	`luaL_lﬂd°rög
(
L
, 
buf
Ë|| 
	`lua_pˇŒ
(L, 0, 0, 0)) {

1101 
	`LUA°ackDump
(
L
);

1102 
	`ERROR
("ERRORÖreparing LuaÉmbedded script inÖarser");

1103 
	`lua_˛o£
(
L
);

1104  
NULL
;

1107  
L
;

1108 
	}
}

1110 
	$lua_∑r£r_‚
(
lua_Sèã
 *
L
, c⁄° *
f˙
, 
img_ty≥
 *
img
)

1112 
ªt
 = -1;

1114 
	`lua_gëglobÆ
(
L
, 
f˙
);

1115 if(!
	`lua_isfun˘i⁄
(
L
, 
	`lua_gët›
(L))) {

1116 
	`lua_p›
(
L
, 1);

1117 
	`TRACE
("S¸ùà:Çÿ%†ö s¸ùt,Éxôög", 
f˙
);

1120 
	`TRACE
("Pª∑ªdÅÿru¿%s", 
f˙
);

1125 
	`image2èbÀ
(
L
, 
img
);

1127 
ªt
 = 
	`lua_pˇŒ
(
L
, 1, 2, 0);

1128 i‡(
ªt
 || !
	`lua_isboﬁón
(
L
, -2)) {

1129 
	`LUA°ackDump
(
L
);

1130 
	`ERROR
("ERROR CÆlög Lu®%s", 
f˙
);

1134 
	`LUA°ackDump
(
L
);

1136 
ªt
 = 
	`lua_toboﬁón
(
L
, -2) ? 0 : -1;

1139 i‡(!
ªt
 && !
	`lua_toboﬁón
(
L
, -1))

1140 
ªt
 = 1;

1142 
	`èbÀ2image
(
L
, 
img
);

1144 
	`lua_p›
(
L
, 2);

1146 
	`TRACE
("S¸ùàªtu∫†%d", 
ªt
);

1148  
ªt
;

1149 
	}
}

	@swupdate/corelib/mtd-interface.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°dboﬁ.h
>

11 
	~<f˙é.h
>

12 
	~<°rög.h
>

13 
	~<mtd/mtd-u£r.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/mou¡.h
>

16 
	~<uni°d.h
>

17 
	~<î∫o.h
>

18 
	~<limôs.h
>

19 
	~"bsdqueue.h
"

20 
	~"utû.h
"

21 
	~"Êash.h
"

23 
	gmtd_ubi_bœckli°
[100] = { 0 };

29 
	#EMPTY_BYTE
 0xFF

	)

31 
	$Êash_îa£
(
mtdnum
)

33 
fd
;

34 
mtd_devi˚
[80];

35 
mtd_dev_öfo
 *
mtd
;

36 
noskùbad
 = 0;

37 
ªt
 = 0;

38 
eb
, 
eb_°¨t
, 
eb_˙t
, 
i
;

39 
uöt8_t
 *
buf
;

40 
Êash_des¸ùti⁄
 *
Êash
 = 
	`gë_Êash_öfo
();

42 i‡(!
	`mtd_dev_¥e£¡
(
Êash
->
libmtd
, 
mtdnum
)) {

43 
	`ERROR
("MTD %d d€†nŸÉxi°", 
mtdnum
);

44  -
ENODEV
;

46 
mtd
 = &
Êash
->
mtd_öfo
[
mtdnum
].mtd;

47 
	`¢¥ötf
(
mtd_devi˚
, (mtd_devi˚), "/dev/mtd%d", 
mtdnum
);

49 i‡((
fd
 = 
	`›í
(
mtd_devi˚
, 
O_RDWR
)) < 0) {

50 
	`ERROR
–"%s: %s: %s", 
__func__
, 
mtd_devi˚
, 
	`°ªº‹
(
î∫o
));

51  -
ENODEV
;

57 
buf
 = (
uöt8_t
 *)
	`mÆloc
(
mtd
->
eb_size
);

58 i‡(!
buf
) {

59 
	`ERROR
("No memory forÅemporary buffer of %d bytes",

60 
mtd
->
eb_size
);

61 
	`˛o£
(
fd
);

62  -
ENOMEM
;

65 
eb_°¨t
 = 0;

66 
eb_˙t
 = (
mtd
->
size
 / mtd->
eb_size
Ë- 
eb_°¨t
;

67 
eb
 = 0;Éb < 
eb_°¨t
 + 
eb_˙t
;Éb++) {

70 i‡(!
noskùbad
) {

71 
isbad
 = 
	`mtd_is_bad
(
mtd
, 
fd
, 
eb
);

72 i‡(
isbad
 > 0) {

74 } i‡(
isbad
 < 0) {

75 i‡(
î∫o
 =
EOPNOTSUPP
) {

76 
noskùbad
 = 1;

78 
	`ERROR
("%s: MTD gë bad block faûed", 
mtd_devi˚
);

79 
ªt
 = -
EFAULT
;

80 
îa£_out
;

86 i‡(
	`mtd_is_locked
(
mtd
, 
fd
, 
eb
) > 0) {

87 i‡(
	`mtd_u∆ock
(
mtd
, 
fd
, 
eb
) != 0) {

88 i‡(
î∫o
 !
EOPNOTSUPP
) {

89 
	`TRACE
("%s: MTD u∆ock faûuª", 
mtd_devi˚
);

102 i‡(!
	`isN™d
(
Êash
, 
mtdnum
)) {

103 i‡(
	`mtd_ªad
(
mtd
, 
fd
, 
eb
, 0, 
buf
, mtd->
eb_size
) != 0) {

104 
	`ERROR
("%s: MTD Ród faûuª", 
mtd_devi˚
);

105 
ªt
 = -
EIO
;

106 
îa£_out
;

110 
i
 = 0; i < 
mtd
->
eb_size
; i++) {

111 i‡(
buf
[
i
] !
EMPTY_BYTE
)

116 i‡(
i
 =
mtd
->
eb_size
)

122 i‡(
	`mtd_îa£
(
Êash
->
libmtd
, 
mtd
, 
fd
, 
eb
) != 0) {

123 
	`ERROR
("%s: MTD Eø£ faûuª", 
mtd_devi˚
);

124 
ªt
 = -
EIO
;

125 
îa£_out
;

129 
îa£_out
:

130 
	`‰ì
(
buf
);

132 
	`˛o£
(
fd
);

134  
ªt
;

135 
	}
}

138 
	$mtd_öô
()

140 
Êash_des¸ùti⁄
 *
Êash
 = 
	`gë_Êash_öfo
();

141 
Êash
->
libmtd
 = 
	`libmtd_›í
();

142 i‡(
Êash
->
libmtd
 =
NULL
) {

143 i‡(
î∫o
 == 0)

144 
	`ERROR
("MTD isÇotÖresent inÅhe system");

145 
	`ERROR
("cannot openÜibmtd");

147 
	}
}

149 
	$mtd_£t_ubibœckli°
(*
mtdli°
)

151 
	`°∫˝y
(
mtd_ubi_bœckli°
, 
mtdli°
, (mtd_ubi_blacklist));

152 
	}
}

154 
	$gë_mtd_‰om_devi˚
(*
s
) {

155 
ªt
;

156 
mtdnum
;

157 *
ªÆ_s
;

159 i‡(!
s
)

162 
ªÆ_s
 = 
	`ªÆ∑th
(
s
, 
NULL
);

163 i‡(
ªÆ_s
 =
NULL
) {

164 
tmp_s
[
PATH_MAX
] = {0};

166 i‡(! 
	`°∫cmp
(
s
, "/dev/", 5))

169 
	`¢¥ötf
(
tmp_s
, —mp_s), "/dev/%s", 
s
);

170 
ªÆ_s
 = 
	`ªÆ∑th
(
tmp_s
, 
NULL
);

171 i‡(
ªÆ_s
 =
NULL
)

175 
	`TRACE
("mtdÇamê[%s]ÑesﬁvedÅÿ[%s]", 
s
, 
ªÆ_s
);

176 
ªt
 = 
	`ssˇnf
(
ªÆ_s
, "mtd%d", &
mtdnum
);

177 i‡(
ªt
 <= 0)

178 
ªt
 = 
	`ssˇnf
(
ªÆ_s
, "/dev/mtd%d", &
mtdnum
);

180 
	`‰ì
 (
ªÆ_s
);

182 i‡(
ªt
 <= 0)

185  
mtdnum
;

186 
	}
}

188 
	$gë_mtd_‰om_«me
(c⁄° *
s
)

190 
Êash_des¸ùti⁄
 *
Êash
 = 
	`gë_Êash_öfo
();

191 
mtd_dev_öfo
 *
öfo
;

192 
i
;

194 
i
 = 
Êash
->
mtd
.
lowe°_mtd_num
;

195 
i
 <
Êash
->
mtd
.
highe°_mtd_num
; i++) {

196 
öfo
 = &
Êash
->
mtd_öfo
[
i
].
mtd
;

197 i‡(!
	`°rcmp
(
öfo
->
«me
, 
s
))

198  
i
;

202 
	}
}

204 
	$ubi_öô
()

206 
Êash_des¸ùti⁄
 *
«nd
 = 
	`gë_Êash_öfo
();

207 
îr
;

208 
libubi_t
 
libubi
;

210 
libubi
 = 
	`libubi_›í
();

211 i‡(!
libubi
) {

215 
«nd
->
libubi
 =Üibubi;

217 
îr
 = 
	`ubi_gë_öfo
(
libubi
, &
«nd
->
ubi_öfo
);

218 i‡(
îr
) {

219 
	`ERROR
("cannot get UBI information");

223 i‡(
«nd
->
ubi_öfo
.
˘æ_maj‹
 == -1) {

224 
	`ERROR
("MTDáttach/detach feature isÇot supported by your kernel");

226 
	}
}

228 
	$ubi_ö£π_li°
(
ödex
, 
Êash_des¸ùti⁄
 *
Êash
, 
boﬁ
 
bœck
)

230 
mtd_öfo
 *
mtd
 = &
Êash
->mtd;

232 i‡(
ödex
 >
mtd
->
lowe°_mtd_num
 && index <mtd->
highe°_mtd_num
) {

233 i‡(
bœck
) {

234 
Êash
->
mtd_öfo
[
ödex
].
skùubi
 = 1;

235 
Êash
->
mtd_öfo
[
ödex
].
has_ubi
 = 0;

237 
Êash
->
mtd_öfo
[
ödex
].
skùubi
 = 0;

238 
Êash
->
mtd_öfo
[
ödex
].
has_ubi
 = 1;

241 
	}
}

243 #i‡
deföed
(
CONFIG_UBIVOL
)

244 
	$sˇn_ubi_vﬁumes
(
mtd_ubi_öfo
 *
öfo
)

246 
Êash_des¸ùti⁄
 *
Êash
 = 
	`gë_Êash_öfo
();

247 
libubi_t
 
libubi
 = 
Êash
->libubi;

248 
ubi_∑π
 *ubi_part;

249 
i
, 
îr
;

251 
i
 = 
öfo
->
dev_öfo
.
lowe°_vﬁ_id
;

252 
i
 <
öfo
->
dev_öfo
.
highe°_vﬁ_id
; i++) {

253 
ubi_∑π
 = (ubi_∑π *)
	`ˇŒoc
(1, (ubi_part));

254 i‡(!
ubi_∑π
) {

255 
	`ERROR
("No memory: malloc failed");

259 
îr
 = 
	`ubi_gë_vﬁ_öfo1
(
libubi
, 
öfo
->
dev_öfo
.
dev_num
,

260 
i
, &
ubi_∑π
->
vﬁ_öfo
);

261 i‡(
îr
 == -1) {

262 i‡(
î∫o
 =
ENOENT
 ||Éºnÿ=
ENODEV
)

265 
	`ERROR
("libubi failedÅoÖrobe volume %d on ubi%d",

266 
i
, 
öfo
->
dev_öfo
.
dev_num
);

270 
	`LIST_INSERT_HEAD
(&
öfo
->
ubi_∑πôi⁄s
, 
ubi_∑π
, 
√xt
);

271 
	`TRACE
("mtd%d:\tVolume found : \t%s",

272 
öfo
->
dev_öfo
.
mtd_num
,

273 
ubi_∑π
->
vﬁ_öfo
.
«me
);

276 
öfo
->
sˇ¬ed
 = 1;

277 
	}
}

279 
	$sˇn_f‹_ubi_devi˚s
()

281 
Êash_des¸ùti⁄
 *
Êash
 = 
	`gë_Êash_öfo
();

282 
libubi_t
 
libubi
 = 
Êash
->libubi;

283 
ubi_öfo
 ubi_info;

284 
ubi_dev_öfo
 
dev_öfo
;

285 
mtd_ubi_öfo
 *
mtd_öfo
;

286 
îr
, 
i
, 
mtd
;

288 i‡(!
libubi
)

294 
îr
 = 
	`ubi_gë_öfo
(
libubi
, &
ubi_öfo
);

295 i‡(
îr
)

298 
i
 = 
ubi_öfo
.
lowe°_dev_num
;

299 
i
 <
ubi_öfo
.
highe°_dev_num
; i++) {

300 
îr
 = 
	`ubi_gë_dev_öfo1
(
libubi
, 
i
, &
dev_öfo
);

301 i‡(
îr
 == -1) {

304 
mtd
 = 
dev_öfo
.
mtd_num
;

305 
mtd_öfo
 = &
Êash
->mtd_öfo[
mtd
];

306 i‡(
mtd
 < 0 || 
Êash
->
mtd_öfo
[mtd].
skùubi
)

308 
	`mem˝y
(&
mtd_öfo
->
dev_öfo
, &dev_öfo, (
ubi_dev_öfo
));

310 
	`sˇn_ubi_vﬁumes
(
mtd_öfo
);

312 
	}
}

314 #i‡
deföed
(
CONFIG_UBIATTACH
)

315 
	$sˇn_ubi_∑πôi⁄s
(
mtd
)

317 
Êash_des¸ùti⁄
 *
Êash
 = 
	`gë_Êash_öfo
();

318 
libubi_t
 
libubi
 = 
Êash
->libubi;

319 
îr
, 
åy©èch
 = 0;

320 
mtd_ubi_öfo
 *
mtd_öfo
;

322 i‡(
mtd
 < 0) {

323 
	`ERROR
("wr⁄g MTD devi˚ /dev/mtd%d", 
mtd
);

327 
mtd_öfo
 = &
Êash
->mtd_öfo[
mtd
];

335 
mtd_öfo
->
ªq
.
dev_num
 = 
UBI_DEV_NUM_AUTO
;

336 
mtd_öfo
->
ªq
.
mtd_num
 = 
mtd
;

337 #i‡
	`deföed
(
CONFIG_UBIVIDOFFSET
)

338 
mtd_öfo
->
ªq
.
vid_hdr_off£t
 = 
CONFIG_UBIVIDOFFSET
;

340 
mtd_öfo
->
ªq
.
vid_hdr_off£t
 = 0;

342 
mtd_öfo
->
ªq
.
mtd_dev_node
 = 
NULL
;

350 
îr
 = 
	`ubi_©èch
(
libubi
, 
DEFAULT_CTRL_DEV
, &
mtd_öfo
->
ªq
);

351 i‡(
îr
) {

352 i‡(
mtd_öfo
->
has_ubi
 && !
åy©èch
) {

353 
	`TRACE
("ˇ¬Ÿáâach mtd%d ..åyÉøsög", 
mtd
);

354 i‡(
	`Êash_îa£
(
mtd
)) {

355 
	`ERROR
("mtd%d c™nŸ bêîa£d", 
mtd
);

359 
	`ERROR
("ˇ¬Ÿáâach mtd%d - maybênŸá NAND o∏øw devi˚", 
mtd
);

362 
åy©èch
++;

364 } 
îr
 !0 && 
åy©èch
 < 2);

366 
îr
 = 
	`ubi_gë_dev_öfo1
(
libubi
, 
mtd_öfo
->
ªq
.
dev_num
, &mtd_öfo->
dev_öfo
);

367 i‡(
îr
) {

368 
	`ERROR
("ˇ¬Ÿ gë inf‹m©i⁄ábouàUBI devi˚ %d", 
mtd_öfo
->
ªq
.
dev_num
);

372 
	`sˇn_ubi_vﬁumes
(
mtd_öfo
);

373 
	}
}

377 
	$sˇn_mtd_devi˚s
 ()

379 
îr
;

380 
Êash_des¸ùti⁄
 *
Êash
 = 
	`gë_Êash_öfo
();

381 
mtd_öfo
 *mtd_öfÿ&
Êash
->
mtd
;

382 
mtd_ubi_öfo
 *mtd_ubi_info;

383 
libmtd_t
 
libmtd
 = 
Êash
->libmtd;

384 
li°
[100];

385 *
tokí
;

386 *
ßvïå
;

387 
i
, 
ödex
;

388 
boﬁ
 
bœck
;

390 i‡(!
libmtd
) {

391 
	`ERROR
("MTD isÇotÖresent onÅheÅarget");

394 
îr
 = 
	`mtd_gë_öfo
(
libmtd
, 
mtd_öfo
);

395 i‡(
îr
) {

396 i‡(
î∫o
 =
ENODEV
)

397 
	`ERROR
("MTD isÇotÖresent onÅhe board");

402 
Êash
->
mtd_öfo
 = (
mtd_ubi_öfo
 *)
	`ˇŒoc
(

403 
mtd_öfo
->
highe°_mtd_num
 + 1,

404 (
mtd_ubi_öfo
));

405 i‡(!
Êash
->
mtd_öfo
) {

406 
	`ERROR
("NoÉnough memory for MTD structures");

407  -
ENOMEM
;

410 
i
 = 0; i < 2; i++) {

411 
	`mem£t
(
li°
, 0, (list));

412 
i
) {

414 
bœck
 = 
åue
;

415 #i‡
	`deföed
(
CONFIG_UBIBLACKLIST
)

416 
	`°∫˝y
(
li°
, 
CONFIG_UBIBLACKLIST
,

417 (
li°
));

420 i‡(
	`°æí
(
mtd_ubi_bœckli°
))

421 
	`°∫˝y
(
li°
, 
mtd_ubi_bœckli°
, (list));

424 
bœck
 = 
Ál£
;

425 #i‡
	`deföed
(
CONFIG_UBIWHITELIST
)

426 
	`°∫˝y
(
li°
, 
CONFIG_UBIWHITELIST
,

427 (
li°
));

432 
tokí
 = 
	`°πok_r
(
li°
, " ", &
ßvïå
);

433 i‡(
tokí
) {

434 
î∫o
 = 0;

435 
ödex
 = 
	`°πoul
(
tokí
, 
NULL
, 10);

436 i‡(
î∫o
 == 0) {

437 
	`ubi_ö£π_li°
(
ödex
, 
Êash
, 
bœck
);

439 (
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
))) {

440 
î∫o
 = 0;

441 
ödex
 = 
	`°πoul
(
tokí
, 
NULL
, 10);

442 i‡(
î∫o
 != 0)

444 
	`ubi_ö£π_li°
(
ödex
, 
Êash
, 
bœck
);

450 
i
 = 
mtd_öfo
->
lowe°_mtd_num
;

451 
i
 <
mtd_öfo
->
highe°_mtd_num
; i++) {

453 
mtd_ubi_öfo
 = &
Êash
->
mtd_öfo
[
i
];

454 
	`LIST_INIT
(&
mtd_ubi_öfo
->
ubi_∑πôi⁄s
);

455 i‡(!
	`mtd_dev_¥e£¡
(
libmtd
, 
i
))

457 
îr
 = 
	`mtd_gë_dev_öfo1
(
libmtd
, 
i
, &
Êash
->
mtd_öfo
[i].
mtd
);

458 i‡(
îr
) {

459 
	`TRACE
("Nÿöf‹m©i⁄ from MTD%d", 
i
);

464 #i‡
	`deföed
(
CONFIG_UBIVOL
)

468 
	`sˇn_f‹_ubi_devi˚s
();

470 #i‡
	`deföed
(
CONFIG_UBIATTACH
)

475 
i
 = 
mtd_öfo
->
lowe°_mtd_num
;

476 
i
 <
mtd_öfo
->
highe°_mtd_num
; i++) {

477 i‡(
Êash
->
libubi
 && !Êash->
mtd_öfo
[
i
].
skùubi
 &&

478 !
Êash
->
mtd_öfo
[
i
].
sˇ¬ed
 &&

479 
Êash
->
mtd_öfo
[
i
].
mtd
.
ty≥
 !
MTD_UBIVOLUME
)

480 
	`sˇn_ubi_∑πôi⁄s
(
i
);

485  
mtd_öfo
->
mtd_dev_˙t
;

486 
	}
}

488 
	$ubi_mou¡
(
ubi_vﬁ_öfo
 *
vﬁ
, c⁄° *
m¡poöt
)

490 
ªt
;

491 
node
[64];

493 
	`¢¥ötf
(
node
, (node), "/dev/ubi%d_%d",

494 
vﬁ
->
dev_num
,

495 
vﬁ
->
vﬁ_id
);

497 
ªt
 = 
	`mou¡
(
node
, 
m¡poöt
,

498 "ubifs", 0, 
NULL
);

500 i‡(
ªt
)

501 
	`ERROR
("UBIFS cannot be mounted : device %s volume %s on %s : %s",

502 
node
, 
vﬁ
->
«me
, 
m¡poöt
, 
	`°ªº‹
(
î∫o
));

503 
	}
}

505 
	$ubi_umou¡
(c⁄° *
m¡poöt
)

507 
	`umou¡
(
m¡poöt
);

508 
	}
}

510 
	$mtd_˛ónup
 ()

512 
i
;

513 
ubûi°
 *
li°
;

514 
ubi_∑π
 *
vﬁ
;

515 
Êash_des¸ùti⁄
 *
Êash
 = 
	`gë_Êash_öfo
();

517 i‡(
Êash
->
mtd_öfo
) {

518 
i
 = 
Êash
->
mtd
.
lowe°_mtd_num
; i <Êash->mtd.
highe°_mtd_num
; i++) {

519 
li°
 = &
Êash
->
mtd_öfo
[
i
].
ubi_∑πôi⁄s
;

520 
	`LIST_FOREACH
(
vﬁ
, 
li°
, 
√xt
) {

521 
	`LIST_REMOVE
(
vﬁ
, 
√xt
);

522 
	`‰ì
(
vﬁ
);

525 
	`‰ì
(
Êash
->
mtd_öfo
);

526 
Êash
->
mtd_öfo
 = 
NULL
;

530 
	`mem£t
(&
Êash
->
ubi_öfo
, 0, (ubi_info));

531 
	`mem£t
(&
Êash
->
mtd
, 0, (
mtd_öfo
));

532 
	}
}

	@swupdate/corelib/network_thread.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<uni°d.h
>

12 
	~<°rög.h
>

13 
	~<î∫o.h
>

14 
	~<sys/io˘l.h
>

15 
	~<f˙é.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/sockë.h
>

18 
	~<sys/°©.h
>

19 
	~<sys/un.h
>

20 
	~<sys/£À˘.h
>

21 
	~<¨∑/öë.h
>

22 
	~<√töë/ö.h
>

23 
	~<±hªad.h
>

25 
	~"bsdqueue.h
"

26 
	~"utû.h
"

27 
	~"√tw‹k_ùc.h
"

28 
	~"√tw‹k_öãrÁ˚.h
"

29 
	~"ö°ÆÀr.h
"

30 
	~"swupd©e.h
"

31 
	~"p˘l.h
"

32 
	~"gíî©ed/autoc⁄f.h
"

34 #ifde‡
CONFIG_SYSTEMD


35 
	~<sy°emd/sd-d´m⁄.h
>

38 
	#LISTENQ
 1024

	)

40 
	#NUM_CACHED_MESSAGES
 100

	)

41 
	#DEFAULT_INTERNAL_TIMEOUT
 60

	)

43 
	smsg_ñem
 {

44 
RECOVERY_STATUS
 
	m°©us
;

45 
	mîr‹
;

46 
	mÀvñ
;

47 *
	mmsg
;

48 
SIMPLEQ_ENTRY
(
msg_ñem
Ë
	m√xt
;

51 
SIMPLEQ_HEAD
(
msgli°
, 
msg_ñem
);

52 
msgli°
 
	gnŸifymsgs
;

53 
	gƒmsgs
 = 0;

55 
±hªad_muãx_t
 
	gmsglock
 = 
PTHREAD_MUTEX_INITIALIZER
;

57 
	$˛ón_msg
(*
msg
, 
dr›
)

59 *
lÂos
;

60 
lÂos
 = 
	`°rchr
(
msg
, 
dr›
);

61 
lÂos
) {

62 *
lÂos
 = ' ';

63 
lÂos
 = 
	`°rchr
(
msg
, 
dr›
);

65 
	}
}

67 
	$√tw‹k_nŸifõr
(
RECOVERY_STATUS
 
°©us
, 
îr‹
, 
Àvñ
, c⁄° *
msg
)

69 
Àn
 = 
msg
 ? 
	`°æí
(msg) : 0;

70 
msg_ñem
 *
√wmsg
 = (msg_ñem *)
	`ˇŒoc
(1, (*√wmsgË+ 
Àn
 + 1);

71 
msg_ñem
 *
ﬁdmsg
;

73 i‡(!
√wmsg
)

76 
	`±hªad_muãx_lock
(&
msglock
);

77 
ƒmsgs
++;

78 i‡(
ƒmsgs
 > 
NUM_CACHED_MESSAGES
) {

79 
ﬁdmsg
 = 
	`SIMPLEQ_FIRST
(&
nŸifymsgs
);

80 
	`SIMPLEQ_REMOVE_HEAD
(&
nŸifymsgs
, 
√xt
);

81 
	`‰ì
(
ﬁdmsg
);

82 
ƒmsgs
--;

84 
√wmsg
->
msg
 = (*Íewmsg + (
msg_ñem
);

86 
√wmsg
->
°©us
 = status;

87 
√wmsg
->
îr‹
 =Érror;

88 
√wmsg
->
Àvñ
 =Üevel;

90 i‡(
msg
) {

91 
	`°∫˝y
(
√wmsg
->
msg
, msg, 
Àn
);

92 
	`˛ón_msg
(
√wmsg
->
msg
, '\t');

93 
	`˛ón_msg
(
√wmsg
->
msg
, '\n');

94 
	`˛ón_msg
(
√wmsg
->
msg
, '\r');

98 
	`SIMPLEQ_INSERT_TAIL
(&
nŸifymsgs
, 
√wmsg
, 
√xt
);

99 
	`±hªad_muãx_u∆ock
(&
msglock
);

100 
	}
}

102 
	$li°íî_¸óã
(c⁄° *
∑th
, 
ty≥
)

104 
sockaddr_un
 
£rvaddr
;

105 
li°ífd
 = -1;

107 #ifde‡
CONFIG_SYSTEMD


108 i‡(
	`sd_boŸed
()) {

109 
fd
 = 
SD_LISTEN_FDS_START
; fd < SD_LISTEN_FDS_START + 
	`sd_li°í_fds
(0); fd++) {

110 i‡(
	`sd_is_sockë_unix
(
fd
, 
SOCK_STREAM
, 1, 
∑th
, 0)) {

111 
li°ífd
 = 
fd
;

115 i‡(
li°ífd
 == -1) {

116 
	`TRACE
("gŸÇÿsockëáà%†‰om sy°emd", 
∑th
);

118 
	`TRACE
("gŸ sockë fd=%dáà%†‰om sy°emd", 
li°ífd
, 
∑th
);

123 i‡(
li°ífd
 == -1) {

124 
	`TRACE
("¸ótög sockëáà%s", 
∑th
);

125 
li°ífd
 = 
	`sockë
(
AF_LOCAL
, 
ty≥
, 0);

126 
	`u∆ök
(
∑th
);

127 
	`bzîo
(&
£rvaddr
, (servaddr));

128 
£rvaddr
.
sun_Ámûy
 = 
AF_LOCAL
;

129 
	`°r˝y
(
£rvaddr
.
sun_∑th
, 
∑th
);

131 i‡(
	`böd
(
li°ífd
, (
sockaddr
 *Ë&
£rvaddr
, (servaddr)) < 0) {

132 
	`˛o£
(
li°ífd
);

136 
	`chmod
(
∑th
, 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IWGRP
 | 
S_IROTH
 | 
S_IWOTH
);

139 i‡(
ty≥
 =
SOCK_STREAM
)

140 i‡(
	`li°í
(
li°ífd
, 
LISTENQ
) < 0) {

141 
	`˛o£
(
li°ífd
);

144  
li°ífd
;

146 
	}
}

148 
	$˛ónum_msg_li°
()

150 
msg_ñem
 *
nŸifiˇti⁄
;

152 
	`±hªad_muãx_lock
(&
msglock
);

154 !
	`SIMPLEQ_EMPTY
(&
nŸifymsgs
)) {

155 
nŸifiˇti⁄
 = 
	`SIMPLEQ_FIRST
(&
nŸifymsgs
);

156 
	`SIMPLEQ_REMOVE_HEAD
(&
nŸifymsgs
, 
√xt
);

157 
	`‰ì
(
nŸifiˇti⁄
);

159 
ƒmsgs
 = 0;

160 
	`±hªad_muãx_u∆ock
(&
msglock
);

161 
	}
}

163 
	$em±y_pùe
(
fd
)

165 
fd_£t
 
fds
;

166 
ªt
;

167 
ùc_mesßge
 
msg
;

168 
timevÆ
 
tv
;

171 
	`FD_ZERO
(&
fds
);

172 
	`FD_SET
(
fd
, &
fds
);

173 
tv
.
tv_£c
 = 0;

174 
tv
.
tv_u£c
 = 10000;

175 
ªt
 = 
	`£À˘
(
fd
 + 1, &
fds
, 
NULL
, NULL, &
tv
);

176 i‡(
ªt
 <0 || !
	`FD_ISSET
(
fd
, &
fds
))

181 i‡(
	`ªad
(
fd
, &
msg
, (msg)) < 0)

184 
	}
}

186 
	$u∆ök_sockë
()

188 #ifde‡
CONFIG_SYSTEMD


189 i‡(
	`sd_boŸed
(Ë&& 
	`sd_li°í_fds
(0) > 0) {

197 
	`u∆ök
((*)
CONFIG_SOCKET_CTRL_PATH
);

198 
	}
}

200 *
	$√tw‹k_thªad
 (*
d©a
)

202 
ö°ÆÀr
 *
ö°p
 = (ö°ÆÀ∏*)
d©a
;

203 
˘æli°í
, 
˘æc⁄nfd
;

204 
sockÀn_t
 
˛ûí
;

205 
sockaddr_un
 
˛üddr
;

206 
ùc_mesßge
 
msg
;

207 
ƒód
;

208 
msg_ñem
 *
nŸifiˇti⁄
;

209 
ªt
;

210 
pùe
;

211 
fd_£t
 
pùefds
;

212 
timevÆ
 
tv
;

214 i‡(!
ö°p
) {

215 
	`TRACE
("FatalÉrror: NetworkÅhreadáborting...");

219 
	`SIMPLEQ_INIT
(&
nŸifymsgs
);

220 
	`ªgi°î_nŸifõr
(
√tw‹k_nŸifõr
);

223 
˘æli°í
 = 
	`li°íî_¸óã
((*)
CONFIG_SOCKET_CTRL_PATH
, 
SOCK_STREAM
);

224 i‡(
˘æli°í
 < 0 ) {

225 
	`TRACE
("Error creating IPC sockets");

226 
	`exô
(2);

229 i‡(
	`©exô
(
u∆ök_sockë
) != 0) {

230 
	`TRACE
("Cannot setup socket cleanup onÉxit, %s won't be unlinked.",

231 (*)
CONFIG_SOCKET_CTRL_PATH
);

235 
˛ûí
 = (
˛üddr
);

236 i‡–(
˘æc⁄nfd
 = 
	`ac˚±
(
˘æli°í
, (
sockaddr
 *Ë&
˛üddr
, &
˛ûí
)) < 0) {

237 i‡(
î∫o
 =
EINTR
)

240 
	`TRACE
("Ac˚±Ñëu∫s: %s", 
	`°ªº‹
(
î∫o
));

244 
ƒód
 = 
	`ªad
(
˘æc⁄nfd
, (*)&
msg
, (msg));

246 i‡(
ƒód
 !(
msg
)) {

247 
	`TRACE
("IPC messageÅoo short: fragmentationÇot supported");

248 
	`˛o£
(
˘æc⁄nfd
);

251 #ifde‡
DEBUG_IPC


252 
	`TRACE
("ªque° hódî: magic[0x%08X]Åy≥[0x%08X]", 
msg
.
magic
, msg.
ty≥
);

255 
	`±hªad_muãx_lock
(&
°ªam_muãx
);

256 i‡(
msg
.
magic
 =
IPC_MAGIC
) {

257 
msg
.
ty≥
) {

258 
POST_UPDATE
:

259 i‡(
	`po°upd©e
(
	`gë_swupd©e_cfg
(),

260 
msg
.
d©a
.
ö°msg
.
Àn
 > 0 ? msg.d©a.ö°msg.
buf
 : 
NULL
) == 0) {

261 
msg
.
ty≥
 = 
ACK
;

262 
	`•rötf
(
msg
.
d©a
.msg, "Post-updateáctions successfullyÉxecuted.");

264 
msg
.
ty≥
 = 
NACK
;

265 
	`•rötf
(
msg
.
d©a
.msg, "Post-updateáctions failed.");

268 
SWUPDATE_SUBPROCESS
:

276 
pùe
 = 
	`p˘l_gëfd_‰om_ty≥
(
msg
.
d©a
.
ö°msg
.
sour˚
);

277 i‡(
pùe
 < 0) {

278 
	`ERROR
("Cannot find channel forÑequestedÖrocess");

279 
msg
.
ty≥
 = 
NACK
;

282 
	`TRACE
("Received Message for %s",

283 
	`p˘l_gë«me_‰om_ty≥
(
msg
.
d©a
.
ö°msg
.
sour˚
));

284 i‡(
	`f˙é
(
pùe
, 
F_GETFL
Ë< 0 && 
î∫o
 =
EBADF
) {

285 
	`ERROR
("PùênŸávaûabÀ o∏˛o£d: %d", 
pùe
);

286 
msg
.
ty≥
 = 
NACK
;

294 
	`em±y_pùe
(
pùe
);

296 
ªt
 = 
	`wrôe
(
pùe
, &
msg
, (msg));

297 i‡(
ªt
 !(
msg
)) {

298 
	`ERROR
("WritingÅoÖipe failed !");

299 
msg
.
ty≥
 = 
NACK
;

310 
	`FD_ZERO
(&
pùefds
);

311 
	`FD_SET
(
pùe
, &
pùefds
);

312 
tv
.
tv_u£c
 = 0;

313 i‡(!
msg
.
d©a
.
ö°msg
.
timeout
)

314 
tv
.
tv_£c
 = 
DEFAULT_INTERNAL_TIMEOUT
;

316 
tv
.
tv_£c
 = 
msg
.
d©a
.
ö°msg
.
timeout
;

317 
ªt
 = 
	`£À˘
(
pùe
 + 1, &
pùefds
, 
NULL
, NULL, &
tv
);

323 i‡(
ªt
 <0 || !
	`FD_ISSET
(
pùe
, &
pùefds
)) {

324 
msg
.
ty≥
 = 
NACK
;

328 
ªt
 = 
	`ªad
(
pùe
, &
msg
, (msg));

329 i‡(
ªt
 !(
msg
)) {

330 
	`ERROR
("Reading fromÖipe failed !");

331 
msg
.
ty≥
 = 
NACK
;

341 
REQ_INSTALL
:

342 
REQ_INSTALL_DRYRUN
:

343 
	`TRACE
("IncomingÇetworkÑequest:Örocessing...");

344 i‡(
ö°p
->
°©us
 =
IDLE
) {

345 
ö°p
->
fd
 = 
˘æc⁄nfd
;

346 
ö°p
->
sour˚
 = 
msg
.
d©a
.
ö°msg
.source;

347 
ö°p
->
Àn
 = 
	`mö
(
msg
.
d©a
.
ö°msg
.Àn, (ö°p->
öfo
));

352 i‡(
msg
.
ty≥
 =
REQ_INSTALL_DRYRUN
)

353 
ö°p
->
dry_run
 = 1;

355 
ö°p
->
dry_run
 = 0;

357 
	`mem˝y
(
ö°p
->
öfo
, 
msg
.
d©a
.
ö°msg
.
buf
,

358 
ö°p
->
Àn
);

363 
msg
.
ty≥
 = 
ACK
;

366 
	`˛ónum_msg_li°
();

369 
	`±hªad_c⁄d_sig«l
(&
°ªam_wkup
);

371 
msg
.
ty≥
 = 
NACK
;

372 
	`•rötf
(
msg
.
d©a
.msg, "Installation inÖrogress");

375 
GET_STATUS
:

376 
msg
.
ty≥
 = 
GET_STATUS
;

377 
	`mem£t
(
msg
.
d©a
.msg, 0, (msg.data.msg));

378 
msg
.
d©a
.
°©us
.
cuºít
 = 
ö°p
->status;

379 
msg
.
d©a
.
°©us
.
œ°_ªsu…
 = 
ö°p
->
œ°_ö°Æl
;

380 
msg
.
d©a
.
°©us
.
îr‹
 = 
ö°p
->
œ°_îr‹
;

383 
	`±hªad_muãx_lock
(&
msglock
);

384 
nŸifiˇti⁄
 = 
	`SIMPLEQ_FIRST
(&
nŸifymsgs
);

385 i‡(
nŸifiˇti⁄
) {

386 
	`SIMPLEQ_REMOVE_HEAD
(&
nŸifymsgs
, 
√xt
);

387 
ƒmsgs
--;

388 
	`°∫˝y
(
msg
.
d©a
.
°©us
.
desc
, 
nŸifiˇti⁄
->msg,

389 (
msg
.
d©a
.
°©us
.
desc
) - 1);

390 #ifde‡
DEBUG_IPC


391 
	`¥ötf
("GET STATUS: %s\n", 
msg
.
d©a
.
°©us
.
desc
);

393 
msg
.
d©a
.
°©us
.
cuºít
 = 
nŸifiˇti⁄
->status;

394 
msg
.
d©a
.
°©us
.
îr‹
 = 
nŸifiˇti⁄
->error;

396 
	`±hªad_muãx_u∆ock
(&
msglock
);

400 
msg
.
ty≥
 = 
NACK
;

404 
msg
.
ty≥
 = 
NACK
;

405 
	`•rötf
(
msg
.
d©a
.msg, "WrongÑequest:áborting");

407 
ªt
 = 
	`wrôe
(
˘æc⁄nfd
, &
msg
, (msg));

408 i‡(
ªt
 < 0)

409 
	`¥ötf
("Error write on socket ctrl");

411 i‡(
msg
.
ty≥
 !
ACK
)

412 
	`˛o£
(
˘æc⁄nfd
);

413 
	`±hªad_muãx_u∆ock
(&
°ªam_muãx
);

416 
	}
}

	@swupdate/corelib/parsing_library.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<uni°d.h
>

12 
	~<f˙é.h
>

13 
	~<î∫o.h
>

14 
	~<sys/°©.h
>

15 
	~<°dboﬁ.h
>

16 
	~<as£π.h
>

17 
	~"gíî©ed/autoc⁄f.h
"

18 
	~"bsdqueue.h
"

19 
	~"utû.h
"

20 
	~"swupd©e.h
"

21 
	~"∑r£lib.h
"

23 
	#MAX_LINKS_DEPTH
 10

	)

25 
	$check_fõld_°rög
(c⁄° *
§c
, *
d°
, c⁄° 
size_t
 
max_Àn
)

27 
	`as£π
(
max_Àn
>0);

28 
size_t
 
a˘_Àn
 = 
	`°∫Àn
(
§c
, 
SWUPDATE_GENERAL_STRING_SIZE
);

29 i‡(
a˘_Àn
 > 
max_Àn
) {

30 ((*)
d°
)[
max_Àn
-1] = '\0';

31 
	`WARN
("Configuration Key '%s...' is > %u chars, cropping it.",

32 (*)
d°
, ()
max_Àn
 - 1);

34 i‡(
a˘_Àn
 == 0) {

35 
	`WARN
("Configuration Key isÉmpty!");

37 
	}
}

39 
	$gë_¨øy_Àngth
(
∑r£πy≥
 
p
, *
roŸ
)

41 
p
) {

42 
LIBCFG_PARSER
:

43  
	`c⁄fig_£âög_Àngth
(
roŸ
);

44 
JSON_PARSER
:

45  
	`js⁄_obje˘_¨øy_Àngth
(
roŸ
);

47 ()
roŸ
;

51 
	}
}

53 *
	$gë_chûd
(
∑r£πy≥
 
p
, *
e
, c⁄° *
«me
)

55 
p
) {

56 
LIBCFG_PARSER
:

57  
	`gë_chûd_libc⁄fig
(
e
, 
«me
);

58 
JSON_PARSER
:

59  
	`gë_chûd_js⁄
((
js⁄_obje˘
 *)
e
, 
«me
);

61 ()
e
;

62 ()
«me
;

65  
NULL
;

66 
	}
}

68 
	$ôî©e_fõld
(
∑r£πy≥
 
p
, *
e
, 
ôî©e_ˇŒback
 
cb
, *
d©a
)

70 
p
) {

71 
LIBCFG_PARSER
:

72 
	`ôî©e_fõld_libc⁄fig
(
e
, 
cb
, 
d©a
);

74 
JSON_PARSER
:

75 
	`ôî©e_fõld_js⁄
(
e
, 
cb
, 
d©a
);

78 ()
e
;

79 ()
cb
;

80 ()
d©a
;

82 
	}
}

84 *
	$gë_ñem_‰om_idx
(
∑r£πy≥
 
p
, *
node
, 
idx
)

86 
p
) {

87 
LIBCFG_PARSER
:

88  
	`c⁄fig_£âög_gë_ñem
(
node
, 
idx
);

89 
JSON_PARSER
:

90  
	`js⁄_obje˘_¨øy_gë_idx
(
node
, 
idx
);

92 ()
node
;

93 ()
idx
;

96  
NULL
;

97 
	}
}

99 c⁄° *
	$gë_fõld_°rög
(
∑r£πy≥
 
p
, *
e
, c⁄° *
∑th
)

101 
p
) {

102 
LIBCFG_PARSER
:

103  
	`gë_fõld_°rög_libc⁄fig
(
e
, 
∑th
);

104 
JSON_PARSER
:

105  
	`gë_fõld_°rög_js⁄
(
e
, 
∑th
);

107 ()
e
;

108 ()
∑th
;

111  
NULL
;

112 
	}
}

114 
	$gë_fõld_°rög_wôh_size
(
∑r£πy≥
 
p
, *
e
, c⁄° *
∑th
, *
d
, 
size_t
 
n
)

116 c⁄° *
s
 = 
NULL
;

117 
s
 = 
	`gë_fõld_°rög
(
p
, 
e
, 
∑th
);

118 i‡(
s
) {

119 
	`°∫˝y
(
d
, 
s
, 
n
);

120 
	`check_fõld_°rög
(
s
, 
d
, 
n
);

122 
	}
}

124 
	$gë_fõld
(
∑r£πy≥
 
p
, *
e
, c⁄° *
∑th
, *
de°
)

126 
p
) {

127 
LIBCFG_PARSER
:

128  
	`gë_fõld_cfg
((
c⁄fig_£âög_t
 *)
e
, 
∑th
, 
de°
);

129 
JSON_PARSER
:

130  
	`gë_fõld_js⁄
((
js⁄_obje˘
 *)
e
, 
∑th
, 
de°
);

132 ()
e
;

133 ()
∑th
;

134 ()
de°
;

136 
	}
}

138 
	$exi°_fõld_°rög
(
∑r£πy≥
 
p
, *
e
, c⁄° *
∑th
)

140 c⁄° *
°r
;

141 
p
) {

142 
LIBCFG_PARSER
:

143  
	`c⁄fig_£âög_lookup_°rög
((c⁄° 
c⁄fig_£âög_t
 *)
e
,

144 
∑th
, &
°r
);

145 
JSON_PARSER
:

146  
	`js⁄_obje˘_obje˘_gë_ex
((
js⁄_obje˘
 *)
e
, 
∑th
, 
NULL
);

148 ()
°r
;

149 ()
e
;

150 ()
∑th
;

154 
	}
}

156 *
	$föd_roŸ
(
∑r£πy≥
 
p
, *
roŸ
, c⁄° **
nodes
)

159 
p
) {

160 
LIBCFG_PARSER
:

161  
	`föd_roŸ_libc⁄fig
((
c⁄fig_t
 *)
roŸ
, 
nodes
, 
MAX_LINKS_DEPTH
);

163 
JSON_PARSER
:

164  
	`föd_roŸ_js⁄
((
js⁄_obje˘
 *)
roŸ
, 
nodes
, 
MAX_LINKS_DEPTH
);

166 ()
roŸ
;

167 ()
nodes
;

170  
NULL
;

171 
	}
}

173 *
	$gë_node
(
∑r£πy≥
 
p
, *
roŸ
, c⁄° **
nodes
)

176 
p
) {

177 
LIBCFG_PARSER
:

178  
	`gë_node_libc⁄fig
((
c⁄fig_t
 *)
roŸ
, 
nodes
);

179 
JSON_PARSER
:

180  
	`gë_node_js⁄
((
js⁄_obje˘
 *)
roŸ
, 
nodes
);

182 ()
roŸ
;

183 ()
nodes
;

186  
NULL
;

187 
	}
}

189 
	$gë_hash_vÆue
(
∑r£πy≥
 
p
, *
ñem
, *
hash
)

191 
hash_ascii
[80];

193 
	`mem£t
(
hash_ascii
, 0, (hash_ascii));

194 
	`GET_FIELD_STRING
(
p
, 
ñem
, "sha256", 
hash_ascii
);

196 
	`ascii_to_hash
(
hash
, 
hash_ascii
);

197 
	}
}

199 
boﬁ
 
	$£t_föd_∑th
(c⁄° **
nodes
, c⁄° *
√w∑th
, **
tmp
)

201 **
∑ths
;

202 
cou¡
;

203 *
ßvïå
;

204 *
tokí
, *
ªf
;

205 
boﬁ
 
fú°
 = 
åue
;

206 
Æloc°r
 = 0;

207 ()
tmp
;

213 i‡(!
√w∑th
 || (√w∑th[0] !'#'Ë|| (
	`°æí
(newpath) < 3))

214  
Ál£
;

216 
ªf
 = 
	`°rdup
(
√w∑th
);

217 i‡(!
ªf
) {

218 
	`ERROR
("No memory: failed for %lu bytes",

219 
	`°æí
(
√w∑th
) + 1);

220  
Ál£
;

227 
cou¡
 = 0;

228 
tokí
 = 
	`°πok_r
(&
ªf
[1], "/", &
ßvïå
);

229 
tokí
) {

230 
cou¡
++;

231 
tokí
 = 
	`°πok_r
(
NULL
, "/", &
ßvïå
);

233 
	`‰ì
(
ªf
);

235 i‡(!
cou¡
)

236  
Ál£
;

238 
∑ths
 = 
	`ˇŒoc
(
cou¡
 + 1, (*) * count);

239 i‡(!
∑ths
) {

240 
	`ERROR
("No memory: calloc failed for %lu bytes",

241 (*Ë* 
cou¡
);

242  
Ál£
;

244 
cou¡
 = 
	`cou¡_°rög_¨øy
(
nodes
);

251 
cou¡
--;

253 
ªf
 = 
	`°rdup
(
√w∑th
);

254 i‡(!
ªf
) {

255 
	`ERROR
("No memory: failed for %lu bytes",

256 
	`°æí
(
√w∑th
) + 1);

257 
	`‰ì
(
∑ths
);

258  
Ál£
;

261 
tokí
 = 
	`°πok_r
(&
ªf
[1], "/", &
ßvïå
);

262 
tokí
) {

263 i‡(!
	`°rcmp
(
tokí
, "..")) {

264 i‡(!
cou¡
) {

265 
	`‰ì
(
ªf
);

266 
	`‰ì_°rög_¨øy
(
∑ths
);

267  
Ál£
;

269 
cou¡
--;

270 } i‡(
	`°rcmp
(
tokí
, ".")) {

271 i‡(
fú°
) {

272 
cou¡
 = 0;

274 
∑ths
[
Æloc°r
] = 
	`°rdup
(
tokí
);

275 
nodes
[
cou¡
++] = 
∑ths
[
Æloc°r
++];

276 
∑ths
[
Æloc°r
] = 
NULL
;

277 
nodes
[
cou¡
] = 
NULL
;

278 i‡(
cou¡
 >
MAX_PARSED_NODES
) {

279 
	`ERROR
("Big depth inÜink, giving up...");

280 
	`‰ì_°rög_¨øy
(
∑ths
);

281 
	`‰ì
(
ªf
);

282  
Ál£
;

285 
tokí
 = 
	`°πok_r
(
NULL
, "/", &
ßvïå
);

286 
fú°
 = 
Ál£
;

289 
	`‰ì
(
ªf
);

290 
tmp
 = 
∑ths
;

292  
åue
;

293 
	}
}

	@swupdate/corelib/parsing_library_libconfig.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<uni°d.h
>

12 
	~<f˙é.h
>

13 
	~<î∫o.h
>

14 
	~<sys/°©.h
>

15 
	~<as£π.h
>

16 
	~<°dboﬁ.h
>

17 
	~"gíî©ed/autoc⁄f.h
"

18 
	~"bsdqueue.h
"

19 
	~"utû.h
"

20 
	~"swupd©e.h
"

21 
	~"∑r£lib.h
"

23 
	$gë_vÆue_libc⁄fig
(c⁄° 
c⁄fig_£âög_t
 *
e
, *
de°
)

25 
ty≥
 = 
	`c⁄fig_£âög_ty≥
(
e
);

26 
ty≥
) {

27 
CONFIG_TYPE_INT
:

28 *(*)
de°
 = 
	`c⁄fig_£âög_gë_öt
(
e
);

30 
CONFIG_TYPE_INT64
:

31 *(*)
de°
 = 
	`c⁄fig_£âög_gë_öt64
(
e
);

33 
CONFIG_TYPE_STRING
:

34 
de°
 = (*)
	`c⁄fig_£âög_gë_°rög
(
e
);

36 
CONFIG_TYPE_BOOL
:

37 *(*)
de°
 = 
	`c⁄fig_£âög_gë_boﬁ
(
e
);

39 
CONFIG_TYPE_FLOAT
:

40 *(*)
de°
 = 
	`c⁄fig_£âög_gë_Êﬂt
(
e
);

44 
	}
}

46 *
	$gë_chûd_libc⁄fig
(*
e
, c⁄° *
«me
)

48  
	`c⁄fig_£âög_gë_membî
(
e
, 
«me
);

49 
	}
}

51 
	$ôî©e_fõld_libc⁄fig
(
c⁄fig_£âög_t
 *
e
, 
ôî©e_ˇŒback
 
cb
, *
d©a
)

53 
c⁄fig_£âög_t
 *
íåy
, *
ñem
;

54 c⁄° *
°r
;

55 
i
, 
j
;

57 i‡(!
cb
)

60 
i
 = 0; i < 
	`c⁄fig_£âög_Àngth
(
e
); i++) {

61 
íåy
 = 
	`c⁄fig_£âög_gë_ñem
(
e
, 
i
);

62 i‡(!
	`c⁄fig_£âög_Àngth
(
íåy
)) {

63 
°r
 = 
	`c⁄fig_£âög_gë_°rög
(
íåy
);

64 
	`cb
(
íåy
->
«me
, 
°r
, 
d©a
);

66 
j
 = 0; j < 
	`c⁄fig_£âög_Àngth
(
íåy
); j++) {

67 
ñem
 = 
	`c⁄fig_£âög_gë_ñem
(
íåy
, 
j
);

68 
°r
 = 
	`c⁄fig_£âög_gë_°rög
(
ñem
);

69 
	`cb
(
íåy
->
«me
, 
°r
, 
d©a
);

73 
	}
}

75 
	$gë_fõld_cfg
(
c⁄fig_£âög_t
 *
e
, c⁄° *
∑th
, *
de°
)

77 
c⁄fig_£âög_t
 *
ñem
;

79 i‡(
∑th
)

80 
ñem
 = 
	`c⁄fig_£âög_lookup
(
e
, 
∑th
);

82 
ñem
 = 
e
;

84 i‡(!
ñem
)

87 
	`gë_vÆue_libc⁄fig
(
ñem
, 
de°
);

88 
	}
}

90 c⁄° *
	$gë_fõld_°rög_libc⁄fig
(
c⁄fig_£âög_t
 *
e
, c⁄° *
∑th
)

92 
c⁄fig_£âög_t
 *
ñem
;

93 c⁄° *
°r
;

95 i‡(
∑th
)

96 
ñem
 = 
	`c⁄fig_£âög_lookup
(
e
, 
∑th
);

98 
ñem
 = 
e
;

100 i‡(!
ñem
 || 
	`c⁄fig_£âög_ty≥
”ÀmË!
CONFIG_TYPE_STRING
)

101  
NULL
;

103 i‡–––
∑th
Ë&& (
	`c⁄fig_£âög_lookup_°rög
(
e
,Ö©h, &
°r
)) ) ||

104 –(!
∑th
Ë&& ((
°r
 = 
	`c⁄fig_£âög_gë_°rög
(
e
)Ë!
NULL
) ) ) {

106  
°r
;

110  
NULL
;

111 
	}
}

113 *
	$gë_node_libc⁄fig
(
c⁄fig_t
 *
cfg
, c⁄° **
nodes
)

115 
c⁄fig_£âög_t
 *
£âög
;

116 *
roŸ
;

118 
roŸ
 = 
	`m°rˇt
(
nodes
, ".");

119 i‡(!
roŸ
)

120  
NULL
;

122 
£âög
 = 
	`c⁄fig_lookup
(
cfg
, 
roŸ
);

123 
	`‰ì
(
roŸ
);

125 i‡(
£âög
)

126  
£âög
;

128  
NULL
;

129 
	}
}

131 *
	$föd_roŸ_libc⁄fig
(
c⁄fig_t
 *
cfg
, c⁄° **
nodes
, 
dïth
)

133 
c⁄fig_£âög_t
 *
ñem
;

134 *
roŸ
;

135 c⁄° *
ªf
;

136 **
tmp
 = 
NULL
;

141 i‡(!(--
dïth
))

142  
NULL
;

144 
roŸ
 = 
	`m°rˇt
(
nodes
, ".");

145 i‡(!
roŸ
)

146  
NULL
;

153 
ñem
 = 
	`c⁄fig_lookup
(
cfg
, 
roŸ
);

155 i‡(
ñem
 && 
	`c⁄fig_£âög_is_group
”ÀmË=
CONFIG_TRUE
) {

156 
ªf
 = 
	`gë_fõld_°rög_libc⁄fig
(
ñem
, "ref");

157 i‡(
ªf
) {

158 i‡(!
	`£t_föd_∑th
(
nodes
, 
ªf
, 
tmp
)) {

159 
	`‰ì
(
roŸ
);

160  
NULL
;

162 
ñem
 = 
	`föd_roŸ_libc⁄fig
(
cfg
, 
nodes
, 
dïth
);

163 
	`‰ì_°rög_¨øy
(
tmp
);

167 
	`‰ì
(
roŸ
);

169  
ñem
;

171 
	}
}

	@swupdate/corelib/parsing_library_libjson.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<°dboﬁ.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

14 
	~<î∫o.h
>

15 
	~<sys/°©.h
>

16 
	~<as£π.h
>

17 
	~"gíî©ed/autoc⁄f.h
"

18 
	~"bsdqueue.h
"

19 
	~"utû.h
"

20 
	~"swupd©e.h
"

21 
	~"∑r£lib.h
"

23 
	#MAX_URL_LENGTH
 2048

	)

25 
js⁄_obje˘
 *
	$föd_js⁄_ªcursive_node
(
js⁄_obje˘
 *
roŸ
, c⁄° **
«mes
)

27 
js⁄_obje˘
 *
node
 = 
roŸ
;

29 *
«mes
) {

30 c⁄° *
n
 = *
«mes
;

31 
js⁄_obje˘
 *
˙ode
 = 
NULL
;

33 i‡(
	`js⁄_obje˘_obje˘_gë_ex
(
node
, 
n
, &
˙ode
))

34 
node
 = 
˙ode
;

36  
NULL
;

37 
«mes
++;

40  
node
;

41 
	}
}

43 *
	$gë_chûd_js⁄
(
js⁄_obje˘
 *
e
, c⁄° *
∑th
)

45 
js⁄_obje˘
 *
node
 = 
NULL
;

47 i‡(
∑th
) {

48 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
e
, 
∑th
, &
node
))

49  
NULL
;

52  
node
;

53 
	}
}

55 
	$ôî©e_fõld_js⁄
(
js⁄_obje˘
 *
e
, 
ôî©e_ˇŒback
 
cb
, *
d©a
)

57 
js⁄_obje˘
 *
subnode
;

58 c⁄° *
°r
;

59 
size_t
 
i
;

61 i‡(!
cb
 || 
	`js⁄_obje˘_gë_ty≥
(
e
Ë!
js⁄_ty≥_obje˘
)

64 
	`js⁄_obje˘_obje˘_f‹óch
(
e
, 
key
, 
node
) {

65 
	`js⁄_obje˘_gë_ty≥
(
node
)) {

66 
js⁄_ty≥_°rög
:

67 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
node
);

68 
	`cb
(
key
, 
°r
, 
d©a
);

70 
js⁄_ty≥_¨øy
:

71 
i
 = 0; i < 
	`js⁄_obje˘_¨øy_Àngth
(
node
); i++) {

72 
subnode
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
node
, 
i
);

73 i‡(
	`js⁄_obje˘_gë_ty≥
(
subnode
Ë!
js⁄_ty≥_°rög
)

76 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
subnode
);

77 
	`cb
(
key
, 
°r
, 
d©a
);

84 
	}
}

86 c⁄° *
	$gë_fõld_°rög_js⁄
(
js⁄_obje˘
 *
e
, c⁄° *
∑th
)

88 c⁄° *
°r
;

89 
js⁄_obje˘
 *
node
;

91 i‡(
∑th
) {

92 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
e
, 
∑th
, &
node
))

93  
NULL
;

95 
node
 = 
e
;

97 i‡(
	`js⁄_obje˘_gë_ty≥
(
node
Ë=
js⁄_ty≥_°rög
) {

98 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
node
);

100  
°r
;

103  
NULL
;

104 
	}
}

106 
	$gë_vÆue_js⁄
(
js⁄_obje˘
 *
e
, *
de°
)

108 
js⁄_ty≥
 
ty≥
;

109 
ty≥
 = 
	`js⁄_obje˘_gë_ty≥
(
e
);

110 
ty≥
) {

111 
js⁄_ty≥_boﬁón
:

112 *(*)
de°
 = 
	`js⁄_obje˘_gë_boﬁón
(
e
);

114 
js⁄_ty≥_öt
:

115 *(*)
de°
 = 
	`js⁄_obje˘_gë_öt
(
e
);

117 
js⁄_ty≥_°rög
:

118 
	`°r˝y
(
de°
, 
	`js⁄_obje˘_gë_°rög
(
e
));

120 
js⁄_ty≥_doubÀ
:

121 *(*)
de°
 = 
	`js⁄_obje˘_gë_doubÀ
(
e
);

126 
	}
}

128 
	$gë_fõld_js⁄
(
js⁄_obje˘
 *
e
, c⁄° *
∑th
, *
de°
)

130 
js⁄_obje˘
 *
Êd
 = 
NULL
;

132 i‡(
∑th
) {

133 i‡(
	`js⁄_obje˘_obje˘_gë_ex
(
e
, 
∑th
, &
Êd
))

134 
	`gë_vÆue_js⁄
(
Êd
, 
de°
);

136 
	`gë_vÆue_js⁄
(
e
, 
de°
);

138 
	}
}

140 
js⁄_obje˘
 *
	$js⁄_gë_key
(
js⁄_obje˘
 *
js⁄_roŸ
, c⁄° *
key
)

142 
js⁄_obje˘
 *
js⁄_chûd
;

143 i‡(
	`js⁄_obje˘_obje˘_gë_ex
(
js⁄_roŸ
, 
key
, &
js⁄_chûd
)) {

144  
js⁄_chûd
;

146  
NULL
;

147 
	}
}

149 c⁄° *
	$js⁄_gë_vÆue
(
js⁄_obje˘
 *
js⁄_roŸ
,

150 c⁄° *
key
)

152 
js⁄_obje˘
 *
js⁄_d©a
 = 
	`js⁄_gë_key
(
js⁄_roŸ
, 
key
);

154 i‡(
js⁄_d©a
 =
NULL
)

157  
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a
);

158 
	}
}

160 
js⁄_obje˘
 *
	$js⁄_gë_∑th_key
(
js⁄_obje˘
 *
js⁄_roŸ
, c⁄° **
js⁄_∑th
)

162 
js⁄_obje˘
 *
js⁄_d©a
 = 
js⁄_roŸ
;

163 *
js⁄_∑th
) {

164 c⁄° *
key
 = *
js⁄_∑th
;

165 
js⁄_d©a
 = 
	`js⁄_gë_key
(js⁄_d©a, 
key
);

166 i‡(
js⁄_d©a
 =
NULL
) {

167  
NULL
;

169 
js⁄_∑th
++;

171  
js⁄_d©a
;

172 
	}
}

174 *
	$js⁄_gë_d©a_uæ
(
js⁄_obje˘
 *
js⁄_roŸ
, c⁄° *
key
)

176 
js⁄_obje˘
 *
js⁄_d©a
 = 
	`js⁄_gë_∑th_key
(

177 
js⁄_roŸ
, (c⁄° *[]){"_löks", 
key
, "hªf", 
NULL
});

178  
js⁄_d©a
 =
NULL


179 ? 
NULL


180 : 
	`°∫dup
(
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a
), 
MAX_URL_LENGTH
);

181 
	}
}

183 *
	$föd_roŸ_js⁄
(
js⁄_obje˘
 *
roŸ
, c⁄° **
nodes
, 
dïth
)

185 
js⁄_obje˘
 *
node
;

186 
js⁄_ty≥
 
ty≥
;

187 **
tmp
 = 
NULL
;

188 c⁄° *
°r
;

193 i‡(!(--
dïth
))

194  
Ál£
;

196 
node
 = 
	`föd_js⁄_ªcursive_node
(
roŸ
, 
nodes
);

198 i‡(
node
) {

199 
ty≥
 = 
	`js⁄_obje˘_gë_ty≥
(
node
);

201 i‡(
ty≥
 =
js⁄_ty≥_obje˘
 ||Åy≥ =
js⁄_ty≥_¨øy
) {

202 
°r
 = 
	`gë_fõld_°rög_js⁄
(
node
, "ref");

203 i‡(
°r
) {

204 i‡(!
	`£t_föd_∑th
(
nodes
, 
°r
, 
tmp
))

205  
NULL
;

206 
node
 = 
	`föd_roŸ_js⁄
(
roŸ
, 
nodes
, 
dïth
);

207 
	`‰ì_°rög_¨øy
(
tmp
);

211  
node
;

212 
	}
}

214 *
	$gë_node_js⁄
(
js⁄_obje˘
 *
roŸ
, c⁄° **
nodes
)

216  
	`föd_js⁄_ªcursive_node
(
roŸ
, 
nodes
);

217 
	}
}

	@swupdate/corelib/progress_thread.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°dboﬁ.h
>

11 
	~<uni°d.h
>

12 
	~<°rög.h
>

13 
	~<î∫o.h
>

14 
	~<sys/io˘l.h
>

15 
	~<f˙é.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/sockë.h
>

18 
	~<sys/°©.h
>

19 
	~<sys/un.h
>

20 
	~<sys/£À˘.h
>

21 
	~<¨∑/öë.h
>

22 
	~<√töë/ö.h
>

23 
	~<±hªad.h
>

25 
	~"swupd©e.h
"

26 
	~<h™dÀr.h
>

27 
	~"utû.h
"

28 
	~"√tw‹k_ùc.h
"

29 
	~"√tw‹k_öãrÁ˚.h
"

30 
	~<¥ogªss.h
>

31 
	~"gíî©ed/autoc⁄f.h
"

33 #ifde‡
CONFIG_SYSTEMD


34 
	~<sy°emd/sd-d´m⁄.h
>

37 
	s¥ogªss_c⁄n
 {

38 
SIMPLEQ_ENTRY
(
¥ogªss_c⁄n
Ë
	m√xt
;

39 
	msockfd
;

42 
SIMPLEQ_HEAD
(
c⁄√˘i⁄s
, 
¥ogªss_c⁄n
);

48 
	sswupd©e_¥ogªss
 {

49 
¥ogªss_msg
 
	mmsg
;

50 *
	mcuºít_image
;

51 c⁄° 
h™dÀr
 *
	mcurhnd
;

52 
c⁄√˘i⁄s
 
	mc⁄ns
;

53 
±hªad_muãx_t
 
	mlock
;

54 
boﬁ
 
	m°ï_ru¬ög
;

56 
swupd©e_¥ogªss
 
	g¥ogªss
;

62 
	$£nd_¥ogªss_msg
()

64 
¥ogªss_c⁄n
 *
c⁄n
, *
tmp
;

65 
swupd©e_¥ogªss
 *
¥b¨
 = &
¥ogªss
;

66 *
buf
;

67 
size_t
 
cou¡
;

68 
ssize_t
 
n
;

70 
	`SIMPLEQ_FOREACH_SAFE
(
c⁄n
, &
¥b¨
->
c⁄ns
, 
√xt
, 
tmp
) {

71 
buf
 = &
¥b¨
->
msg
;

72 
cou¡
 = (
¥b¨
->
msg
);

73 
cou¡
 > 0) {

74 
n
 = 
	`£nd
(
c⁄n
->
sockfd
, 
buf
, 
cou¡
, 
MSG_NOSIGNAL
);

75 i‡(
n
 <= 0) {

76 
	`TRACE
("AÖrogress client disappeared,Ñemoving it.");

77 
	`˛o£
(
c⁄n
->
sockfd
);

78 
	`SIMPLEQ_REMOVE
(&
¥b¨
->
c⁄ns
, 
c⁄n
,

79 
¥ogªss_c⁄n
, 
√xt
);

80 
	`‰ì
(
c⁄n
);

83 
cou¡
 -(
size_t
)
n
;

84 
buf
 = (*)bu‡+ 
n
;

87 
	}
}

89 
	$swupd©e_¥ogªss_öô
(
n°ïs
) {

90 
swupd©e_¥ogªss
 *
¥b¨
 = &
¥ogªss
;

91 
	`±hªad_muãx_lock
(&
¥b¨
->
lock
);

93 
¥b¨
->
msg
.
n°ïs
 =Çsteps;

94 
¥b¨
->
msg
.
cur_°ï
 = 0;

95 
¥b¨
->
msg
.
°©us
 = 
START
;

96 
¥b¨
->
msg
.
cur_≥r˚¡
 = 0;

97 
¥b¨
->
msg
.
öfﬁí
 = 
	`gë_ö°Æl_öfo
(&¥b¨->msg.
sour˚
,Örb¨->msg.
öfo
,

98 (
¥b¨
->
msg
.
öfo
));

99 
	`£nd_¥ogªss_msg
();

101 
¥b¨
->
msg
.
öfﬁí
 = 0;

102 
	`±hªad_muãx_u∆ock
(&
¥b¨
->
lock
);

103 
	}
}

105 
	$swupd©e_¥ogªss_upd©e
(
≥rc
)

107 
swupd©e_¥ogªss
 *
¥b¨
 = &
¥ogªss
;

108 
	`±hªad_muãx_lock
(&
¥b¨
->
lock
);

109 i‡(
≥rc
 !
¥b¨
->
msg
.
cur_≥r˚¡
 &&Örb¨->
°ï_ru¬ög
) {

110 
¥b¨
->
msg
.
cur_≥r˚¡
 = 
≥rc
;

111 
	`£nd_¥ogªss_msg
();

113 
	`±hªad_muãx_u∆ock
(&
¥b¨
->
lock
);

114 
	}
}

116 
	$swupd©e_¥ogªss_öc_°ï
(*
image
)

118 
swupd©e_¥ogªss
 *
¥b¨
 = &
¥ogªss
;

119 
	`±hªad_muãx_lock
(&
¥b¨
->
lock
);

120 
¥b¨
->
msg
.
cur_°ï
++;

121 
¥b¨
->
msg
.
cur_≥r˚¡
 = 0;

122 
	`°∫˝y
(
¥b¨
->
msg
.
cur_image
, 
image
, (prbar->msg.cur_image));

123 
¥b¨
->
°ï_ru¬ög
 = 
åue
;

124 
¥b¨
->
msg
.
°©us
 = 
RUN
;

125 
	`£nd_¥ogªss_msg
();

126 
	`±hªad_muãx_u∆ock
(&
¥b¨
->
lock
);

127 
	}
}

129 
	$swupd©e_¥ogªss_°ï_com∂ëed
()

131 
swupd©e_¥ogªss
 *
¥b¨
 = &
¥ogªss
;

132 
	`±hªad_muãx_lock
(&
¥b¨
->
lock
);

133 
¥b¨
->
°ï_ru¬ög
 = 
Ál£
;

134 
¥b¨
->
msg
.
°©us
 = 
IDLE
;

135 
	`±hªad_muãx_u∆ock
(&
¥b¨
->
lock
);

136 
	}
}

138 
	$swupd©e_¥ogªss_íd
(
RECOVERY_STATUS
 
°©us
)

140 
swupd©e_¥ogªss
 *
¥b¨
 = &
¥ogªss
;

141 
	`±hªad_muãx_lock
(&
¥b¨
->
lock
);

142 
¥b¨
->
°ï_ru¬ög
 = 
Ál£
;

143 
¥b¨
->
msg
.
°©us
 = status;

144 
	`£nd_¥ogªss_msg
();

145 
	`±hªad_muãx_u∆ock
(&
¥b¨
->
lock
);

146 
	}
}

148 
	$swupd©e_¥ogªss_öfo
(
RECOVERY_STATUS
 
°©us
, 
ˇu£
, c⁄° *
öfo
)

150 
swupd©e_¥ogªss
 *
¥b¨
 = &
¥ogªss
;

151 
	`±hªad_muãx_lock
(&
¥b¨
->
lock
);

152 
	`¢¥ötf
(
¥b¨
->
msg
.
öfo
, (prbar->msg.info), "{\"%d\": %s}",

153 
ˇu£
, 
öfo
);

154 
¥b¨
->
msg
.
öfﬁí
 = 
	`°æí
’rb¨->msg.
öfo
);

155 
¥b¨
->
msg
.
°©us
 = status;

156 
	`£nd_¥ogªss_msg
();

158 
¥b¨
->
msg
.
öfﬁí
 = 0;

159 
	`±hªad_muãx_u∆ock
(&
¥b¨
->
lock
);

160 
	}
}

162 
	$swupd©e_¥ogªss_d⁄e
(c⁄° *
öfo
)

164 
swupd©e_¥ogªss
 *
¥b¨
 = &
¥ogªss
;

165 
	`±hªad_muãx_lock
(&
¥b¨
->
lock
);

166 i‡(
öfo
 !
NULL
) {

167 
	`¢¥ötf
(
¥b¨
->
msg
.
öfo
, (prbar->msg.info), "%s", info);

168 
¥b¨
->
msg
.
öfﬁí
 = 
	`°æí
’rb¨->msg.
öfo
);

170 
¥b¨
->
°ï_ru¬ög
 = 
Ál£
;

171 
¥b¨
->
msg
.
°©us
 = 
DONE
;

172 
	`£nd_¥ogªss_msg
();

173 
¥b¨
->
msg
.
öfﬁí
 = 0;

174 
	`±hªad_muãx_u∆ock
(&
¥b¨
->
lock
);

175 
	}
}

177 
	$u∆ök_sockë
()

179 #ifde‡
CONFIG_SYSTEMD


180 i‡(
	`sd_boŸed
(Ë&& 
	`sd_li°í_fds
(0) > 0) {

188 
	`u∆ök
((*)
CONFIG_SOCKET_PROGRESS_PATH
);

189 
	}
}

191 *
¥ogªss_b¨_thªad
 (
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

193 
	gli°í
, 
	gc⁄nfd
;

194 
sockÀn_t
 
	g˛ûí
;

195 
sockaddr_un
 
	g˛üddr
;

196 
swupd©e_¥ogªss
 *
	g¥b¨
 = &
¥ogªss
;

197 
¥ogªss_c⁄n
 *
	gc⁄n
;

199 
±hªad_muãx_öô
(&
¥b¨
->
lock
, 
NULL
);

200 
SIMPLEQ_INIT
(&
¥b¨
->
c⁄ns
);

203 
	gli°í
 = 
li°íî_¸óã
((*)
CONFIG_SOCKET_PROGRESS_PATH
, 
SOCK_STREAM
);

204 i‡(
	gli°í
 < 0 ) {

205 
ERROR
("Eº‹ cª©ög IPC sockë %s,Éxôög.", (*)
CONFIG_SOCKET_PROGRESS_PATH
);

206 
exô
(2);

209 i‡(
©exô
(
u∆ök_sockë
) != 0) {

210 
TRACE
("Cannot setup socket cleanup onÉxit, %s won't be unlinked.",

211 (*)
CONFIG_SOCKET_PROGRESS_PATH
);

215 
	g˛ûí
 = (
˛üddr
);

216 i‡–(
	gc⁄nfd
 = 
ac˚±
(
li°í
, (
sockaddr
 *Ë&
˛üddr
, &
˛ûí
)) < 0) {

217 i‡(
	gî∫o
 =
EINTR
)

220 
TRACE
("Ac˚±Ñëu∫s: %s", 
°ªº‹
(
î∫o
));

228 
	gc⁄n
 = (
¥ogªss_c⁄n
 *)
ˇŒoc
(1, (*
c⁄n
));

229 i‡(!
	gc⁄n
) {

230 
ERROR
("Out of memory, skipping...");

233 
	gc⁄n
->
	gsockfd
 = 
c⁄nfd
;

234 
±hªad_muãx_lock
(&
¥b¨
->
lock
);

235 
SIMPLEQ_INSERT_TAIL
(&
¥b¨
->
c⁄ns
, 
c⁄n
, 
√xt
);

236 
±hªad_muãx_u∆ock
(&
¥b¨
->
lock
);

	@swupdate/corelib/stream_interface.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°dboﬁ.h
>

12 
	~<uni°d.h
>

13 
	~<°rög.h
>

14 
	~<gë›t.h
>

15 
	~<î∫o.h
>

16 
	~<sys/io˘l.h
>

17 
	~<f˙é.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/°©.h
>

20 
	~<sys/sockë.h
>

21 
	~<˘y≥.h
>

22 
	~<f˙é.h
>

23 
	~<dúít.h
>

24 
	~<sys/£À˘.h
>

25 
	~<sys/mm™.h
>

26 
	~<sys/ªboŸ.h
>

27 
	~<sys/°©.h
>

28 
	~<±hªad.h
>

29 
	~"˝iohdr.h
"

31 
	~"bsdqueue.h
"

32 
	~"swupd©e.h
"

33 
	~"utû.h
"

34 
	~"h™dÀr.h
"

35 #ifde‡
CONFIG_MTD


36 
	~"Êash.h
"

38 
	~"∑r£rs.h
"

39 
	~"√tw‹k_ùc.h
"

40 
	~"√tw‹k_öãrÁ˚.h
"

41 
	~"m⁄goo£_öãrÁ˚.h
"

42 
	~"ö°ÆÀr.h
"

43 
	~"¥ogªss.h
"

44 
	~"p˘l.h
"

45 
	~"boŸlﬂdî.h
"

47 
	#BUFF_SIZE
 4096

	)

48 
	#PERCENT_LB_INDEX
 4

	)

51 
	mSTREAM_WAIT_DESCRIPTION
,

52 
	mSTREAM_WAIT_SIGNATURE
,

53 
	mSTREAM_DATA
,

54 
	mSTREAM_END


57 
±hªad_t
 
	g√tw‹k_thªad_id
;

69 
±hªad_muãx_t
 
	g°ªam_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

70 
±hªad_c⁄d_t
 
	g°ªam_wkup
 = 
PTHREAD_COND_INITIALIZER
;

72 
ö°ÆÀr
 
	gö°
;

74 
	$exåa˘_fûe_to_tmp
(
fd
, c⁄° *
‚ame
, *
poffs
)

76 
ouçut_fûe
[
MAX_IMAGE_FNAME
];

77 
fûehdr
 
fdh
;

78 
fdout
;

79 
uöt32_t
 
checksum
;

80 c⁄° * 
TMPDIR
 = 
	`gë_tmpdú
();

82 i‡(
	`exåa˘_˝io_hódî
(
fd
, &
fdh
, 
poffs
)) {

85 i‡(
	`°rcmp
(
fdh
.
fûíame
, 
‚ame
)) {

86 
	`TRACE
("description fileÇameÇotÅhe first ofÅheÜist: %s instead of %s",

87 
fdh
.
fûíame
,

88 
‚ame
);

91 i‡(
	`¢¥ötf
(
ouçut_fûe
, (ouçut_fûe), "%s%s", 
TMPDIR
,

92 
fdh
.
fûíame
Ë>()(
ouçut_fûe
)) {

93 
	`ERROR
("P©hÅoÿl⁄g: %s%s", 
TMPDIR
, 
fdh
.
fûíame
);

96 
	`TRACE
("Found fûe:\n\tfûíamê%s\n\tsizê%u", 
fdh
.
fûíame
, ()fdh.
size
);

98 
fdout
 = 
	`›ífûeouçut
(
ouçut_fûe
);

99 i‡(
fdout
 < 0)

102 i‡(
	`c›yfûe
(
fd
, &
fdout
, 
fdh
.
size
, 
poffs
, 0, 0, 0, &
checksum
, 
NULL
, 0, NULL) < 0) {

103 
	`˛o£
(
fdout
);

106 i‡(
checksum
 !(
uöt32_t
)
fdh
.
chksum
) {

107 
	`˛o£
(
fdout
);

108 
	`ERROR
("Checksum WRONG ! Computed 0x%ux, it should be 0x%ux",

109 ()
checksum
, ()
fdh
.
chksum
);

112 
	`˛o£
(
fdout
);

115 
	}
}

117 
	$exåa˘_fûes
(
fd
, 
swupd©e_cfg
 *
so·w¨e
)

119 
°©us
 = 
STREAM_WAIT_DESCRIPTION
;

120 
off£t
;

121 
fûehdr
 
fdh
;

122 
skù
;

123 
uöt32_t
 
checksum
;

124 
fdout
;

125 
img_ty≥
 *
img
, *
∑π
;

126 
ouçut_fûe
[
MAX_IMAGE_FNAME
];

127 c⁄° * 
TMPDIR
 = 
	`gë_tmpdú
();

128 
boﬁ
 
ö°ÆÀd_dúe˘ly
 = 
Ál£
;

132 
off£t
 = 0;

134 #ifde‡
CONFIG_UBIVOL


135 
	`mtd_öô
();

136 
	`ubi_öô
();

140 
°©us
) {

142 
STREAM_WAIT_DESCRIPTION
:

143 i‡(
	`exåa˘_fûe_to_tmp
(
fd
, 
SW_DESCRIPTION_FILENAME
, &
off£t
) < 0 )

146 
°©us
 = 
STREAM_WAIT_SIGNATURE
;

149 
STREAM_WAIT_SIGNATURE
:

150 #ifde‡
CONFIG_SIGNED_IMAGES


151 
	`¢¥ötf
(
ouçut_fûe
, (ouçut_fûe), "%s.sig", 
SW_DESCRIPTION_FILENAME
);

152 i‡(
	`exåa˘_fûe_to_tmp
(
fd
, 
ouçut_fûe
, &
off£t
) < 0 )

155 
	`¢¥ötf
(
ouçut_fûe
, (ouçut_fûe), "%s%s", 
TMPDIR
, 
SW_DESCRIPTION_FILENAME
);

156 i‡(
	`∑r£
(
so·w¨e
, 
ouçut_fûe
)) {

157 
	`ERROR
("Compatible SWÇot found");

161 i‡(
	`check_hw_com∑tibûôy
(
so·w¨e
)) {

162 
	`ERROR
("SWÇot compatible with hardware");

165 
°©us
 = 
STREAM_DATA
;

168 
STREAM_DATA
:

169 i‡(
	`exåa˘_˝io_hódî
(
fd
, &
fdh
, &
off£t
)) {

170 
	`ERROR
("CPIO HEADER");

173 i‡(
	`°rcmp
("TRAILER!!!", 
fdh
.
fûíame
) == 0) {

174 
°©us
 = 
STREAM_END
;

178 
imgli°
 *
li°
[] = {&
so·w¨e
->
images
,

179 &
so·w¨e
->
s¸ùts
,

180 &
so·w¨e
->
boŸs¸ùts
};

182 
i
 = 0; i < 
	`ARRAY_SIZE
(
li°
); i++) {

183 
skù
 = 
	`check_if_ªquúed
(
li°
[
i
], &
fdh
,

184 
	`gë_tmpdú
(),

185 &
img
);

187 i‡(
skù
 !
SKIP_FILE
)

191 
	`TRACE
("Found file:\n\tfilename %s\n\tsize %u %s",

192 
fdh
.
fûíame
,

193 ()
fdh
.
size
,

194 (
skù
 =
SKIP_FILE
 ? "NotÑequired: skipping" : "required"));

196 
fdout
 = -1;

197 
off£t
 = 0;

203 
skù
) {

204 
COPY_FILE
:

205 
fdout
 = 
	`›ífûeouçut
(
img
->
exåa˘_fûe
);

206 i‡(
fdout
 < 0)

208 i‡(
	`c›yfûe
(
fd
, &
fdout
, 
fdh
.
size
, &
off£t
, 0, 0, 0, &
checksum
, 
img
->
sha256
, 0, 
NULL
) < 0) {

209 
	`˛o£
(
fdout
);

212 i‡(
checksum
 !()
fdh
.
chksum
) {

213 
	`ERROR
("Checksum WRONG ! Computed 0x%ux, it should be 0x%ux",

214 ()
checksum
, ()
fdh
.
chksum
);

215 
	`˛o£
(
fdout
);

218 
	`˛o£
(
fdout
);

221 
SKIP_FILE
:

222 i‡(
	`c›yfûe
(
fd
, &
fdout
, 
fdh
.
size
, &
off£t
, 0, 
skù
, 0, &
checksum
, 
NULL
, 0, NULL) < 0) {

225 i‡(
checksum
 !()
fdh
.
chksum
) {

226 
	`ERROR
("Checksum WRONG ! Computed 0x%ux, it should be 0x%ux",

227 ()
checksum
, ()
fdh
.
chksum
);

231 
INSTALL_FROM_STREAM
:

232 
	`TRACE
("In°Ælög STREAM %s, %Œd byãs", 
img
->
‚ame
, img->
size
);

239 i‡(!
ö°ÆÀd_dúe˘ly
) {

240 
	`boŸlﬂdî_ív_£t
(
BOOTVAR_TRANSACTION
, "in_progress");

241 
ö°ÆÀd_dúe˘ly
 = 
åue
;

248 
	`LIST_FOREACH
(
∑π
, &
so·w¨e
->
images
, 
√xt
) {

249 i‡–(!
∑π
->
ö°Æl_dúe˘ly
)

250 && (!
	`°rcmp
(
∑π
->
ty≥
, "ubipartition")) ) {

251 
	`TRACE
("NeedÅoádjustÖartition %s before streaming %s",

252 
∑π
->
vﬁ«me
, 
img
->
‚ame
);

253 i‡(
	`ö°Æl_sögÀ_image
(
∑π
, 
so·w¨e
->
globÆs
.
dry_run
)) {

254 
	`ERROR
("Eº‹ádju°ögÖ¨tôi⁄ %s", 
∑π
->
vﬁ«me
);

258 
∑π
->
ö°Æl_dúe˘ly
 = 1;

261 
img
->
fdö
 = 
fd
;

262 i‡(
	`ö°Æl_sögÀ_image
(
img
, 
so·w¨e
->
globÆs
.
dry_run
)) {

263 
	`ERROR
("Eº‹ såómög %s", 
img
->
‚ame
);

266 
	`TRACE
("END INSTALLING STREAMING");

272 
STREAM_END
:

279 
	`LIST_FOREACH
(
img
, &
so·w¨e
->
images
, 
√xt
) {

280 i‡(! 
img
->
ªquúed
)

282 i‡(! 
img
->
‚ame
[0])

284 i‡(! 
img
->
¥ovided
) {

285 
	`ERROR
("Required image file %s missing...aborting !",

286 
img
->
‚ame
);

295 
	}
}

297 
	$ßve_°ªam
(
fdö
, c⁄° *
ouçut
)

299 *
buf
;

300 
fdout
, 
ªt
, 
Àn
;

301 c⁄° 
bufsize
 = 16 * 1024;

303 
fdout
 = 
	`›ífûeouçut
(
ouçut
);

304 i‡(
fdout
 < 0)

307 
buf
 = (*)
	`mÆloc
(
bufsize
);

308 i‡(!
buf
)

309  -
ENOMEM
;

312 
Àn
 = 
	`ªad
(
fdö
, 
buf
, 
bufsize
);

313 i‡(
Àn
 == 0)

315 
ªt
 = 
	`c›y_wrôe
(&
fdout
, 
buf
, 
Àn
);

316 i‡(
ªt
 < 0)

317  -
EIO
;

321 
	}
}

323 *
	$√tw‹k_öôülizî
(*
d©a
)

325 
ªt
;

326 
swupd©e_cfg
 *
so·w¨e
 = 
d©a
;

329 
	`mem£t
(&
ö°
, 0, (inst));

330 
ö°
.
fd
 = -1;

331 
ö°
.
°©us
 = 
IDLE
;

334 
√tw‹k_thªad_id
 = 
	`°¨t_thªad
(
√tw‹k_thªad
, &
ö°
);

339 
	`TRACE
("MainÜoop Daemon");

342 
	`±hªad_muãx_lock
(&
°ªam_muãx
);

343 
	`±hªad_c⁄d_waô
(&
°ªam_wkup
, &
°ªam_muãx
);

344 
ö°
.
°©us
 = 
RUN
;

345 
	`±hªad_muãx_u∆ock
(&
°ªam_muãx
);

346 
	`nŸify
(
START
, 
RECOVERY_NO_ERROR
, 
INFOLEVEL
, "Software Update started !");

351 i‡(
ö°
.
dry_run
)

352 
so·w¨e
->
globÆs
.
dry_run
 = 1;

357 i‡(
	`°æí
(
so·w¨e
->
ouçut
)) {

358 
ªt
 = 
	`ßve_°ªam
(
ö°
.
fd
, 
so·w¨e
->
ouçut
);

359 i‡(
ªt
 < 0) {

360 
	`nŸify
(
FAILURE
, 
RECOVERY_ERROR
, 
ERRORLEVEL
,

369 
	`˛o£
(
ö°
.
fd
);

370 
ö°
.
fd
 = 
	`›í
(
so·w¨e
->
ouçut
, 
O_RDONLY
, 
S_IRUSR
);

374 #ifde‡
CONFIG_MTD


375 
	`mtd_˛ónup
();

376 
	`sˇn_mtd_devi˚s
();

382 
ªt
 = 
	`exåa˘_fûes
(
ö°
.
fd
, 
so·w¨e
);

383 
	`˛o£
(
ö°
.
fd
);

386 i‡(
ªt
 == 0) {

387 
	`TRACE
("Valid image found: copyingÅo FLASH");

394 
	`boŸlﬂdî_ív_£t
(
BOOTVAR_TRANSACTION
, "in_progress");

396 
	`nŸify
(
RUN
, 
RECOVERY_NO_ERROR
, 
INFOLEVEL
, "Installation inÖrogress");

397 
ªt
 = 
	`ö°Æl_images
(
so·w¨e
, 0, 0);

398 i‡(
ªt
 != 0) {

399 
	`boŸlﬂdî_ív_£t
(
BOOTVAR_TRANSACTION
, "failed");

400 
	`nŸify
(
FAILURE
, 
RECOVERY_ERROR
, 
ERRORLEVEL
, "Installation failed !");

401 
ö°
.
œ°_ö°Æl
 = 
FAILURE
;

408 
	`boŸlﬂdî_ív_un£t
(
BOOTVAR_TRANSACTION
);

409 
	`nŸify
(
SUCCESS
, 
RECOVERY_NO_ERROR
, 
INFOLEVEL
, "SWUPDATE successful !");

410 
ö°
.
œ°_ö°Æl
 = 
SUCCESS
;

413 
ö°
.
œ°_ö°Æl
 = 
FAILURE
;

414 
	`nŸify
(
FAILURE
, 
RECOVERY_ERROR
, 
ERRORLEVEL
, "Image invalid or corrupted. Not installing ...");

417 
	`swupd©e_¥ogªss_íd
(
ö°
.
œ°_ö°Æl
);

419 
	`±hªad_muãx_lock
(&
°ªam_muãx
);

420 
ö°
.
°©us
 = 
IDLE
;

421 
	`±hªad_muãx_u∆ock
(&
°ªam_muãx
);

422 
	`TRACE
("MainÅhread sleepágain !");

423 
	`nŸify
(
IDLE
, 
RECOVERY_NO_ERROR
, 
INFOLEVEL
, "Waiting forÑequests...");

426 
	`˛ónup_fûes
(
so·w¨e
);

429 
	`±hªad_exô
((*)0);

430 
	}
}

437 
	$gë_ö°Æl_öfo
(
sour˚ty≥
 *
sour˚
, *
buf
, 
size_t
 
Àn
)

439 
Àn
 = 
	`mö
÷í, 
ö°
.len);

441 
	`mem˝y
(
buf
, 
ö°
.
öfo
, 
Àn
);

442 *
sour˚
 = 
ö°
.source;

444  
Àn
;

445 
	}
}

	@swupdate/corelib/swupdate_cms_verify.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<°dboﬁ.h
>

14 
	~"swupd©e.h
"

15 
	~"s¶≠i.h
"

16 
	~"utû.h
"

17 
	~"swupd©e_vîify_¥iv©e.h
"

19 
	$check_code_sign
(c⁄° 
X509_PURPOSE
 *
xp
, c⁄° 
X509
 *
¸t
, 
ˇ
)

21 
X509
 *
x
 = (X509 *)
¸t
;

22 
uöt32_t
 
ex_Êags
 = 
	`SSL_X509_gë_exãnsi⁄_Êags
(
x
);

23 
uöt32_t
 
ex_xkußge
 = 
	`SSL_X509_gë_exãnded_key_ußge
(
x
);

25 ()
xp
;

27 i‡(
ˇ
) {

28 
idx
;

29 c⁄° 
X509_PURPOSE
 *
±
;

31 i‡((
ex_Êags
 & 
EXFLAG_XKUSAGE
Ë&& !(
ex_xkußge
 & 
XKU_CODE_SIGN
))

34 
idx
 = 
	`X509_PURPOSE_gë_by_id
(
X509_PURPOSE_OCSP_HELPER
);

35 i‡(
idx
 == -1)

38 
±
 = 
	`X509_PURPOSE_gë0
(
idx
);

39  
±
->
	`check_puΩo£
’t, 
x
, 
ˇ
);

42  (
ex_Êags
 & 
EXFLAG_XKUSAGE
Ë&& (
ex_xkußge
 & 
XKU_CODE_SIGN
);

43 
	}
}

45 
	$cms_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
˘x
) {

46 
˚π_îr‹
 = 
	`X509_STORE_CTX_gë_îr‹
(
˘x
);

48 i‡(!
ok
) {

49 
˚π_îr‹
) {

50 #i‡
	`deföed
(
CONFIG_CMS_IGNORE_EXPIRED_CERTIFICATE
)

51 
X509_V_ERR_CERT_HAS_EXPIRED
:

52 
X509_V_ERR_CERT_NOT_YET_VALID
:

53 
ok
 = 1;

56 #i‡
	`deföed
(
CONFIG_CMS_IGNORE_CERTIFICATE_PURPOSE
)

57 
X509_V_ERR_INVALID_PURPOSE
:

58 
ok
 = 1;

66  
ok
;

67 
	}
}

69 
X509_STORE
 *
	$lﬂd_˚π_chaö
(c⁄° *
fûe
)

71 
X509_STORE
 *
ˇ°‹e
 = 
	`X509_STORE_√w
();

72 i‡(!
ˇ°‹e
) {

73  
NULL
;

80 
	`X509_STORE_£t_vîify_cb
(
ˇ°‹e
, 
cms_vîify_ˇŒback
);

82 
BIO
 *
ˇ°‹e_bio
 = 
	`BIO_√w_fûe
(
fûe
, "r");

83 i‡(!
ˇ°‹e_bio
) {

84 
	`TRACE
("Áûed: BIO_√w_fûe(%s)", 
fûe
);

85  
NULL
;

88 
¸t_cou¡
 = 0;

89 
X509
 *
¸t
 = 
NULL
;

91 
¸t
 = 
	`PEM_ªad_bio_X509
(
ˇ°‹e_bio
, 
NULL
, 0, NULL);

92 i‡(
¸t
) {

93 
¸t_cou¡
++;

94 *
subj
 = 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
¸t
), 
NULL
, 0);

95 *
issuî
 = 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
¸t
), 
NULL
, 0);

96 
	`TRACE
("Ród PEM #%d: %†%s", 
¸t_cou¡
, 
issuî
, 
subj
);

97 
	`‰ì
(
subj
);

98 
	`‰ì
(
issuî
);

99 i‡(
	`X509_STORE_add_˚π
(
ˇ°‹e
, 
¸t
) == 0) {

100 
	`TRACE
("Adding certificateÅo X509_STORE failed");

101 
	`BIO_‰ì
(
ˇ°‹e_bio
);

102 
	`X509_STORE_‰ì
(
ˇ°‹e
);

103  
NULL
;

106 } 
¸t
);

107 
	`BIO_‰ì
(
ˇ°‹e_bio
);

109 i‡(
¸t_cou¡
 == 0) {

110 
	`X509_STORE_‰ì
(
ˇ°‹e
);

111  
NULL
;

114  
ˇ°‹e
;

115 
	}
}

117 
ölöe
 
	$√xt_comm⁄_«me
(
X509_NAME
 *
subje˘
, 
i
)

119  
	`X509_NAME_gë_ödex_by_NID
(
subje˘
, 
NID_comm⁄Name
, 
i
);

120 
	}
}

122 
	$check_comm⁄_«me
(
X509_NAME
 *
subje˘
, c⁄° *
«me
)

124 
i
 = -1, 
ªt
 = 1;

126 (
i
 = 
	`√xt_comm⁄_«me
(
subje˘
, i)) > -1) {

127 
X509_NAME_ENTRY
 *
e
 = 
	`X509_NAME_gë_íåy
(
subje˘
, 
i
);

128 
ASN1_STRING
 *
d
 = 
	`X509_NAME_ENTRY_gë_d©a
(
e
);

129 *
˙
;

130 
size_t
 
Àn
 = 
	`°æí
(
«me
);

131 
boﬁ
 
m©ches
 = (
	`ASN1_STRING_to_UTF8
(&
˙
, 
d
Ë=()
Àn
)

132 && (
	`°∫cmp
(
«me
, (c⁄° *)
˙
, 
Àn
) == 0);

134 
	`OPENSSL_‰ì
(
˙
);

135 i‡(!
m©ches
) {

136 *
subj
 = 
	`X509_NAME_⁄ñöe
(
subje˘
, 
NULL
, 0);

138 
	`ERROR
("commonÇame of '%s' doesÇot matchÉxpected '%s'",

139 
subj
, 
«me
);

140 
	`OPENSSL_‰ì
(
subj
);

143 
ªt
 = 0;

147 i‡(
ªt
 == 0) {

148 *
subj
 = 
	`X509_NAME_⁄ñöe
(
subje˘
, 
NULL
, 0);

150 
	`TRACE
("vîifõd sig√∏˚π: %s", 
subj
);

151 
	`OPENSSL_‰ì
(
subj
);

154  
ªt
;

155 
	}
}

157 
	$check_sig√r_«me
(
CMS_C⁄ã¡Info
 *
cms
, c⁄° *
«me
)

159 
	`STACK_OF
(
CMS_Sig√rInfo
Ë*
öfos
 = 
	`CMS_gë0_Sig√rInfos
(
cms
);

160 
	`STACK_OF
(
X509
Ë*
¸ts
;

161 
i
, 
ªt
 = 1;

163 i‡((
«me
 =
NULL
) || (name[0] == '\0'))

166 
¸ts
 = 
	`CMS_gë1_˚πs
(
cms
);

167 
i
 = 0; i < 
	`sk_CMS_Sig√rInfo_num
(
öfos
); ++i) {

168 
CMS_Sig√rInfo
 *
si
 = 
	`sk_CMS_Sig√rInfo_vÆue
(
öfos
, 
i
);

169 
j
;

171 
j
 = 0; j < 
	`sk_X509_num
(
¸ts
); ++j) {

172 
X509
 *
¸t
 = 
	`sk_X509_vÆue
(
¸ts
, 
j
);

174 i‡(
	`CMS_Sig√rInfo_˚π_cmp
(
si
, 
¸t
) == 0) {

175 
ªt
 = 
	`check_comm⁄_«me
(

176 
	`X509_gë_subje˘_«me
(
¸t
), 
«me
);

180 
	`sk_X509_p›_‰ì
(
¸ts
, 
X509_‰ì
);

182  
ªt
;

183 
	}
}

185 
	$swupd©e_vîify_fûe
(
swupd©e_dige°
 *
dg°
, c⁄° *
sigfûe
,

186 c⁄° *
fûe
, c⁄° *
sig√r_«me
)

188 
°©us
 = -
EFAULT
;

189 
CMS_C⁄ã¡Info
 *
cms
 = 
NULL
;

190 
BIO
 *
c⁄ã¡_bio
 = 
NULL
;

193 
BIO
 *
sigfûe_bio
 = 
	`BIO_√w_fûe
(
sigfûe
, "rb");

194 i‡(!
sigfûe_bio
) {

195 
	`ERROR
("%†ˇ¬Ÿ bê›íed", 
sigfûe
);

196 
°©us
 = -
EBADF
;

197 
out
;

201 
cms
 = 
	`d2i_CMS_bio
(
sigfûe_bio
, 
NULL
);

202 i‡(!
cms
) {

203 
	`ERROR
("%†ˇ¬Ÿ bê∑r£dá†DER-ícoded CMS sig«tuª blob", 
sigfûe
);

204 
°©us
 = -
EFAULT
;

205 
out
;

208 i‡(
	`check_sig√r_«me
(
cms
, 
sig√r_«me
)) {

209 
	`ERROR
("failedÅo verify signerÇame");

210 
°©us
 = -
EFAULT
;

211 
out
;

215 
c⁄ã¡_bio
 = 
	`BIO_√w_fûe
(
fûe
, "rb");

216 i‡(!
c⁄ã¡_bio
) {

217 
	`ERROR
("%†ˇ¬Ÿ bê›íed", 
fûe
);

218 
°©us
 = -
EBADF
;

219 
out
;

223 i‡(!
	`CMS_vîify
(
cms
, 
NULL
, 
dg°
->
˚πs
, 
c⁄ã¡_bio
,

224 
NULL
, 
CMS_BINARY
)) {

225 
	`ERR_¥öt_îr‹s_Â
(
°dîr
);

226 
	`ERROR
("Signature verification failed");

227 
°©us
 = -
EBADMSG
;

228 
out
;

231 
	`TRACE
("Verified OK");

234 
°©us
 = 0;

235 
out
:

237 i‡(
cms
) {

238 
	`CMS_C⁄ã¡Info_‰ì
(
cms
);

240 i‡(
c⁄ã¡_bio
) {

241 
	`BIO_‰ì
(
c⁄ã¡_bio
);

243 i‡(
sigfûe_bio
) {

244 
	`BIO_‰ì
(
sigfûe_bio
);

246  
°©us
;

247 
	}
}

	@swupdate/corelib/swupdate_decrypt.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<°dboﬁ.h
>

15 
	~<›ís¶/›ís¶v.h
>

16 
	~"swupd©e.h
"

17 
	~"s¶≠i.h
"

18 
	~"utû.h
"

20 
swupd©e_dige°
 *
	$swupd©e_DECRYPT_öô
(*
key
, *
iv
, *
ß…
)

22 
swupd©e_dige°
 *
dg°
;

23 
ªt
;

25 i‡((
key
 =
NULL
Ë|| (
iv
 == NULL)) {

26 
	`ERROR
("no keyÖrovided for decryption!");

27  
NULL
;

30 c⁄° 
EVP_CIPHER
 *
cùhî
 = 
	`EVP_´s_256_cbc
();

32 
dg°
 = 
	`ˇŒoc
(1, (*dgst));

33 i‡(!
dg°
) {

34  
NULL
;

37 i‡(
ß…
 !
NULL
) {

38 
dummy_key
[
EVP_MAX_KEY_LENGTH
];

39 
dummy_iv
[
EVP_MAX_IV_LENGTH
];

40 
dummy_pwd
[5] = "DUMMY";

41 i‡(!
	`EVP_ByãsToKey
(
cùhî
, 
	`EVP_sha1
(), 
ß…
,

42 
dummy_pwd
, (dummy_pwd),

44 (*)&
dummy_key
, (*)&
dummy_iv
)) {

45 
	`ERROR
("Cannot set salt.");

46 
	`‰ì
(
dg°
);

47  
NULL
;

51 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L || 
	`deföed
(
LIBRESSL_VERSION_NUMBER
)

52 
	`EVP_CIPHER_CTX_öô
(&
dg°
->
˘xdec
);

54 
dg°
->
˘xdec
 = 
	`EVP_CIPHER_CTX_√w
();

55 i‡(
dg°
->
˘xdec
 =
NULL
) {

56 
	`ERROR
("Cannot initialize cipher context.");

57 
	`‰ì
(
dg°
);

58  
NULL
;

60 i‡(
	`EVP_CIPHER_CTX_ª£t
(
dg°
->
˘xdec
) != 1) {

61 
	`ERROR
("CannotÑeset cipher context.");

62 
	`EVP_CIPHER_CTX_‰ì
(
dg°
->
˘xdec
);

63 
	`‰ì
(
dg°
);

64  
NULL
;

71 
ªt
 = 
	`EVP_De¸y±Inô_ex
(
	`SSL_GET_CTXDEC
(
dg°
), 
cùhî
, 
NULL
, 
key
, 
iv
);

72 i‡(
ªt
 != 1) {

73 c⁄° *
ªas⁄
 = 
	`ERR_ªas⁄_îr‹_°rög
(
	`ERR_≥ek_îr‹
());

74 
	`ERROR
("De¸y± EngöênŸ inôülized,Éº‹ 0x%lx,Ñós⁄: %s", 
	`ERR_gë_îr‹
(),

75 
ªas⁄
 !
NULL
 ?Ñeason : "unknown");

76 
	`‰ì
(
dg°
);

77  
NULL
;

80  
dg°
;

81 
	}
}

83 
	$swupd©e_DECRYPT_upd©e
(
swupd©e_dige°
 *
dg°
, *
buf
,

84 *
ouéí
, *
¸y±buf
, 
öÀn
)

86 i‡(
	`EVP_De¸y±Upd©e
(
	`SSL_GET_CTXDEC
(
dg°
), 
buf
, 
ouéí
, 
¸y±buf
, 
öÀn
) != 1) {

87 c⁄° *
ªas⁄
 = 
	`ERR_ªas⁄_îr‹_°rög
(
	`ERR_≥ek_îr‹
());

88 
	`ERROR
("Upd©e: De¸y±i⁄Éº‹ 0x%lx,Ñós⁄: %s", 
	`ERR_gë_îr‹
(),

89 
ªas⁄
 !
NULL
 ?Ñeason : "unknown");

90  -
EFAULT
;

94 
	}
}

96 
	$swupd©e_DECRYPT_föÆ
(
swupd©e_dige°
 *
dg°
, *
buf
,

97 *
ouéí
)

99 i‡(!
dg°
)

100  -
EINVAL
;

102 i‡(
	`EVP_De¸y±FöÆ_ex
(
	`SSL_GET_CTXDEC
(
dg°
), 
buf
, 
ouéí
) != 1) {

103 c⁄° *
ªas⁄
 = 
	`ERR_ªas⁄_îr‹_°rög
(
	`ERR_≥ek_îr‹
());

104 
	`ERROR
("FöÆ: De¸y±i⁄Éº‹ 0x%lx,Ñós⁄: %s", 
	`ERR_gë_îr‹
(),

105 
ªas⁄
 !
NULL
 ?Ñeason : "unknown");

106  -
EFAULT
;

111 
	}
}

113 
	$swupd©e_DECRYPT_˛ónup
(
swupd©e_dige°
 *
dg°
)

115 i‡(
dg°
) {

116 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L || 
	`deföed
(
LIBRESSL_VERSION_NUMBER
)

117 
	`EVP_CIPHER_CTX_˛ónup
(
	`SSL_GET_CTXDEC
(
dg°
));

119 
	`EVP_CIPHER_CTX_‰ì
(
	`SSL_GET_CTXDEC
(
dg°
));

121 
	`‰ì
(
dg°
);

122 
dg°
 = 
NULL
;

124 
	}
}

	@swupdate/corelib/swupdate_dict.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<uni°d.h
>

16 
	~<f˙é.h
>

17 
	~<î∫o.h
>

18 
	~<sys/°©.h
>

19 
	~<as£π.h
>

20 
	~"gíî©ed/autoc⁄f.h
"

21 
	~"bsdqueue.h
"

22 
	~"utû.h
"

23 
	~"swupd©e_di˘.h
"

25 
	$ö£π_li°_ñem
(
di˘_li°
 *
li°
, c⁄° *
vÆue
)

27 
di˘_li°_ñem
 *
ñem
 = (di˘_li°_ñem *)
	`mÆloc
((*elem));

29 i‡(!
ñem
)

30  -
ENOMEM
;

32 
	`mem£t
(
ñem
, 0, (*elem));

33 
ñem
->
vÆue
 = 
	`°rdup
(value);

35 
	`LIST_INSERT_HEAD
(
li°
, 
ñem
, 
√xt
);

38 
	}
}

40 
	$ªmove_li°_ñem
(
di˘_li°_ñem
 *
ñem
)

42 
	`LIST_REMOVE
(
ñem
, 
√xt
);

43 
	`‰ì
(
ñem
->
vÆue
);

44 
	`‰ì
(
ñem
);

45 
	}
}

47 
	$ªmove_li°
(
di˘_li°
 *
li°
)

49 
di˘_li°_ñem
 *
ñem
;

50 
di˘_li°_ñem
 *
tmp
;

52 
	`LIST_FOREACH_SAFE
(
ñem
, 
li°
, 
√xt
, 
tmp
) {

53 
	`ªmove_li°_ñem
(
ñem
);

55 
	}
}

57 
di˘_íåy
 *
	$ö£π_íåy
(
di˘
 *
di˘i⁄¨y
, c⁄° *
key
)

59 
di˘_íåy
 *
íåy
 = (di˘_íåy *)
	`mÆloc
((*entry));

60 i‡(!
íåy
)

61  
NULL
;

63 
	`mem£t
(
íåy
, 0, (*entry));

64 
íåy
->
key
 = 
	`°rdup
(key);

66 
	`LIST_INSERT_HEAD
(
di˘i⁄¨y
, 
íåy
, 
√xt
);

68  
íåy
;

69 
	}
}

71 
di˘_íåy
 *
	$gë_íåy
(
di˘
 *
di˘i⁄¨y
, c⁄° *
key
)

73 
di˘_íåy
 *
íåy
;

75 
	`LIST_FOREACH
(
íåy
, 
di˘i⁄¨y
, 
√xt
) {

76 i‡(
	`°rcmp
(
key
, 
íåy
->key) == 0)

77  
íåy
;

80  
NULL
;

81 
	}
}

83 
	$ªmove_íåy
(
di˘_íåy
 *
íåy
)

85 
	`LIST_REMOVE
(
íåy
, 
√xt
);

86 
	`‰ì
(
íåy
->
key
);

87 
	`ªmove_li°
(&
íåy
->
li°
);

88 
	`‰ì
(
íåy
);

89 
	}
}

91 *
	$di˘_íåy_gë_key
(
di˘_íåy
 *
íåy
)

93 i‡(!
íåy
)

94  
NULL
;

96  
íåy
->
key
;

97 
	}
}

99 *
	$di˘_íåy_gë_vÆue
(
di˘_íåy
 *
íåy
)

101 i‡(!
íåy
 || !
	`LIST_FIRST
(&íåy->
li°
))

102  
NULL
;

104  
	`LIST_FIRST
(&
íåy
->
li°
)->
vÆue
;

105 
	}
}

107 
di˘_li°
 *
	$di˘_gë_li°
(
di˘
 *
di˘i⁄¨y
, c⁄° *
key
)

109 
di˘_íåy
 *
íåy
 = 
	`gë_íåy
(
di˘i⁄¨y
, 
key
);

111 i‡(!
íåy
)

112  
NULL
;

114  &
íåy
->
li°
;

115 
	}
}

117 *
	$di˘_gë_vÆue
(
di˘
 *
di˘i⁄¨y
, c⁄° *
key
)

119 
di˘_íåy
 *
íåy
 = 
	`gë_íåy
(
di˘i⁄¨y
, 
key
);

121 i‡(!
íåy
)

122  
NULL
;

124  
	`di˘_íåy_gë_vÆue
(
íåy
);

125 
	}
}

127 
	$di˘_ö£π_vÆue
(
di˘
 *
di˘i⁄¨y
, c⁄° *
key
, c⁄° *
vÆue
)

129 
di˘_íåy
 *
íåy
 = 
	`gë_íåy
(
di˘i⁄¨y
, 
key
);

131 i‡(!
íåy
) {

132 
íåy
 = 
	`ö£π_íåy
(
di˘i⁄¨y
, 
key
);

133 i‡(!
íåy
)

134  -
ENOMEM
;

137  
	`ö£π_li°_ñem
(&
íåy
->
li°
, 
vÆue
);

138 
	}
}

140 
	$di˘_£t_vÆue
(
di˘
 *
di˘i⁄¨y
, c⁄° *
key
, c⁄° *
vÆue
)

142 
di˘_íåy
 *
íåy
 = 
	`gë_íåy
(
di˘i⁄¨y
, 
key
);

144 i‡(
íåy
)

145 
	`ªmove_íåy
(
íåy
);

147 
íåy
 = 
	`ö£π_íåy
(
di˘i⁄¨y
, 
key
);

148 i‡(!
íåy
)

149  -
ENOMEM
;

151  
	`ö£π_li°_ñem
(&
íåy
->
li°
, 
vÆue
);

152 
	}
}

154 
	$di˘_ªmove
(
di˘
 *
di˘i⁄¨y
, c⁄° *
key
)

156 
di˘_íåy
 *
íåy
 = 
	`gë_íåy
(
di˘i⁄¨y
, 
key
);

158 i‡(!
íåy
)

161 
	`ªmove_íåy
(
íåy
);

162 
	}
}

164 
	$di˘_dr›_db
(
di˘
 *
di˘i⁄¨y
)

166 
di˘_íåy
 *
íåy
;

167 
di˘_íåy
 *
tmp
;

169 
	`LIST_FOREACH_SAFE
(
íåy
, 
di˘i⁄¨y
, 
√xt
, 
tmp
) {

170 
	`ªmove_íåy
(
íåy
);

172 
	}
}

174 
	$di˘_∑r£_s¸ùt
(
di˘
 *
di˘i⁄¨y
, c⁄° *
s¸ùt
)

176 
FILE
 *
Â
 = 
NULL
;

177 
ªt
 = 0;

178 *
löe
 = 
NULL
, *
key
 = NULL, *
vÆue
 = NULL;

179 
size_t
 
Àn
 = 0;

180 *
ßvïå
;

183 
Â
 = 
	`f›í
(
s¸ùt
, "rb");

184 i‡(!
Â
) {

185 
	`ERROR
("FaûedÅÿ›í s¸ùàfûe: %s\n", 
s¸ùt
);

186 
ªt
 = -1;

187 
˛ónup
;

192 (
	`gëlöe
(&
löe
, &
Àn
, 
Â
)) != -1) {

193 
key
 = 
	`°πok_r
(
löe
, " \t\n", &
ßvïå
);

194 
vÆue
 = 
	`°πok_r
(
NULL
, "\t\n", &
ßvïå
);

195 i‡(
vÆue
 !
NULL
 && 
key
 != NULL) {

196 
ªt
 = 
	`di˘_£t_vÆue
(
di˘i⁄¨y
, 
key
, 
vÆue
);

197 i‡(
ªt
) {

198 
	`ERROR
("AddingÖair [%s] = %s into dictionary"

199 "li° faûed\n", 
key
, 
vÆue
);

200 
˛ónup
;

204 i‡(
vÆue
 =
NULL
 && 
key
 != NULL) {

205 
	`di˘_ªmove
(
di˘i⁄¨y
, 
key
);

209 
˛ónup
:

210 i‡(
Â
Ë
	`f˛o£
(fp);

212 
	`‰ì
(
löe
);

213  
ªt
;

214 
	}
}

	@swupdate/corelib/swupdate_rsa_verify.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<°dboﬁ.h
>

14 
	~"swupd©e.h
"

15 
	~"s¶≠i.h
"

16 
	~"utû.h
"

17 
	~"swupd©e_vîify_¥iv©e.h
"

19 
	#BUFSIZE
 (1024 * 8)

	)

21 
EVP_PKEY
 *
	$lﬂd_pubkey
(c⁄° *
fûe
)

23 
BIO
 *
key
=
NULL
;

24 
EVP_PKEY
 *
pkey
=
NULL
;

26 i‡(
fûe
 =
NULL
)

28 
	`ERROR
("no keyfile specified");

29 
íd
;

32 
key
=
	`BIO_√w
(
	`BIO_s_fûe
());

33 i‡(
key
 =
NULL
)

35 
íd
;

38 i‡(
	`BIO_ªad_fûíame
(
key
, 
fûe
) <= 0)

40 
	`¥ötf
("Eº‹ o≥nög %†\n", 
fûe
);

41 
íd
;

44 
pkey
=
	`PEM_ªad_bio_PUBKEY
(
key
, 
NULL
, NULL, NULL);

45 
íd
:

46 i‡(
key
 !
NULL
Ë
	`BIO_‰ì
(key);

47 i‡(
pkey
 =
NULL
)

48 
	`ERROR
("u«bÀÅÿlﬂd key fûíamê%s", 
fûe
);

49 (
pkey
);

50 
	}
}

52 
	$dg°_vîify_öô
(
swupd©e_dige°
 *
dg°
)

54 
rc
;

56 
rc
 = 
	`EVP_Dige°VîifyInô
(
dg°
->
˘x
, 
NULL
, 
	`EVP_sha256
(), NULL, dg°->
pkey
);

57 i‡(
rc
 != 1) {

58 
	`ERROR
("EVP_Dige°VîifyInô faûed,Éº‹ 0x%lx", 
	`ERR_gë_îr‹
());

59  -
EFAULT
;

63 
	}
}

65 
	$vîify_upd©e
(
swupd©e_dige°
 *
dg°
, *
msg
, 
mÀn
)

67 
rc
;

69 
rc
 = 
	`EVP_Dige°VîifyUpd©e
(
dg°
->
˘x
, 
msg
, 
mÀn
);

70 if(
rc
 != 1) {

71 
	`ERROR
("EVP_Dige°VîifyUpd©êÁûed,Éº‹ 0x%lx", 
	`ERR_gë_îr‹
());

72  -
EFAULT
;

76 
	}
}

78 
	$vîify_föÆ
(
swupd©e_dige°
 *
dg°
, *
sig
, 
¶í
)

80 
rc
;

83 
	`ERR_˛ór_îr‹
();

84 
rc
 = 
	`EVP_Dige°VîifyFöÆ
(
dg°
->
˘x
, 
sig
, 
¶í
);

85 if(
rc
 != 1) {

86 
	`ERROR
("EVP_Dige°VîifyFöÆ faûed,Éº‹ 0x%lx %d", 
	`ERR_gë_îr‹
(), 
rc
);

90  
rc
;

91 
	}
}

93 
	$swupd©e_vîify_fûe
(
swupd©e_dige°
 *
dg°
, c⁄° *
sigfûe
,

94 c⁄° *
fûe
, c⁄° *
sig√r_«me
)

96 
FILE
 *
Â
 = 
NULL
;

97 
BIO
 *
sigbio
;

98 
sigÀn
 = 0;

99 
i
;

100 *
sigbuf
 = 
NULL
;

101 *
msg
 = 
NULL
;

102 
size
;

103 
size_t
 
rbyãs
;

104 
°©us
 = 0;

106 ()
sig√r_«me
;

107 i‡(!
dg°
) {

108 
	`ERROR
("Wrong crypto initialization: did youÖassÅhe key ?");

109 
°©us
 = -
ENOKEY
;

110 
out
;

113 
msg
 = 
	`mÆloc
(
BUFSIZE
);

114 i‡(!
msg
) {

115 
°©us
 = -
ENOMEM
;

116 
out
;

119 
sigbio
 = 
	`BIO_√w_fûe
(
sigfûe
, "rb");

120 
sigÀn
 = 
	`EVP_PKEY_size
(
dg°
->
pkey
);

121 
sigbuf
 = 
	`OPENSSL_mÆloc
(
sigÀn
);

123 
sigÀn
 = 
	`BIO_ªad
(
sigbio
, 
sigbuf
, siglen);

124 
	`BIO_‰ì
(
sigbio
);

126 if(
sigÀn
 <= 0) {

127 
	`ERROR
("Eº‹Ñódög sig«tuª fûê%s", 
sigfûe
);

128 
°©us
 = -
ENOKEY
;

129 
out
;

132 i‡((
	`dg°_öô
(
dg°
, 
	`EVP_sha256
()Ë< 0Ë|| (
	`dg°_vîify_öô
(dgst) < 0)) {

133 
°©us
 = -
ENOKEY
;

134 
out
;

137 
Â
 = 
	`f›í
(
fûe
, "r");

138 i‡(!
Â
) {

139 
	`ERROR
("%†ˇ¬Ÿ bê›íed", 
fûe
);

140 
°©us
 = -
EBADF
;

141 
out
;

144 
size
 = 0;

146 
rbyãs
 = 
	`‰ód
(
msg
, 1, 
BUFSIZE
, 
Â
);

147 i‡(
rbyãs
 > 0) {

148 
size
 +
rbyãs
;

149 i‡(
	`vîify_upd©e
(
dg°
, 
msg
, 
rbyãs
) < 0)

152 i‡(
	`„of
(
Â
))

156 
	`TRACE
("Vîify sig√d image: Ród %d byãs", 
size
);

157 
i
 = 
	`vîify_föÆ
(
dg°
, 
sigbuf
, ()
sigÀn
);

158 if(
i
 > 0) {

159 
	`TRACE
("Verified OK");

160 
°©us
 = 0;

161 } if(
i
 == 0) {

162 
	`TRACE
("Verification Failure");

163 
°©us
 = -
EBADMSG
;

165 
	`TRACE
("Error Verifying Data");

166 
°©us
 = -
EFAULT
;

169 
out
:

170 i‡(
Â
)

171 
	`f˛o£
(
Â
);

172 i‡(
msg
)

173 
	`‰ì
(
msg
);

174 i‡(
sigbuf
)

175 
	`OPENSSL_‰ì
(
sigbuf
);

177  
°©us
;

178 
	}
}

	@swupdate/corelib/swupdate_settings.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<uni°d.h
>

18 
	~<f˙é.h
>

19 
	~<î∫o.h
>

20 
	~<sys/°©.h
>

21 
	~<as£π.h
>

22 
	~"gíî©ed/autoc⁄f.h
"

23 
	~"bsdqueue.h
"

24 
	~"utû.h
"

25 
	~"swupd©e.h
"

26 
	~"∑r£lib.h
"

27 
	~"swupd©e_£âögs.h
"

28 
	~"swupd©e_di˘.h
"

29 
	~"com∑t.h
"

31 
	srun_as
 {

32 
uid_t
 
	mu£rid
;

33 
gid_t
 
	mgroupid
;

36 
c⁄fig_£âög_t
 *
	$föd_£âögs_node
(
c⁄fig_t
 *
cfg
,

37 c⁄° *
fõld
)

39 
node
[1024];

40 
c⁄fig_£âög_t
 *
£âög
;

42 i‡(!
fõld
)

43  
NULL
;

45 
	`¢¥ötf
(
node
, “ode), "%s", 
fõld
);

47 
£âög
 = 
	`c⁄fig_lookup
(
cfg
, 
node
);

49  
£âög
;

50 
	}
}

52 
	$ªad_£âögs_fûe
(
c⁄fig_t
 *
cfg
, c⁄° *
fûíame
)

54 
ªt
;

57 
ªt
 = 
	`c⁄fig_ªad_fûe
(
cfg
, 
fûíame
);

58 i‡(
ªt
 !
CONFIG_TRUE
) {

59 
	`Ârötf
(
°dîr
, "%†", 
	`c⁄fig_îr‹_fûe
(
cfg
));

60 
	`Ârötf
(
°dîr
, "%d ", 
	`c⁄fig_îr‹_löe
(
cfg
));

61 
	`Ârötf
(
°dîr
, "%†", 
	`c⁄fig_îr‹_ãxt
(
cfg
));

63 
	`Ârötf
(
°dîr
, "%s:%d - %s\n", 
	`c⁄fig_îr‹_fûe
(
cfg
),

64 
	`c⁄fig_îr‹_löe
(
cfg
), 
	`c⁄fig_îr‹_ãxt
(cfg));

67  
ªt
;

68 
	}
}

70 
	$ªad_moduÀ_£âögs
(c⁄° *
fûíame
, c⁄° *
moduÀ
, 
£âögs_ˇŒback
 
f˙
, *
d©a
)

72 
c⁄fig_t
 
cfg
;

73 
c⁄fig_£âög_t
 *
ñem
;

75 i‡(!
f˙
 || !
fûíame
)

76  -
EINVAL
;

78 
	`mem£t
(&
cfg
, 0, (cfg));

79 
	`c⁄fig_öô
(&
cfg
);

82 i‡(
	`ªad_£âögs_fûe
(&
cfg
, 
fûíame
Ë!
CONFIG_TRUE
) {

83 
	`c⁄fig_de°roy
(&
cfg
);

84 
	`ERROR
("ErrorÑeading configuration file, skipping....");

85  -
EINVAL
;

88 
ñem
 = 
	`föd_£âögs_node
(&
cfg
, 
moduÀ
);

90 i‡(!
ñem
) {

91 
	`c⁄fig_de°roy
(&
cfg
);

92  -
ENODATA
;

95 
	`f˙
(
ñem
, 
d©a
);

97 
	`c⁄fig_de°roy
(&
cfg
);

100 
	}
}

102 
	$gë_run_as
(*
ñem
, *
d©a
)

104 
run_as
 *
pid
 = (run_a†*)
d©a
;

106 
	`gë_fõld
(
LIBCFG_PARSER
, 
ñem
, "u£rid", &
pid
->
u£rid
);

107 
	`gë_fõld
(
LIBCFG_PARSER
, 
ñem
, "groupid", &
pid
->
groupid
);

110 
	}
}

112 
	$ªad_£âögs_u£r_id
(c⁄° *
fûíame
, c⁄° *
moduÀ
, 
uid_t
 *
u£rid
, 
gid_t
 *
groupid
)

114 
run_as
 
ids
;

115 
ªt
;

117 *
u£rid
 = 
ids
.u£rid = 
	`gëuid
();

118 *
groupid
 = 
ids
.groupid = 
	`gëgid
();

120 
ªt
 = 
	`ªad_moduÀ_£âögs
(
fûíame
, 
moduÀ
, 
gë_run_as
, &
ids
);

121 i‡(
ªt
)

122  -
EINVAL
;

124 *
u£rid
 = 
ids
.userid;

125 *
groupid
 = 
ids
.groupid;

128 
	}
}

135 
	$£âögs_öto_di˘
(*
£âögs
, *
d©a
)

137 *
ñem
;

138 
cou¡
, 
i
;

139 
«me
[80], 
vÆue
[80];

140 
di˘
 *
di˘i⁄¨y
 = (di˘ *Ë
d©a
;

142 
cou¡
 = 
	`gë_¨øy_Àngth
(
LIBCFG_PARSER
, 
£âögs
);

144 
i
 = 0; i < 
cou¡
; ++i) {

145 
ñem
 = 
	`gë_ñem_‰om_idx
(
LIBCFG_PARSER
, 
£âögs
, 
i
);

147 i‡(!
ñem
)

150 if(!(
	`exi°_fõld_°rög
(
LIBCFG_PARSER
, 
ñem
, "name")))

152 if(!(
	`exi°_fõld_°rög
(
LIBCFG_PARSER
, 
ñem
, "value")))

155 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
, "«me", 
«me
);

156 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
, "vÆue", 
vÆue
);

157 
	`di˘_£t_vÆue
(
di˘i⁄¨y
, 
«me
, 
vÆue
);

158 
	`TRACE
("Identify for configData: %s --> %s\n",

159 
«me
, 
vÆue
);

163 
	}
}

	@swupdate/corelib/swupdate_verify_private.h

8 #i‚de‡
_SWUPDATE_VERIFY_H


9 
	#_SWUPDATE_VERIFY_H


	)

11 
	~<›ís¶/evp.h
>

13 
	gswupd©e_dige°
;

14 
dg°_öô
(
swupd©e_dige°
 *
dg°
, c⁄° 
EVP_MD
 *
md
);

16 #i‡
deföed
(
CONFIG_SIGALG_RAWRSA
)

17 
EVP_PKEY
 *
lﬂd_pubkey
(c⁄° *
fûe
);

20 #ifde‡
CONFIG_SIGALG_CMS


21 
	~<›ís¶/cms.h
>

22 
check_code_sign
(c⁄° 
X509_PURPOSE
 *
xp
, c⁄° 
X509
 *
¸t
, 
ˇ
);

23 
X509_STORE
 *
lﬂd_˚π_chaö
(c⁄° *
fûe
);

	@swupdate/corelib/test/test_crypt.c

20 
	~<°dlib.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<£tjmp.h
>

24 
	~<cmocka.h
>

25 
	~<utû.h
>

26 
	~<s¶≠i.h
>

28 
	s¸y±d©a
 {

29 *
	mkey
;

30 *
	miv
;

31 *
	mß…
;

32 *
	m¸y±ãxt
;

35 
	$hex2bö
(*
de°
, c⁄° *
sour˚
)

37 
vÆ
;

38 
i
 = 0; i < 
	`°æí
((c⁄° *)
sour˚
); i += 2) {

39 
vÆ
 = 
	`‰om_ascii
((c⁄° *)&
sour˚
[
i
], 2, 
LG_16
);

40 
de°
[
i
 / 2] = 
vÆ
;

42 
	}
}

44 
	$do_¸y±
(
¸y±d©a
 *
¸y±
, *
CRYPTTEXT
, *
PLAINTEXT
)

46 
Àn
;

47 *
d¸y±
 = 
	`swupd©e_DECRYPT_öô
(
¸y±
->
key
, cry±->
iv
, cry±->
ß…
);

48 
	`as£π_n⁄_nuŒ
(
d¸y±
);

50 *
buf„r
 = 
	`ˇŒoc
(1, 
	`°æí
((c⁄° *)
CRYPTTEXT
Ë+ 
EVP_MAX_BLOCK_LENGTH
);

51 
ªt
 = 
	`swupd©e_DECRYPT_upd©e
(
d¸y±
, 
buf„r
, &
Àn
, 
¸y±
->
¸y±ãxt
, 
	`°æí
((c⁄° *)
CRYPTTEXT
) / 2);

52 
	`as£π_åue
(
ªt
 >= 0);

53 
	`as£π_åue
(
Àn
 == 0);

55 
ªt
 = 
	`swupd©e_DECRYPT_föÆ
(
d¸y±
, 
¸y±
->
¸y±ãxt
, &
Àn
);

56 
	`as£π_åue
(
ªt
 == 0);

57 
	`as£π_åue
(
Àn
 =()
	`°æí
((c⁄° *)
PLAINTEXT
));

58 
	`as£π_åue
(
	`°∫cmp
((c⁄° *)
buf„r
, (c⁄° *)
PLAINTEXT
, 
Àn
) == 0);

59 
	`‰ì
(
buf„r
);

60 
	}
}

62 
	$ã°_¸y±_noß…
(**
°©e
)

64 ()
°©e
;

66 
KEY
[] = "E5E9FA1BA31ECD1AE84F75CAAA474F3A663F05F412028F81DA65D26EE56424B2";

67 
IV
[] = "E93DA465B309C53FEC5FF93C9637DA58";

68 
CRYPTTEXT
[] = "E4B7745CA14039555CECD548BB33E0C3";

69 
PLAINTEXT
[] = "CRYPTTEST";

71 
¸y±d©a
 
¸y±
;

72 
	`hex2bö
((
¸y±
.
key
 = 
	`ˇŒoc
(1, 
	`°æí
((c⁄° *)
KEY
))), KEY);

73 
	`hex2bö
((
¸y±
.
iv
 = 
	`ˇŒoc
(1, 
	`°æí
((c⁄° *)
IV
))), IV);

74 
¸y±
.
ß…
 = 
NULL
;

75 
	`hex2bö
((
¸y±
.
¸y±ãxt
 = 
	`ˇŒoc
(1, 
	`°æí
((c⁄° *)
CRYPTTEXT
))), CRYPTTEXT);

77 
	`do_¸y±
(&
¸y±
, &
CRYPTTEXT
[0], &
PLAINTEXT
[0]);

79 
	`‰ì
(
¸y±
.
key
);

80 
	`‰ì
(
¸y±
.
iv
);

81 
	`‰ì
(
¸y±
.
¸y±ãxt
);

82 
	}
}

84 
	$ã°_¸y±_ß…
(**
°©e
)

86 ()
°©e
;

88 
KEY
[] = "69D54287F856D30B51B812FDF714556778CF31E1B104D9C68BD90C669C37D1AB";

89 
IV
[] = "E7039ABFCA63EB8EB1D320F7918275B2";

90 
SALT
[] = "F75A9C11F7F63C08";

91 
CRYPTTEXT
[] = "A17EBBB1A28459352FE3A994404E35AA";

92 
PLAINTEXT
[] = "CRYPTTEST";

94 
¸y±d©a
 
¸y±
;

95 
	`hex2bö
((
¸y±
.
key
 = 
	`ˇŒoc
(1, 
	`°æí
((c⁄° *)
KEY
))), KEY);

96 
	`hex2bö
((
¸y±
.
iv
 = 
	`ˇŒoc
(1, 
	`°æí
((c⁄° *)
IV
))), IV);

97 
	`hex2bö
((
¸y±
.
ß…
 = 
	`ˇŒoc
(1, 
	`°æí
((c⁄° *)
SALT
))), SALT);

98 
	`hex2bö
((
¸y±
.
¸y±ãxt
 = 
	`ˇŒoc
(1, 
	`°æí
((c⁄° *)
CRYPTTEXT
))), CRYPTTEXT);

100 
	`do_¸y±
(&
¸y±
, &
CRYPTTEXT
[0], &
PLAINTEXT
[0]);

102 
	`‰ì
(
¸y±
.
key
);

103 
	`‰ì
(
¸y±
.
iv
);

104 
	`‰ì
(
¸y±
.
ß…
);

105 
	`‰ì
(
¸y±
.
¸y±ãxt
);

106 
	}
}

108 
	$ã°_¸y±_Áûuª
(**
°©e
)

110 ()
°©e
;

112 
KEY
[] = "E5E9FA1BA31ECD1AE84F75CAAA474F3A663F05F412028F81DA65D26EE56424B2";

113 
IV
[] = "E93DA465B309C53FEC5FF93C9637DA58";

114 
CRYPTTEXT
[] = "CAFECAFECAFECAFECAFECAFECAFECAFE";

116 
¸y±d©a
 
¸y±
;

117 
	`hex2bö
((
¸y±
.
key
 = 
	`ˇŒoc
(1, 
	`°æí
((c⁄° *)
KEY
))), KEY);

118 
	`hex2bö
((
¸y±
.
iv
 = 
	`ˇŒoc
(1, 
	`°æí
((c⁄° *)
IV
))), IV);

119 
¸y±
.
ß…
 = 
NULL
;

120 
	`hex2bö
((
¸y±
.
¸y±ãxt
 = 
	`ˇŒoc
(1, 
	`°æí
((c⁄° *)
CRYPTTEXT
))), CRYPTTEXT);

122 
Àn
;

123 *
d¸y±
 = 
	`swupd©e_DECRYPT_öô
(
¸y±
.
key
, cry±.
iv
, cry±.
ß…
);

124 
	`as£π_n⁄_nuŒ
(
d¸y±
);

126 *
buf„r
 = 
	`ˇŒoc
(1, 
	`°æí
((c⁄° *)
CRYPTTEXT
Ë+ 
EVP_MAX_BLOCK_LENGTH
);

127 
ªt
 = 
	`swupd©e_DECRYPT_upd©e
(
d¸y±
, 
buf„r
, &
Àn
, 
¸y±
.
¸y±ãxt
, 
	`°æí
((c⁄° *)
CRYPTTEXT
) / 2);

128 
ªt
 = 
	`swupd©e_DECRYPT_föÆ
(
d¸y±
, 
¸y±
.
¸y±ãxt
, &
Àn
);

129 
	`as£π_åue
(
ªt
 != 0);

130 
	`‰ì
(
buf„r
);

132 
	`‰ì
(
¸y±
.
key
);

133 
	`‰ì
(
¸y±
.
iv
);

134 
	`‰ì
(
¸y±
.
ß…
);

135 
	`‰ì
(
¸y±
.
¸y±ãxt
);

136 
	}
}

138 
	$maö
()

140 
îr‹_cou¡
 = 0;

141 c⁄° 
CMUnôTe°
 
¸y±_ã°s
[] = {

142 
	`cmocka_unô_ã°
(
ã°_¸y±_noß…
),

143 
	`cmocka_unô_ã°
(
ã°_¸y±_Áûuª
),

144 
	`cmocka_unô_ã°
(
ã°_¸y±_ß…
)

146 
îr‹_cou¡
 +
	`cmocka_run_group_ã°s_«me
("¸y±", 
¸y±_ã°s
, 
NULL
, NULL);

147  
îr‹_cou¡
;

148 
	}
}

	@swupdate/corelib/verify_signature.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<°dboﬁ.h
>

14 
	~"swupd©e.h
"

15 
	~"s¶≠i.h
"

16 
	~"utû.h
"

17 
	~"com∑t.h
"

18 
	~"swupd©e_vîify_¥iv©e.h
"

20 
	$dg°_öô
(
swupd©e_dige°
 *
dg°
, c⁄° 
EVP_MD
 *
md
)

22 
rc
;

24 
	`ERR_˛ór_îr‹
();

25 
rc
 = 
	`EVP_Dige°Inô_ex
(
dg°
->
˘x
, 
md
, 
NULL
);

26 i‡(
rc
 != 1) {

27 
	`ERROR
("EVP_Dige°Inô_ex faûed: %s", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

28  -
EINVAL
;

32 
	}
}

34 
swupd©e_dige°
 *
	$swupd©e_HASH_öô
(c⁄° *
SHAÀngth
)

36 
swupd©e_dige°
 *
dg°
;

37 c⁄° 
EVP_MD
 *
md
;

38 
ªt
;

40 
dg°
 = 
	`ˇŒoc
(1, (*dgst));

41 i‡(!
dg°
) {

42  
NULL
;

45 i‡((!
SHAÀngth
Ë|| 
	`°rcmp
(SHAlength, "sha1"))

46 
md
 = 
	`EVP_sha256
();

48 
md
 = 
	`EVP_sha1
();

50 
dg°
->
˘x
 = 
	`EVP_MD_CTX_¸óã
();

51 if(
dg°
->
˘x
 =
NULL
) {

52 
	`ERROR
("EVP_MD_CTX_¸óã faûed,Éº‹ 0x%lx", 
	`ERR_gë_îr‹
());

53 
	`‰ì
(
dg°
);

54  
NULL
;

57 
ªt
 = 
	`dg°_öô
(
dg°
, 
md
);

58 i‡(
ªt
) {

59 
	`‰ì
(
dg°
);

60  
NULL
;

63  
dg°
;

64 
	}
}

66 
	$swupd©e_HASH_upd©e
(
swupd©e_dige°
 *
dg°
, *
buf
,

67 
size_t
 
Àn
)

69 i‡(!
dg°
)

70  -
EFAULT
;

72 i‡(
	`EVP_Dige°Upd©e
 (
dg°
->
˘x
, 
buf
, 
Àn
) != 1)

73  -
EIO
;

76 
	}
}

78 
	$swupd©e_HASH_föÆ
(
swupd©e_dige°
 *
dg°
, *
md_vÆue
,

79 *
md_Àn
)

81 i‡(!
dg°
)

82  -
EFAULT
;

84  
	`EVP_Dige°FöÆ_ex
 (
dg°
->
˘x
, 
md_vÆue
, 
md_Àn
);

86 
	}
}

88 
	$swupd©e_HASH_˛ónup
(
swupd©e_dige°
 *
dg°
)

90 i‡(
dg°
) {

91 
	`EVP_MD_CTX_de°roy
(
dg°
->
˘x
);

92 
	`‰ì
(
dg°
);

93 
dg°
 = 
NULL
;

95 
	}
}

100 
	$swupd©e_HASH_com∑ª
(*
hash1
, *
hash2
)

102 
i
;

104 
i
 = 0; i < 
SHA256_HASH_LENGTH
; i++)

105 i‡(
hash1
[
i
] !
hash2
[i])

109 
	}
}

111 
	$swupd©e_dg°_öô
(
swupd©e_cfg
 *
sw
, c⁄° *
keyfûe
)

113 
swupd©e_dige°
 *
dg°
;

114 
ªt
;

119 i‡(
sw
->
dg°
) {

120  -
EBUSY
;

123 
dg°
 = 
	`ˇŒoc
(1, (*dgst));

124 i‡(!
dg°
) {

125 
ªt
 = -
ENOMEM
;

126 
dg°_öô_îr‹
;

129 #i‡
	`deföed
(
CONFIG_SIGALG_RAWRSA
)

133 
dg°
->
pkey
 = 
	`lﬂd_pubkey
(
keyfûe
);

134 i‡(!
dg°
->
pkey
) {

135 
	`ERROR
("Eº‹ÜﬂdögÖub key from %s", 
keyfûe
);

136 
ªt
 = -
EINVAL
;

137 
dg°_öô_îr‹
;

139 #ñi‡
	`deföed
(
CONFIG_SIGALG_CMS
)

143 
dg°
->
˚πs
 = 
	`lﬂd_˚π_chaö
(
keyfûe
);

144 i‡(!
dg°
->
˚πs
) {

145 
	`ERROR
("Eº‹Üﬂdög cîtifiˇã chaö from %s", 
keyfûe
);

146 
ªt
 = -
EINVAL
;

147 
dg°_öô_îr‹
;

151 
code_sign_«me
[] = "Code signing";

152 
code_sign_¢ame
[] = "codesign";

154 i‡(!
	`X509_PURPOSE_add
(
X509_PURPOSE_CODE_SIGN
, 
X509_TRUST_EMAIL
,

155 0, 
check_code_sign
, 
code_sign_«me
,

156 
code_sign_¢ame
, 
NULL
)) {

157 
	`ERROR
("failedÅoádd code signÖurpose");

158 
ªt
 = -
EINVAL
;

159 
dg°_öô_îr‹
;

163 i‡(!
	`X509_STORE_£t_puΩo£
(
dg°
->
˚πs
, 
sw
->
globÆs
.
˚π_puΩo£
)) {

164 
	`ERROR
("failedÅo setÖurpose");

165 
ªt
 = -
EINVAL
;

166 
dg°_öô_îr‹
;

169 
	`TRACE
("publi¯key / cîà%†ign‹ed, youÇìdÅÿ£àSIGALG", 
keyfûe
);

175 
dg°
->
˘x
 = 
	`EVP_MD_CTX_¸óã
();

176 if(
dg°
->
˘x
 =
NULL
) {

177 
	`ERROR
("EVP_MD_CTX_¸óã faûed,Éº‹ 0x%lx", 
	`ERR_gë_îr‹
());

178 
ªt
 = -
ENOMEM
;

179 
dg°_öô_îr‹
;

182 
sw
->
dg°
 = dgst;

186 
dg°_öô_îr‹
:

187 i‡(
dg°
)

188 
	`‰ì
(
dg°
);

190  
ªt
;

191 
	}
}

	@swupdate/handlers/archive_handler.c

8 
	~<sys/ty≥s.h
>

9 
	~<°dio.h
>

10 
	~<sys/°©.h
>

11 
	~<uni°d.h
>

12 
	~<f˙é.h
>

13 
	~<°dlib.h
>

14 
	~<limôs.h
>

15 
	~<î∫o.h
>

16 
	~<°rög.h
>

17 
	~<±hªad.h
>

19 
	~<¨chive.h
>

20 
	~<¨chive_íåy.h
>

22 
	~"swupd©e.h
"

23 
	~"h™dÀr.h
"

24 
	~"utû.h
"

26 
	#FIFO_FILE_NAME
 "¨chivfifo"

	)

29 
	gdebug
 = 0;

31 
u¡¨_h™dÀr
();

32 
¨chive_h™dÀr
();

34 
±hªad_t
 
	gexåa˘_thªad
;

36 
	sexåa˘_d©a
 {

37 
	mÊags
;

41 
	$c›y_d©a
(
¨chive
 *
¨
, ¨chivê*
aw
)

43 
r
;

44 c⁄° *
buff
;

45 
size_t
 
size
;

46 #i‡
ARCHIVE_VERSION_NUMBER
 >= 3000000

47 
öt64_t
 
off£t
;

49 
off_t
 
off£t
;

53 
r
 = 
	`¨chive_ªad_d©a_block
(
¨
, &
buff
, &
size
, &
off£t
);

54 i‡(
r
 =
ARCHIVE_EOF
)

55  (
ARCHIVE_OK
);

56 i‡(
r
 !
ARCHIVE_OK
)

57  (
r
);

58 
r
 = 
	`¨chive_wrôe_d©a_block
(
aw
, 
buff
, 
size
, 
off£t
);

59 i‡(
r
 !
ARCHIVE_OK
) {

60 
	`TRACE
("archive_write_data_block(): %s",

61 
	`¨chive_îr‹_°rög
(
aw
));

62  (
r
);

65 
	}
}

68 
	$exåa˘
(*
p
)

70 
¨chive
 *
a
;

71 
¨chive
 *
ext
;

72 
¨chive_íåy
 *
íåy
;

73 
r
;

74 
Êags
;

75 
exåa˘_d©a
 *
d©a
 = (exåa˘_d©®*)
p
;

76 
Êags
 = 
d©a
->flags;

78 
a
 = 
	`¨chive_ªad_√w
();

79 
ext
 = 
	`¨chive_wrôe_disk_√w
();

80 
	`¨chive_wrôe_disk_£t_›ti⁄s
(
ext
, 
Êags
);

86 
	`¨chive_ªad_suµ‹t_f‹m©_Æl
(
a
);

87 
	`¨chive_ªad_suµ‹t_fûãr_Æl
(
a
);

95 * 
FIFO
 = 
	`Æloˇ
(
	`°æí
(
	`gë_tmpdú
())+°æí(
FIFO_FILE_NAME
)+1);

96 
	`•rötf
(
FIFO
, "%s%s", 
	`gë_tmpdú
(), 
FIFO_FILE_NAME
);

97 i‡((
r
 = 
	`¨chive_ªad_›í_fûíame
(
a
, 
FIFO
, 4096))) {

98 
	`ERROR
("archive_read_open_filename(): %s %d",

99 
	`¨chive_îr‹_°rög
(
a
), 
r
);

100 
	`±hªad_exô
((*)-1);

103 
r
 = 
	`¨chive_ªad_√xt_hódî
(
a
, &
íåy
);

104 i‡(
r
 =
ARCHIVE_EOF
)

106 i‡(
r
 !
ARCHIVE_OK
) {

107 
	`ERROR
("archive_read_next_header(): %s %d",

108 
	`¨chive_îr‹_°rög
(
a
), 1);

109 
	`±hªad_exô
((*)-1);

112 i‡(
debug
)

113 
	`TRACE
("Exåa˘ög %s", 
	`¨chive_íåy_∑th«me
(
íåy
));

115 
r
 = 
	`¨chive_wrôe_hódî
(
ext
, 
íåy
);

116 i‡(
r
 !
ARCHIVE_OK
)

117 
	`TRACE
("archive_write_header(): %s",

118 
	`¨chive_îr‹_°rög
(
ext
));

120 
	`c›y_d©a
(
a
, 
ext
);

121 
r
 = 
	`¨chive_wrôe_föish_íåy
(
ext
);

122 i‡(
r
 !
ARCHIVE_OK
) {

123 
	`ERROR
("archive_write_finish_entry(): %s",

124 
	`¨chive_îr‹_°rög
(
ext
));

125 
	`±hªad_exô
((*)-1);

131 
	`¨chive_ªad_˛o£
(
a
);

132 
	`¨chive_ªad_‰ì
(
a
);

133 
	`±hªad_exô
((*)0);

134 
	}
}

136 
ö°Æl_¨chive_image
(
img_ty≥
 *
img
,

137 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

139 
	g∑th
[255];

140 
	gfdout
;

141 
	gªt
 = 0;

142 
	gpwd
[256];

143 
exåa˘_d©a
 
	gtf
;

144 
±hªad_©å_t
 
	g©å
;

145 *
	g°©us
;

146 
	gu£_mou¡
 = (
°æí
(
img
->
devi˚
Ë&& såÀn(img->
fûesy°em
)) ? 1 : 0;

148 * 
	gDATADST_DIR
 = 
Æloˇ
(
°æí
(
gë_tmpdú
())+°æí(
DATADST_DIR_SUFFIX
)+1);

149 
•rötf
(
DATADST_DIR
, "%s%s", 
gë_tmpdú
(), 
DATADST_DIR_SUFFIX
);

151 
±hªad_©å_öô
(&
©å
);

152 
±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

154 i‡(
°æí
(
img
->
∑th
) == 0) {

155 
TRACE
("MissingÖatháttribute");

159 i‡(
	gu£_mou¡
) {

160 
	gªt
 = 
swupd©e_mou¡
(
img
->
devi˚
, 
DATADST_DIR
, img->
fûesy°em
);

161 i‡(
	gªt
) {

162 
ERROR
("Device %s with filesystem %s cannot be mounted",

163 
img
->
devi˚
, img->
fûesy°em
);

167 i‡(
¢¥ötf
(
∑th
, (path), "%s%s",

168 
DATADST_DIR
, 
img
->
∑th
) >= ()(path)) {

169 
ERROR
("P©hÅoÿl⁄g: %s%s", 
DATADST_DIR
, 
img
->
∑th
);

173 i‡(
¢¥ötf
(
∑th
, ’©h), "%s", 
img
->path) >= ()(path)) {

174 
ERROR
("P©hÅoÿl⁄g: %s", 
img
->
∑th
);

179 * 
	gFIFO
 = 
Æloˇ
(
°æí
(
gë_tmpdú
())+°æí(
FIFO_FILE_NAME
)+1);

180 
•rötf
(
FIFO
, "%s%s", 
gë_tmpdú
(), 
FIFO_FILE_NAME
);

181 
u∆ök
(
FIFO
);

182 
	gªt
 = 
mkfifo
(
FIFO
, 0666);

183 i‡(
	gªt
) {

184 
ERROR
("FIFO cannot be created inárchive handler");

187 i‡(!
gëcwd
(
pwd
, (pwd)))

193 
	gªt
 = 
chdú
(
∑th
);

194 i‡(
	gªt
) {

195 
ERROR
("Fault: chdirÇotÖossible");

196  -
	gEFAULT
;

199 
TRACE
("Installing file %s on %s, %sáttributes",

200 
img
->
‚ame
, 
∑th
,

201 
img
->
¥e£rve_©åibuãs
 ? "preserving" : "ignoring");

203 
	gtf
.
	gÊags
 = 0;

205 i‡(
	gimg
->
	g¥e£rve_©åibuãs
) {

206 
	gtf
.
	gÊags
 |
ARCHIVE_EXTRACT_OWNER
 | 
ARCHIVE_EXTRACT_PERM
 |

207 
ARCHIVE_EXTRACT_TIME
 | 
ARCHIVE_EXTRACT_ACL
 |

208 
ARCHIVE_EXTRACT_FFLAGS
 | 
ARCHIVE_EXTRACT_XATTR
;

211 
	gªt
 = 
±hªad_¸óã
(&
exåa˘_thªad
, &
©å
, 
exåa˘
, &
tf
);

212 i‡(
	gªt
) {

213 
ERROR
("Code fromÖthread_create() is %d",

214 
ªt
);

215  -
	gEFAULT
;

218 
	gfdout
 = 
›í
(
FIFO
, 
O_WRONLY
);

220 
	gªt
 = 
c›yimage
(&
fdout
, 
img
, 
NULL
);

221 i‡(
	gªt
< 0) {

222 
ERROR
("Error copyingÉxtracted file");

223  -
	gEFAULT
;

226 
˛o£
(
fdout
);

228 
	gªt
 = 
±hªad_joö
(
exåa˘_thªad
, &
°©us
);

229 i‡(
	gªt
) {

230 
ERROR
("ªtu∫ codê‰omÖthªad_joö(Ëi†%d", 
ªt
);

231  -
	gEFAULT
;

234 
u∆ök
(
FIFO
);

236 
	gªt
 = 
chdú
(
pwd
);

238 i‡(
	gªt
) {

239 
TRACE
("Fault: chdirÇotÖossible");

242 i‡(
	gu£_mou¡
) {

243 
swupd©e_umou¡
(
DATADST_DIR
);

246  
	gªt
;

249 
__©åibuã__
((
c⁄°ru˘‹
))

250 
	$¨chive_h™dÀr
()

252 
	`ªgi°î_h™dÀr
("¨chive", 
ö°Æl_¨chive_image
,

253 
IMAGE_HANDLER
 | 
FILE_HANDLER
, 
NULL
);

254 
	}
}

257 
__©åibuã__
((
c⁄°ru˘‹
))

258 
	$u¡¨_h™dÀr
()

260 
	`ªgi°î_h™dÀr
("èr", 
ö°Æl_¨chive_image
,

261 
IMAGE_HANDLER
 | 
FILE_HANDLER
, 
NULL
);

262 
	}
}

	@swupdate/handlers/boot_handler.c

8 
	~<sys/ty≥s.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<sys/°©.h
>

13 
	~<uni°d.h
>

14 
	~<î∫o.h
>

16 
	~"gíî©ed/autoc⁄f.h
"

17 
	~"swupd©e.h
"

18 
	~"swupd©e_di˘.h
"

19 
	~"h™dÀr.h
"

20 
	~"utû.h
"

21 
	~"boŸlﬂdî.h
"

23 
uboŸ_h™dÀr
();

24 
boŸ_h™dÀr
();

26 
ö°Æl_boŸ_ívú⁄mít
(
img_ty≥
 *
img
,

27 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

29 
	gªt
;

30 
	gfdout
;

31 
FILE
 *
	gÂ
;

32 *
	gbuf
;

33 
	gfûíame
[64];

34 
°©
 
	g°©buf
;

36 i‡(
¢¥ötf
(
fûíame
, (fûíame), "%s%s", 
gë_tmpdús¸ùts
(),

37 
img
->
‚ame
Ë>()(
fûíame
)) {

38 
ERROR
("P©hÅoÿl⁄g: %s%s", 
gë_tmpdús¸ùts
(),

39 
img
->
‚ame
);

43 i‡(!
	gimg
->
	gboŸlﬂdî
) {

44 
ERROR
("Internal fault,ÖleaseÑeport !");

45  -
	gEFAULT
;

47 
	gªt
 = 
°©
(
fûíame
, &
°©buf
);

48 i‡(
	gªt
) {

49 
	gfdout
 = 
›ífûeouçut
(
fûíame
);

50 
	gªt
 = 
c›yimage
(&
fdout
, 
img
, 
NULL
);

51 
˛o£
(
fdout
);

62 
	gÂ
 = 
f›í
(
fûíame
, "r");

63 i‡(!
	gÂ
)

64  -
	gEACCES
;

66 
	gbuf
 = (*)
mÆloc
(
MAX_BOOT_SCRIPT_LINE_LENGTH
);

67 i‡(!
	gbuf
) {

68 
ERROR
("Out of memory,Éxiting !");

69 
f˛o£
(
Â
);

70  -
	gENOMEM
;

73 
fgës
(
buf
, 
MAX_BOOT_SCRIPT_LINE_LENGTH
, 
Â
)) {

74 **
	g∑ú
 = 
NULL
;

75 
	g˙t
;

76 
	gÀn
 = 
°æí
(
buf
);

78 
	gÀn
 && (
	gbuf
[
Àn
 - 1] ='\n' || 
buf
 [len - 1] == '\r'))

79 
buf
[--
Àn
] = '\0';

82 i‡(
	gÀn
 =0 || 
buf
[0] == '#')

85 
	g∑ú
 = 
°rög_•lô
(
buf
, '=');

86 
	g˙t
 = 
cou¡_°rög_¨øy
((c⁄° **)
∑ú
);

88 
	g˙t
) {

90 
TRACE
("«mê%†vÆuê%s", 
∑ú
[0],Öair[1]);

91 
di˘_£t_vÆue
(
img
->
boŸlﬂdî
, 
∑ú
[0],Öair[1]);

94 
TRACE
("«mê%†Removed", 
∑ú
[0]);

95 
di˘_ªmove
(
img
->
boŸlﬂdî
, 
∑ú
[0]);

104 i‡(
˙t
 > 2) {

105 *
tmp
 = 
°rchr
(
buf
, '=');

106 i‡(
	gtmp
 && (—m∞- 
	gbuf
Ë< (
	gÀn
 - 1))) {

107 
	gtmp
++;

108 
TRACE
("«mê%†vÆuê%s", 
∑ú
[0], 
tmp
);

109 
di˘_£t_vÆue
(
img
->
boŸlﬂdî
, 
∑ú
[0], 
tmp
);

113 
‰ì
(
∑ú
);

115 
f˛o£
(
Â
);

116 
‰ì
(
buf
);

121 
__©åibuã__
((
c⁄°ru˘‹
))

122 
	$uboŸ_h™dÀr
()

124 
	`ªgi°î_h™dÀr
("uboŸ", 
ö°Æl_boŸ_ívú⁄mít
,

125 
IMAGE_HANDLER
 | 
BOOTLOADER_HANDLER
, 
NULL
);

126 
	}
}

127 
__©åibuã__
((
c⁄°ru˘‹
))

128 
	$boŸ_h™dÀr
()

130 
	`ªgi°î_h™dÀr
("boŸlﬂdî", 
ö°Æl_boŸ_ívú⁄mít
,

131 
IMAGE_HANDLER
 | 
BOOTLOADER_HANDLER
, 
NULL
);

132 
	}
}

	@swupdate/handlers/dummy_handler.c

9 
	~<°dio.h
>

10 
	~<uni°d.h
>

11 
	~<f˙é.h
>

12 
	~<°dlib.h
>

13 
	~<î∫o.h
>

15 
	~"swupd©e.h
"

16 
	~"h™dÀr.h
"

17 
	~"utû.h
"

19 
dummy_h™dÀr
();

21 
ö°Æl_nŸhög
(
img_ty≥
 *
img
,

22 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

24 
	gªt
;

25 
	gfdout
;

27 i‡(
	gimg
->
	gis_∑πôi⁄î
 | img->
	gis_s¸ùt
)

30 
	gfdout
 = 
›í
("/dev/nuŒ", 
O_WRONLY
);

31 i‡(
	gfdout
 < 0) {

32 
TRACE
("Device %s cannot be opened: %s",

33 "/dev/nuŒ", 
°ªº‹
(
î∫o
));

37 
	gªt
 = 
c›yimage
(&
fdout
, 
img
, 
NULL
);

39 
˛o£
(
fdout
);

40  
	gªt
;

43 
__©åibuã__
((
c⁄°ru˘‹
))

44 
	$dummy_h™dÀr
()

46 
	`ªgi°î_h™dÀr
("dummy", 
ö°Æl_nŸhög
,

47 
IMAGE_HANDLER
 |

48 
FILE_HANDLER
 |

49 
SCRIPT_HANDLER
 |

50 
PARTITION_HANDLER
,

51 
NULL
);

52 
	}
}

	@swupdate/handlers/flash_hamming1_handler.c

18 
	~<°dio.h
>

19 
	~<uni°d.h
>

20 
	~<f˙é.h
>

21 
	~<°dlib.h
>

22 
	~<°dboﬁ.h
>

23 
	~<î∫o.h
>

24 
	~<löux/vîsi⁄.h
>

25 
	~<sys/io˘l.h
>

27 
	~<mtd/mtd-u£r.h
>

28 
	~"swupd©e.h
"

29 
	~"h™dÀr.h
"

30 
	~"utû.h
"

31 
	~"Êash.h
"

32 
	~"¥ogªss.h
"

34 
	#PROCMTD
 "/¥oc/mtd"

	)

35 
	#LINESIZE
 80

	)

37 
	#EVEN_WHOLE
 0xff

	)

38 
	#EVEN_HALF
 0x0f

	)

39 
	#ODD_HALF
 0xf0

	)

40 
	#EVEN_FOURTH
 0x33

	)

41 
	#ODD_FOURTH
 0xcc

	)

42 
	#EVEN_EIGHTH
 0x55

	)

43 
	#ODD_EIGHTH
 0xØ

	)

44 
	#ODD_WHOLE
 0x00

	)

46 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,1,0)

47 
	#MTD_FILE_MODE_RAW
 
MTD_MODE_RAW


	)

50 
	#_L1
(
n
Ë((“Ë< 2Ë? 0 : 1)

	)

51 
	#_L2
(
n
Ë((“Ë< 1<<2Ë? 
	`_L1
“Ë: 2 + _L1(“)>>2))

	)

52 
	#_L4
(
n
Ë((“Ë< 1<<4Ë? 
	`_L2
“Ë: 4 + _L2(“)>>4))

	)

53 
	#_L8
(
n
Ë((“Ë< 1<<8Ë? 
	`_L4
“Ë: 8 + _L4(“)>>8))

	)

54 
	#LOG2
(
n
Ë((“Ë< 1<<16Ë? 
	`_L8
“Ë: 16 + _L8(“)>>16))

	)

56 
Êash_1bô_hammög_h™dÀr
();

58 
	$ˇlc_bôwi£_∑rôy
(
vÆ
, 
mask
)

60 
ªsu…
 = 0, 
byã_mask
;

61 
i
;

63 
byã_mask
 = 
mask
;

65 
i
 = 0; i < 8; i++) {

66 i‡((
byã_mask
 & 0x1) != 0)

67 
ªsu…
 ^(
vÆ
 & 1);

68 
byã_mask
 >>= 1;

69 
vÆ
 >>= 1;

71  
ªsu…
 & 0x1;

72 
	}
}

74 
	$ˇlc_row_∑rôy_bôs
(
byã_∑rôõs
[],

75 
eví
, 
chunk_size
,

76 
£˘‹_size
)

78 
ªsu…
 = 0;

79 
i
, 
j
;

81 
i
 = (
eví
 ? 0 : 
chunk_size
);

82 
i
 < 
£˘‹_size
;

83 
i
 +(2 * 
chunk_size
)) {

84 
j
 = 0; j < 
chunk_size
; j++)

85 
ªsu…
 ^
byã_∑rôõs
[
i
 + 
j
];

87  
ªsu…
 & 0x1;

88 
	}
}

94 
	$«nd_ˇlcuœã_ecc
(*
buf
, 
£˘‹_size
)

96 
odd_ªsu…
 = 0, 
eví_ªsu…
 = 0;

97 
bô_∑rôõs
 = 0;

98 
i
;

99 
vÆ
;

100 *
byã_∑rôõs
 = 
	`mÆloc
(
£˘‹_size
);

102 i‡(!
byã_∑rôõs
)

103  -
ENOMEM
;

105 
i
 = 0; i < 
£˘‹_size
; i++)

106 
bô_∑rôõs
 ^
buf
[
i
];

108 
eví_ªsu…
 |((
	`ˇlc_bôwi£_∑rôy
(
bô_∑rôõs
, 
EVEN_HALF
) << 2) |

109 (
	`ˇlc_bôwi£_∑rôy
(
bô_∑rôõs
, 
EVEN_FOURTH
) << 1) |

110 (
	`ˇlc_bôwi£_∑rôy
(
bô_∑rôõs
, 
EVEN_EIGHTH
) << 0));

112 
odd_ªsu…
 |((
	`ˇlc_bôwi£_∑rôy
(
bô_∑rôõs
, 
ODD_HALF
) << 2) |

113 (
	`ˇlc_bôwi£_∑rôy
(
bô_∑rôõs
, 
ODD_FOURTH
) << 1) |

114 (
	`ˇlc_bôwi£_∑rôy
(
bô_∑rôõs
, 
ODD_EIGHTH
) << 0));

116 
i
 = 0; i < 
£˘‹_size
; i++)

117 
byã_∑rôõs
[
i
] = 
	`ˇlc_bôwi£_∑rôy
(
buf
[i], 
EVEN_WHOLE
);

119 
i
 = 0; i < 
	`LOG2
(
£˘‹_size
); i++) {

120 
vÆ
 = 0;

121 
vÆ
 = 
	`ˇlc_row_∑rôy_bôs
(
byã_∑rôõs
, 1, 1 << 
i
, 
£˘‹_size
);

122 
eví_ªsu…
 |(
vÆ
 << (3 + 
i
));

124 
vÆ
 = 
	`ˇlc_row_∑rôy_bôs
(
byã_∑rôõs
, 0, 1 << 
i
, 
£˘‹_size
);

125 
odd_ªsu…
 |(
vÆ
 << (3 + 
i
));

128 
	`‰ì
(
byã_∑rôõs
);

130  (
odd_ªsu…
 << 16Ë| 
eví_ªsu…
;

131 
	}
}

133 
	$wrôe_ecc
(
ofd
, *
ecc
, 
°¨t
)

135 
mtd_oob_buf
 
oob
;

136 
oobbuf
[64];

137 
i
;

139 
	`mem£t
(
oobbuf
, 0xff, (oobbuf));

141 
i
 = 0; i < 12; i++)

142 
oobbuf
[
i
 + 2] = 
ecc
[i];

144 
oob
.
°¨t
 = start;

145 
oob
.
±r
 = 
oobbuf
;

146 
oob
.
Àngth
 = 64;

148  
	`io˘l
(
ofd
, 
MEMWRITEOOB
, &
oob
) != 0;

149 
	}
}

151 
	$ecc_£˘‹
(*
£˘‹
, *
code
,

152 
£˘‹_size
)

154 *
p
;

155 
ecc
 = 0;

157 
ecc
 = 
	`«nd_ˇlcuœã_ecc
(
£˘‹
, 
£˘‹_size
);

159 
p
 = (*Ë&
ecc
;

161 
code
[0] = 
p
[0];

162 
code
[1] = 
p
[2];

163 
code
[2] = 
p
[1] | (p[3] << 4);

164 
	}
}

166 
	$Êash_wrôe_«nd_hammög1
(
mtdnum
, 
img_ty≥
 *
img
)

168 
Êash_des¸ùti⁄
 *
Êash
 = 
	`gë_Êash_öfo
();

169 
mtd_dev_öfo
 *
mtd
 = &
Êash
->
mtd_öfo
[
mtdnum
].mtd;

170 
fd
 = 
img
->
fdö
;

171 
ofd
;

172 *
∑ge
;

173 
code
[3];

174 
ecc
[12];

175 
˙t
;

176 
i
, 
j
;

177 
Àn
;

178 
imgÀn
 = 0;

179 
∑ge_idx
 = 0;

180 
ªt
 = 
EXIT_FAILURE
;

181 
mtd_devi˚
[
LINESIZE
];

182 
boﬁ
 
øwN™d
 = 
	`isN™d
(
Êash
, 
mtdnum
);

187 i‡(!
img
->
size
)

190 
	`¢¥ötf
(
mtd_devi˚
, (mtd_devi˚), "/dev/mtd%d", 
mtdnum
);

195 
Àn
 = 
mtd
->
mö_io_size
;

196 i‡(!
øwN™d
)

197 
Àn
 *= 2;

199 
imgÀn
 = 
img
->
size
;

201 
∑ge
 = (*Ë
	`mÆloc
(
Àn
);

202 i‡(
∑ge
 =
NULL
) {

203 
	`ERROR
("Error opening input file");

204 
out
;

207 
ofd
 = 
	`›í
(
mtd_devi˚
, 
O_CREAT
 | 
O_RDWR
, 
S_IRWXU
 | 
S_IRWXG
);

208 i‡(
ofd
 < 0) {

209 
	`ERROR
("Error opening output file");

210 
out_öput
;

213 i‡(
øwN™d
)

215 i‡(
	`io˘l
(
ofd
, 
MTDFILEMODE
, (*Ë
MTD_FILE_MODE_RAW
)) {

216 
	`ERROR
("RAW modeáccess");

217 
out_öput
;

220 
imgÀn
 > 0) {

221 
˙t
 = 
	`ªad
(
fd
, 
∑ge
, 
	`mö
(
mtd
->
mö_io_size
, 
imgÀn
));

222 i‡(
˙t
 < 0)

226 i‡(
˙t
 < 
mtd
->
mö_io_size
)

227 
	`mem£t
(
∑ge
 + 
˙t
, 0xff, 
mtd
->
mö_io_size
 - cnt);

229 i‡(
øwN™d
)

230 
i
 = 0; i < 
mtd
->
mö_io_size
 / mtd->
sub∑ge_size
; i++) {

232 
	`ecc_£˘‹
(
∑ge
 + 
i
 * 
mtd
->
sub∑ge_size
, 
code
, mtd->subpage_size);

233 
j
 = 0; j < 3; j++)

234 
ecc
[
i
 * 3 + 
j
] = 
code
[j];

240 
	`mem˝y
(
∑ge
 + 
mtd
->
mö_io_size
,Öage, mtd->min_io_size);

242 i‡(
	`wrôe
(
ofd
, 
∑ge
, 
Àn
) !=Üen) {

243 
	`≥º‹
("Error writingÅo output file");

244 
out_ouçut
;

247 i‡(
øwN™d
)

248 i‡(
	`wrôe_ecc
(
ofd
, 
ecc
, 
∑ge_idx
 * 
mtd
->
mö_io_size
)) {

249 
	`≥º‹
("Error writing ECC in OOBárea");

250 
out_ouçut
;

252 
∑ge_idx
++;

254 
imgÀn
 -
˙t
;

260 
	`swupd©e_¥ogªss_upd©e
((
img
->
size
 - 
imgÀn
) * 100 / img->size);

263 i‡(
˙t
 < 0) {

264 
	`ERROR
("File I/OÉrror on input file");

265 
out_ouçut
;

268 
	`TRACE
("Suc˚ssfuŒy wrôã¿%†tÿmtd %d", 
img
->
‚ame
, 
mtdnum
);

269 
ªt
 = 
EXIT_SUCCESS
;

271 
out_ouçut
:

272 
	`˛o£
(
ofd
);

273 
out_öput
:

274 
	`‰ì
(
∑ge
);

275 
out
:

276  
ªt
;

277 
	}
}

279 
ö°Æl_Êash_hammög_image
(
img_ty≥
 *
img
,

280 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

282 
	gmtdnum
;

284 i‡(
°æí
(
img
->
∑th
))

285 
	gmtdnum
 = 
gë_mtd_‰om_«me
(
img
->
∑th
);

287 
	gmtdnum
 = 
gë_mtd_‰om_devi˚
(
img
->
devi˚
);

288 i‡(
	gmtdnum
 < 0) {

289 
ERROR
("Wrong MTD device in description: %s",

290 
°æí
(
img
->
∑th
Ë? img->∑th : img->
devi˚
);

294 if(
Êash_îa£
(
mtdnum
)) {

295 
ERROR
("I cannotÉrasing %s",

296 
img
->
devi˚
);

299 
TRACE
("C›yög %†ötÿ/dev/mtd%d", 
img
->
‚ame
, 
mtdnum
);

300 i‡(
Êash_wrôe_«nd_hammög1
(
mtdnum
, 
img
)) {

301 
ERROR
("I cannot copy %s into %sÖartition",

302 
img
->
‚ame
,

303 
img
->
devi˚
);

310 
__©åibuã__
((
c⁄°ru˘‹
))

311 
	$Êash_1bô_hammög_h™dÀr
()

313 
	`ªgi°î_h™dÀr
("Êash-hammög1", 
ö°Æl_Êash_hammög_image
,

314 
IMAGE_HANDLER
 | 
FILE_HANDLER
, (*)1);

315 
	}
}

	@swupdate/handlers/flash_handler.c

18 
	~<°dio.h
>

19 
	~<uni°d.h
>

20 
	~<f˙é.h
>

21 
	~<°dlib.h
>

22 
	~<°dboﬁ.h
>

23 
	~<î∫o.h
>

24 
	~<löux/vîsi⁄.h
>

25 
	~<sys/io˘l.h
>

27 
	~<mtd/mtd-u£r.h
>

28 
	~"swupd©e.h
"

29 
	~"h™dÀr.h
"

30 
	~"utû.h
"

31 
	~"Êash.h
"

32 
	~"¥ogªss.h
"

34 
	#PROCMTD
 "/¥oc/mtd"

	)

35 
	#LINESIZE
 80

	)

37 
Êash_h™dÀr
();

40 
ölöe
 
	$buf„r_check_∑âîn
(*
buf„r
, 
size_t
 
size
,

41 
∑âîn
)

44 i‡(!
buf„r
 || (
size
 == 0))

48 i‡(*
buf„r
 !
∑âîn
)

52 i‡(
size
 == 1)

61  !
	`memcmp
(
buf„r
, buf„∏+ 1, 
size
 - 1);

62 
	}
}

73 
	$îa£_buf„r
(*
buf„r
, 
size_t
 
size
)

75 c⁄° 
uöt8_t
 
kEø£Byã
 = 0xff;

77 i‡(
buf„r
 !
NULL
 && 
size
 > 0)

78 
	`mem£t
(
buf„r
, 
kEø£Byã
, 
size
);

79 
	}
}

81 
	$Êash_wrôe_«nd
(
mtdnum
, 
img_ty≥
 *
img
)

83 
mtd_devi˚
[
LINESIZE
];

84 
Êash_des¸ùti⁄
 *
Êash
 = 
	`gë_Êash_öfo
();

85 
mtd_dev_öfo
 *
mtd
 = &
Êash
->
mtd_öfo
[
mtdnum
].mtd;

86 
∑gñí
;

87 
boﬁ
 
badîa£block
 = 
Ál£
;

88 
imgÀn
 = 0;

89 
block°¨t
 = -1;

90 
offs
;

91 *
fûebuf
 = 
NULL
;

92 
size_t
 
fûebuf_max
 = 0;

93 
size_t
 
fûebuf_Àn
 = 0;

94 
mtdoff£t
 = 0;

95 
ifd
 = 
img
->
fdö
;

96 
fd
 = -1;

97 
boﬁ
 
Áûed
 = 
åue
;

98 
ªt
;

99 *
wrôebuf
 = 
NULL
;

104 i‡(!
img
->
size
)

107 
∑gñí
 = 
mtd
->
mö_io_size
;

108 
imgÀn
 = 
img
->
size
;

109 
	`¢¥ötf
(
mtd_devi˚
, (mtd_devi˚), "/dev/mtd%d", 
mtdnum
);

111 i‡((
imgÀn
 / 
∑gñí
Ë* 
mtd
->
mö_io_size
 > mtd->
size
) {

112 
	`ERROR
("Imagê%†d€†nŸ fô i¡ÿmtd%d", 
img
->
‚ame
, 
mtdnum
);

113  -
EIO
;

117 i‡(
img
->
ö°Æl_dúe˘ly
) {

118 
	`ERROR
("Raw NANDÇot streamable");

119  -
EINVAL
;

122 
fûebuf_max
 = 
mtd
->
eb_size
 / mtd->
mö_io_size
 * 
∑gñí
;

123 
fûebuf
 = 
	`ˇŒoc
(1, 
fûebuf_max
);

124 
	`îa£_buf„r
(
fûebuf
, 
fûebuf_max
);

126 i‡((
fd
 = 
	`›í
(
mtd_devi˚
, 
O_RDWR
)) < 0) {

127 
	`ERROR
–"%s: %s: %s", 
__func__
, 
mtd_devi˚
, 
	`°ªº‹
(
î∫o
));

128  -
ENODEV
;

138 (
imgÀn
 > 0 || 
wrôebuf
 < 
fûebuf
 + 
fûebuf_Àn
)

139 && 
mtdoff£t
 < 
mtd
->
size
) {

147 
block°¨t
 !(
mtdoff£t
 & (~
mtd
->
eb_size
 + 1))) {

148 
block°¨t
 = 
mtdoff£t
 & (~
mtd
->
eb_size
 + 1);

149 
offs
 = 
block°¨t
;

155 i‡(
wrôebuf
 !
fûebuf
) {

156 
	`îa£_buf„r
(
fûebuf
, 
fûebuf_Àn
);

157 
fûebuf_Àn
 = 0;

158 
wrôebuf
 = 
fûebuf
;

161 
badîa£block
 = 
Ál£
;

164 
ªt
 = 
	`mtd_is_bad
(
mtd
, 
fd
, 
offs
 / mtd->
eb_size
);

165 i‡(
ªt
 < 0) {

166 
	`ERROR
("mtd%d: MTD gë bad block faûed", 
mtdnum
);

167 
˛o£Æl
;

168 } i‡(
ªt
 == 1) {

169 
badîa£block
 = 
åue
;

172 i‡(
badîa£block
) {

173 
mtdoff£t
 = 
block°¨t
 + 
mtd
->
eb_size
;

175 i‡(
mtdoff£t
 > 
mtd
->
size
) {

176 
	`ERROR
("too many bad blocks, cannot completeÑequest");

177 
˛o£Æl
;

181 
offs
 +
mtd
->
eb_size
;

182 } 
offs
 < 
block°¨t
 + 
mtd
->
eb_size
);

186 i‡(
wrôebuf
 + 
mtd
->
mö_io_size
 > 
fûebuf
 + 
fûebuf_Àn
) {

187 
size_t
 
ªadÀn
 = 
mtd
->
mö_io_size
;

188 
size_t
 
Æªadyªad
 = (
fûebuf
 + 
fûebuf_Àn
Ë- 
wrôebuf
;

189 
size_t
 
töy˙t
 = 
Æªadyªad
;

190 
ssize_t
 
˙t
 = 0;

192 
töy˙t
 < 
ªadÀn
) {

193 
˙t
 = 
	`ªad
(
ifd
, 
wrôebuf
 + 
töy˙t
, 
ªadÀn
 -Åinycnt);

194 i‡(
˙t
 == 0) {

196 } i‡(
˙t
 < 0) {

197 
	`ERROR
("File I/OÉrror on input");

198 
˛o£Æl
;

200 
töy˙t
 +
˙t
;

204 i‡(
töy˙t
 == 0) {

205 
imgÀn
 = 0;

210 i‡(
töy˙t
 < 
ªadÀn
) {

211 
	`îa£_buf„r
(
wrôebuf
 + 
töy˙t
, 
ªadÀn
 -Åinycnt);

214 
fûebuf_Àn
 +
ªadÀn
 - 
Æªadyªad
;

216 
imgÀn
 -
töy˙t
 - 
Æªadyªad
;

220 
ªt
 =0;

221 i‡(!
	`buf„r_check_∑âîn
(
wrôebuf
, 
mtd
->
mö_io_size
, 0xff)) {

223 
ªt
 = 
	`mtd_wrôe
(
Êash
->
libmtd
, 
mtd
, 
fd
, 
mtdoff£t
 / mtd->
eb_size
,

224 
mtdoff£t
 % 
mtd
->
eb_size
,

225 
wrôebuf
,

226 
mtd
->
mö_io_size
,

227 
NULL
,

229 
MTD_OPS_PLACE_OOB
);

231 i‡(
ªt
) {

232 
i
;

233 i‡(
î∫o
 !
EIO
) {

234 
	`ERROR
("mtd%d: MTD wrôêÁûuª", 
mtdnum
);

235 
˛o£Æl
;

239 
wrôebuf
 = 
fûebuf
;

241 
i
 = 
block°¨t
; i < block°¨à+ 
mtd
->
eb_size
; i += mtd->eb_size) {

242 i‡(
	`mtd_îa£
(
Êash
->
libmtd
, 
mtd
, 
fd
, 
i
 / mtd->
eb_size
)) {

243 
î∫o_tmp
 = 
î∫o
;

244 
	`TRACE
("mtd%d: MTD Eø£ faûuª", 
mtdnum
);

245 i‡(
î∫o_tmp
 !
EIO
)

246 
˛o£Æl
;

250 
	`TRACE
("Marking blockát %08llx bad",

251 
mtdoff£t
 & (~
mtd
->
eb_size
 + 1));

252 i‡(
	`mtd_m¨k_bad
(
mtd
, 
fd
, 
mtdoff£t
 / mtd->
eb_size
)) {

253 
	`ERROR
("mtd%d: MTD M¨k bad block faûuª", 
mtdnum
);

254 
˛o£Æl
;

256 
mtdoff£t
 = 
block°¨t
 + 
mtd
->
eb_size
;

265 
	`swupd©e_¥ogªss_upd©e
((
img
->
size
 - 
imgÀn
) * 100 / img->size);

267 
mtdoff£t
 +
mtd
->
mö_io_size
;

268 
wrôebuf
 +
∑gñí
;

270 
Áûed
 = 
Ál£
;

272 
˛o£Æl
:

273 
	`‰ì
(
fûebuf
);

274 
	`˛o£
(
fd
);

276 i‡(
Áûed
) {

277 
	`ERROR
("Installing image %s into mtd%d failed",

278 
img
->
‚ame
,

279 
mtdnum
);

284 
	}
}

286 
	$Êash_wrôe_n‹
(
mtdnum
, 
img_ty≥
 *
img
)

288 
fdout
;

289 
mtd_devi˚
[
LINESIZE
];

290 
ªt
;

291 
Êash_des¸ùti⁄
 *
Êash
 = 
	`gë_Êash_öfo
();

293 i‡(!
	`mtd_dev_¥e£¡
(
Êash
->
libmtd
, 
mtdnum
)) {

294 
	`ERROR
("MTD %d d€†nŸÉxi°", 
mtdnum
);

295  -
ENODEV
;

298 
	`¢¥ötf
(
mtd_devi˚
, (mtd_devi˚), "/dev/mtd%d", 
mtdnum
);

299 i‡((
fdout
 = 
	`›í
(
mtd_devi˚
, 
O_RDWR
)) < 0) {

300 
	`ERROR
–"%s: %s: %s", 
__func__
, 
mtd_devi˚
, 
	`°ªº‹
(
î∫o
));

304 
ªt
 = 
	`c›yimage
(&
fdout
, 
img
, 
NULL
);

307 i‡(
ªt
 < 0) {

308 
	`ERROR
("Faûuª in°Ælög i¡o: %s", 
img
->
devi˚
);

311 
	`˛o£
(
fdout
);

313 
	}
}

315 
	$Êash_wrôe_image
(
mtdnum
, 
img_ty≥
 *
img
)

317 
Êash_des¸ùti⁄
 *
Êash
 = 
	`gë_Êash_öfo
();

319 i‡(!
	`isN™d
(
Êash
, 
mtdnum
))

320  
	`Êash_wrôe_n‹
(
mtdnum
, 
img
);

322  
	`Êash_wrôe_«nd
(
mtdnum
, 
img
);

323 
	}
}

325 
ö°Æl_Êash_image
(
img_ty≥
 *
img
,

326 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

328 
	gmtdnum
;

330 i‡(
°æí
(
img
->
∑th
))

331 
	gmtdnum
 = 
gë_mtd_‰om_«me
(
img
->
∑th
);

333 
	gmtdnum
 = 
gë_mtd_‰om_devi˚
(
img
->
devi˚
);

334 i‡(
	gmtdnum
 < 0) {

335 
ERROR
("Wrong MTD device in description: %s",

336 
°æí
(
img
->
∑th
Ë? img->∑th : img->
devi˚
);

340 if(
Êash_îa£
(
mtdnum
)) {

341 
ERROR
("I cannotÉrasing %s",

342 
img
->
devi˚
);

345 
TRACE
("C›yög %†ötÿ/dev/mtd%d", 
img
->
‚ame
, 
mtdnum
);

346 i‡(
Êash_wrôe_image
(
mtdnum
, 
img
)) {

347 
ERROR
("I cannot copy %s into %sÖartition",

348 
img
->
‚ame
,

349 
img
->
devi˚
);

356 
__©åibuã__
((
c⁄°ru˘‹
))

357 
	$Êash_h™dÀr
()

359 
	`ªgi°î_h™dÀr
("Êash", 
ö°Æl_Êash_image
,

360 
IMAGE_HANDLER
 | 
FILE_HANDLER
, 
NULL
);

361 
	}
}

	@swupdate/handlers/lua_scripthandler.c

9 
	~<sys/ty≥s.h
>

10 
	~<°dio.h
>

11 
	~<sys/°©.h
>

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

14 
	~<°dlib.h
>

15 
	~<î∫o.h
>

16 
	~<°rög.h
>

18 
	~"swupd©e.h
"

19 
	~"h™dÀr.h
"

20 
	~"lua.h
"

21 
	~"œuxlib.h
"

22 
	~"luÆib.h
"

23 
	~"utû.h
"

24 
	~"lua_utû.h
"

26 
lua_h™dÀr
();

28 
	$°¨t_lua_s¸ùt
(
img_ty≥
 *
img
, *
d©a
)

30 
ªt
;

31 c⁄° *
‚«me
;

32 
s¸ùt_‚
 
s¸ùt‚
;

34 c⁄° * 
tmp
 = 
	`gë_tmpdús¸ùts
();

35 
fûíame
[
MAX_IMAGE_FNAME
 + 
	`°æí
(
tmp
) + 2];

37 i‡(!
d©a
)

40 
s¸ùt‚
 = *(
s¸ùt_‚
 *)
d©a
;

42 
s¸ùt‚
) {

43 
PREINSTALL
:

44 
‚«me
="preinst";

46 
POSTINSTALL
:

47 
‚«me
="postinst";

54 
	`¢¥ötf
(
fûíame
, (filename),

55 "%s%s", 
tmp
, 
img
->
‚ame
);

56 
	`TRACE
("CÆlög Lu®%s", 
fûíame
);

58 
ªt
 = 
	`run_lua_s¸ùt
(
fûíame
, 
‚«me
, filename);

60  
ªt
;

62 
	}
}

64 
__©åibuã__
((
c⁄°ru˘‹
))

65 
	$lua_h™dÀr
()

67 
	`ªgi°î_h™dÀr
("lua", 
°¨t_lua_s¸ùt
, 
SCRIPT_HANDLER
, 
NULL
);

68 
	}
}

	@swupdate/handlers/raw_handler.c

9 
	~<°dio.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/ty≥s.h
>

13 
	~<uni°d.h
>

14 
	~<f˙é.h
>

15 
	~<°dlib.h
>

16 
	~<î∫o.h
>

17 
	~<libgí.h
>

19 
	~"swupd©e.h
"

20 
	~"h™dÀr.h
"

21 
	~"utû.h
"

23 
øw_h™dÀr
();

24 
øw_fûec›y_h™dÀr
();

26 
ö°Æl_øw_image
(
img_ty≥
 *
img
,

27 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

29 
	gªt
;

30 
	gfdout
;

32 
	gfdout
 = 
›í
(
img
->
devi˚
, 
O_RDWR
);

33 i‡(
	gfdout
 < 0) {

34 
TRACE
("Device %s cannot be opened: %s",

35 
img
->
devi˚
, 
°ªº‹
(
î∫o
));

38 #i‡
deföed
(
__FªeBSD__
)

39 
	gªt
 = 
c›yimage
(&
fdout
, 
img
, 
c›y_wrôe_∑dded
);

41 
	gªt
 = 
c›yimage
(&
fdout
, 
img
, 
NULL
);

44 
˛o£
(
fdout
);

45  
	gªt
;

48 
ö°Æl_øw_fûe
(
img_ty≥
 *
img
,

49 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

51 
	g∑th
[255];

52 
	gfdout
;

53 
	gªt
 = 0;

54 
	gu£_mou¡
 = (
°æí
(
img
->
devi˚
Ë&& såÀn(img->
fûesy°em
)) ? 1 : 0;

55 * 
	gDATADST_DIR
 = 
Æloˇ
(
°æí
(
gë_tmpdú
())+°æí(
DATADST_DIR_SUFFIX
)+1);

56 
•rötf
(
DATADST_DIR
, "%s%s", 
gë_tmpdú
(), 
DATADST_DIR_SUFFIX
);

57 * 
	gmake_∑th
;

59 i‡(
°æí
(
img
->
∑th
) == 0) {

60 
ERROR
("MissingÖatháttribute");

64 i‡(
	gu£_mou¡
) {

65 
	gªt
 = 
swupd©e_mou¡
(
img
->
devi˚
, 
DATADST_DIR
, img->
fûesy°em
);

66 i‡(
	gªt
) {

67 
ERROR
("Device %s with filesystem %s cannot be mounted",

68 
img
->
devi˚
, img->
fûesy°em
);

72 i‡(
¢¥ötf
(
∑th
, (path), "%s%s",

73 
DATADST_DIR
, 
img
->
∑th
) >= ()(path)) {

74 
ERROR
("P©hÅoÿl⁄g: %s%s", 
DATADST_DIR
, 
img
->
∑th
);

78 i‡(
¢¥ötf
(
∑th
, ’©h), "%s", 
img
->path) >= ()(path)) {

79 
ERROR
("P©hÅoÿl⁄g: %s", 
img
->
∑th
);

84 
TRACE
("Installing file %s on %s",

85 
img
->
‚ame
, 
∑th
);

87 
	gmake_∑th
 = 
di˘_gë_vÆue
(&
img
->
¥›îtõs
, "create-destination");

89 i‡(
	gmake_∑th
 !
NULL
 && 
°rcmp
(
make_∑th
, "true") == 0) {

90 
TRACE
("Cª©ögÖ©h %s", 
∑th
);

91 
	gfdout
 = 
mk∑th
(
dú«me
(
°rdu∑
(
∑th
)), 0755);

92 i‡(
	gfdout
 < 0) {

93 
ERROR
("I c™nŸ cª©ê∑th %s: %s", 
∑th
, 
°ªº‹
(
î∫o
));

98 
	gfdout
 = 
›ífûeouçut
(
∑th
);

99 
	gªt
 = 
c›yimage
(&
fdout
, 
img
, 
NULL
);

100 i‡(
	gªt
< 0) {

101 
ERROR
("Error copyingÉxtracted file");

103 
˛o£
(
fdout
);

105 i‡(
	gu£_mou¡
) {

106 
swupd©e_umou¡
(
DATADST_DIR
);

109  
	gªt
;

112 
__©åibuã__
((
c⁄°ru˘‹
))

113 
	$øw_h™dÀr
()

115 
	`ªgi°î_h™dÀr
("øw", 
ö°Æl_øw_image
,

116 
IMAGE_HANDLER
, 
NULL
);

117 
	}
}

119 
__©åibuã__
((
c⁄°ru˘‹
))

120 
	$øw_fûec›y_h™dÀr
()

122 
	`ªgi°î_h™dÀr
("øwfûe", 
ö°Æl_øw_fûe
,

123 
FILE_HANDLER
, 
NULL
);

124 
	}
}

	@swupdate/handlers/rdiff_handler.c

8 
	~<°dio.h
>

9 
	~<uni°d.h
>

10 
	~<°dlib.h
>

11 
	~<libgí.h
>

12 
	~<î∫o.h
>

13 
	~<sys/°©.h
>

14 
	~<°dboﬁ.h
>

15 
	~<librsync.h
>

16 #i‡
deföed
(
__löux__
)

17 
	~<sys/£ndfûe.h
>

19 #i‡
deföed
(
__FªeBSD__
)

20 
	~<sys/∑øm.h
>

22 
	~"swupd©e.h
"

23 
	~"h™dÀr.h
"

24 
	~"utû.h
"

27 
	#RDIFF_BUFFER_SIZE
 64 * 1024

	)

29 
	#TEST_OR_FAIL
(
ex¥
, 
Áûªt
) \

30 i‡(
ex¥
) { \

32 
	`ERROR
("Assertion violated: %s.", #expr); \

33  
Áûªt
; \

34 }

	)

36 
rdiff_fûe_h™dÀr
();

37 
rdiff_image_h™dÀr
();

39 
	srdiff_t


41 
rs_job_t
 *
	mjob
;

42 
rs_buf„rs_t
 
	mbuf„rs
;

44 
FILE
 *
	mde°_fûe
;

45 
FILE
 *
	mba£_fûe
;

47 *
	möbuf
;

48 *
	moutbuf
;

50 
	m˝io_öput_Àn
;

52 
uöt8_t
 
	mty≥
;

55 
	$rdiff_log
(
rs_logÀvñ
 
Àvñ
, c⁄° *
msg
)

57 
logÀvñm≠
[] =

59 [
RS_LOG_EMERG
] = 
ERRORLEVEL
,

60 [
RS_LOG_ALERT
] = 
ERRORLEVEL
,

61 [
RS_LOG_CRIT
] = 
ERRORLEVEL
,

62 [
RS_LOG_ERR
] = 
ERRORLEVEL
,

63 [
RS_LOG_WARNING
] = 
WARNLEVEL
,

64 [
RS_LOG_NOTICE
] = 
INFOLEVEL
,

65 [
RS_LOG_INFO
] = 
INFOLEVEL
,

66 [
RS_LOG_DEBUG
] = 
TRACELEVEL


68 *
	`°rch∫ul
(
msg
, '\n') = '\0';

69 
	`swupd©e_nŸify
(
RUN
, "%s", 
logÀvñm≠
[
Àvñ
], 
msg
);

70 
	}
}

72 
rs_ªsu…
 
	$ba£_fûe_ªad_cb
(*
Â
, 
rs_l⁄g_t
 
pos
, 
size_t
 *
Àn
, **
buf
)

74 
FILE
 *
f
 = (FILE *)
Â
;

76 i‡(
	`f£ek
(
f
, 
pos
, 
SEEK_SET
) != 0) {

77 
	`ERROR
("Eº‹ sìkögÑdif‡ba£ fûe: %s", 
	`°ªº‹
(
î∫o
));

78  
RS_IO_ERROR
;

81 
ªt
 = 
	`‰ód
(*
buf
, 1, *
Àn
, 
f
);

82 i‡(
ªt
 == -1) {

83 
	`ERROR
("Eº‹ÑódögÑdif‡ba£ fûe: %s", 
	`°ªº‹
(
î∫o
));

84  
RS_IO_ERROR
;

86 i‡(
ªt
 == 0) {

87 
	`ERROR
("Unexpected EOF onÑdiff base file.");

88  
RS_INPUT_ENDED
;

90 *
Àn
 = 
ªt
;

92  
RS_DONE
;

93 
	}
}

95 
rs_ªsu…
 
	$fûl_öbuf„r
(
rdiff_t
 *
rdiff_°©e
, c⁄° *
buf
, 
Àn
)

97 
rs_buf„rs_t
 *
buf„rs
 = &
rdiff_°©e
->buffers;

99 i‡(
buf„rs
->
eof_ö
 =
åue
) {

100 
	`TRACE
("EOF onÑdiff chunk input,ÇotÑeading more data.");

101  
RS_DONE
;

104 i‡(
buf„rs
->
avaû_ö
 == 0) {

106 
	`TEST_OR_FAIL
(
Àn
 <
RDIFF_BUFFER_SIZE
, 
RS_IO_ERROR
);

107 
buf„rs
->
√xt_ö
 = 
rdiff_°©e
->
öbuf
;

108 
buf„rs
->
avaû_ö
 = 
Àn
;

109 ()
	`mem˝y
(
rdiff_°©e
->
öbuf
, 
buf
, 
Àn
);

112 *
èrgë
 = 
buf„rs
->
√xt_ö
 + buf„rs->
avaû_ö
;

113 
buf„rs
->
avaû_ö
 +
Àn
;

114 
	`TEST_OR_FAIL
(
èrgë
 - 
buf„rs
->
√xt_ö
 <
RDIFF_BUFFER_SIZE
, 
RS_IO_ERROR
);

115 
	`TEST_OR_FAIL
(
buf„rs
->
√xt_ö
 >
rdiff_°©e
->
öbuf
, 
RS_IO_ERROR
);

116 
	`TEST_OR_FAIL
(
buf„rs
->
√xt_ö
 <
rdiff_°©e
->
öbuf
 + 
RDIFF_BUFFER_SIZE
, 
RS_IO_ERROR
);

117 ()
	`mem˝y
(
èrgë
, 
buf
, 
Àn
);

119 
rdiff_°©e
->
˝io_öput_Àn
 -
Àn
;

120 
buf„rs
->
eof_ö
 = 
rdiff_°©e
->
˝io_öput_Àn
 =0 ? 
åue
 : 
Ál£
;

121  
RS_DONE
;

122 
	}
}

124 
rs_ªsu…
 
	$døö_outbuf„r
(
rdiff_t
 *
rdiff_°©e
)

126 
rs_buf„rs_t
 *
buf„rs
 = &
rdiff_°©e
->buffers;

128 
Àn
 = 
buf„rs
->
√xt_out
 - 
rdiff_°©e
->
outbuf
;

129 
	`TEST_OR_FAIL
(
Àn
 <
RDIFF_BUFFER_SIZE
, 
RS_IO_ERROR
);

130 
	`TEST_OR_FAIL
(
buf„rs
->
√xt_out
 >
rdiff_°©e
->
outbuf
, 
RS_IO_ERROR
);

131 
	`TEST_OR_FAIL
(
buf„rs
->
√xt_out
 <
rdiff_°©e
->
outbuf
 + 
RDIFF_BUFFER_SIZE
, 
RS_IO_ERROR
);

133 
wrôeimage
 
de°fûedøö
 = 
c›y_wrôe
;

134 #i‡
	`deföed
(
__FªeBSD__
)

135 i‡(
rdiff_°©e
->
ty≥
 =
IMAGE_HANDLER
) {

136 
de°fûedøö
 = 
c›y_wrôe_∑dded
;

137 i‡(
Àn
 % 512 != 0) {

138 
	`WARN
("Output data isÇot 512 byteáligned!");

142 i‡(
Àn
 > 0) {

143 
buf„rs
->
√xt_out
 = 
rdiff_°©e
->
outbuf
;

144 
buf„rs
->
avaû_out
 = 
RDIFF_BUFFER_SIZE
;

145 
de°_fûe_fd
 = 
	`fûío
(
rdiff_°©e
->
de°_fûe
);

146 i‡(
	`de°fûedøö
(&
de°_fûe_fd
, 
buf„rs
->
√xt_out
, 
Àn
) != 0) {

147  
RS_IO_ERROR
;

150 
	`DEBUG
("NoÑdiff chunk dataÅo drain.");

152  
RS_DONE
;

153 
	}
}

155 
	$≠∂y_rdiff_chunk_cb
(*
out
, c⁄° *
buf
, 
Àn
)

157 
rdiff_t
 *
rdiff_°©e
 = (rdiff_à*)
out
;

158 
rs_buf„rs_t
 *
buf„rs
 = &
rdiff_°©e
->buffers;

160 i‡(
buf„rs
->
√xt_out
 =
NULL
) {

161 
	`TEST_OR_FAIL
(
buf„rs
->
avaû_out
 == 0, -1);

162 
buf„rs
->
√xt_out
 = 
rdiff_°©e
->
outbuf
;

163 
buf„rs
->
avaû_out
 = 
RDIFF_BUFFER_SIZE
;

166 i‡(
	`fûl_öbuf„r
(
rdiff_°©e
, 
buf
, 
Àn
Ë!
RS_DONE
) {

170 
rs_ªsu…
 
ªsu…
 = 
RS_RUNNING
;

171 
åue
) {

172 
ªsu…
 = 
	`rs_job_ôî
(
rdiff_°©e
->
job
, 
buf„rs
);

173 i‡(
ªsu…
 !
RS_DONE
 &&Ñesu… !
RS_BLOCKED
) {

174 
	`ERROR
("Eº‹Öro˚ssögÑdif‡chunk: %s", 
	`rs_°ªº‹
(
ªsu…
));

177 i‡(
	`døö_outbuf„r
(
rdiff_°©e
Ë!
RS_DONE
) {

180 i‡(
ªsu…
 =
RS_BLOCKED
 && 
buf„rs
->
eof_ö
 =
åue
) {

181 
	`TRACE
("rdiff chunkÖrocessing blocked for output buffer draining, "

185 i‡(
ªsu…
 =
RS_BLOCKED
 && 
buf„rs
->
eof_ö
 =
Ál£
) {

186 
	`TRACE
("rdiff chunkÖrocessing blocked for input, "

190 i‡(
ªsu…
 =
RS_DONE
 && 
buf„rs
->
eof_ö
 =
åue
) {

191 
	`TRACE
("rdiffÖrocessing done.");

194 i‡(
ªsu…
 =
RS_DONE
 && 
buf„rs
->
eof_ö
 =
Ál£
) {

195 
	`WARN
("rdiffÖrocessing done but input EOFÇot seen yet?");

200 
	}
}

202 
≠∂y_rdiff_∑tch
(
img_ty≥
 *
img
,

203 
__©åibuã__
((
__unu£d__
)Ë* 
d©a
)

205 
	gªt
 = 0;

207 
rdiff_t
 
	grdiff_°©e
 = {};

208 
	grdiff_°©e
.
	gty≥
 =

209 
°rcmp
(
img
->
ty≥
, "rdiff_image"Ë=0 ? 
IMAGE_HANDLER
 : 
FILE_HANDLER
;

211 *
	gmou¡poöt
 = 
NULL
;

212 
boﬁ
 
	gu£_mou¡
 = (
°æí
(
img
->
devi˚
Ë&& såÀn(img->
fûesy°em
)Ë? 
åue
 : 
Ál£
;

214 *
	gba£_fûe_fûíame
 = 
NULL
;

215 *
	gde°_fûe_fûíame
 = 
NULL
;

217 i‡(
	grdiff_°©e
.
	gty≥
 =
IMAGE_HANDLER
) {

218 i‡(
img
->
£ek
) {

223 
ERROR
("Option 'seek' isÇot supported forÑdiff.");

227 
	gba£_fûe_fûíame
 = 
di˘_gë_vÆue
(&
img
->
¥›îtõs
, "rdiffbase");

228 i‡(
	gba£_fûe_fûíame
 =
NULL
) {

229 
ERROR
("Property 'rdiffbase' is missing in sw-description.");

233 i‡((
	grdiff_°©e
.
	gde°_fûe
 = 
f›í
(
img
->
devi˚
, "wb+")Ë=
NULL
) {

234 
ERROR
("%†ˇ¬Ÿ bê›íed f‹ wrôög: %s", 
img
->
devi˚
, 
°ªº‹
(
î∫o
));

238 i‡(
	grdiff_°©e
.
	gty≥
 =
FILE_HANDLER
) {

239 
fd
;

241 i‡(
°æí
(
img
->
∑th
) == 0) {

242 
ERROR
("MissingÖatháttribute");

246 i‡(
a•rötf
(&
de°_fûe_fûíame
, "%§difÂ©ch.XXXXXX", 
gë_tmpdú
()) == -1) {

247 
ERROR
("Cannotállocate memory forÅemporary filename creation.");

250 i‡((
	gfd
 = 
mk°emp
(
de°_fûe_fûíame
)) == -1) {

251 
ERROR
("C™nŸ cª©êãmp‹¨y fûê%s: %s", 
de°_fûe_fûíame
,

252 
°ªº‹
(
î∫o
));

256 i‡((
	grdiff_°©e
.
	gde°_fûe
 = 
fd›í
(
fd
, "wb+")Ë=
NULL
) {

257 ()
˛o£
(
fd
);

258 
ERROR
("%†ˇ¬Ÿ bê›íed f‹ wrôög: %s", 
de°_fûe_fûíame
,

259 
°ªº‹
(
î∫o
));

263 
	gba£_fûe_fûíame
 = 
img
->
∑th
;

264 i‡(
	gu£_mou¡
) {

265 
	gmou¡poöt
 = 
Æloˇ
(
°æí
(
gë_tmpdú
()Ë+ såÀn(
DATADST_DIR_SUFFIX
) + 1);

266 
•rötf
(
mou¡poöt
, "%s%s", 
gë_tmpdú
(), 
DATADST_DIR_SUFFIX
);

268 i‡(
swupd©e_mou¡
(
img
->
devi˚
, 
mou¡poöt
, img->
fûesy°em
) != 0) {

269 
ERROR
("Device %s with filesystem %s cannot be mounted",

270 
img
->
devi˚
, img->
fûesy°em
);

271 
	gªt
 = -1;

272 
	g˛ónup
;

275 
	gba£_fûe_fûíame
 = 
Æloˇ
(
°æí
(
mou¡poöt
Ë+ såÀn(
img
->
∑th
) + 1);

276 
•rötf
(
ba£_fûe_fûíame
, "%s%s", 
mou¡poöt
, 
img
->
∑th
);

279 * 
	gmake_∑th
 = 
di˘_gë_vÆue
(&
img
->
¥›îtõs
, "create-destination");

280 i‡(
	gmake_∑th
 !
NULL
 && 
°rcmp
(
make_∑th
, "true") == 0) {

281 
TRACE
("Cª©ögÖ©h %s", 
dú«me
(
ba£_fûe_fûíame
));

282 i‡(
mk∑th
(
dú«me
(
°rdu∑
(
ba£_fûe_fûíame
)), 0755) < 0) {

283 
ERROR
("C™nŸ cª©ê∑th %s: %s", 
dú«me
(
ba£_fûe_fûíame
),

284 
°ªº‹
(
î∫o
));

285 
	gªt
 = -1;

286 
	g˛ónup
;

291 i‡((
	grdiff_°©e
.
	gba£_fûe
 = 
f›í
(
ba£_fûe_fûíame
, "rb+")Ë=
NULL
) {

292 
ERROR
("%†ˇ¬Ÿ bê›íed f‹Ñódög: %s", 
ba£_fûe_fûíame
, 
°ªº‹
(
î∫o
));

293 
	gªt
 = -1;

294 
	g˛ónup
;

297 i‡(!(
	grdiff_°©e
.
	göbuf
 = 
mÆloc
(
RDIFF_BUFFER_SIZE
))) {

298 
ERROR
("Cannotállocate memory forÑdiff input buffer.");

299 
	gªt
 = -1;

300 
	g˛ónup
;

303 i‡(!(
	grdiff_°©e
.
	goutbuf
 = 
mÆloc
(
RDIFF_BUFFER_SIZE
))) {

304 
ERROR
("Cannotállocate memory forÑdiff output buffer.");

305 
	gªt
 = -1;

306 
	g˛ónup
;

309 
	grdiff_°©e
.
	g˝io_öput_Àn
 = 
img
->
size
;

311 
	glogÀvñm≠
[] =

313 [
OFF
] = 
RS_LOG_ERR
,

314 [
ERRORLEVEL
] = 
RS_LOG_ERR
,

315 [
WARNLEVEL
] = 
RS_LOG_WARNING
,

316 [
INFOLEVEL
] = 
RS_LOG_INFO
,

317 [
DEBUGLEVEL
] = 
RS_LOG_DEBUG
,

318 [
TRACELEVEL
] = 
RS_LOG_DEBUG
,

320 
rs_åa˚_£t_Àvñ
(
logÀvñm≠
[
logÀvñ
]);

321 
rs_åa˚_to
(
rdiff_log
);

323 
	grdiff_°©e
.
	gjob
 = 
rs_∑tch_begö
(
ba£_fûe_ªad_cb
, 
rdiff_°©e
.
ba£_fûe
);

324 
	gªt
 = 
c›yfûe
(
img
->
fdö
,

325 &
rdiff_°©e
,

326 
img
->
size
,

327 (*)&
img
->
off£t
,

328 
img
->
£ek
,

330 
img
->
com¥es£d
,

331 &
img
->
checksum
,

332 
img
->
sha256
,

333 
img
->
is_í¸y±ed
,

334 
≠∂y_rdiff_chunk_cb
);

336 i‡(
	grdiff_°©e
.
	gty≥
 =
FILE_HANDLER
) {

337 
°©
 
°©_de°_fûe
;

338 i‡(
f°©
(
fûío
(
rdiff_°©e
.
de°_fûe
), &
°©_de°_fûe
) == -1) {

339 
ERROR
("C™nŸ f°© fûê%s: %s", 
de°_fûe_fûíame
, 
°ªº‹
(
î∫o
));

340 
	gªt
 = -1;

341 
	g˛ónup
;

353 
	grdiff_°©e
.
	gba£_fûe
 = 
‰e›í
(
NULL
, "wb", 
rdiff_°©e
.
ba£_fûe
);

354 
	grdiff_°©e
.
	gde°_fûe
 = 
‰e›í
(
NULL
, "rb", 
rdiff_°©e
.
de°_fûe
);

355 i‡((
	grdiff_°©e
.
	gba£_fûe
 =
NULL
Ë|| (
rdiff_°©e
.
de°_fûe
 == NULL)) {

356 
ERROR
("C™nŸÑe›í %†‹ %s: %s", 
de°_fûe_fûíame
,

357 
ba£_fûe_fûíame
, 
°ªº‹
(
î∫o
));

358 
	gªt
 = -1;

359 
	g˛ónup
;

362 #i‡
deföed
(
__FªeBSD__
)

363 ()
	g°©_de°_fûe
;

364 
	gbuf
[
DFLTPHYS
];

365 
	gr
;

366 (
	gr
 = 
ªad
(
fûío
(
rdiff_°©e
.
de°_fûe
), 
buf
, 
DFLTPHYS
)) > 0) {

367 i‡(
wrôe
(
fûío
(
rdiff_°©e
.
ba£_fûe
), 
buf
, 
r
) !=Ñ) {

368 
ERROR
("Wrôêtÿ%†Áûed.", 
ba£_fûe_fûíame
);

369 
	gªt
 = -1;

373 i‡(
	gr
 < 0) {

374 
ERROR
("Ród fromÅÿ%†Áûed.", 
de°_fûe_fûíame
);

375 
	gªt
 = -1;

378 i‡(
£ndfûe
(
fûío
(
rdiff_°©e
.
ba£_fûe
), fûío‘diff_°©e.
de°_fûe
),

379 
NULL
, 
°©_de°_fûe
.
°_size
) == -1) {

380 
ERROR
("C™nŸ c›y from %†tÿ%s: %s", 
de°_fûe_fûíame
,

381 
ba£_fûe_fûíame
, 
°ªº‹
(
î∫o
));

382 
	gªt
 = -1;

383 
	g˛ónup
;

388 
	g˛ónup
:

389 
‰ì
(
rdiff_°©e
.
öbuf
);

390 
‰ì
(
rdiff_°©e
.
outbuf
);

391 i‡(
	grdiff_°©e
.
	gjob
 !
NULL
) {

392 ()
rs_job_‰ì
(
rdiff_°©e
.
job
);

394 i‡(
	grdiff_°©e
.
	gba£_fûe
 !
NULL
) {

395 i‡(
f˛o£
(
rdiff_°©e
.
ba£_fûe
Ë=
EOF
) {

396 
ERROR
("Eº‹ whûê˛osögÑdif‡ba£: %s", 
°ªº‹
(
î∫o
));

399 i‡(
	grdiff_°©e
.
	gde°_fûe
 !
NULL
) {

400 i‡(
f˛o£
(
rdiff_°©e
.
de°_fûe
Ë=
EOF
) {

401 
ERROR
("Error while closingÑdiff destination: %s",

402 
°ªº‹
(
î∫o
));

405 i‡(
	grdiff_°©e
.
	gty≥
 =
FILE_HANDLER
) {

406 i‡(
u∆ök
(
de°_fûe_fûíame
) == -1) {

407 
ERROR
("Cannot deleteÅemporary file %s,Ölease clean up manually: %s",

408 
de°_fûe_fûíame
, 
°ªº‹
(
î∫o
));

410 i‡(
	gu£_mou¡
 =
åue
) {

411 
swupd©e_umou¡
(
mou¡poöt
);

414  
	gªt
;

417 
__©åibuã__
((
c⁄°ru˘‹
))

418 
	$rdiff_image_h™dÀr
()

420 
	`ªgi°î_h™dÀr
("rdiff_image", 
≠∂y_rdiff_∑tch
, 
IMAGE_HANDLER
, 
NULL
);

421 
	}
}

423 
__©åibuã__
((
c⁄°ru˘‹
))

424 
	$rdiff_fûe_h™dÀr
()

426 
	`ªgi°î_h™dÀr
("rdiff_fûe", 
≠∂y_rdiff_∑tch
, 
FILE_HANDLER
, 
NULL
);

427 
	}
}

	@swupdate/handlers/remote_handler.c

8 
	~<sys/ty≥s.h
>

9 
	~<°dio.h
>

10 
	~<sys/°©.h
>

11 
	~<uni°d.h
>

12 
	~<f˙é.h
>

13 
	~<°dlib.h
>

14 
	~<î∫o.h
>

15 
	~<°rög.h
>

16 
	~<zmq.h
>

18 
	~<swupd©e.h
>

19 
	~<h™dÀr.h
>

20 
	~<utû.h
>

22 
	#MSG_FRAMES
 2

	)

23 
	#FRAME_CMD
 0

	)

24 
	#FRAME_BODY
 1

	)

26 
	#REMOTE_IPC_TIMEOUT
 2000

	)

28 
	gtimeout
 = 
REMOTE_IPC_TIMEOUT
;

30 
	sRHmsg
 {

31 
zmq_msg_t
 
	m‰ame
[
MSG_FRAMES
];

34 
	sªmŸe_comm™d
 {

35 *
	mcmd
;

38 
ªmŸe_h™dÀr
();

40 
	$RH£t_comm™d
(
RHmsg
 *
£lf
, c⁄° *
key
)

42 
zmq_msg_t
 *
msg
 = &
£lf
->
‰ame
[
FRAME_CMD
];

43 
	`zmq_msg_öô_size
 (
msg
, 
	`°æí
(
key
));

44 
	`mem˝y
 (
	`zmq_msg_d©a
 (
msg
), 
key
, 
	`°æí
(key));

45 
	}
}

47 
	$RH£t_∑ylﬂd
(
RHmsg
 *
£lf
, c⁄° *
body
, 
size_t
 
size
)

49 
zmq_msg_t
 *
msg
 = &
£lf
->
‰ame
[
FRAME_BODY
];

50 
	`zmq_msg_öô_size
(
msg
, 
size
);

51 
	`mem˝y
 (
	`zmq_msg_d©a
(
msg
), 
body
, 
size
);

52 
	}
}

54 
	$RHmsg_£nd_cmd
(
RHmsg
 *
£lf
, *
ªque°
)

56 
i
;

57 
ªt
;

59 
i
 = 0; i < 
MSG_FRAMES
; i++) {

60 
ªt
 = 
	`zmq_msg_£nd
 (&
£lf
->
‰ame
[
i
], 
ªque°
,

61 (
i
 < 
MSG_FRAMES
 - 1)? 
ZMQ_SNDMORE
: 0);

62 i‡(
ªt
 < 0 )

63  
î∫o
;

67 
	}
}

69 
	$RHmsg_gë_ack
(
RHmsg
 *
£lf
, *
ªque°
)

71 
rc
;

72 
size
;

73 
zmq_pﬁlôem_t
 
zpﬁl
;

74 *
°rög
;

75 
√wtimeout
;

76 
Àn
;

78 
zpﬁl
.
sockë
 = 
ªque°
;

79 
zpﬁl
.
evíts
 = 
ZMQ_POLLIN
;

85 
rc
 = 
	`zmq_pﬁl
(&
zpﬁl
, 1, 
timeout
);

86 i‡(
rc
 <= 0)

87  -
EFAULT
;

89 
	`zmq_msg_öô
 (&
£lf
->
‰ame
[0]);

90 i‡(
	`zmq_msg_ªcv
(&
£lf
->
‰ame
[0], 
ªque°
, 0) == -1) {

91 
	`zmq_msg_˛o£
(&
£lf
->
‰ame
[0]);

92  -
EFAULT
;

95 
size
 = 
	`zmq_msg_size
(&
£lf
->
‰ame
[0]);

96 
°rög
 = 
	`mÆloc
 (
size
 + 1);

97 
	`mem˝y
 (
°rög
, 
	`zmq_msg_d©a
 (&
£lf
->
‰ame
[0]), 
size
);

98 
°rög
[
size
] = '\0';

99 
	`zmq_msg_˛o£
(&
£lf
->
‰ame
[0]);

104 
Àn
 = 
size
;

106 i‡(
	`°rchr
(
°rög
, ':'))

107 
Àn
 = (
	`°rchr
(
°rög
, ':') - string - 1);

108 i‡(
	`°∫cmp
(
°rög
, "ACK", 
Àn
) != 0) {

109 
	`ERROR
("Remote HandlerÑeturnsÉrror,Éxiting");

110  -
EFAULT
;

118 i‡((
size
 > 4Ë&& (
°rög
[3] == ':')) {

119 
√wtimeout
 = 
	`°πoul
(&
°rög
[4], 
NULL
, 10);

120 i‡(
√wtimeout
 > 0)

121 
timeout
 = 
√wtimeout
;

125 
	}
}

127 
	$f‹w¨d_d©a
(*
ªque°
, c⁄° *
buf
, 
Àn
)

129 
RHmsg
 
RHmesßge
;

130 
ªt
;

132 i‡(!
ªque°
)

133  -
EFAULT
;

135 
	`RH£t_comm™d
(&
RHmesßge
, "DATA");

136 
	`RH£t_∑ylﬂd
(&
RHmesßge
, 
buf
, 
Àn
);

137 
ªt
 = 
	`RHmsg_£nd_cmd
(&
RHmesßge
, 
ªque°
);

138 i‡(
ªt
)

139  
ªt
;

141 
ªt
 = 
	`RHmsg_gë_ack
(&
RHmesßge
, 
ªque°
);

143  
ªt
;

144 
	}
}

146 
ö°Æl_ªmŸe_image
(
img_ty≥
 *
img
,

147 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

149 *
	gc⁄ãxt
 = 
zmq_˘x_√w
();

150 *
	gªque°
 = 
zmq_sockë
 (
c⁄ãxt
, 
ZMQ_REQ
);

151 *
	gc⁄√˘_°rög
;

152 
	gÀn
;

153 
	gªt
 = 0;

154 
RHmsg
 
	gRHmesßge
;

155 
	gbufcmd
[80];

157 
	gÀn
 = 
°æí
(
img
->
ty≥_d©a
Ë+ såÀn(
CONFIG_SOCKET_REMOTE_HANDLER_DIRECTORY
) + strlen("ipc://") + 4;

162 
	gc⁄√˘_°rög
 = 
mÆloc
(
Àn
);

163 i‡(!
	gc⁄√˘_°rög
) {

164 
ERROR
("NotÉnough memory");

165  -
	gENOMEM
;

167 
¢¥ötf
(
c⁄√˘_°rög
, 
Àn
, "ùc://%s%s", 
CONFIG_SOCKET_REMOTE_HANDLER_DIRECTORY
,

168 
img
->
ty≥_d©a
);

170 
	gªt
 = 
zmq_c⁄√˘
(
ªque°
, 
c⁄√˘_°rög
);

171 i‡(
	gªt
 < 0) {

172 
ERROR
("Connection with %s cannot beÉstablished",

173 
c⁄√˘_°rög
);

174 
	gªt
 = -
ENODEV
;

175 
	g˛ónup
;

179 
	gtimeout
 = 
REMOTE_IPC_TIMEOUT
;

182 
¢¥ötf
(
bufcmd
, (bufcmd), "INIT:%Œd", 
img
->
size
);

183 
RH£t_comm™d
(&
RHmesßge
, 
bufcmd
);

184 
RH£t_∑ylﬂd
(&
RHmesßge
, 
NULL
, 0);

185 
RHmsg_£nd_cmd
(&
RHmesßge
, 
ªque°
);

186 i‡(
RHmsg_gë_ack
(&
RHmesßge
, 
ªque°
))

187  -
	gENODEV
;

189 
	gªt
 = 
c›yimage
(
ªque°
, 
img
, 
f‹w¨d_d©a
);

191 
	g˛ónup
:

192 
zmq_˛o£
(
ªque°
);

193 
zmq_˘x_de°roy
(
c⁄ãxt
);

195  
	gªt
;

198 
__©åibuã__
((
c⁄°ru˘‹
))

199 
	$ªmŸe_h™dÀr
()

201 
	`ªgi°î_h™dÀr
("ªmŸe", 
ö°Æl_ªmŸe_image
,

202 
IMAGE_HANDLER
, 
NULL
);

203 
	}
}

	@swupdate/handlers/shell_scripthandler.c

9 
	~<sys/ty≥s.h
>

10 
	~<°dio.h
>

11 
	~<sys/waô.h
>

12 
	~<sys/°©.h
>

13 
	~<uni°d.h
>

14 
	~<f˙é.h
>

15 
	~<°dlib.h
>

16 
	~<î∫o.h
>

17 
	~<°rög.h
>

19 
	~"swupd©e.h
"

20 
	~"h™dÀr.h
"

21 
	~"utû.h
"

23 
shñl_h™dÀr
();

24 
shñl_¥eö°Æl_h™dÀr
();

25 
shñl_po°ö°Æl_h™dÀr
();

27 
	$execuã_shñl_s¸ùt
(
img_ty≥
 *
img
, c⁄° *
‚«me
)

29 
ªt
;

30 c⁄° * 
tmp
 = 
	`gë_tmpdús¸ùts
();

32 
shñls¸ùt
[
MAX_IMAGE_FNAME
 + 
	`°æí
(
tmp
) +

33 
	`°æí
("postinst") + 2];

35 
	`¢¥ötf
(
shñls¸ùt
, (shellscript),

36 "%s%s", 
tmp
, 
img
->
‚ame
);

37 i‡(
	`chmod
(
shñls¸ùt
, 
S_IRUSR
 | 
S_IWUSR
 | 
S_IXUSR
)) {

38 
	`ERROR
("Executi⁄ bô c™nŸ bê£àf‹ %s", 
shñls¸ùt
);

41 
	`¢¥ötf
(
shñls¸ùt
, (shellscript),

42 "%s%†%†%s", 
tmp
, 
img
->
‚ame
, 
‚«me
, img->
ty≥_d©a
);

44 
ªt
 = 
	`sy°em
(
shñls¸ùt
);

45 i‡(
	`WIFEXITED
(
ªt
)) {

46 
ªt
 = 
	`WEXITSTATUS
(ret);

47 
	`TRACE
("Calling shell script %s:Ñeturn with %d",

48 
shñls¸ùt
, 
ªt
);

50 
	`ERROR
("%†ªtu∫†'%s'", 
img
->
‚ame
, 
	`°ªº‹
(
î∫o
));

53  
ªt
;

54 
	}
}

56 
	$°¨t_shñl_s¸ùt
(
img_ty≥
 *
img
, *
d©a
)

58 c⁄° *
‚«me
;

59 
s¸ùt_‚
 
s¸ùt‚
;

61 i‡(!
d©a
)

62  -
EINVAL
;

64 
s¸ùt‚
 = *(
s¸ùt_‚
 *)
d©a
;

66 
s¸ùt‚
) {

67 
PREINSTALL
:

68 
‚«me
="preinst";

70 
POSTINSTALL
:

71 
‚«me
="postinst";

78  
	`execuã_shñl_s¸ùt
(
img
, 
‚«me
);

79 
	}
}

81 
	$°¨t_¥eö°Æl_s¸ùt
(
img_ty≥
 *
img
, *
d©a
)

83 
s¸ùt_‚
 
s¸ùt‚
;

85 i‡(!
d©a
)

86  -
EINVAL
;

88 
s¸ùt‚
 = *(
s¸ùt_‚
 *)
d©a
;

93 i‡(
s¸ùt‚
 !
PREINSTALL
)

96  
	`execuã_shñl_s¸ùt
(
img
, "");

97 
	}
}

99 
	$°¨t_po°ö°Æl_s¸ùt
(
img_ty≥
 *
img
, *
d©a
)

101 
s¸ùt_‚
 
s¸ùt‚
;

103 i‡(!
d©a
)

104  -
EINVAL
;

106 
s¸ùt‚
 = *(
s¸ùt_‚
 *)
d©a
;

111 i‡(
s¸ùt‚
 !
POSTINSTALL
)

114  
	`execuã_shñl_s¸ùt
(
img
, "");

115 
	}
}

117 
__©åibuã__
((
c⁄°ru˘‹
))

118 
	$shñl_h™dÀr
()

120 
	`ªgi°î_h™dÀr
("shñls¸ùt", 
°¨t_shñl_s¸ùt
,

121 
SCRIPT_HANDLER
, 
NULL
);

122 
	}
}

124 
__©åibuã__
((
c⁄°ru˘‹
))

125 
	$shñl_¥eö°Æl_h™dÀr
()

127 
	`ªgi°î_h™dÀr
("¥eö°Æl", 
°¨t_¥eö°Æl_s¸ùt
,

128 
SCRIPT_HANDLER
, 
NULL
);

129 
	}
}

131 
__©åibuã__
((
c⁄°ru˘‹
))

132 
	$shñl_po°ö°Æl_h™dÀr
()

134 
	`ªgi°î_h™dÀr
("po°ö°Æl", 
°¨t_po°ö°Æl_s¸ùt
,

135 
SCRIPT_HANDLER
, 
NULL
);

136 
	}
}

	@swupdate/handlers/swuforward_handler.c

14 
	~<°dboﬁ.h
>

15 
	~<°dio.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/°©.h
>

18 
	~<uni°d.h
>

19 
	~<f˙é.h
>

20 
	~<°dlib.h
>

21 
	~<î∫o.h
>

22 
	~<°rög.h
>

23 
	~<swupd©e.h
>

24 
	~<h™dÀr.h
>

25 
	~<utû.h
>

26 
	~<cuæ/cuæ.h
>

27 
	~<js⁄-c/js⁄.h
>

28 
	~"bsdqueue.h
"

29 
	~"ch™√l_cuæ.h
"

30 
	~"ch™√l.h
"

31 
	~"∑r£lib.h
"

37 
	#CUSTOM_HEADER
 "X_FILENAME: "

	)

38 
	#MAX_WAIT_MS
 30000

	)

39 
	#POST_URL
 "/h™dÀ_po°_ªque°"

	)

40 
	#STATUS_URL
 "/gë°©us.js⁄"

	)

49 
	#TIMEOUT_GET_ANSWER_SEC
 900

	)

50 
	#POLLING_TIME_REQ_STATUS
 50

	)

52 
swuf‹w¨d_h™dÀr
();

59 
	scuæc⁄n
 {

60 
CURL
 *
	mcuæ_h™dÀ
;

61 c⁄° *
	mbuf„r
;

62 
	mnbyãs
;

63 
size_t
 
	mtŸÆ_byãs
;

64 *
	muæ
;

65 
boﬁ
 
	mgŸMsg
;

66 
RECOVERY_STATUS
 
	mSWUpd©eSètus
;

67 
LIST_ENTRY
(
cuæc⁄n
Ë
	m√xt
;

69 
LIST_HEAD
(
li°c⁄ns
, 
cuæc⁄n
);

75 
	shnd_¥iv
 {

76 
CURLM
 *
	mcm
;

77 
	mmaxwaôms
;

78 
size_t
 
	msize
;

79 
li°c⁄ns
 
	mc⁄ns
;

86 
size_t
 
	$cuæ_ªad_d©a
(*
buf„r
, 
size_t
 
size
, size_à
nmemb
, *
u£Ω
)

88 
cuæc⁄n
 *
c⁄n
 = (cuæc⁄¿*)
u£Ω
;

89 
size_t
 
nbyãs
;

91 i‡(!
nmemb
)

93 i‡(!
u£Ω
) {

94 
	`ERROR
("Failure IPC stream file descriptor ");

95  -
EFAULT
;

98 i‡(
c⁄n
->
nbyãs
 > (
nmemb
 * 
size
))

99 
nbyãs
 = 
nmemb
 * 
size
;

101 
nbyãs
 = 
c⁄n
->nbytes;

103 
	`mem˝y
(
buf„r
, 
c⁄n
->buf„r, 
nbyãs
);

105 
c⁄n
->
nbyãs
 -=Çbytes;

107  
nmemb
;

108 
	}
}

114 
	$swu_f‹w¨d_d©a
(*
d©a
, c⁄° *
buf
, 
Àn
)

116 
hnd_¥iv
 *
¥iv
 = (hnd_¥iv *)
d©a
;

117 
ªt
, 
°ûl_ru¬ög
 = 0;

119 
cuæc⁄n
 *
c⁄n
;

120 
	`LIST_FOREACH
(
c⁄n
, &
¥iv
->
c⁄ns
, 
√xt
) {

121 
c⁄n
->
nbyãs
 +
Àn
;

122 
c⁄n
->
buf„r
 = 
buf
;

126 
ªady
 = 1;

128 
	`LIST_FOREACH
(
c⁄n
, &
¥iv
->
c⁄ns
, 
√xt
) {

129 i‡(
c⁄n
->
nbyãs
 > 0) {

130 
ªady
 = 0;

139 i‡(
ªady
)

142 
numfds
=0;

143 
ªt
 = 
	`cuæ_mu…i_waô
(
¥iv
->
cm
, 
NULL
, 0,Öriv->
maxwaôms
, &
numfds
);

144 i‡(
ªt
 !
CURLM_OK
) {

145 
	`ERROR
("cuæ_mu…i_waô(Ëªtu∫†%d", 
ªt
);

146  
FAILURE
;

149 
	`cuæ_mu…i_≥rf‹m
(
¥iv
->
cm
, &
°ûl_ru¬ög
);

150 } 
°ûl_ru¬ög
);

152 i‡(!
°ûl_ru¬ög
) {

153 
	`LIST_FOREACH
(
c⁄n
, &
¥iv
->
c⁄ns
, 
√xt
) {

155 i‡(
c⁄n
->
nbyãs
) {

156 
	`ERROR
("ConnectionÜost, dataÇotÅransferred");

158 
c⁄n
->
tŸÆ_byãs
 +
Àn
 - c⁄n->
nbyãs
;

159 i‡(
c⁄n
->
tŸÆ_byãs
 !
¥iv
->
size
) {

160 
	`ERROR
("ConnectionÜost, SWUÇotÅransferred");

161  -
EIO
;

164 
	`ERROR
("ConnectionÜost, skipping data");

168 
	}
}

170 
js⁄_obje˘
 *
	$∑r£_ªq°©us
(
js⁄_obje˘
 *
ª∂y
, c⁄° **
js⁄_∑th
)

172 
js⁄_obje˘
 *
js⁄_d©a
;

174 
js⁄_d©a
 = 
	`js⁄_gë_∑th_key
(
ª∂y
, 
js⁄_∑th
);

175 i‡(
js⁄_d©a
 =
NULL
) {

176 
	`ERROR
("Got malformed JSON: CouldÇot findÖath");

177 
	`DEBUG
("GŸ JSON: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
js⁄_d©a
));

180  
js⁄_d©a
;

181 
	}
}

185 
	$gë_™swî
(
cuæc⁄n
 *
c⁄n
, 
RECOVERY_STATUS
 *
ªsu…
, 
boﬁ
 
ign‹e
)

187 
ch™√l_d©a_t
 
ch™√l_cfg
 = {

188 .
debug
 = 
Ál£
,

189 .
ªåõs
 = 0,

190 .
ªåy_¶ìp
 = 0,

191 .
u£s¶
 = 
Ál£
};

192 
ch™√l_›_ªs_t
 
ª•⁄£
;

193 
ch™√l_t
 *
ch™√l
 = 
	`ch™√l_√w
();

194 
js⁄_obje˘
 *
js⁄_d©a
;

195 
°©us
;

200 i‡(
ch™√l
->
	`›í
(ch™√l, &
ch™√l_cfg
Ë!
CHANNEL_OK
) {

201  -
EIO
;

204 i‡(
	`a•rötf
(&
ch™√l_cfg
.
uæ
, "%s%s",

205 
c⁄n
->
uæ
, 
STATUS_URL
) < 0) {

206 
	`ERROR
("Out of memory.");

207  -
ENOMEM
;

211 
ª•⁄£
 = 
ch™√l
->
	`gë
(ch™√l, (*)&
ch™√l_cfg
);

213 i‡(
ª•⁄£
 !
CHANNEL_OK
) {

214 
ch™√l
->
	`˛o£
(channel);

215 
	`‰ì
(
ch™√l
);

216 
	`‰ì
(
ch™√l_cfg
.
uæ
);

221 
°©us
 = -
EBADMSG
;

222 i‡(!(
js⁄_d©a
 = 
	`∑r£_ªq°©us
(
ch™√l_cfg
.
js⁄_ª∂y
,

223 (c⁄° *[]){"Sètus", 
NULL
})))

224 
˛ónup
;

225 
°©us
 = 
	`js⁄_obje˘_gë_öt
(
js⁄_d©a
);

227 i‡(!(
js⁄_d©a
 = 
	`∑r£_ªq°©us
(
ch™√l_cfg
.
js⁄_ª∂y
,

228 (c⁄° *[]){"Msg", 
NULL
})))

229 
˛ónup
;

230 c⁄° *
msg
 = 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a
);

232 i‡(!(
js⁄_d©a
 = 
	`∑r£_ªq°©us
(
ch™√l_cfg
.
js⁄_ª∂y
,

233 (c⁄° *[]){"La°Resu…", 
NULL
})))

234 
˛ónup
;

235 
œ°Resu…
 = 
	`js⁄_obje˘_gë_öt
(
js⁄_d©a
);

237 i‡(
	`°æí
(
msg
) > 0)

238 
c⁄n
->
gŸMsg
 = (
	`°æí
(
msg
Ë> 0Ë? 
åue
 : 
Ál£
;

240 i‡(!
ign‹e
) {

241 i‡(
	`°æí
(
msg
)) {

242 
	`TRACE
("Upd©êtÿ%†: %s", 
c⁄n
->
uæ
, 
msg
);

244 i‡(
°©us
 =
IDLE
) {

245 
	`TRACE
("Upd©êtÿ%†: %s", 
c⁄n
->
uæ
,

246 (
œ°Resu…
 =
SUCCESS
) ? "SUCCESS !" : "FAILURE");

250 *
ªsu…
 = 
œ°Resu…
;

252 
˛ónup
:

253 
	`‰ì
(
ch™√l_cfg
.
uæ
);

254 
ch™√l
->
	`˛o£
(channel);

255 
	`‰ì
(
ch™√l
);

257  
°©us
;

258 
	}
}

260 
	$ªåõve_msgs
(
hnd_¥iv
 *
¥iv
, 
boﬁ
 
ign‹e
)

262 
cuæc⁄n
 *
c⁄n
;

263 
ªt
;

264 
ªsu…
 = 0;

266 
	`LIST_FOREACH
(
c⁄n
, &
¥iv
->
c⁄ns
, 
√xt
) {

267 
cou¡
 = 0;

269 
ªt
 = 
	`gë_™swî
(
c⁄n
, &c⁄n->
SWUpd©eSètus
, 
ign‹e
);

270 i‡(!
c⁄n
->
gŸMsg
) {

271 
	`u¶ìp
(
POLLING_TIME_REQ_STATUS
 * 1000);

272 
cou¡
++;

274 
cou¡
 = 0;

275 i‡(
cou¡
 > ((
TIMEOUT_GET_ANSWER_SEC
 * 1000) /

276 
POLLING_TIME_REQ_STATUS
)) {

277 
ªt
 = -
ETIMEDOUT
;

279 } 
ªt
 > 0);

280 i‡(
ªt
 !0 || (
c⁄n
->
SWUpd©eSètus
 !
SUCCESS
)) {

281 
	`ERROR
("Upd©êtÿ%†wa†NOT suc˚ssfu»!", 
c⁄n
->
uæ
);

282 
ªsu…
 = -1;

286  
ªsu…
;

287 
	}
}

289 
ö°Æl_ªmŸe_swu
(
img_ty≥
 *
img
,

290 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

292 
hnd_¥iv
 
	g¥iv
;

293 
cuæc⁄n
 *
	gc⁄n
;

294 
	gªt
, 
	g°ûl_ru¬ög
 = 0;

295 
di˘_li°_ñem
 *
	guæ
;

296 
cuæ_¶i°
 *
	ghódîli°
;

297 
CURLMsg
 *
	gmsg
 = 
NULL
;

298 
di˘_li°
 *
	guæs
;

306 i‡(
	gimg
->
	gis_í¸y±ed
) {

307 
ERROR
("SWUÅo be forwarded cannot beÉncrypted");

308  -
	gEINVAL
;

315 
	guæs
 = 
di˘_gë_li°
(&
img
->
¥›îtõs
, "url");

316 i‡(!
	guæs
) {

317 
ERROR
("SWUÅo be forwarded, butÇotÑemote URLs found ");

318  -
	gEINVAL
;

322 
LIST_INIT
(&
¥iv
.
c⁄ns
);

325 
	gªt
 = 
cuæ_globÆ_öô
(
CURL_GLOBAL_DEFAULT
);

326 i‡(
	gªt
 !
CURLE_OK
) {

327 
ªt
 = 
FAILURE
;

328 
	gh™dÀr_exô
;

330 
	g¥iv
.
	gcm
 = 
cuæ_mu…i_öô
();

331 
	g¥iv
.
	gmaxwaôms
 = 
MAX_WAIT_MS
;

332 
	g¥iv
.
	gsize
 = 
img
->
size
;

334 
LIST_FOREACH
(
uæ
, 
uæs
, 
√xt
) {

335 
	gcuæhódî
[
SWUPDATE_GENERAL_STRING_SIZE
 + 
°æí
(
CUSTOM_HEADER
)];

337 
	gc⁄n
 = (
cuæc⁄n
 *)
ˇŒoc
(1, (curlconn));

338 i‡(!
	gc⁄n
) {

339 
ERROR
("FAULT:Ço memory");

340 
	gªt
 = -
ENOMEM
;

341 
	gh™dÀr_exô
;

344 
	ghódîli°
 = 
NULL
;

346 
	gc⁄n
->
	gcuæ_h™dÀ
 = 
cuæ_ósy_öô
();

347 
	gc⁄n
->
	guæ
 = 
uæ
->
vÆue
;

349 i‡(!
	gc⁄n
->
	gcuæ_h™dÀ
) {

351 
ERROR
("FAULT:Ço handle fromÜibcurl");

352  
	gFAILURE
;

355 
¢¥ötf
(
cuæhódî
, (cuæhódî), "%s%s", 
CUSTOM_HEADER
, 
img
->
‚ame
);

356 
	ghódîli°
 = 
cuæ_¶i°_≠≥nd
(
hódîli°
, 
cuæhódî
);

358 i‡((
cuæ_ósy_£t›t
(
c⁄n
->
cuæ_h™dÀ
, 
CURLOPT_POST
, 1LË!
CURLE_OK
) ||

359 (
cuæ_ósy_£t›t
(
c⁄n
->
cuæ_h™dÀ
, 
CURLOPT_READFUNCTION
,

360 
cuæ_ªad_d©a
Ë!
CURLE_OK
) ||

361 (
cuæ_ósy_£t›t
(
c⁄n
->
cuæ_h™dÀ
, 
CURLOPT_READDATA
,

362 
c⁄n
Ë!=
CURLE_OK
) ||

363 (
cuæ_ósy_£t›t
(
c⁄n
->
cuæ_h™dÀ
, 
CURLOPT_USERAGENT
,

364 "libcuæ-agít/1.0"Ë!
CURLE_OK
) ||

365 (
cuæ_ósy_£t›t
(
c⁄n
->
cuæ_h™dÀ
, 
CURLOPT_POSTFIELDSIZE
,

366 
img
->
size
)!=
CURLE_OK
) ||

367 (
cuæ_ósy_£t›t
(
c⁄n
->
cuæ_h™dÀ
, 
CURLOPT_HTTPHEADER
,

368 
hódîli°
Ë!
CURLE_OK
)) {

369 
ERROR
("curl set_option wasÇot successful");

370 
	gªt
 = 
FAILURE
;

371 
	gh™dÀr_exô
;

375 
cuæ_ósy_£t›t
(
c⁄n
->
cuæ_h™dÀ
, 
CURLOPT_VERBOSE
, 1L);

377 *
	gpo°uæ
 = 
NULL
;

378 
	gpo°uæ
 = (*)
mÆloc
(
°æí
(
c⁄n
->
uæ
Ë+ såÀn(
POST_URL
) + 1);

379 
•rötf
(
po°uæ
, "%s%s", 
c⁄n
->
uæ
, 
POST_URL
);

382 i‡(
cuæ_ósy_£t›t
(
c⁄n
->
cuæ_h™dÀ
, 
CURLOPT_URL
, 
po°uæ
Ë!
CURLE_OK
) {

383 
ERROR
("Cannot set URL inÜibcurl");

384 
‰ì
(
po°uæ
);

385 
	gªt
 = 
FAILURE
;

386 
	gh™dÀr_exô
;

388 
‰ì
(
po°uæ
);

389 
cuæ_mu…i_add_h™dÀ
(
¥iv
.
cm
, 
c⁄n
->
cuæ_h™dÀ
);

390 
LIST_INSERT_HEAD
(&
¥iv
.
c⁄ns
, 
c⁄n
, 
√xt
);

393 
ªåõve_msgs
(&
¥iv
, 
åue
);

395 
cuæ_mu…i_≥rf‹m
(
¥iv
.
cm
, &
°ûl_ru¬ög
);

397 
	gªt
 = 
c›yimage
(&
¥iv
, 
img
, 
swu_f‹w¨d_d©a
);

399 i‡(
	gªt
) {

400 
ERROR
("Transferring SWU image wasÇot successful");

401 
	gh™dÀr_exô
;

407 
	gmsgs_À·
 = 0;

408 (
	gmsg
 = 
cuæ_mu…i_öfo_ªad
(
¥iv
.
cm
, &
msgs_À·
))) {

409 
CURL
 *
	geh
 = 
NULL
;

410 
	ghâp_°©us_code
=0;

411 i‡(
	gmsg
->msg !
CURLMSG_DONE
) {

412 
ERROR
("cuæ_mu…i_öfo_ªad(), CURLMsg=%d", 
msg
->msg);

413 
	gªt
 = 
FAILURE
;

416 
LIST_FOREACH
(
c⁄n
, &
¥iv
.
c⁄ns
, 
√xt
) {

417 i‡(
	gc⁄n
->
	gcuæ_h™dÀ
 =
msg
->
ósy_h™dÀ
) {

418 
eh
 = 
c⁄n
->
cuæ_h™dÀ
;

423 i‡(!
	geh
) {

424 
ERROR
("curl handleÇot found in connections");

425 
	gªt
 = 
FAILURE
;

429 
cuæ_ósy_gëöfo
(
eh
, 
CURLINFO_RESPONSE_CODE
, &
hâp_°©us_code
);

431 i‡(
	ghâp_°©us_code
 != 200) {

432 
ERROR
("Sending %sÅo %s failed with %d",

433 
img
->
‚ame
, 
c⁄n
->
uæ
, 
hâp_°©us_code
);

434 
	gªt
 = 
FAILURE
;

442 i‡(!
	gªt
) {

443 
	gªt
 = 
ªåõve_msgs
(&
¥iv
, 
Ál£
);

446 
	gh™dÀr_exô
:

447 
LIST_FOREACH
(
c⁄n
, &
¥iv
.
c⁄ns
, 
√xt
) {

448 
LIST_REMOVE
(
c⁄n
, 
√xt
);

449 
cuæ_mu…i_ªmove_h™dÀ
(
¥iv
.
cm
, 
c⁄n
->
cuæ_h™dÀ
);

450 
cuæ_ósy_˛ónup
(
c⁄n
->
cuæ_h™dÀ
);

451 
‰ì
(
c⁄n
);

454 
cuæ_mu…i_˛ónup
(
¥iv
.
cm
);

456  
	gªt
;

459 
__©åibuã__
((
c⁄°ru˘‹
))

460 
	$swuf‹w¨d_h™dÀr
()

462 
	`ªgi°î_h™dÀr
("swuf‹w¨d", 
ö°Æl_ªmŸe_swu
,

463 
IMAGE_HANDLER
, 
NULL
);

464 
	}
}

	@swupdate/handlers/ubivol_handler.c

8 
	~<sys/ty≥s.h
>

9 
	~<°dio.h
>

10 
	~<sys/°©.h
>

11 
	~<uni°d.h
>

12 
	~<f˙é.h
>

13 
	~<°dlib.h
>

14 
	~<î∫o.h
>

15 
	~<°rög.h
>

17 
	~<mtd/mtd-u£r.h
>

18 
	~"swupd©e.h
"

19 
	~"h™dÀr.h
"

20 
	~"Êash.h
"

21 
	~"utû.h
"

23 
ubi_h™dÀr
();

25 
ubi_∑π
 *
	$£¨ch_vﬁume
(c⁄° *
°r
, 
ubûi°
 *
li°
)

27 
ubi_∑π
 *
vﬁ
;

29 
	`LIST_FOREACH
(
vﬁ
, 
li°
, 
√xt
) {

30 i‡(
	`°rcmp
(
vﬁ
->
vﬁ_öfo
.
«me
, 
°r
) == 0)

31  
vﬁ
;

33  
NULL
;

34 
	}
}

36 
	$upd©e_vﬁume
(
libubi_t
 
libubi
, 
img_ty≥
 *
img
,

37 
ubi_vﬁ_öfo
 *
vﬁ
)

39 
byãs
;

40 
fdout
;

41 
node
[64];

42 
îr
;

43 
sbuf
[128];

44 *
de¸y±ed_size_°r
 = 
NULL
;

46 
byãs
 = 
img
->
size
;

47 i‡(
img
->
is_í¸y±ed
) {

49 
de¸y±ed_size_°r
 = 
	`di˘_gë_vÆue
(&
img
->
¥›îtõs
, "decrypted-size");

51 
byãs
 = 
	`u°πouŒ
(
de¸y±ed_size_°r
, 0);

52 i‡(
î∫o
){

53 
	`ERROR
("decrypted-sizeárgument: ustrtoull failed");

57 i‡(
img
->
com¥es£d
) {

58 
	`ERROR
("Decryption of compressed UBI imagesÇot supported");

61 i‡(
byãs
 < 
AES_BLOCK_SIZE
) {

62 
	`ERROR
("En¸y±ed imagêsizê(%ŒdËtoÿsmÆl", 
byãs
);

65 
	`TRACE
("Imagêi†¸y±ed, de¸y±ed sizê%Œd byãs", 
byãs
);

68 i‡(!
libubi
) {

69 
	`ERROR
("RequestÅo write into UBI, butÇo UBI on system");

73 i‡(
byãs
 > 
vﬁ
->
rsvd_byãs
) {

74 
	`ERROR
("\"%s\" (size %lld) willÇot fit volume \"%s\" (size %lld)",

75 
img
->
‚ame
, 
byãs
, img->
vﬁ«me
, 
vﬁ
->
rsvd_byãs
);

79 
	`¢¥ötf
(
node
, (node), "/dev/ubi%d_%d",

80 
vﬁ
->
dev_num
,

81 
vﬁ
->
vﬁ_id
);

83 
îr
 = 
	`ubi_¥obe_node
(
libubi
, 
node
);

85 i‡(
îr
 == 1) {

86 
	`ERROR
("\"%s\" isán UBI deviceÇode,Çotán UBI volumeÇode",

87 
node
);

90 i‡(
îr
 < 0) {

91 i‡(
î∫o
 =
ENODEV
)

92 
	`ERROR
("%†i†nŸá¿UBI vﬁumênode", 
node
);

94 
	`ERROR
("îr‹ whûê¥obög %s", 
node
);

98 
fdout
 = 
	`›í
(
node
, 
O_RDWR
);

99 i‡(
fdout
 < 0) {

100 
	`ERROR
("ˇ¬Ÿ o≥¿UBI vﬁumê\"%s\"", 
node
);

103 
îr
 = 
	`ubi_upd©e_°¨t
(
libubi
, 
fdout
, 
byãs
);

104 i‡(
îr
) {

105 
	`ERROR
("ˇ¬Ÿ sèπ vﬁumê\"%s\" upd©e", 
node
);

109 
	`¢¥ötf
(
sbuf
, (sbuf), "Installing image %s into volume %s(%s)",

110 
img
->
‚ame
, 
node
, img->
vﬁ«me
);

111 
	`nŸify
(
RUN
, 
RECOVERY_NO_ERROR
, 
INFOLEVEL
, 
sbuf
);

113 
	`TRACE
("Updating UBI : %s %lld",

114 
img
->
‚ame
, img->
size
);

115 i‡(
	`c›yimage
(&
fdout
, 
img
, 
NULL
) < 0) {

116 
	`ERROR
("Error copyingÉxtracted file");

117 
îr
 = -1;

119 
	`˛o£
(
fdout
);

120  
îr
;

121 
	}
}

123 
ö°Æl_ubivﬁ_image
(
img_ty≥
 *
img
,

124 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

126 
Êash_des¸ùti⁄
 *
	gÊash
 = 
gë_Êash_öfo
();

127 
mtd_öfo
 *
	gmtd
 = &
Êash
->
mtd
;

128 
mtd_ubi_öfo
 *
	gmtd_öfo
;

129 
ubi_∑π
 *
	gubivﬁ
;

130 
	gi
, 
	gªt
;

133 
	gi
 = 
mtd
->
lowe°_mtd_num
; i <mtd->
highe°_mtd_num
; i++) {

134 
	gmtd_öfo
 = &
Êash
->
mtd_öfo
[
i
];

136 
	gubivﬁ
 = 
£¨ch_vﬁume
(
img
->
vﬁ«me
,

137 &
mtd_öfo
->
ubi_∑πôi⁄s
);

138 i‡(
	gubivﬁ
)

141 i‡(!
	gubivﬁ
) {

142 
ERROR
("Image %s should be stored in volume "

144 
img
->
‚ame
,

145 
img
->
vﬁ«me
);

148 
	gªt
 = 
upd©e_vﬁume
(
Êash
->
libubi
, 
img
,

149 &
ubivﬁ
->
vﬁ_öfo
);

150  
	gªt
;

154 
adju°_vﬁume
(
img_ty≥
 *
cfg
,

155 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

157 
Êash_des¸ùti⁄
 *
	g«ndubi
 = 
gë_Êash_öfo
();

158 
ubi_∑π
 *
	gubivﬁ
;

159 
ubi_mkvﬁ_ªque°
 
	gªq
;

160 
mtd_ubi_öfo
 *
	gmtd_öfo
;

161 
	gmtdnum
;

162 
	gnode
[64];

163 
	gîr
;

164 
Êash_des¸ùti⁄
 *
	gÊash
 = 
gë_Êash_öfo
();

170 
	gmtdnum
 = 
gë_mtd_‰om_devi˚
(
cfg
->
devi˚
);

171 i‡(
	gmtdnum
 < 0) {

173 
	gmtdnum
 = 
gë_mtd_‰om_«me
(
cfg
->
devi˚
);

175 i‡(
	gmtdnum
 < 0 || !
mtd_dev_¥e£¡
(
Êash
->
libmtd
, 
mtdnum
)) {

176 
ERROR
("%s doesÇotÉxist:ÖartitioningÇotÖossible",

177 
cfg
->
devi˚
);

178  -
	gENODEV
;

181 
	gmtd_öfo
 = &
«ndubi
->
mtd_öfo
[
mtdnum
];

186 
	gubivﬁ
 = 
mtd_öfo
->
ubi_∑πôi⁄s
.
lh_fú°
;

187 
	gubivﬁ
 = 
mtd_öfo
->
ubi_∑πôi⁄s
.
lh_fú°
;

188 
	gubivﬁ
 !
NULL
;

189 
	gubivﬁ
 = 
ubivﬁ
->
√xt
.
À_√xt
) {

190 i‡(
°rcmp
(
ubivﬁ
->
vﬁ_öfo
.
«me
, 
cfg
->
vﬁ«me
) == 0) {

195 i‡(
	gubivﬁ
) {

196 
	gªque°ed_Àbs
, 
	gÆloˇãd_Àbs
;

199 i‡(!
	gmtd_öfo
->
	gdev_öfo
.
	gÀb_size
) {

200  -
	gEFAULT
;

204 
	gªque°ed_Àbs
 = 
cfg
->
∑πsize
 / 
mtd_öfo
->
dev_öfo
.
Àb_size
 +

205 ((
cfg
->
∑πsize
 % 
mtd_öfo
->
dev_öfo
.
Àb_size
) ? 1 : 0);

206 
	gÆloˇãd_Àbs
 = 
ubivﬁ
->
vﬁ_öfo
.
d©a_byãs
 / 
mtd_öfo
->
dev_öfo
.
Àb_size
;

208 i‡(
	gªque°ed_Àbs
 =
Æloˇãd_Àbs
)

211 
¢¥ötf
(
node
, “ode), "/dev/ubi%d", 
ubivﬁ
->
vﬁ_öfo
.
dev_num
);

212 
	gîr
 = 
ubi_rmvﬁ
(
«ndubi
->
libubi
, 
node
, 
ubivﬁ
->
vﬁ_öfo
.
vﬁ_id
);

213 i‡(
	gîr
) {

214 
ERROR
("Vﬁumê%†ˇ¬Ÿ bêdr›≥d", 
ubivﬁ
->
vﬁ_öfo
.
«me
);

217 
TRACE
("Removed UBI Vﬁumê%s", 
ubivﬁ
->
vﬁ_öfo
.
«me
);

219 
LIST_REMOVE
(
ubivﬁ
, 
√xt
);

220 
‰ì
(
ubivﬁ
);

224 
¢¥ötf
(
node
, “ode), "/dev/ubi%d", 
mtd_öfo
->
dev_öfo
.
dev_num
);

230 
mem£t
(&
ªq
, 0, (req));

231 i‡(!
°rcmp
(
cfg
->
ty≥_d©a
, "static"))

232 
	gªq
.
	gvﬁ_ty≥
 = 
UBI_STATIC_VOLUME
;

234 
	gªq
.
	gvﬁ_ty≥
 = 
UBI_DYNAMIC_VOLUME
;

235 
	gªq
.
	gvﬁ_id
 = 
UBI_VOL_NUM_AUTO
;

236 
	gªq
.
	gÆignmít
 = 1;

237 
	gªq
.
	gbyãs
 = 
cfg
->
∑πsize
;

238 
	gªq
.
	g«me
 = 
cfg
->
vﬁ«me
;

239 
	gîr
 = 
ubi_mkvﬁ
(
«ndubi
->
libubi
, 
node
, &
ªq
);

240 i‡(
	gîr
 < 0) {

241 
ERROR
("cannot create UBIvolume %s of %lld bytes",

242 
ªq
.
«me
,Ñeq.
byãs
);

243  
	gîr
;

246 
	gubivﬁ
 = (
ubi_∑π
 *)
ˇŒoc
(1, (ubi_part));

247 i‡(!
	gubivﬁ
) {

248 
ERROR
("No memory: malloc failed");

249  -
	gENOMEM
;

251 
	gîr
 = 
ubi_gë_vﬁ_öfo1
(
«ndubi
->
libubi
,

252 
mtd_öfo
->
dev_öfo
.
dev_num
, 
ªq
.
vﬁ_id
,

253 &
ubivﬁ
->
vﬁ_öfo
);

254 i‡(
	gîr
) {

255 
ERROR
("cannot get informationábout "

257  
	gîr
;

259 
LIST_INSERT_HEAD
(&
mtd_öfo
->
ubi_∑πôi⁄s
, 
ubivﬁ
, 
√xt
);

260 
TRACE
("Created UBI Volume %s of %lld bytes (requested %lld)",

261 
ªq
.
«me
, 
ubivﬁ
->
vﬁ_öfo
.
d©a_byãs
,Ñeq.
byãs
);

266 
__©åibuã__
((
c⁄°ru˘‹
))

267 
	$ubi_h™dÀr
()

269 
	`ªgi°î_h™dÀr
("ubivﬁ", 
ö°Æl_ubivﬁ_image
,

270 
IMAGE_HANDLER
, 
NULL
);

271 
	`ªgi°î_h™dÀr
("ubù¨tôi⁄", 
adju°_vﬁume
,

272 
PARTITION_HANDLER
, 
NULL
);

273 
	}
}

	@swupdate/handlers/ucfw_handler.c

59 
	~<°dio.h
>

60 
	~<°dlib.h
>

61 
	~<°döt.h
>

62 
	~<°dboﬁ.h
>

63 
	~<°rög.h
>

64 
	~<uni°d.h
>

65 
	~<˘y≥.h
>

66 
	~<f˙é.h
>

67 
	~<î∫o.h
>

68 
	~<sys/£À˘.h
>

69 
	~<ãrmios.h
>

70 
	~<gpiod.h
>

72 
	~"swupd©e.h
"

73 
	~"h™dÀr.h
"

74 
	~"utû.h
"

76 
	#MODE_PROG
 0

	)

77 
	#MODE_NORMAL
 1

	)

79 
	#RESET_CONSUMER
 "swupd©e-uc-h™dÀr"

	)

80 
	#PROG_CONSUMER
 
RESET_CONSUMER


	)

81 
	#DEFAULT_TIMEOUT
 2

	)

83 
ucfw_h™dÀr
();

90 
	smode_£tup
 {

91 
	mgpiodev
[
SWUPDATE_GENERAL_STRING_SIZE
];

92 
	moff£t
;

93 
boﬁ
 
	ma˘ive_low
;

97 
	mDEVGPIO
,

98 
	mGPIONUM
,

99 
	mACTIVELOW


102 
	sh™dÀr_¥iv
 {

103 
mode_£tup
 
	mª£t
;

104 
mode_£tup
 
	m¥og
;

105 
	mfdu¨t
;

106 
boﬁ
 
	mdebug
;

107 
	mtimeout
;

108 
	mbuf
[1024];

109 
	mnbyãs
;

112 
	$swôch_mode
(*
devª£t
, 
ªsoff£t
, *
dev¥og
, 
¥ogoff£t
, 
mode
)

114 
gpiod_chù
 *
chùª£t
, *
chù¥og
;

115 
gpiod_löe
 *
löîe£t
, *
löïrog
;

116 
ªt
 = 0;

117 
°©us
;

119 
chùª£t
 = 
	`gpiod_chù_›í
(
devª£t
);

120 i‡(
	`°rcmp
(
devª£t
, 
dev¥og
))

121 
chù¥og
 = 
	`gpiod_chù_›í
(
dev¥og
);

123 
chù¥og
 = 
chùª£t
;

125 i‡(!
chùª£t
 || !
chù¥og
) {

126 
	`ERROR
("Cannot open gpio driver");

127 
ªt
 =-
ENODEV
;

128 
‰ìgpios
;

131 
löîe£t
 = 
	`gpiod_chù_gë_löe
(
chùª£t
, 
ªsoff£t
);

132 
löïrog
 = 
	`gpiod_chù_gë_löe
(
chù¥og
, 
¥ogoff£t
);

134 i‡(!
löîe£t
 || !
löïrog
) {

135 
	`ERROR
("Cannot getÑequested GPIOs: %d on %sánd %d on %s",

136 
ªsoff£t
, 
devª£t
,

137 
¥ogoff£t
, 
dev¥og
);

138 
ªt
 =-
ENODEV
;

139 
‰ìgpios
;

142 #ifde‡
CONFIG_UCFW_OLD_LIBGPIOD


143 
°©us
 = 
	`gpiod_löe_ªque°_ouçut
(
löîe£t
, 
RESET_CONSUMER
, 
Ál£
, 0);

145 
°©us
 = 
	`gpiod_löe_ªque°_ouçut
(
löîe£t
, 
RESET_CONSUMER
, 0);

147 i‡(
°©us
) {

148 
ªt
 =-
ENODEV
;

149 
	`ERROR
("CannotÑequestÑesetÜine");

150 
‰ìgpios
;

152 #ifde‡
CONFIG_UCFW_OLD_LIBGPIOD


153 
°©us
 = 
	`gpiod_löe_ªque°_ouçut
(
löïrog
, 
PROG_CONSUMER
, 
Ál£
, 
mode
);

155 
°©us
 = 
	`gpiod_löe_ªque°_ouçut
(
löïrog
, 
PROG_CONSUMER
, 
mode
);

157 i‡(
°©us
) {

158 
ªt
 =-
ENODEV
;

159 
	`ERROR
("CannotÑequestÖrogÜine");

160 
‰ìgpios
;

166 
	`gpiod_löe_£t_vÆue
(
löîe£t
, 0);

169 
	`gpiod_löe_£t_vÆue
(
löïrog
, 
mode
);

171 
	`u¶ìp
(20000);

174 
	`gpiod_löe_£t_vÆue
(
löîe£t
, 1);

176 
	`u¶ìp
(20000);

178 
‰ìgpios
:

179 i‡(
chùª£t
Ë
	`gpiod_chù_˛o£
(chipreset);

180 i‡(
chù¥og
 && (chù¥og !
chùª£t
)Ë
	`gpiod_chù_˛o£
(chipprog);

182  
ªt
;

183 
	}
}

185 
boﬁ
 
	$vîify_chksum
(*
buf
, *
size
)

187 
i
;

188 
uöt16_t
 
chksum
 = 0;

189 
Àn
 = *
size
;

191 i‡(
Àn
 < 3)

192  
Ál£
;

193 
buf
[
Àn
 - 1] == '\r' || (buf[len - 1] == '\n'))

194 
Àn
--;

195 
chksum
 = 
	`‰om_ascii
(&
buf
[
Àn
 - 2], 2, 
LG_16
);

196 
Àn
 -= 2;

197 
i
 = 1; i < 
Àn
; i++)

198 
chksum
 +
buf
[
i
];

200 
chksum
 &= 0xff;

202 i‡(
chksum
)

203 
	`ERROR
("Wr⁄g checksumÑe˚ived: %x", 
chksum
);

208 
buf
[
Àn
] = '\0';

210 *
size
 = 
Àn
;

212  (
chksum
 == 0);

213 
	}
}

220 
	$ö£π_chksum
(*
buf
, 
Àn
)

222 
uöt16_t
 
chksum
 = 0;

223 
i
;

226 
i
 = 1; i < 
Àn
; i++)

227 
chksum
 +
buf
[
i
];

228 
chksum
 = (~chksum + 1);

229 
	`•rötf
(&
buf
[
Àn
], "%02X", 
chksum
 & 0xFF);

230 
Àn
 += 2;

232 
buf
[
Àn
++] = '\r';

233 
buf
[
Àn
++] = '\n';

235  
Àn
;

236 
	}
}

238 
	$£t_u¨t
 (
fd
)

240 
ãrmios
 
ây
;

242 i‡(
	`tcgë©å
 (
fd
, &
ây
) < 0) {

243 
	`¥ötf
 ("Eº‹ fromÅcgë©å: %s\n", 
	`°ªº‹
 (
î∫o
));

247 
	`cf£to•ìd
 (&
ây
, (
•ìd_t
Ë
B115200
);

248 
	`cf£ti•ìd
 (&
ây
, (
•ìd_t
Ë
B115200
);

250 
ây
.
c_cÊag
 |(
CLOCAL
 | 
CREAD
);

251 
ây
.
c_cÊag
 &~
CSIZE
;

252 
ây
.
c_cÊag
 |
CS8
;

253 
ây
.
c_cÊag
 &~
PARENB
;

254 
ây
.
c_cÊag
 &~
CSTOPB
;

255 
ây
.
c_cÊag
 &~
CRTSCTS
;

258 
ây
.
c_iÊag
 &=

259 ~(
IGNBRK
 | 
BRKINT
 | 
PARMRK
 | 
ISTRIP
 | 
INLCR
 | 
IGNCR
 | 
ICRNL
 | 
IXON
);

260 
ây
.
c_iÊag
 |(
IGNBRK
 | 
IGNPAR
);

261 
ây
.
c_lÊag
 &~(
ECHO
 | 
ECHOE
 | 
ECHOK
 | 
ECHOCTL
 | 
ECHOKE
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
);

262 
ây
.
c_oÊag
 &~(
OPOST
 | 
ONLCR
);

265 
ây
.
c_cc
[
VMIN
] = 1;

266 
ây
.
c_cc
[
VTIME
] = 1;

268 i‡(
	`tc£èâr
 (
fd
, 
TCSANOW
, &
ây
) != 0) {

269 
	`¥ötf
 ("Eº‹ fromÅc£èâr: %s\n", 
	`°ªº‹
 (
î∫o
));

273 
	`tcÊush
(
fd
, 
TCIFLUSH
);

274 
	`tcÊush
(
fd
, 
TCOFLUSH
);

277 
	}
}

282 
	$dump_ascii
(
boﬁ
 
rxdú
, *
buf
, 
cou¡
)

284 
i
;

285 *
outbuf
 = (*)
	`mÆloc
(
cou¡
 + 40);

286 *
tmp
 = 
outbuf
;

287 
Àn
;

289 i‡(!
outbuf
)

292 
Àn
 = 
	`•rötf
(
tmp
, "%cX: %d bytes:",

293 
rxdú
 ? 'R' : 'T',

294 
cou¡
);

295 
tmp
 +
Àn
;

296 
i
=0; i < 
cou¡
; i++) {

297 
	`•rötf
(
tmp
, "%c", 
buf
[
i
]);

298 
tmp
++;

301 
	`TRACE
("%s", 
outbuf
);

303 
	`‰ì
(
outbuf
);

304 
	}
}

306 
	$ª˚ive_msg
(
fd
, *
rx
, 
size_t
 
size
,

307 
timeout
, 
boﬁ
 
debug
)

309 
fd_£t
 
fds
;

310 
timevÆ
 
tv
;

311 
ªt
;

312 
cou¡
;

315 
	`FD_ZERO
(&
fds
);

316 
	`FD_SET
(
fd
, &
fds
);

323 
tv
.
tv_£c
 = 
timeout
;

324 
tv
.
tv_u£c
 = 0;

326 
ªt
 = 
	`£À˘
(
fd
 + 1, &
fds
, 
NULL
, NULL, &
tv
);

327 i‡(
ªt
 == 0) {

328 
	`ERROR
("Timeout,Çoánswer from microcontroller");

329  -
EPROTO
;

332 
ªt
 = 
	`ªad
(
fd
, 
rx
, 
size
);

333 i‡(
ªt
 < 3) {

334 
	`ERROR
("Eº‹ i¿ªad: %d", 
ªt
);

335  -
EBADMSG
;

337 
cou¡
 = 
ªt
;

339 i‡(
debug
)

340 
	`dump_ascii
(
åue
, 
rx
, 
cou¡
);

345 i‡(
rx
[0] != '$') {

346 
	`ERROR
("Fú° byã i†nŸ '$' buà'%c'", 
rx
[0]);

347  -
EBADMSG
;

350 i‡(!
	`vîify_chksum
(
rx
, &
cou¡
)) {

351  -
EBADMSG
;

355 
	}
}

357 
	$wrôe_d©a
(
fd
, *
buf
, 
size_t
 
size
)

359 
wrôãn
;

360 
wrôãn
 = 
	`wrôe
(
fd
, 
buf
, 
size
);

361 i‡(
wrôãn
 !
size
) {

362 
	`ERROR
("Eº‹ i¿wrôê%d", 
wrôãn
);

363  -
EFAULT
;

367 
	}
}

369 
	$wrôe_msg
(
fd
, c⁄° *
msg
)

371 
Àn
, 
ªt
;

372 *
buf
;

374 
buf
 = 
	`°rdup
(
msg
);

376 
Àn
 = 
	`ö£π_chksum
(
buf
, 
	`°æí
(buf));

377 
ªt
 = 
	`wrôe_d©a
(
fd
, 
buf
, 
Àn
);

378 
	`‰ì
(
buf
);

379  
ªt
;

380 
	}
}

382 
	$¥ï¨e_upd©e
(
h™dÀr_¥iv
 *
¥iv
,

383 
img_ty≥
 *
img
)

385 
ªt
;

386 
msg
[128];

387 
Àn
;

389 
ªt
 = 
	`swôch_mode
(
¥iv
->
ª£t
.
gpiodev
,Öriv->ª£t.
off£t
,

390 
¥iv
->
¥og
.
gpiodev
,Öriv->¥og.
off£t
, 
MODE_PROG
);

391 i‡(
ªt
 < 0) {

392  -
ENODEV
;

395 
	`DEBUG
("Usög %s", 
img
->
devi˚
);

397 
¥iv
->
fdu¨t
 = 
	`›í
(
img
->
devi˚
, 
O_RDWR
);

399 i‡(
¥iv
->
fdu¨t
 < 0) {

400 
	`ERROR
("C™nŸ o≥¿UART %s", 
img
->
devi˚
);

401  -
ENODEV
;

404 
	`£t_u¨t
(
¥iv
->
fdu¨t
);

407 
¥iv
->
nbyãs
 = 0;

409 
	`wrôe_msg
(
¥iv
->
fdu¨t
, "$PROG;");

411 
Àn
 = 
	`ª˚ive_msg
(
¥iv
->
fdu¨t
, 
msg
, (msg),Öriv->
timeout
,Öriv->
debug
);

412 i‡(
Àn
 < 0 || 
	`°rcmp
(
msg
, "$READY;"))

413  -
EBADMSG
;

416 
	}
}

418 
	$upd©e_fw
(*
d©a
, c⁄° *
buf„r
, 
size
)

420 
˙t
 = 0;

421 
c
;

422 
ªt
;

423 
msg
[80];

424 
h™dÀr_¥iv
 *
¥iv
 = (h™dÀr_¥iv *)
d©a
;

425 c⁄° *
buf
 = (c⁄° *)
buf„r
;

427 
size
 > 0) {

428 
c
 = 
buf
[
˙t
++];

429 
¥iv
->
buf
[¥iv->
nbyãs
++] = 
c
;

430 
size
--;

431 i‡(
c
 == '\n') {

433 i‡(
¥iv
->
debug
)

434 
	`dump_ascii
(
Ál£
, 
¥iv
->
buf
,Öriv->
nbyãs
);

435 
ªt
 = 
	`wrôe_d©a
(
¥iv
->
fdu¨t
,Öriv->
buf
,Öriv->
nbyãs
);

436 i‡(
ªt
 < 0)

437  
ªt
;

438 
¥iv
->
buf
[¥iv->
nbyãs
] = '\0';

439 
msg
[0] = '\0';

440 
ªt
 = 
	`ª˚ive_msg
(
¥iv
->
fdu¨t
, 
msg
, (msg),

441 
¥iv
->
timeout
,Öriv->
debug
);

442 
¥iv
->
nbyãs
 = 0;

443 i‡(
ªt
 < 0) {

444  
ªt
;

446 i‡(!
	`°rcmp
(
msg
, "$READY;"))

448 i‡(!
	`°rcmp
(
msg
, "$COMPLETED;"))

453 
	}
}

455 
	$föish_upd©e
(
h™dÀr_¥iv
 *
¥iv
)

457 
ªt
;

459 
	`˛o£
(
¥iv
->
fdu¨t
);

460 
ªt
 = 
	`swôch_mode
(
¥iv
->
ª£t
.
gpiodev
,Öriv->ª£t.
off£t
,

461 
¥iv
->
¥og
.
gpiodev
,Öriv->¥og.
off£t
, 
MODE_NORMAL
);

462 i‡(
ªt
 < 0) {

463  -
ENODEV
;

466 
	}
}

468 
	$gë_gpio_‰om_¥›îty
(
di˘_li°
 *
¥›
, 
mode_£tup
 *
gpio
)

470 
di˘_li°_ñem
 *
íåy
;

471 
i
;

473 
	`mem£t
(
gpio
, 0, (*gpio));

475 
	`LIST_FOREACH
(
íåy
, 
¥›
, 
√xt
) {

476 *
s
 = 
	`°rdup
(
íåy
->
vÆue
);

477 
i
 = 0; i < 3; i++) {

478 *
t
 = 
	`°rchr
(
s
, ':');

480 i‡(
t
) *t = '\0';

481 
i
) {

483 
	`°∫˝y
(
gpio
->
gpiodev
, 
s
, (gpio->gpiodev));

486 
î∫o
 = 0;

487 
gpio
->
off£t
 = 
	`°πoul
(
s
, 
NULL
, 10);

488 i‡(
î∫o
 =
EINVAL
)

489  -
EINVAL
;

492 i‡(!
	`°rcmp
(
s
, "true"))

493 
gpio
->
a˘ive_low
 = 
åue
;

497 i‡(!
t
)

499 
s
 = ++
t
;

504 
	}
}

506 
ö°Æl_uc_fúmw¨e_image
(
img_ty≥
 *
img
,

507 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

509 
h™dÀr_¥iv
 
	ghnd_d©a
;

510 
di˘_li°
 *
	g¥›îtõs
;

511 
di˘_li°_ñem
 *
	gíåy
;

512 
	g˙t
, 
	gªt
 = 0;

513 
mode_£tup
 *
	ggpio
;

515 
mem£t
(&
hnd_d©a
, 0, (hnd_data));

516 
	ghnd_d©a
.
	gtimeout
 = 
DEFAULT_TIMEOUT
;

518 c⁄° *
	g¥›îtõs_li°
[] = { "reset", "prog"};

520 
	g˙t
 = 0; c¡ < 
ARRAY_SIZE
(
¥›îtõs_li°
); cnt++) {

524 
	g¥›îtõs
 = 
di˘_gë_li°
(&
img
->
¥›îtõs
,

525 
¥›îtõs_li°
[
˙t
]);

526 i‡(!
	g¥›îtõs
) {

527 
ERROR
("MIssög sëu∞f‹ %†GPIO", 
¥›îtõs_li°
[
˙t
]);

528  -
	gEINVAL
;

531 
	ggpio
 = (
˙t
 =0Ë? &
hnd_d©a
.
ª£t
 : &hnd_d©a.
¥og
;

533 
gë_gpio_‰om_¥›îty
(
¥›îtõs
, 
gpio
);

534 
DEBUG
("line %s : device %s,Çum = %d,áctive_low = %s",

535 
¥›îtõs_li°
[
˙t
],

536 
gpio
->
gpiodev
,

537 
gpio
->
off£t
,

538 
gpio
->
a˘ive_low
 ? "true" : "false");

541 
	g¥›îtõs
 = 
di˘_gë_li°
(&
img
->
¥›îtõs
, "debug");

542 i‡(
	g¥›îtõs
) {

543 
	gíåy
 = 
LIST_FIRST
(
¥›îtõs
);

544 i‡(
	gíåy
 && !
°rcmp
(
íåy
->
vÆue
, "true"))

545 
	ghnd_d©a
.
	gdebug
 = 
åue
;

548 
	g¥›îtõs
 = 
di˘_gë_li°
(&
img
->
¥›îtõs
, "timeout");

549 i‡(
	g¥›îtõs
) {

550 
	gíåy
 = 
LIST_FIRST
(
¥›îtõs
);

551 i‡(
	gíåy
 && (
°πoul
(
íåy
->
vÆue
, 
NULL
, 10) > 0))

552 
	ghnd_d©a
.
	gtimeout
 = 
°πoul
(
íåy
->
vÆue
, 
NULL
, 10);

555 
	gªt
 = 
¥ï¨e_upd©e
(&
hnd_d©a
, 
img
);

556 i‡(
	gªt
) {

557 
ERROR
("Prepare failed !!");

558 
	gh™dÀr_exô
;

561 
	gªt
 = 
c›yimage
(&
hnd_d©a
, 
img
, 
upd©e_fw
);

562 i‡(
	gªt
) {

563 
ERROR
("Transferring imageÅo uController wasÇot successful");

564 
	gh™dÀr_exô
;

567 
	gh™dÀr_exô
:

570 
föish_upd©e
(&
hnd_d©a
);

571  
	gªt
;

574 
__©åibuã__
((
c⁄°ru˘‹
))

575 
	$ucfw_h™dÀr
()

577 
	`ªgi°î_h™dÀr
("ucfw", 
ö°Æl_uc_fúmw¨e_image
,

578 
IMAGE_HANDLER
, 
NULL
);

579 
	}
}

	@swupdate/include/bootloader.h

8 #i‚de‡
_BOOTLOADER_INTERFACE_H


9 
	#_BOOTLOADER_INTERFACE_H


	)

21 
boŸlﬂdî_ív_£t
(c⁄° *
«me
, c⁄° *
vÆue
);

32 
boŸlﬂdî_ív_un£t
(c⁄° *
«me
);

44 *
boŸlﬂdî_ív_gë
(c⁄° *
«me
);

54 
boŸlﬂdî_≠∂y_li°
(c⁄° *
s¸ùt
);

	@swupdate/include/bsdqueue.h

34 #i‚def 
_SYS_QUEUE_H_


35 
	#_SYS_QUEUE_H_


	)

90 #ifde‡
__NëBSD__


91 
	~<sys/nuŒ.h
>

94 #i‡
deföed
(
QUEUEDEBUG
)

95 #i‡
deföed
(
_KERNEL
)

96 
	#QUEUEDEBUG_ABORT
(...Ë
	`∑nic
(
__VA_ARGS__
)

	)

98 
	~<îr.h
>

99 
	#QUEUEDEBUG_ABORT
(...Ë
	`îr
(1, 
__VA_ARGS__
)

	)

106 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

107 
	s«me
 { \

108 
ty≥
 *
¶h_fú°
; \

109 }

	)

111 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

112 { 
NULL
 }

	)

114 
	#SLIST_ENTRY
(
ty≥
) \

116 
ty≥
 *
¶e_√xt
; \

117 }

	)

122 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

123 
	#SLIST_END
(
hód
Ë
NULL


	)

124 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

125 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

127 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

128 (
v¨
Ë(
hód
)->
¶h_fú°
; \

129 (
v¨
Ë!
	`SLIST_END
(
hód
); \

130 (
v¨
Ë(v¨)->
fõld
.
¶e_√xt
)

	)

132 
	#SLIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

133 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

134 (
v¨
Ë!
	`SLIST_END
(
hód
) && \

135 ((
tv¨
Ë
	`SLIST_NEXT
((
v¨
), 
fõld
), 1); \

136 (
v¨
Ë(
tv¨
))

	)

141 
	#SLIST_INIT
(
hód
) do { \

142 (
hód
)->
¶h_fú°
 = 
	`SLIST_END
(head); \

143 }  0)

	)

145 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

146 (
ñm
)->
fõld
.
¶e_√xt
 = (
¶i°ñm
)->field.sle_next; \

147 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = (
ñm
); \

148 }  0)

	)

150 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

151 (
ñm
)->
fõld
.
¶e_√xt
 = (
hód
)->
¶h_fú°
; \

152 (
hód
)->
¶h_fú°
 = (
ñm
); \

153 }  0)

	)

155 
	#SLIST_REMOVE_AFTER
(
¶i°ñm
, 
fõld
) do { \

156 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = \

157 
	`SLIST_NEXT
(SLIST_NEXT((
¶i°ñm
), 
fõld
), field); \

158 }  0)

	)

160 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

161 (
hód
)->
¶h_fú°
 = (hód)->¶h_fú°->
fõld
.
¶e_√xt
; \

162 }  0)

	)

164 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

165 i‡((
hód
)->
¶h_fú°
 =(
ñm
)) { \

166 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

169 
ty≥
 *
cuªlm
 = (
hód
)->
¶h_fú°
; \

170 
cuªlm
->
fõld
.
¶e_√xt
 !(
ñm
)) \

171 
cuªlm
 = cuªlm->
fõld
.
¶e_√xt
; \

172 
cuªlm
->
fõld
.
¶e_√xt
 = \

173 
cuªlm
->
fõld
.
¶e_√xt
->field.sle_next; \

175 }  0)

	)

181 
	#LIST_HEAD
(
«me
, 
ty≥
) \

182 
	s«me
 { \

183 
ty≥
 *
lh_fú°
; \

184 }

	)

186 
	#LIST_HEAD_INITIALIZER
(
hód
) \

187 { 
NULL
 }

	)

189 
	#LIST_ENTRY
(
ty≥
) \

191 
ty≥
 *
À_√xt
; \

192 
ty≥
 **
À_¥ev
; \

193 }

	)

198 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

199 
	#LIST_END
(
hód
Ë
NULL


	)

200 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
	`LIST_END
(hód))

	)

201 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

203 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

204 (
v¨
Ë((
hód
)->
lh_fú°
); \

205 (
v¨
Ë!
	`LIST_END
(
hód
); \

206 (
v¨
Ë((v¨)->
fõld
.
À_√xt
))

	)

208 
	#LIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

209 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

210 (
v¨
Ë!
	`LIST_END
(
hód
) && \

211 ((
tv¨
Ë
	`LIST_NEXT
((
v¨
), 
fõld
), 1); \

212 (
v¨
Ë(
tv¨
))

	)

214 
	#LIST_MOVE
(
hód1
, 
hód2
) do { \

215 
	`LIST_INIT
((
hód2
)); \

216 i‡(!
	`LIST_EMPTY
((
hód1
))) { \

217 (
hód2
)->
lh_fú°
 = (
hód1
)->lh_first; \

218 
	`LIST_INIT
((
hód1
)); \

220 }  0)

	)

225 #i‡
deföed
(
QUEUEDEBUG
)

226 
	#QUEUEDEBUG_LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) \

227 i‡((
hód
)->
lh_fú°
 && \

228 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 != &(head)->lh_first) \

229 
	`QUEUEDEBUG_ABORT
("LIST_INSERT_HEAD %∞%s:%d", (
hód
), \

230 
__FILE__
, 
__LINE__
);

	)

231 
	#QUEUEDEBUG_LIST_OP
(
ñm
, 
fõld
) \

232 i‡((
ñm
)->
fõld
.
À_√xt
 && \

233 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 != \

234 &(
ñm
)->
fõld
.
À_√xt
) \

235 
	`QUEUEDEBUG_ABORT
("LIST_* f‹w %∞%s:%d", (
ñm
), \

236 
__FILE__
, 
__LINE__
); \

237 i‡(*(
ñm
)->
fõld
.
À_¥ev
 != (elm)) \

238 
	`QUEUEDEBUG_ABORT
("LIST_* back %∞%s:%d", (
ñm
), \

239 
__FILE__
, 
__LINE__
);

	)

240 
	#QUEUEDEBUG_LIST_POSTREMOVE
(
ñm
, 
fõld
) \

241 (
ñm
)->
fõld
.
À_√xt
 = (*)1L; \

242 (
ñm
)->
fõld
.
À_¥ev
 = (*)1L;

	)

244 
	#QUEUEDEBUG_LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
)

	)

245 
	#QUEUEDEBUG_LIST_OP
(
ñm
, 
fõld
)

	)

246 
	#QUEUEDEBUG_LIST_POSTREMOVE
(
ñm
, 
fõld
)

	)

249 
	#LIST_INIT
(
hód
) do { \

250 (
hód
)->
lh_fú°
 = 
	`LIST_END
(head); \

251 }  0)

	)

253 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

254 
	`QUEUEDEBUG_LIST_OP
((
li°ñm
), 
fõld
) \

255 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
)->field.le_next) != \

256 
	`LIST_END
(
hód
)) \

257 (
li°ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

258 &(
ñm
)->
fõld
.
À_√xt
; \

259 (
li°ñm
)->
fõld
.
À_√xt
 = (
ñm
); \

260 (
ñm
)->
fõld
.
À_¥ev
 = &(
li°ñm
)->fõld.
À_√xt
; \

261 }  0)

	)

263 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

264 
	`QUEUEDEBUG_LIST_OP
((
li°ñm
), 
fõld
) \

265 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

266 (
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
); \

267 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

268 (
li°ñm
)->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
; \

269 }  0)

	)

271 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

272 
	`QUEUEDEBUG_LIST_INSERT_HEAD
((
hód
), (
ñm
), 
fõld
) \

273 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
hód
)->
lh_fú°
Ë!
	`LIST_END
(head))\

274 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
;\

275 (
hód
)->
lh_fú°
 = (
ñm
); \

276 (
ñm
)->
fõld
.
À_¥ev
 = &(
hód
)->
lh_fú°
; \

277 }  0)

	)

279 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

280 
	`QUEUEDEBUG_LIST_OP
((
ñm
), 
fõld
) \

281 i‡((
ñm
)->
fõld
.
À_√xt
 !
NULL
) \

282 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

283 (
ñm
)->
fõld
.
À_¥ev
; \

284 *(
ñm
)->
fõld
.
À_¥ev
 = (ñm)->fõld.
À_√xt
; \

285 
	`QUEUEDEBUG_LIST_POSTREMOVE
((
ñm
), 
fõld
) \

286 }  0)

	)

288 
	#LIST_REPLACE
(
ñm
, 
ñm2
, 
fõld
) do { \

289 i‡(((
ñm2
)->
fõld
.
À_√xt
 = (
ñm
)->fõld.À_√xtË!
NULL
) \

290 (
ñm2
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

291 &(
ñm2
)->
fõld
.
À_√xt
; \

292 (
ñm2
)->
fõld
.
À_¥ev
 = (
ñm
)->field.le_prev; \

293 *(
ñm2
)->
fõld
.
À_¥ev
 = (elm2); \

294 
	`QUEUEDEBUG_LIST_POSTREMOVE
((
ñm
), 
fõld
) \

295 }  0)

	)

300 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

301 
	s«me
 { \

302 
ty≥
 *
sqh_fú°
; \

303 
ty≥
 **
sqh_œ°
; \

304 }

	)

306 
	#SIMPLEQ_HEAD_INITIALIZER
(
hód
) \

307 { 
NULL
, &(
hód
).
sqh_fú°
 }

	)

309 
	#SIMPLEQ_ENTRY
(
ty≥
) \

311 
ty≥
 *
sqe_√xt
; \

312 }

	)

317 
	#SIMPLEQ_FIRST
(
hód
Ë((hód)->
sqh_fú°
)

	)

318 
	#SIMPLEQ_END
(
hód
Ë
NULL


	)

319 
	#SIMPLEQ_EMPTY
(
hód
Ë((hód)->
sqh_fú°
 =
	`SIMPLEQ_END
(hód))

	)

320 
	#SIMPLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
sqe_√xt
)

	)

322 
	#SIMPLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

323 (
v¨
Ë((
hód
)->
sqh_fú°
); \

324 (
v¨
Ë!
	`SIMPLEQ_END
(
hód
); \

325 (
v¨
Ë((v¨)->
fõld
.
sqe_√xt
))

	)

327 
	#SIMPLEQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
√xt
) \

328 (
v¨
Ë((
hód
)->
sqh_fú°
); \

329 (
v¨
Ë!
	`SIMPLEQ_END
(
hód
) && \

330 ((
√xt
 = ((
v¨
)->
fõld
.
sqe_√xt
)), 1); \

331 (
v¨
Ë(
√xt
))

	)

336 
	#SIMPLEQ_INIT
(
hód
) do { \

337 (
hód
)->
sqh_fú°
 = 
NULL
; \

338 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

339 }  0)

	)

341 
	#SIMPLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

342 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
hód
)->
sqh_fú°
Ë=
NULL
) \

343 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

344 (
hód
)->
sqh_fú°
 = (
ñm
); \

345 }  0)

	)

347 
	#SIMPLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

348 (
ñm
)->
fõld
.
sqe_√xt
 = 
NULL
; \

349 *(
hód
)->
sqh_œ°
 = (
ñm
); \

350 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

351 }  0)

	)

353 
	#SIMPLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

354 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
li°ñm
)->fõld.sqe_√xtË=
NULL
)\

355 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

356 (
li°ñm
)->
fõld
.
sqe_√xt
 = (
ñm
); \

357 }  0)

	)

359 
	#SIMPLEQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

360 i‡(((
hód
)->
sqh_fú°
 = (hód)->sqh_fú°->
fõld
.
sqe_√xt
Ë=
NULL
) \

361 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

362 }  0)

	)

364 
	#SIMPLEQ_REMOVE_AFTER
(
hód
, 
ñm
, 
fõld
) do { \

365 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (elm)->field.sqe_next->field.sqe_next) \

366 =
NULL
) \

367 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

368 }  0)

	)

370 
	#SIMPLEQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

371 i‡((
hód
)->
sqh_fú°
 =(
ñm
)) { \

372 
	`SIMPLEQ_REMOVE_HEAD
((
hód
), 
fõld
); \

374 
ty≥
 *
cuªlm
 = (
hód
)->
sqh_fú°
; \

375 
cuªlm
->
fõld
.
sqe_√xt
 !(
ñm
)) \

376 
cuªlm
 = cuªlm->
fõld
.
sqe_√xt
; \

377 i‡((
cuªlm
->
fõld
.
sqe_√xt
 = \

378 
cuªlm
->
fõld
.
sqe_√xt
->fõld.sqe_√xtË=
NULL
) \

379 (
hód
)->
sqh_œ°
 = &(
cuªlm
)->
fõld
.
sqe_√xt
; \

381 }  0)

	)

383 
	#SIMPLEQ_CONCAT
(
hód1
, 
hód2
) do { \

384 i‡(!
	`SIMPLEQ_EMPTY
((
hód2
))) { \

385 *(
hód1
)->
sqh_œ°
 = (
hód2
)->
sqh_fú°
; \

386 (
hód1
)->
sqh_œ°
 = (
hód2
)->sqh_last; \

387 
	`SIMPLEQ_INIT
((
hód2
)); \

389 }  0)

	)

391 
	#SIMPLEQ_LAST
(
hód
, 
ty≥
, 
fõld
) \

392 (
	`SIMPLEQ_EMPTY
((
hód
)) ? \

393 
NULL
 : \

394 ((
ty≥
 *)(*) \

395 ((*)((
hód
)->
sqh_œ°
Ë- 
	`off£tof
(
ty≥
, 
fõld
))))

	)

400 
	#_TAILQ_HEAD
(
«me
, 
ty≥
, 
quÆ
) \

401 
	s«me
 { \

402 
quÆ
 
ty≥
 *
tqh_fú°
; \

403 
quÆ
 
ty≥
 *quÆ *
tqh_œ°
; \

404 }

	)

405 
	#TAILQ_HEAD
(
«me
, 
ty≥
Ë
	`_TAILQ_HEAD
“ame, ty≥,)

	)

407 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

408 { 
	`TAILQ_END
(
hód
), &(hód).
tqh_fú°
 }

	)

410 
	#_TAILQ_ENTRY
(
ty≥
, 
quÆ
) \

412 
quÆ
 
ty≥
 *
tqe_√xt
; \

413 
quÆ
 
ty≥
 *quÆ *
tqe_¥ev
; \

414 }

	)

415 
	#TAILQ_ENTRY
(
ty≥
Ë
	`_TAILQ_ENTRY
(ty≥,)

	)

420 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

421 
	#TAILQ_END
(
hód
Ë(
NULL
)

	)

422 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

423 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

424 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

425 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

426 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

427 
	#TAILQ_EMPTY
(
hód
Ë(
	`TAILQ_FIRST
(hódË=
	`TAILQ_END
(hód))

	)

430 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

431 (
v¨
Ë((
hód
)->
tqh_fú°
); \

432 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

433 (
v¨
Ë((v¨)->
fõld
.
tqe_√xt
))

	)

435 
	#TAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
√xt
) \

436 (
v¨
Ë((
hód
)->
tqh_fú°
); \

437 (
v¨
Ë!
	`TAILQ_END
(
hód
) && \

438 ((
√xt
Ë
	`TAILQ_NEXT
(
v¨
, 
fõld
), 1); (v¨Ë“ext))

	)

440 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

441 (
v¨
Ë(*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_last));\

442 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

443 (
v¨
Ë(*(((
hód«me
 *)((v¨)->
fõld
.
tqe_¥ev
))->
tqh_œ°
)))

	)

445 
	#TAILQ_FOREACH_REVERSE_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
¥ev
) \

446 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

447 (
v¨
Ë!
	`TAILQ_END
(
hód
) && \

448 ((
¥ev
Ë
	`TAILQ_PREV
((
v¨
), 
hód«me
, 
fõld
), 1); (v¨Ë’ªv))

	)

453 #i‡
deföed
(
QUEUEDEBUG
)

454 
	#QUEUEDEBUG_TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) \

455 i‡((
hód
)->
tqh_fú°
 && \

456 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 != &(head)->tqh_first) \

457 
	`QUEUEDEBUG_ABORT
("TAILQ_INSERT_HEAD %∞%s:%d", (
hód
), \

458 
__FILE__
, 
__LINE__
);

	)

459 
	#QUEUEDEBUG_TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) \

460 i‡(*(
hód
)->
tqh_œ°
 !
NULL
) \

461 
	`QUEUEDEBUG_ABORT
("TAILQ_INSERT_TAIL %∞%s:%d", (
hód
), \

462 
__FILE__
, 
__LINE__
);

	)

463 
	#QUEUEDEBUG_TAILQ_OP
(
ñm
, 
fõld
) \

464 i‡((
ñm
)->
fõld
.
tqe_√xt
 && \

465 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 != \

466 &(
ñm
)->
fõld
.
tqe_√xt
) \

467 
	`QUEUEDEBUG_ABORT
("TAILQ_* f‹w %∞%s:%d", (
ñm
), \

468 
__FILE__
, 
__LINE__
); \

469 i‡(*(
ñm
)->
fõld
.
tqe_¥ev
 != (elm)) \

470 
	`QUEUEDEBUG_ABORT
("TAILQ_* back %∞%s:%d", (
ñm
), \

471 
__FILE__
, 
__LINE__
);

	)

472 
	#QUEUEDEBUG_TAILQ_PREREMOVE
(
hód
, 
ñm
, 
fõld
) \

473 i‡((
ñm
)->
fõld
.
tqe_√xt
 =
NULL
 && \

474 (
hód
)->
tqh_œ°
 !&(
ñm
)->
fõld
.
tqe_√xt
) \

475 
	`QUEUEDEBUG_ABORT
("TAILQ_PREREMOVE head %pÉlm %p %s:%d",\

476 (
hód
), (
ñm
), 
__FILE__
, 
__LINE__
);

	)

477 
	#QUEUEDEBUG_TAILQ_POSTREMOVE
(
ñm
, 
fõld
) \

478 (
ñm
)->
fõld
.
tqe_√xt
 = (*)1L; \

479 (
ñm
)->
fõld
.
tqe_¥ev
 = (*)1L;

	)

481 
	#QUEUEDEBUG_TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
)

	)

482 
	#QUEUEDEBUG_TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
)

	)

483 
	#QUEUEDEBUG_TAILQ_OP
(
ñm
, 
fõld
)

	)

484 
	#QUEUEDEBUG_TAILQ_PREREMOVE
(
hód
, 
ñm
, 
fõld
)

	)

485 
	#QUEUEDEBUG_TAILQ_POSTREMOVE
(
ñm
, 
fõld
)

	)

488 
	#TAILQ_INIT
(
hód
) do { \

489 (
hód
)->
tqh_fú°
 = 
	`TAILQ_END
(head); \

490 (
hód
)->
tqh_œ°
 = &(hód)->
tqh_fú°
; \

491 }  0)

	)

493 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

494 
	`QUEUEDEBUG_TAILQ_INSERT_HEAD
((
hód
), (
ñm
), 
fõld
) \

495 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
hód
)->
tqh_fú°
Ë!
	`TAILQ_END
(head))\

496 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = \

497 &(
ñm
)->
fõld
.
tqe_√xt
; \

499 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

500 (
hód
)->
tqh_fú°
 = (
ñm
); \

501 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
hód
)->
tqh_fú°
; \

502 }  0)

	)

504 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

505 
	`QUEUEDEBUG_TAILQ_INSERT_TAIL
((
hód
), (
ñm
), 
fõld
) \

506 (
ñm
)->
fõld
.
tqe_√xt
 = 
	`TAILQ_END
(
hód
); \

507 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

508 *(
hód
)->
tqh_œ°
 = (
ñm
); \

509 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

510 }  0)

	)

512 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

513 
	`QUEUEDEBUG_TAILQ_OP
((
li°ñm
), 
fõld
) \

514 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
)->field.tqe_next) != \

515 
	`TAILQ_END
(
hód
)) \

516 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

517 &(
ñm
)->
fõld
.
tqe_√xt
; \

519 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

520 (
li°ñm
)->
fõld
.
tqe_√xt
 = (
ñm
); \

521 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
li°ñm
)->fõld.
tqe_√xt
; \

522 }  0)

	)

524 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

525 
	`QUEUEDEBUG_TAILQ_OP
((
li°ñm
), 
fõld
) \

526 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

527 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

528 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

529 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

530 }  0)

	)

532 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

533 
	`QUEUEDEBUG_TAILQ_PREREMOVE
((
hód
), (
ñm
), 
fõld
) \

534 
	`QUEUEDEBUG_TAILQ_OP
((
ñm
), 
fõld
) \

535 i‡(((
ñm
)->
fõld
.
tqe_√xt
Ë!
	`TAILQ_END
(
hód
)) \

536 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

537 (
ñm
)->
fõld
.
tqe_¥ev
; \

539 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

540 *(
ñm
)->
fõld
.
tqe_¥ev
 = (ñm)->fõld.
tqe_√xt
; \

541 
	`QUEUEDEBUG_TAILQ_POSTREMOVE
((
ñm
), 
fõld
); \

542 }  0)

	)

544 
	#TAILQ_REPLACE
(
hód
, 
ñm
, 
ñm2
, 
fõld
) do { \

545 i‡(((
ñm2
)->
fõld
.
tqe_√xt
 = (
ñm
)->field.tqe_next) != \

546 
	`TAILQ_END
(
hód
)) \

547 (
ñm2
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

548 &(
ñm2
)->
fõld
.
tqe_√xt
; \

550 (
hód
)->
tqh_œ°
 = &(
ñm2
)->
fõld
.
tqe_√xt
; \

551 (
ñm2
)->
fõld
.
tqe_¥ev
 = (
ñm
)->field.tqe_prev; \

552 *(
ñm2
)->
fõld
.
tqe_¥ev
 = (elm2); \

553 
	`QUEUEDEBUG_TAILQ_POSTREMOVE
((
ñm
), 
fõld
); \

554 }  0)

	)

556 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

557 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

558 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

559 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

560 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

561 
	`TAILQ_INIT
((
hód2
)); \

563 }  0)

	)

568 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

569 
	s«me
 { \

570 
ty≥
 *
°qh_fú°
; \

571 
ty≥
 **
°qh_œ°
; \

572 }

	)

574 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

575 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

577 
	#STAILQ_ENTRY
(
ty≥
) \

579 
ty≥
 *
°qe_√xt
; \

580 }

	)

585 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

586 
	#STAILQ_END
(
hód
Ë
NULL


	)

587 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

588 
	#STAILQ_EMPTY
(
hód
Ë(
	`STAILQ_FIRST
(hódË=
	`STAILQ_END
(hód))

	)

593 
	#STAILQ_INIT
(
hód
) do { \

594 (
hód
)->
°qh_fú°
 = 
NULL
; \

595 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

596 }  0)

	)

598 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

599 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
hód
)->
°qh_fú°
Ë=
NULL
) \

600 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

601 (
hód
)->
°qh_fú°
 = (
ñm
); \

602 }  0)

	)

604 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

605 (
ñm
)->
fõld
.
°qe_√xt
 = 
NULL
; \

606 *(
hód
)->
°qh_œ°
 = (
ñm
); \

607 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

608 }  0)

	)

610 
	#STAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

611 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
li°ñm
)->fõld.°qe_√xtË=
NULL
)\

612 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

613 (
li°ñm
)->
fõld
.
°qe_√xt
 = (
ñm
); \

614 }  0)

	)

616 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

617 i‡(((
hód
)->
°qh_fú°
 = (hód)->°qh_fú°->
fõld
.
°qe_√xt
Ë=
NULL
) \

618 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

619 }  0)

	)

621 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

622 i‡((
hód
)->
°qh_fú°
 =(
ñm
)) { \

623 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

625 
ty≥
 *
cuªlm
 = (
hód
)->
°qh_fú°
; \

626 
cuªlm
->
fõld
.
°qe_√xt
 !(
ñm
)) \

627 
cuªlm
 = cuªlm->
fõld
.
°qe_√xt
; \

628 i‡((
cuªlm
->
fõld
.
°qe_√xt
 = \

629 
cuªlm
->
fõld
.
°qe_√xt
->fõld.°qe_√xtË=
NULL
) \

630 (
hód
)->
°qh_œ°
 = &(
cuªlm
)->
fõld
.
°qe_√xt
; \

632 }  0)

	)

634 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

635 (
v¨
Ë((
hód
)->
°qh_fú°
); \

636 (
v¨
); \

637 (
v¨
Ë((v¨)->
fõld
.
°qe_√xt
))

	)

639 
	#STAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

640 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

641 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

642 (
v¨
Ë(
tv¨
))

	)

644 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

645 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

646 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

647 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

648 
	`STAILQ_INIT
((
hód2
)); \

650 }  0)

	)

652 
	#STAILQ_LAST
(
hód
, 
ty≥
, 
fõld
) \

653 (
	`STAILQ_EMPTY
((
hód
)) ? \

654 
NULL
 : \

655 ((
ty≥
 *)(*) \

656 ((*)((
hód
)->
°qh_œ°
Ë- 
	`off£tof
(
ty≥
, 
fõld
))))

	)

659 #i‚de‡
_KERNEL


681 
__ölöe
 c⁄° * 
__œundî_ty≥
(const *);

682 
__ölöe
 const *

683 
	$__œundî_ty≥
(c⁄° *
__x
)

685 
__asm
 
	`__vﬁ©ûe
("" : "+r" (
__x
));

686  
__x
;

687 
	}
}

689 #i‡
deföed
(
QUEUEDEBUG
)

690 
	#QUEUEDEBUG_CIRCLEQ_HEAD
(
hód
, 
fõld
) \

691 i‡((
hód
)->
cqh_fú°
 !
	`CIRCLEQ_ENDC
(head) && \

692 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 !
	`CIRCLEQ_ENDC
(head)) \

693 
	`QUEUEDEBUG_ABORT
("CIRCLEQ hód f‹w %∞%s:%d", (
hód
), \

694 
__FILE__
, 
__LINE__
); \

695 i‡((
hód
)->
cqh_œ°
 !
	`CIRCLEQ_ENDC
(head) && \

696 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 !
	`CIRCLEQ_ENDC
(head)) \

697 
	`QUEUEDEBUG_ABORT
("CIRCLEQ hód back %∞%s:%d", (
hód
), \

698 
__FILE__
, 
__LINE__
);

	)

699 
	#QUEUEDEBUG_CIRCLEQ_ELM
(
hód
, 
ñm
, 
fõld
) \

700 i‡((
ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_ENDC
(
hód
)) { \

701 i‡((
hód
)->
cqh_œ°
 !(
ñm
)) \

702 
	`QUEUEDEBUG_ABORT
("CIRCLEQÉlmÜast %p %s:%d", \

703 (
ñm
), 
__FILE__
, 
__LINE__
); \

705 i‡((
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 != (elm)) \

706 
	`QUEUEDEBUG_ABORT
("CIRCLEQÉlm forw %p %s:%d", \

707 (
ñm
), 
__FILE__
, 
__LINE__
); \

709 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_ENDC
(
hód
)) { \

710 i‡((
hód
)->
cqh_fú°
 !(
ñm
)) \

711 
	`QUEUEDEBUG_ABORT
("CIRCLEQÉlm first %p %s:%d", \

712 (
ñm
), 
__FILE__
, 
__LINE__
); \

714 i‡((
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 != (elm)) \

715 
	`QUEUEDEBUG_ABORT
("CIRCLEQÉlmÖrev %p %s:%d", \

716 (
ñm
), 
__FILE__
, 
__LINE__
); \

717 }

	)

718 
	#QUEUEDEBUG_CIRCLEQ_POSTREMOVE
(
ñm
, 
fõld
) \

719 (
ñm
)->
fõld
.
cqe_√xt
 = (*)1L; \

720 (
ñm
)->
fõld
.
cqe_¥ev
 = (*)1L;

	)

722 
	#QUEUEDEBUG_CIRCLEQ_HEAD
(
hód
, 
fõld
)

	)

723 
	#QUEUEDEBUG_CIRCLEQ_ELM
(
hód
, 
ñm
, 
fõld
)

	)

724 
	#QUEUEDEBUG_CIRCLEQ_POSTREMOVE
(
ñm
, 
fõld
)

	)

727 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

728 
	s«me
 { \

729 
ty≥
 *
cqh_fú°
; \

730 
ty≥
 *
cqh_œ°
; \

731 }

	)

733 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

734 { 
	`CIRCLEQ_END
(&
hód
), CIRCLEQ_END(&hódË}

	)

736 
	#CIRCLEQ_ENTRY
(
ty≥
) \

738 
ty≥
 *
cqe_√xt
; \

739 
ty≥
 *
cqe_¥ev
; \

740 }

	)

745 
	#CIRCLEQ_INIT
(
hód
) do { \

746 (
hód
)->
cqh_fú°
 = 
	`CIRCLEQ_END
(head); \

747 (
hód
)->
cqh_œ°
 = 
	`CIRCLEQ_END
(head); \

748 }  0)

	)

750 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

751 
	`QUEUEDEBUG_CIRCLEQ_HEAD
((
hód
), 
fõld
) \

752 
	`QUEUEDEBUG_CIRCLEQ_ELM
((
hód
), (
li°ñm
), 
fõld
) \

753 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
)->field.cqe_next; \

754 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
); \

755 i‡((
li°ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_ENDC
(
hód
)) \

756 (
hód
)->
cqh_œ°
 = (
ñm
); \

758 (
li°ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (
ñm
); \

759 (
li°ñm
)->
fõld
.
cqe_√xt
 = (
ñm
); \

760 }  0)

	)

762 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

763 
	`QUEUEDEBUG_CIRCLEQ_HEAD
((
hód
), 
fõld
) \

764 
	`QUEUEDEBUG_CIRCLEQ_ELM
((
hód
), (
li°ñm
), 
fõld
) \

765 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
); \

766 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
)->field.cqe_prev; \

767 i‡((
li°ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_ENDC
(
hód
)) \

768 (
hód
)->
cqh_fú°
 = (
ñm
); \

770 (
li°ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (
ñm
); \

771 (
li°ñm
)->
fõld
.
cqe_¥ev
 = (
ñm
); \

772 }  0)

	)

774 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

775 
	`QUEUEDEBUG_CIRCLEQ_HEAD
((
hód
), 
fõld
) \

776 (
ñm
)->
fõld
.
cqe_√xt
 = (
hód
)->
cqh_fú°
; \

777 (
ñm
)->
fõld
.
cqe_¥ev
 = 
	`CIRCLEQ_END
(
hód
); \

778 i‡((
hód
)->
cqh_œ°
 =
	`CIRCLEQ_ENDC
(head)) \

779 (
hód
)->
cqh_œ°
 = (
ñm
); \

781 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 = (
ñm
); \

782 (
hód
)->
cqh_fú°
 = (
ñm
); \

783 }  0)

	)

785 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

786 
	`QUEUEDEBUG_CIRCLEQ_HEAD
((
hód
), 
fõld
) \

787 (
ñm
)->
fõld
.
cqe_√xt
 = 
	`CIRCLEQ_END
(
hód
); \

788 (
ñm
)->
fõld
.
cqe_¥ev
 = (
hód
)->
cqh_œ°
; \

789 i‡((
hód
)->
cqh_fú°
 =
	`CIRCLEQ_ENDC
(head)) \

790 (
hód
)->
cqh_fú°
 = (
ñm
); \

792 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 = (
ñm
); \

793 (
hód
)->
cqh_œ°
 = (
ñm
); \

794 }  0)

	)

796 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

797 
	`QUEUEDEBUG_CIRCLEQ_HEAD
((
hód
), 
fõld
) \

798 
	`QUEUEDEBUG_CIRCLEQ_ELM
((
hód
), (
ñm
), 
fõld
) \

799 i‡((
ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_ENDC
(
hód
)) \

800 (
hód
)->
cqh_œ°
 = (
ñm
)->
fõld
.
cqe_¥ev
; \

802 (
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = \

803 (
ñm
)->
fõld
.
cqe_¥ev
; \

804 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_ENDC
(
hód
)) \

805 (
hód
)->
cqh_fú°
 = (
ñm
)->
fõld
.
cqe_√xt
; \

807 (
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = \

808 (
ñm
)->
fõld
.
cqe_√xt
; \

809 
	`QUEUEDEBUG_CIRCLEQ_POSTREMOVE
((
ñm
), 
fõld
) \

810 }  0)

	)

812 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

813 (
v¨
Ë((
hód
)->
cqh_fú°
); \

814 (
v¨
Ë!
	`CIRCLEQ_ENDC
(
hód
); \

815 (
v¨
Ë((v¨)->
fõld
.
cqe_√xt
))

	)

817 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

818 (
v¨
Ë((
hód
)->
cqh_œ°
); \

819 (
v¨
Ë!
	`CIRCLEQ_ENDC
(
hód
); \

820 (
v¨
Ë((v¨)->
fõld
.
cqe_¥ev
))

	)

825 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

826 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

828 
	#CIRCLEQ_ENDC
(
hód
Ë(
	`__œundî_ty≥
(hód))

	)

830 
	#CIRCLEQ_END
(
hód
Ë((*)(hód))

	)

831 
	#CIRCLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

832 
	#CIRCLEQ_PREV
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

833 
	#CIRCLEQ_EMPTY
(
hód
) \

834 (
	`CIRCLEQ_FIRST
(
hód
Ë=
	`CIRCLEQ_ENDC
(hód))

	)

836 
	#CIRCLEQ_LOOP_NEXT
(
hód
, 
ñm
, 
fõld
) \

837 (((
ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_ENDC
(
hód
)) \

838 ? ((
hód
)->
cqh_fú°
) \

839 : (
ñm
->
fõld
.
cqe_√xt
))

	)

840 
	#CIRCLEQ_LOOP_PREV
(
hód
, 
ñm
, 
fõld
) \

841 (((
ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_ENDC
(
hód
)) \

842 ? ((
hód
)->
cqh_œ°
) \

843 : (
ñm
->
fõld
.
cqe_¥ev
))

	)

	@swupdate/include/channel.h

8 #¥agm®
⁄˚


9 
	~"ch™√l_›_ªs.h
"

18 
	#CHANNEL_DEFAULT_POLLING_INTERVAL
 45

	)

19 
	#CHANNEL_DEFAULT_RESUME_TRIES
 5

	)

20 
	#CHANNEL_DEFAULT_RESUME_DELAY
 5

	)

21 
ch™√l
 
	tch™√l_t
;

22 
	sch™√l
 {

23 
ch™√l_›_ªs_t
 (*
›í
)(
ch™√l_t
 *
	mthis
, *
	mcfg
);

24 
ch™√l_›_ªs_t
 (*
˛o£
)(
ch™√l_t
 *
	mthis
);

25 
ch™√l_›_ªs_t
 (*
gë
)(
ch™√l_t
 *
	mthis
, *
	md©a
);

26 
ch™√l_›_ªs_t
 (*
gë_fûe
)(
ch™√l_t
 *
	mthis
, *
	md©a
);

27 
ch™√l_›_ªs_t
 (*
put
)(
ch™√l_t
 *
	mthis
, *
	md©a
);

28 *(*
	mgë_ªdúe˘_uæ
)(
ch™√l_t
 *
	mthis
);

29 *
	m¥iv
;

32 
ch™√l_t
 *
ch™√l_√w
();

	@swupdate/include/channel_curl.h

8 #¥agm®
⁄˚


9 #ifde‡
CONFIG_JSON


10 
	~<js⁄-c/js⁄.h
>

12 
	~<°dio.h
>

13 
	~<°dboﬁ.h
>

14 
	~"swupd©e_°©us.h
"

24 
	mCHANNEL_GET
,

25 
	mCHANNEL_POST
,

26 
	mCHANNEL_PUT
,

27 } 
	tch™√l_mëhod_t
;

30 
	mCHANNEL_PARSE_JSON
,

31 
	mCHANNEL_PARSE_RAW


32 } 
	tch™√l_body_t
;

34 
	#USE_PROXY_ENV
 (*)0x11

	)

37 *
	muæ
;

38 *
	mauth
;

39 *
	mªque°_body
;

40 #ifde‡
CONFIG_JSON


41 
js⁄_obje˘
 *
	mjs⁄_ª∂y
;

43 *
	mˇfûe
;

44 *
	ms¶key
;

45 *
	ms¶˚π
;

46 *
	mcùhîs
;

47 *
	m¥oxy
;

48 *
	möfo
;

49 *
	mhódî
;

50 c⁄° *
	mc⁄ã¡_ty≥
;

51 
	mªåy_¶ìp
;

52 
	moffs
;

53 
	mmëhod
;

54 
	mªåõs
;

55 
	mlow_•ìd_timeout
;

56 
ch™√l_body_t
 
	mf‹m©
;

57 
boﬁ
 
	mdebug
;

58 
boﬁ
 
	mu£s¶
;

59 
boﬁ
 
	m°ri˘s¶
;

60 
boﬁ
 
	mnocheck™swî
;

61 
	mhâp_ª•⁄£_code
;

62 
boﬁ
 
	mnofﬁlow
;

63 (*
	mcheckdwl
)();

64 
swupd©e_dige°
 *
	mdg°
;

65 
	msha1hash
[
SWUPDATE_SHA_DIGEST_LENGTH
 * 2 + 1];

66 
sour˚ty≥
 
	msour˚
;

67 
di˘
 *
	mhódîs
;

68 } 
	tch™√l_d©a_t
;

	@swupdate/include/channel_op_res.h

11 #¥agm®
⁄˚


14 
	mCHANNEL_OK
,

15 
	mCHANNEL_EINIT
,

16 
	mCHANNEL_ENONET
,

17 
	mCHANNEL_ENOMEM
,

18 
	mCHANNEL_EACCES
,

19 
	mCHANNEL_ENOENT
,

20 
	mCHANNEL_EIO
,

21 
	mCHANNEL_EILSEQ
,

22 
	mCHANNEL_EAGAIN
,

23 
	mCHANNEL_ELOOP
,

24 
	mCHANNEL_EBADMSG
,

25 
	mCHANNEL_ENOTFOUND
,

26 
	mCHANNEL_EREDIRECT


27 } 
	tch™√l_›_ªs_t
;

	@swupdate/include/compat.h

8 #¥agm®
⁄˚


10 #i‚de‡
°∫du∑


16 
	#°∫du∑
(
s
, 
n
) \

17 (
	`__exãnsi⁄__
({ \

18 c⁄° *
__ö
 = (
s
); \

19 
size_t
 
__Àn
 = 
	`°∫Àn
(
__ö
, (
n
)) + 1; \

20 *
__out
 = (*)
	`Æloˇ
(
__Àn
); \

21 
__out
[
__Àn
 - 1] = '\0'; \

22 (*)
	`mem˝y
(
__out
, 
__ö
, 
__Àn
 - 1); \

23 }))

	)

26 #i‚de‡
°rdu∑


27 
	#°rdu∑
(
s
Ë
	`°∫du∑
(s, 
	`°æí
(s))

	)

30 #i‡
deföed
(
__FªeBSD__
)

37 
	#ENODATA
 
ENOATTR


	)

43 
	#ENOKEY
 126

	)

48 
	#__u64
 
uöt64_t


	)

	@swupdate/include/cpiohdr.h

14 #i‚de‡
_CPIOHDR_SWUPD_H


15 
	#_CPIOHDR_SWUPD_H


	)

18 
	~"globÆs.h
"

27 
	s√w_ascii_hódî


29 
	mc_magic
[6];

30 
	mc_öo
[8];

31 
	mc_mode
[8];

32 
	mc_uid
[8];

33 
	mc_gid
[8];

34 
	mc_∆ök
[8];

35 
	mc_mtime
[8];

36 
	mc_fûesize
[8];

37 
	mc_dev_maj
[8];

38 
	mc_dev_mö
[8];

39 
	mc_rdev_maj
[8];

40 
	mc_rdev_mö
[8];

41 
	mc_«mesize
[8];

42 
	mc_chksum
[8];

45 
	sfûehdr
 {

46 
	msize
;

47 
	m«mesize
;

48 
	mchksum
;

49 
	mfûíame
[
MAX_IMAGE_FNAME
];

52 
exåa˘_˝io_hódî
(
fd
, 
fûehdr
 *
fhdr
, *
off£t
);

53 
exåa˘_img_‰om_˝io
(
fd
, 
off£t
, 
fûehdr
 *
fdh
);

	@swupdate/include/download_interface.h

9 #i‚de‡
_DWL_INTERFACE_H


10 
	#_DWL_INTERFACE_H


	)

15 
°¨t_dow∆ﬂd
(c⁄° *
cfg‚ame
, 
¨gc
, *
¨gv
[]);

17 
dow∆ﬂd_¥öt_hñp
();

	@swupdate/include/flash.h

9 #i‚de‡
_FLASH_PART_H


10 
	#_FLASH_PART_H


	)

12 
	~<°döt.h
>

13 
	~<mtd/libmtd.h
>

14 
	~<mtd/libubi.h
>

15 
	~"bsdqueue.h
"

17 
	#DEFAULT_CTRL_DEV
 "/dev/ubi_˘æ"

	)

18 
	#UBI_DATA_VOLNAME
 "d©a"

	)

19 
	#UBI_DATACPY_VOLNAME
 "d©a˝y"

	)

20 
	#MTD_FS_DEVICE
 7

	)

22 
	subi_∑π
 {

23 
ubi_vﬁ_öfo
 
	mvﬁ_öfo
;

24 
LIST_ENTRY
(
ubi_∑π
Ë
	m√xt
;

27 
LIST_HEAD
(
ubûi°
, 
ubi_∑π
);

29 
	smtd_ubi_öfo
 {

30 
ubi_dev_öfo
 
	mdev_öfo
;

31 
ubûi°
 
	mubi_∑πôi⁄s
;

32 
ubi_©èch_ªque°
 
	mªq
;

33 
mtd_dev_öfo
 
	mmtd
;

34 
	mskùubi
;

35 
	mhas_ubi
;

36 
	msˇ¬ed
;

39 
	sÊash_des¸ùti⁄
 {

40 
libubi_t
 
	mlibubi
;

41 
libmtd_t
 
	mlibmtd
;

42 
ubi_öfo
 
	mubi_öfo
;

43 
mtd_öfo
 
	mmtd
;

44 
mtd_ubi_öfo
 *
	mmtd_öfo
;

47 
ubi_mou¡
(
ubi_vﬁ_öfo
 *
vﬁ
, c⁄° *
m¡poöt
);

48 
ubi_umou¡
(c⁄° *
m¡poöt
);

50 
mtd_öô
();

51 
mtd_£t_ubibœckli°
(*
mtdli°
);

52 
ubi_öô
();

53 
sˇn_mtd_devi˚s
 ();

54 
mtd_˛ónup
 ();

55 
gë_mtd_‰om_devi˚
(*
s
);

56 
gë_mtd_‰om_«me
(c⁄° *
s
);

57 
Êash_îa£
(
mtdnum
);

59 
Êash_des¸ùti⁄
 *
gë_Êash_öfo
();

60 
	#isN™d
(
Êash
, 
ödex
) \

61 (
Êash
->
mtd_öfo
[
ödex
].
mtd
.
ty≥
 =
MTD_NANDFLASH
 || \

62 
Êash
->
mtd_öfo
[
ödex
].
mtd
.
ty≥
 =
MTD_MLCNANDFLASH
)

	)

	@swupdate/include/globals.h

8 #i‚de‡
_GLOBALS_H


9 
	#_GLOBALS_H


	)

11 
	#BANNER
 "Swupd©êv" 
SWU_VER
 "\n"

	)

13 
	#SWUPDATE_GENERAL_STRING_SIZE
 256

	)

14 
	#SWUPDATE_UPDATE_DESCRIPTION_STRING_SIZE
 512

	)

15 
	#MAX_IMAGE_FNAME
 
SWUPDATE_GENERAL_STRING_SIZE


	)

16 
	#MAX_URL
 
SWUPDATE_GENERAL_STRING_SIZE


	)

17 
	#MAX_VOLNAME
 
SWUPDATE_GENERAL_STRING_SIZE


	)

18 
	#MAX_HW_VERSIONS
 10

	)

19 
	#MAX_LINE
 80

	)

20 
	#BOOTLOADER_VAR_LENGTH
 16

	)

21 
	#MAX_REVISION_LENGTH
 
SWUPDATE_GENERAL_STRING_SIZE


	)

22 
	#MAX_BOOT_SCRIPT_LINE_LENGTH
 1024

	)

23 
	#MAX_SEEK_STRING_SIZE
 32

	)

26 
	#SCRIPTS_DIR_SUFFIX
 "s¸ùts/"

	)

27 
	#DATADST_DIR_SUFFIX
 "d©ad°/"

	)

28 
	#BOOT_SCRIPT_SUFFIX
 "boŸ-s¸ùt"

	)

	@swupdate/include/handler.h

10 #i‚de‡
_HANDLER_H


11 
	#_HANDLER_H


	)

14 
	mNONE
,

15 
	mPREINSTALL
,

16 
	mPOSTINSTALL


17 } 
	ts¸ùt_‚
 ;

24 
	mIMAGE_HANDLER
 = 1,

25 
	mFILE_HANDLER
 = 2,

26 
	mSCRIPT_HANDLER
 = 4,

27 
	mBOOTLOADER_HANDLER
 = 8,

28 
	mPARTITION_HANDLER
 = 16

29 } 
	tHANDLER_MASK
;

31 
	#ANY_HANDLER
 (
IMAGE_HANDLER
 | 
FILE_HANDLER
 | 
SCRIPT_HANDLER
 | \

32 
BOOTLOADER_HANDLER
 | 
PARTITION_HANDLER
)

	)

34 (*
	th™dÀr
)(
	timg_ty≥
 *
	timg
, *
	td©a
);

35 
	sö°ÆÀr_h™dÀr
{

36 
desc
[64];

37 
h™dÀr
 
ö°ÆÀr
;

38 *
d©a
;

39 
mask
;

42 
	`ªgi°î_h™dÀr
(c⁄° *
desc
,

43 
h™dÀr
 
ö°ÆÀr
, 
HANDLER_MASK
 
mask
, *
d©a
);

45 
ö°ÆÀr_h™dÀr
 *
	`föd_h™dÀr
(
img_ty≥
 *
img
);

46 
	`¥öt_ªgi°îed_h™dÀrs
();

47 
ö°ÆÀr_h™dÀr
 *
	`gë_√xt_h™dÀr
();

	@swupdate/include/installer.h

9 #i‚de‡
_INSTALLER_H


10 
	#_INSTALLER_H


	)

12 
	~"swupd©e.h
"

13 
	~"h™dÀr.h
"

14 
	~"˝iohdr.h
"

16 
check_if_ªquúed
(
imgli°
 *
li°
, 
fûehdr
 *
pfdh
,

17 c⁄° *
de°dú
,

18 
img_ty≥
 **
pimg
);

19 
ö°Æl_images
(
swupd©e_cfg
 *
sw
, 
fdsw
, 
‰omfûe
);

20 
ö°Æl_sögÀ_image
(
img_ty≥
 *
img
, 
dry_run
);

21 
po°upd©e
(
swupd©e_cfg
 *
swcfg
, c⁄° *
öfo
);

22 
˛ónup_fûes
(
swupd©e_cfg
 *
so·w¨e
);

	@swupdate/include/lua_util.h

9 #i‚de‡
_LUA_UTIL_H


10 
	#_LUA_UTIL_H


	)

12 #ifde‡
CONFIG_LUA


13 
	~"lua.h
"

14 
	~"œuxlib.h
"

15 
	~"luÆib.h
"

16 
	~"utû.h
"

18 
LUA°ackDump
 (
lua_Sèã
 *
L
);

19 
run_lua_s¸ùt
(c⁄° *
s¸ùt
, c⁄° *
fun˘i⁄
, *
∑rms
);

20 
lua_Sèã
 *
lua_∑r£r_öô
(c⁄° *
buf
, 
di˘
 *
boŸív
);

21 
lua_∑r£r_‚
(
lua_Sèã
 *
L
, c⁄° *
f˙
, 
img_ty≥
 *
img
);

22 
lua_h™dÀrs_öô
();

23 
	#lua_∑r£r_exô
(
L
Ë
	`lua_˛o£
((
lua_Sèã
 *)L)

	)

25 #i‡!
deföed
(
LUA_VERSION_NUM
) || LUA_VERSION_NUM == 501

26 
	#LUA_OK
 0

	)

27 
	#luaL_√wlib
(
L
, 
l
Ë(
	`lua_√wèbÀ
((L)),
	`luaL_£tfuncs
((L), (l), 0))

	)

28 
luaL_£tfuncs
(
lua_Sèã
 *
L
, c⁄° 
luaL_Reg
 *
l
, 
nup
);

29 
luaL_ªquúef
(
lua_Sèã
 *
L
, c⁄°* 
mod«me
, 
lua_CFun˘i⁄
 
›íf
, 
glb
);

36 
	sluaL_Såóm
 {

37 
FILE
 *
	mf
;

38 } 
	tluaL_Såóm
;

40 
	sluaL_Buf„r_52
 {

41 
luaL_Buf„r
 
	mb
;

42 *
	m±r
;

43 
size_t
 
	m√Àms
;

44 
size_t
 
	mˇ∑côy
;

45 
lua_Sèã
 *
	mL2
;

46 } 
	tluaL_Buf„r_52
;

47 
	#luaL_Buf„r
 
luaL_Buf„r_52


	)

49 
	#luaL_¥ïbuffsize
 
luaL_¥ïbuffsize_52


	)

50 *
luaL_¥ïbuffsize
(
luaL_Buf„r_52
 *
B
, 
size_t
 
s
);

52 
	#luaL_bufföô
 
luaL_bufföô_52


	)

53 
luaL_bufföô
(
lua_Sèã
 *
L
, 
luaL_Buf„r_52
 *
B
);

55 #unde‡
luaL_addsize


56 
	#luaL_addsize
(
B
, 
s
Ë((B)->
√Àms
 +(s))

	)

58 
	#luaL_pushªsu…
 
luaL_pushªsu…_52


	)

59 
luaL_pushªsu…
(
luaL_Buf„r_52
 *
B
);

64 
	#lua_Sèã
 

	)

65 
	#lua_∑r£r_exô
(
L
)

	)

66 
ölöe
 
lua_Sèã
 *
lua_∑r£r_öô
(c⁄° 
__©åibuã__
 ((
__unu£d__
)Ë*
buf
,

67 
di˘
 
__©åibuã__
 ((
__unu£d__
)Ë*
boŸív
Ë{  
	gNULL
;}

68 
ölöe
 
lua_∑r£r_‚
(
lua_Sèã
 
__©åibuã__
 ((
__unu£d__
)Ë*
L
,

69 c⁄° 
__©åibuã__
 ((
__unu£d__
)Ë*
f˙
,

70 
img_ty≥
 
__©åibuã__
 ((
__unu£d__
)Ë*
img
) {  -1; }

71 
ölöe
 
	$lua_h™dÀrs_öô
(Ë{  0; 
	}
}

	@swupdate/include/mongoose_interface.h

8 #i‚de‡
_MONGOOSE_INTERFACE_H


9 
	#_MONGOOSE_INTERFACE_H


	)

15 
	#MAX_OPTIONS
 40

	)

19 
°¨t_m⁄goo£
(c⁄° *
cfg‚ame
, 
¨gc
, *
¨gv
[]);

21 
m⁄goo£_¥öt_hñp
();

	@swupdate/include/network_interface.h

9 #i‚de‡
_NETWORK_INTERFACE_H


10 
	#_NETWORK_INTERFACE_H


	)

12 *
√tw‹k_öôülizî
(*
d©a
);

13 *
√tw‹k_thªad
(*
d©a
);

14 
li°íî_¸óã
(c⁄° *
∑th
, 
ty≥
);

16 
±hªad_muãx_t
 
°ªam_muãx
;

17 
±hªad_c⁄d_t
 
°ªam_wkup
;

	@swupdate/include/network_ipc.h

9 #i‚de‡
_IPC_H


10 
	#_IPC_H


	)

18 
	~<°dboﬁ.h
>

19 
	~"swupd©e_°©us.h
"

21 
	#IPC_MAGIC
 0x14052001

	)

24 
	mREQ_INSTALL
,

25 
	mACK
,

26 
	mNACK
,

27 
	mGET_STATUS
,

28 
	mPOST_UPDATE
,

29 
	mSWUPDATE_SUBPROCESS
,

30 
	mREQ_INSTALL_DRYRUN
,

31 } 
	tmsgty≥
;

34 
	mCMD_ACTIVATION
,

35 
	mCMD_CONFIG


39 
	mmsg
[128];

41 
	mcuºít
;

42 
	mœ°_ªsu…
;

43 
	mîr‹
;

44 
	mdesc
[2048];

45 } 
	m°©us
;

47 
sour˚ty≥
 
	msour˚
;

48 
	mcmd
;

49 
	mtimeout
;

50 
	mÀn
;

51 
	mbuf
[2048];

55 } 
	mö°msg
;

56 } 
	tmsgd©a
;

59 
	mmagic
;

60 
	mty≥
;

61 
msgd©a
 
	md©a
;

62 } 
	tùc_mesßge
;

64 
ùc_ö°_°¨t
();

65 
ùc_ö°_°¨t_ext
(
sour˚ty≥
 
sour˚
, 
size_t
 
Àn
, c⁄° *
öfo
, 
boﬁ
 
dryrun
);

66 
ùc_£nd_d©a
(
c⁄nfd
, *
buf
, 
size
);

67 
ùc_íd
(
c⁄nfd
);

68 
ùc_gë_°©us
(
ùc_mesßge
 *
msg
);

69 
ùc_po°upd©e
(
ùc_mesßge
 *
msg
);

70 
ùc_£nd_cmd
(
ùc_mesßge
 *
msg
);

72 (*
	twrôed©a
)(**
	tbuf
, *
	tsize
);

73 (*
	tgë°©us
)(
	tùc_mesßge
 *
	tmsg
);

74 (*
	tãrmö©ed
)(
	tRECOVERY_STATUS
 
	t°©us
);

75 
	`ùc_waô_f‹_com∂ëe
(
gë°©us
 
ˇŒback
);

76 
	`swupd©e_image_wrôe
(*
buf
, 
size
);

77 
	`swupd©e_async_°¨t
(
wrôed©a
 
wr_func
, 
gë°©us
 
°©us_func
,

78 
ãrmö©ed
 
íd_func
, 
boﬁ
 
dryrun
);

	@swupdate/include/parselib.h

8 #i‚de‡
_PARSE_LIBRARY_H


9 
	#_PARSE_LIBRARY_H


	)

11 
	~<as£π.h
>

12 
	~<°dboﬁ.h
>

15 
	mLIBCFG_PARSER
,

16 
	mJSON_PARSER


17 } 
	t∑r£πy≥
;

19 (*
	tôî©e_ˇŒback
)(c⁄° *
	t«me
, c⁄° *
	tvÆue
,

20 *
	td©a
);

26 
	#MAX_PARSED_NODES
 20

	)

28 #ifde‡
CONFIG_LIBCONFIG


29 
	~<libc⁄fig.h
>

30 
	#LIBCONFIG_VERSION
 ((
LIBCONFIG_VER_MAJOR
 << 16) | \

31 (
LIBCONFIG_VER_MINOR
 << 8Ë| 
LIBCONFIG_VER_REVISION
)

	)

32 #i‡
LIBCONFIG_VERSION
 < 0x10500

33 
	#c⁄fig_£âög_lookup
 
c⁄fig_lookup_‰om


	)

36 
	`gë_vÆue_libc⁄fig
(c⁄° 
c⁄fig_£âög_t
 *
e
, *
de°
);

37 
	`gë_fõld_cfg
(
c⁄fig_£âög_t
 *
e
, c⁄° *
∑th
, *
de°
);

38 *
	`gë_chûd_libc⁄fig
(*
e
, c⁄° *
«me
);

39 
	`ôî©e_fõld_libc⁄fig
(
c⁄fig_£âög_t
 *
e
, 
ôî©e_ˇŒback
 
cb
,

40 *
d©a
);

41 c⁄° *
	`gë_fõld_°rög_libc⁄fig
(
c⁄fig_£âög_t
 *
e
, c⁄° *
∑th
);

42 *
	`föd_roŸ_libc⁄fig
(
c⁄fig_t
 *
cfg
, c⁄° **
nodes
, 
dïth
);

43 *
	`gë_node_libc⁄fig
(
c⁄fig_t
 *
cfg
, c⁄° **
nodes
);

46 
	#c⁄fig_£âög_gë_ñem
(
a
,
b
Ë(
NULL
)

	)

47 
	#c⁄fig_£âög_Àngth
(
a
Ë(0)

	)

48 
	#c⁄fig_£âög_lookup_°rög
(
a
, 
b
, 
°r
Ë(0)

	)

49 
	#föd_node_libc⁄fig
(
cfg
, 
fõld
, 
swcfg
Ë(
NULL
)

	)

50 
	#gë_fõld_°rög_libc⁄fig
(
e
, 
∑th
Ë(
NULL
)

	)

51 
	#gë_chûd_libc⁄fig
(
e
, 
«me
Ë(
NULL
)

	)

52 
	#ôî©e_fõld_libc⁄fig
(
e
, 
cb
, 
d©a
Ë{ 
	}

	)
}

53 
	#gë_fõld_cfg
(
e
, 
∑th
, 
de°
)

	)

54 
	#föd_roŸ_libc⁄fig
(
cfg
, 
nodes
, 
dïth
Ë(
NULL
)

	)

55 
	#gë_node_libc⁄fig
(
cfg
, 
nodes
Ë(
NULL
)

	)

58 #ifde‡
CONFIG_JSON


59 
	~<js⁄-c/js⁄.h
>

61 c⁄° *
gë_fõld_°rög_js⁄
(
js⁄_obje˘
 *
e
, c⁄° *
∑th
);

62 
gë_vÆue_js⁄
(
js⁄_obje˘
 *
e
, *
de°
);

63 
gë_fõld_js⁄
(
js⁄_obje˘
 *
e
, c⁄° *
∑th
, *
de°
);

64 *
gë_chûd_js⁄
(
js⁄_obje˘
 *
e
, c⁄° *
«me
);

65 
ôî©e_fõld_js⁄
(
js⁄_obje˘
 *
e
, 
ôî©e_ˇŒback
 
cb
, *
d©a
);

66 
js⁄_obje˘
 *
föd_js⁄_ªcursive_node
(js⁄_obje˘ *
roŸ
, c⁄° **
«mes
);

67 
js⁄_obje˘
 *
js⁄_gë_key
(js⁄_obje˘ *
js⁄_roŸ
, c⁄° *
key
);

68 c⁄° *
js⁄_gë_vÆue
(
js⁄_obje˘
 *
js⁄_roŸ
,

69 c⁄° *
key
);

70 
js⁄_obje˘
 *
js⁄_gë_∑th_key
(js⁄_obje˘ *
js⁄_roŸ
, c⁄° **
js⁄_∑th
);

71 *
js⁄_gë_d©a_uæ
(
js⁄_obje˘
 *
js⁄_roŸ
, c⁄° *
key
);

72 *
föd_roŸ_js⁄
(
js⁄_obje˘
 *
roŸ
, c⁄° **
nodes
, 
dïth
);

73 *
gë_node_js⁄
(
js⁄_obje˘
 *
roŸ
, c⁄° **
nodes
);

76 
	#föd_node_js⁄
(
a
, 
b
, 
c
Ë(
NULL
)

	)

77 
	#gë_fõld_°rög_js⁄
(
e
, 
∑th
Ë(
NULL
)

	)

78 
	#gë_chûd_js⁄
(
e
, 
«me
Ë(
NULL
)

	)

79 
	#ôî©e_fõld_js⁄
(
e
, 
cb
, 
d©a
Ë{ }

	)

80 
	#gë_fõld_js⁄
(
e
, 
∑th
, 
de°
)

	)

81 
	#js⁄_obje˘_obje˘_gë_ex
(
a
,
b
,
c
Ë(0)

	)

82 
	#js⁄_obje˘_¨øy_gë_idx
(
a
, 
b
Ë(0)

	)

83 
	#js⁄_obje˘_¨øy_Àngth
(
a
Ë(0)

	)

84 
	#föd_roŸ_js⁄
(
roŸ
, 
nodes
, 
dïth
Ë(
NULL
)

	)

85 
	#gë_node_js⁄
(
roŸ
, 
nodes
Ë(
NULL
)

	)

88 (*
	t£âögs_ˇŒback
)(*
	tñem
, *
	td©a
);

90 c⁄° *
	`gë_fõld_°rög
(
∑r£πy≥
 
p
, *
e
, c⁄° *
∑th
);

91 
	`gë_fõld_°rög_wôh_size
(
∑r£πy≥
 
p
, *
e
, c⁄° *
∑th
,

92 *
d
, 
size_t
 
n
);

93 
	`gë_¨øy_Àngth
(
∑r£πy≥
 
p
, *
roŸ
);

94 *
	`gë_ñem_‰om_idx
(
∑r£πy≥
 
p
, *
node
, 
idx
);

95 *
	`gë_chûd
(
∑r£πy≥
 
p
, *
node
, c⁄° *
«me
);

96 
	`ôî©e_fõld
(
∑r£πy≥
 
p
, *
e
, 
ôî©e_ˇŒback
 
cb
, *
d©a
);

97 
	`gë_fõld
(
∑r£πy≥
 
p
, *
e
, c⁄° *
∑th
, *
de°
);

98 
	`exi°_fõld_°rög
(
∑r£πy≥
 
p
, *
e
, c⁄° *
∑th
);

99 
	`gë_hash_vÆue
(
∑r£πy≥
 
p
, *
ñem
, *
hash
);

100 
	`check_fõld_°rög
(c⁄° *
§c
, *
d°
, c⁄° 
size_t
 
max_Àn
);

101 *
	`föd_roŸ
(
∑r£πy≥
 
p
, *
roŸ
, c⁄° **
nodes
);

102 *
	`gë_node
(
∑r£πy≥
 
p
, *
roŸ
, c⁄° **
nodes
);

103 
boﬁ
 
	`£t_föd_∑th
(c⁄° **
nodes
, c⁄° *
√w∑th
, **
tmp
);

105 
	#GET_FIELD_STRING
(
p
, 
e
, 
«me
, 
d
) \

106 
	`gë_fõld_°rög_wôh_size
(
p
, 
e
, 
«me
, 
d
, (d))

	)

108 
	#GET_FIELD_STRING_RESET
(
p
, 
e
, 
«me
, 
d
) do { \

109 
d
[0] = '\0'; \

110 
	`GET_FIELD_STRING
(
p
, 
e
, 
«me
, 
d
); \

111 
	}
} 0)

	)

	@swupdate/include/parsers.h

8 #i‚de‡
_RECOVERY_PARSERS_H


9 
	#_RECOVERY_PARSERS_H


	)

11 
	~"gíî©ed/autoc⁄f.h
"

13 #i‚de‡
CONFIG_SETSWDESCRIPTION


14 
	#SW_DESCRIPTION_FILENAME
 "sw-des¸ùti⁄"

	)

16 
	#SW_DESCRIPTION_FILENAME
 
CONFIG_SWDESCRIPTION


	)

19 (*
	t∑r£r_‚
)(
	tswupd©e_cfg
 *
	tswcfg
, c⁄° *
	tfûíame
);

21 
	`∑r£
(
swupd©e_cfg
 *
swcfg
, c⁄° *
fûíame
);

22 
	`∑r£_cfg
 (
swupd©e_cfg
 *
swcfg
, c⁄° *
fûíame
);

23 
	`∑r£_js⁄
(
swupd©e_cfg
 *
swcfg
, c⁄° *
fûíame
);

24 
	`∑r£_exã∫Æ
(
swupd©e_cfg
 *
swcfg
, c⁄° *
fûíame
);

	@swupdate/include/pctl.h

8 #i‚de‡
_SWUPDATE_PCTL_H


9 
	#_SWUPDATE_PCTL_H


	)

11 
	~<swupd©e_°©us.h
>

13 
pid
;

14 
sw_sockfd
;

20 
	sswupd©e_èsk
 {

21 
pid_t
 
	mpid
;

22 
	mpùe
;

23 
sour˚ty≥
 
	mty≥
;

24 c⁄° *
	m«me
;

27 
±hªad_t
 
°¨t_thªad
(*(* 
°¨t_routöe
Ë(*), *
¨g
);

29 (*
	tswupd©e_¥o˚ss
)(c⁄° *
	tcfg«me
, 
	t¨gc
, **
	t¨gv
);

31 
	`°¨t_sub¥o˚ss
(
sour˚ty≥
 
ty≥
, c⁄° *
«me
, c⁄° *
cfgfûe
,

32 
¨gc
, **
¨gv
,

33 
swupd©e_¥o˚ss
 
°¨t
);

35 
	`°¨t_sub¥o˚ss_‰om_fûe
(
sour˚ty≥
 
ty≥
, c⁄° *
«me
, c⁄° *
cfgfûe
,

36 
¨gc
, **
¨gv
,

37 c⁄° *
cmd
);

39 
	`sigchld_h™dÀr
 (
	`__©åibuã__
 ((
__unu£d__
)Ë
signum
);

41 
	`p˘l_gëfd_‰om_ty≥
(
sour˚ty≥
 
s
);

42 c⁄° *
	`p˘l_gë«me_‰om_ty≥
(
sour˚ty≥
 
s
);

	@swupdate/include/progress.h

8 #i‚de‡
_INSTALL_PROGRESS_H


9 
	#_INSTALL_PROGRESS_H


	)

11 
	~<swupd©e_°©us.h
>

12 
	~<¥ogªss_ùc.h
>

19 
swupd©e_¥ogªss_öô
(
n°ïs
);

20 
swupd©e_¥ogªss_upd©e
(
≥rc
);

21 
swupd©e_¥ogªss_öc_°ï
(*
image
);

22 
swupd©e_¥ogªss_°ï_com∂ëed
();

23 
swupd©e_¥ogªss_íd
(
RECOVERY_STATUS
 
°©us
);

24 
swupd©e_¥ogªss_d⁄e
(c⁄° *
öfo
);

25 
swupd©e_¥ogªss_öfo
(
RECOVERY_STATUS
 
°©us
, 
ˇu£
, c⁄° *
msg
);

27 *
¥ogªss_b¨_thªad
 (*
d©a
);

	@swupdate/include/progress_ipc.h

8 #i‚de‡
_PROGRESS_IPC_H


9 
	#_PROGRESS_IPC_H


	)

11 
	~<°dboﬁ.h
>

12 
	~<swupd©e_°©us.h
>

14 * 
SOCKET_PROGRESS_PATH
;

20 
	s¥ogªss_msg
 {

21 
	mmagic
;

22 
RECOVERY_STATUS
 
	m°©us
;

23 
	mdwl_≥r˚¡
;

24 
	mn°ïs
;

25 
	mcur_°ï
;

26 
	mcur_≥r˚¡
;

27 
	mcur_image
[256];

28 
	mhnd_«me
[64];

29 
sour˚ty≥
 
	msour˚
;

30 
	möfﬁí
;

31 
	möfo
[2048];

34 
¥ogªss_ùc_c⁄√˘
(
boﬁ
 
ªc⁄√˘
);

35 
¥ogªss_ùc_ª˚ive
(*
c⁄nfd
, 
¥ogªss_msg
 *
msg
);

	@swupdate/include/sslapi.h

8 #i‚de‡
_SWUPDATE_SSL_H


9 
	#_SWUPDATE_SSL_H


	)

11 
	~<°döt.h
>

13 
	#SHA_DEFAULT
 "sha256"

	)

19 #i‡
deföed
(
CONFIG_HASH_VERIFY
Ë|| deföed(
CONFIG_ENCRYPTED_IMAGES
) || \

20 
deföed
(
CONFIG_SURICATTA_SSL
Ë|| 
	$deföed
(
CONFIG_CHANNEL_CURL_SSL
)

21 
	~<›ís¶/bio.h
>

22 
	~<›ís¶/obje˘s.h
>

23 
	~<›ís¶/îr.h
>

24 
	~<›ís¶/x509.h
>

25 
	~<›ís¶/x509v3.h
>

26 
	~<›ís¶/≥m.h
>

27 
	~<›ís¶/evp.h
>

28 
	~<›ís¶/hmac.h
>

29 
	~<›ís¶/´s.h
>

31 #ifde‡
CONFIG_SIGALG_CMS


32 #i‡
	`deföed
(
LIBRESSL_VERSION_NUMBER
)

35 
	~<›ís¶/cms.h
>

39 
	~<›ís¶/›ís¶v.h
>

41 
	#X509_PURPOSE_CODE_SIGN
 (
X509_PURPOSE_MAX
 + 1)

	)

42 
	#SSL_PURPOSE_EMAIL_PROT
 
X509_PURPOSE_SMIME_SIGN


	)

43 
	#SSL_PURPOSE_CODE_SIGN
 
X509_PURPOSE_CODE_SIGN


	)

44 
	#SSL_PURPOSE_DEFAULT
 
SSL_PURPOSE_EMAIL_PROT


	)

46 
	sswupd©e_dige°
 {

47 
EVP_PKEY
 *
pkey
;

48 
X509_STORE
 *
˚πs
;

49 
EVP_MD_CTX
 *
˘x
;

50 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L || 
	`deföed
(
LIBRESSL_VERSION_NUMBER
)

51 
EVP_CIPHER_CTX
 
˘xdec
;

53 
EVP_CIPHER_CTX
 *
˘xdec
;

57 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L || 
	`deföed
(
LIBRESSL_VERSION_NUMBER
)

58 
	#SSL_GET_CTXDEC
(
dg°
Ë&dg°->
˘xdec


	)

60 
	#SSL_GET_CTXDEC
(
dg°
Ëdg°->
˘xdec


	)

68 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L || 
	`deföed
(
LIBRESSL_VERSION_NUMBER
)

69 
	#swupd©e_¸y±o_öô
() { \

71 
	`CRYPTO_mÆloc_öô
(); \

72 
	`O≥nSSL_add_Æl_Æg‹ôhms
(); \

73 
	`ERR_lﬂd_¸y±o_°rögs
(); \

75 
	}

	)
}

77 
	#swupd©e_¸y±o_öô
()

	)

80 
ölöe
 
uöt32_t
 
	$SSL_X509_gë_exãnsi⁄_Êags
(
X509
 *
x
)

82 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L || 
	`deföed
(
LIBRESSL_VERSION_NUMBER
)

83  
x
->
ex_Êags
;

85  
	`X509_gë_exãnsi⁄_Êags
(
x
);

87 
	}
}

89 
ölöe
 
uöt32_t
 
	$SSL_X509_gë_exãnded_key_ußge
(
X509
 *
x
)

91 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L || 
	`deföed
(
LIBRESSL_VERSION_NUMBER
)

92  
x
->
ex_xkußge
;

94  
	`X509_gë_exãnded_key_ußge
(
x
);

96 
	}
}

99 
	#swupd©e_¸y±o_öô
()

	)

100 
	#AES_BLOCK_SIZE
 16

	)

103 #i‡
deföed
(
CONFIG_HASH_VERIFY
)

104 
swupd©e_dg°_öô
(
swupd©e_cfg
 *
sw
, c⁄° *
keyfûe
);

105 
swupd©e_dige°
 *
swupd©e_HASH_öô
(c⁄° *
SHALígth
);

106 
swupd©e_HASH_upd©e
(
swupd©e_dige°
 *
dg°
, *
buf
,

107 
size_t
 
Àn
);

108 
swupd©e_HASH_föÆ
(
swupd©e_dige°
 *
dg°
, *
md_vÆue
,

109 *
md_Àn
);

110 
swupd©e_HASH_˛ónup
(
swupd©e_dige°
 *
dg°
);

111 
swupd©e_vîify_fûe
(
swupd©e_dige°
 *
dg°
, c⁄° *
sigfûe
,

112 c⁄° *
fûe
, c⁄° *
sig√r_«me
);

113 
swupd©e_HASH_com∑ª
(*
hash1
, *
hash2
);

117 
	#swupd©e_dg°_öô
(
sw
, 
keyfûe
Ë–0 )

	)

118 
	#swupd©e_HASH_öô
(
p
Ë–
NULL
 )

	)

119 
	#swupd©e_vîify_fûe
(
dg°
, 
sigfûe
, 
fûe
Ë–0 )

	)

120 
	#swupd©e_HASH_upd©e
(
p
, 
buf
, 
Àn
Ë(-1)

	)

121 
	#swupd©e_HASH_föÆ
(
p
, 
ªsu…
, 
Àn
Ë(-1)

	)

122 
	#swupd©e_HASH_˛ónup
(
sw
)

	)

123 
	#swupd©e_HASH_com∑ª
(
hash1
,
hash2
Ë(0)

	)

126 #ifde‡
CONFIG_ENCRYPTED_IMAGES


127 
swupd©e_dige°
 *
swupd©e_DECRYPT_öô
(*
key
, *
iv
, *
ß…
);

128 
swupd©e_DECRYPT_upd©e
(
swupd©e_dige°
 *
dg°
, *
buf
,

129 *
ouéí
, *
¸y±buf
, 
öÀn
);

130 
swupd©e_DECRYPT_föÆ
(
swupd©e_dige°
 *
dg°
, *
buf
,

131 *
ouéí
);

132 
swupd©e_DECRYPT_˛ónup
(
swupd©e_dige°
 *
dg°
);

138 
	#swupd©e_DECRYPT_öô
(
key
, 
iv
, 
ß…
Ë(((key !
NULL
Ë| (
ivt
 !NULLË| (ß… !NULL)Ë? NULL : NULL)

	)

139 
	#swupd©e_DECRYPT_upd©e
(
p
, 
buf
, 
Àn
, 
cbuf
, 
öÀn
Ë(-1)

	)

140 
	#swupd©e_DECRYPT_föÆ
(
p
, 
buf
, 
Àn
Ë(-1)

	)

141 
	#swupd©e_DECRYPT_˛ónup
(
p
)

	)

144 #i‚de‡
SSL_PURPOSE_DEFAULT


145 
	#SSL_PURPOSE_EMAIL_PROT
 -1

	)

146 
	#SSL_PURPOSE_CODE_SIGN
 -1

	)

147 
	#SSL_PURPOSE_DEFAULT
 -1

	)

	@swupdate/include/state.h

8 #¥agm®
⁄˚


9 
	~<°dboﬁ.h
>

11 #ifde‡
CONFIG_SURICATTA_STATE_CHOICE_BOOTLOADER


12 
	#EXPANDTOKL2
(
tokí
Ë
	)
token

13 
	#EXPANDTOK
(
tokí
Ë
	`EXPANDTOKL2
—okí)

	)

14 
	#STATE_KEY
 
	`EXPANDTOK
(
CONFIG_SURICATTA_STATE_BOOTLOADER
)

	)

16 
	#STATE_KEY
 "n⁄e"

	)

28 
	mSTATE_OK
 = '0',

29 
	mSTATE_INSTALLED
 = '1',

30 
	mSTATE_TESTING
 = '2',

31 
	mSTATE_FAILED
 = '3',

32 
	mSTATE_NOT_AVAILABLE
 = '4',

33 
	mSTATE_ERROR
 = '5',

34 
	mSTATE_WAIT
 = '6',

35 
	mSTATE_LAST
 = 
STATE_WAIT


36 } 
	tupd©e_°©e_t
;

38 
ölöe
 
boﬁ
 
	$is_vÆid_°©e
(
upd©e_°©e_t
 
°©e
) {

39  (
°©e
 >
STATE_OK
 && sèã <
STATE_LAST
);

40 
	}
}

42 
£rvî_›_ªs_t
 
ßve_°©e
(*
key
, 
upd©e_°©e_t
 
vÆue
);

43 
£rvî_›_ªs_t
 
ªad_°©e
(*
key
, 
upd©e_°©e_t
 *
vÆue
);

44 
£rvî_›_ªs_t
 
ª£t_°©e
(*
key
);

45 
upd©e_°©e_t
 
gë_°©e
();

46 
boﬁ
 
is_°©e_vÆid
(
upd©e_°©e_t
 
°©e
);

	@swupdate/include/suricatta/server.h

8 #¥agm®
⁄˚


17 
£rvî_›_ªs_t
 
£rvî_has_≥ndög_a˘i⁄
(*
a˘i⁄_id
);

18 
£rvî_›_ªs_t
 
£rvî_ö°Æl_upd©e
();

19 
£rvî_›_ªs_t
 
£rvî_£nd_èrgë_d©a
();

20 
£rvî_gë_pﬁlög_öãrvÆ
();

21 
£rvî_›_ªs_t
 
£rvî_°¨t
(c⁄° *
cfg‚ame
, 
¨gc
, *
¨gv
[]);

22 
£rvî_›_ªs_t
 
£rvî_°›
();

23 
£rvî_›_ªs_t
 
£rvî_ùc
(
fd
);

24 
£rvî_¥öt_hñp
();

26 
	s£rvî_t
 {

27 
£rvî_›_ªs_t
 (*
has_≥ndög_a˘i⁄
)(*
	ma˘i⁄_id
);

28 
£rvî_›_ªs_t
 (*
ö°Æl_upd©e
)();

29 
£rvî_›_ªs_t
 (*
£nd_èrgë_d©a
)();

30 (*
	mgë_pﬁlög_öãrvÆ
)();

31 
£rvî_›_ªs_t
 (*
°¨t
)(c⁄° *
	m‚ame
, 
	m¨gc
, *
	m¨gv
[]);

32 
£rvî_›_ªs_t
 (*
°›
)();

33 
£rvî_›_ªs_t
 (*
ùc
)(
	mfd
);

34 (*
	mhñp
)();

35 } 
	g£rvî
 = {.
has_≥ndög_a˘i⁄
 = &
£rvî_has_≥ndög_a˘i⁄
,

36 .
	gö°Æl_upd©e
 = &
£rvî_ö°Æl_upd©e
,

37 .
	g£nd_èrgë_d©a
 = &
£rvî_£nd_èrgë_d©a
,

38 .
	ggë_pﬁlög_öãrvÆ
 = &
£rvî_gë_pﬁlög_öãrvÆ
,

39 .
	ghñp
 = &
£rvî_¥öt_hñp
,

40 .
	gùc
 = &
£rvî_ùc
,

41 .
	g°¨t
 = &
£rvî_°¨t
,

42 .
	g°›
 = &
£rvî_°›
};

	@swupdate/include/suricatta/suricatta.h

8 #¥agm®
⁄˚


10 
	~"ch™√l_›_ªs.h
"

21 
	$°¨t_suriˇâa
(c⁄° *
cfg«me
, 
¨gc
, *
¨gv
[]Ë
	`__©åibuã__
((
n‹ëu∫
));

22 
	`suriˇâa_¥öt_hñp
();

23 
	`suriˇâa_waô
(
£c⁄ds
);

	@swupdate/include/swupdate.h

8 #i‚de‡
_SWUPDATE_H


9 
	#_SWUPDATE_H


	)

11 
	~<sys/ty≥s.h
>

12 
	~"bsdqueue.h
"

13 
	~"globÆs.h
"

14 
	~"m⁄goo£_öãrÁ˚.h
"

15 
	~"swupd©e_di˘.h
"

17 
	#BOOTVAR_TRANSACTION
 "ªcovîy_°©us"

	)

22 
	#SHA256_HASH_LENGTH
 32

	)

25 
	mFLASH
,

26 
	mUBI
,

27 
	mFILEDEV
,

28 
	mPARTITION
,

29 
	mSCRIPT


30 } 
	timagëy≥_t
;

38 
	mCOPY_FILE
,

39 
	mSKIP_FILE
,

40 
	mINSTALL_FROM_STREAM


43 
	ssw_vîsi⁄
 {

44 
	m«me
[
SWUPDATE_GENERAL_STRING_SIZE
];

45 
	mvîsi⁄
[
SWUPDATE_GENERAL_STRING_SIZE
];

46 
	mö°Æl_if_dif„ª¡
;

47 
LIST_ENTRY
(
sw_vîsi⁄
Ë
	m√xt
;

50 
LIST_HEAD
(
swvî
, 
sw_vîsi⁄
);

52 
	simg_ty≥
 {

53 
sw_vîsi⁄
 
	mid
;

54 
	mty≥
[
SWUPDATE_GENERAL_STRING_SIZE
];

55 
	m‚ame
[
MAX_IMAGE_FNAME
];

56 
	mvﬁ«me
[
MAX_VOLNAME
];

57 
	mdevi˚
[
MAX_VOLNAME
];

58 
	m∑th
[
MAX_IMAGE_FNAME
];

59 
	mty≥_d©a
[
SWUPDATE_GENERAL_STRING_SIZE
];

60 
	mexåa˘_fûe
[
MAX_IMAGE_FNAME
];

61 
	mfûesy°em
[
MAX_IMAGE_FNAME
];

62 
	m£ek
;

63 
	mªquúed
;

64 
	m¥ovided
;

65 
	mcom¥es£d
;

66 
	m¥e£rve_©åibuãs
;

67 
	mis_í¸y±ed
;

68 
	mö°Æl_dúe˘ly
;

69 
	mis_s¸ùt
;

70 
	mis_∑πôi⁄î
;

71 
di˘
 
	m¥›îtõs
;

72 
di˘
 *
	mboŸlﬂdî
;

73 
	m∑πsize
;

74 
	mfdö
;

75 
off_t
 
	moff£t
;

76 
	msize
;

77 
	mchecksum
;

78 
	msha256
[
SHA256_HASH_LENGTH
];

79 
LIST_ENTRY
(
img_ty≥
Ë
	m√xt
;

82 
LIST_HEAD
(
imgli°
, 
img_ty≥
);

84 
	shw_ty≥
 {

85 
	mbﬂrd«me
[
SWUPDATE_GENERAL_STRING_SIZE
];

86 
	mªvisi⁄
[
SWUPDATE_GENERAL_STRING_SIZE
];

87 
LIST_ENTRY
(
hw_ty≥
Ë
	m√xt
;

90 
LIST_HEAD
(
hwli°
, 
hw_ty≥
);

92 
	sexçroc
 {

93 
	m«me
[
SWUPDATE_GENERAL_STRING_SIZE
];

94 
	mexec
[
SWUPDATE_GENERAL_STRING_SIZE
];

95 
	m›ti⁄s
[
SWUPDATE_GENERAL_STRING_SIZE
];

96 
LIST_ENTRY
(
exçroc
Ë
	m√xt
;

99 
LIST_HEAD
(
¥o˛i°
, 
exçroc
);

102 
	mSCRIPT_NONE
,

103 
	mSCRIPT_PREINSTALL
,

104 
	mSCRIPT_POSTINSTALL


107 
	sswupd©e_globÆ_cfg
 {

108 
	mvîbo£
;

109 
	mmtdbœckli°
[
SWUPDATE_GENERAL_STRING_SIZE
];

110 
	mlogÀvñ
;

111 
	msy¶og_íabÀd
;

112 
	mdry_run
;

113 
	mno_downgødög
;

114 
	mno_ªö°Ælög
;

115 
	mpublickey‚ame
[
SWUPDATE_GENERAL_STRING_SIZE
];

116 
	m´skey‚ame
[
SWUPDATE_GENERAL_STRING_SIZE
];

117 
	mpo°upd©ecmd
[
SWUPDATE_GENERAL_STRING_SIZE
];

118 
	mmöimum_vîsi⁄
[
SWUPDATE_GENERAL_STRING_SIZE
];

119 
	mcuºít_vîsi⁄
[
SWUPDATE_GENERAL_STRING_SIZE
];

120 
	m˚π_puΩo£
;

121 
	mf‹˚d_sig√r_«me
[
SWUPDATE_GENERAL_STRING_SIZE
];

124 
	sswupd©e_cfg
 {

125 
	m«me
[
SWUPDATE_GENERAL_STRING_SIZE
];

126 
	mdes¸ùti⁄
[
SWUPDATE_UPDATE_DESCRIPTION_STRING_SIZE
];

127 
	mvîsi⁄
[
SWUPDATE_GENERAL_STRING_SIZE
];

128 
	mso·w¨e_£t
[
SWUPDATE_GENERAL_STRING_SIZE
];

129 
	mru¬ög_mode
[
SWUPDATE_GENERAL_STRING_SIZE
];

130 
	mouçut
[
SWUPDATE_GENERAL_STRING_SIZE
];

131 
hw_ty≥
 
	mhw
;

132 
hwli°
 
	mh¨dw¨e
;

133 
swvî
 
	mö°ÆÀd_sw_li°
;

134 
imgli°
 
	mimages
;

135 
imgli°
 
	ms¸ùts
;

136 
imgli°
 
	mboŸs¸ùts
;

137 
di˘
 
	mboŸlﬂdî
;

138 
¥o˛i°
 
	mexçrocs
;

139 *
	mdg°
;

140 
swupd©e_globÆ_cfg
 
	mglobÆs
;

141 c⁄° *
	membs¸ùt
;

144 
	#SEARCH_FILE
(
img
, 
li°
, 
found
, 
offs
) do { \

145 i‡(!
found
) { \

146 
img
 = 
li°
.
lh_fú°
; img !
NULL
; \

147 
img
 = img->
√xt
.
À_√xt
) { \

148 i‡(
	`°rcmp
(
img
->
‚ame
, 
fdh
.
fûíame
) == 0) { \

149 
found
 = 1; \

150 
img
->
off£t
 = 
offs
; \

151 
img
->
¥ovided
 = 1; \

152 
img
->
size
 = 
fdh
.size; \

155 i‡(!
found
) \

156 
img
 = 
NULL
; \

158 } 0)

	)

160 
˝io_sˇn
(
fd
, 
swupd©e_cfg
 *
cfg
, 
off_t
 
°¨t
);

161 
swupd©e_cfg
 *
gë_swupd©e_cfg
();

162 
‰ì_image
(
img_ty≥
 *
img
);

	@swupdate/include/swupdate_dict.h

8 #i‚de‡
_SWDICT_H


9 
	#_SWDICT_H


	)

11 
	~<bsdqueue.h
>

13 
	sdi˘_li°_ñem
 {

14 *
	mvÆue
;

15 
LIST_ENTRY
(
di˘_li°_ñem
Ë
	m√xt
;

18 
LIST_HEAD
(
di˘_li°
, 
di˘_li°_ñem
);

20 
	sdi˘_íåy
 {

21 *
	mkey
;

22 
di˘_li°
 
	mli°
;

23 
LIST_ENTRY
(
di˘_íåy
Ë
	m√xt
;

26 
LIST_HEAD
(
di˘
, 
di˘_íåy
);

28 *
di˘_íåy_gë_key
(
di˘_íåy
 *
íåy
);

29 *
di˘_íåy_gë_vÆue
(
di˘_íåy
 *
íåy
);

31 
di˘_li°
 *
di˘_gë_li°
(
di˘
 *
di˘i⁄¨y
, c⁄° *
key
);

32 *
di˘_gë_vÆue
(
di˘
 *
di˘i⁄¨y
, c⁄° *
key
);

33 
di˘_£t_vÆue
(
di˘
 *
di˘i⁄¨y
, c⁄° *
key
, c⁄° *
vÆue
);

34 
di˘_ö£π_vÆue
(
di˘
 *
di˘i⁄¨y
, c⁄° *
key
, c⁄° *
vÆue
);

35 
di˘_ªmove
(
di˘
 *
di˘i⁄¨y
, c⁄° *
key
);

36 
di˘_dr›_db
(
di˘
 *
di˘i⁄¨y
);

37 
di˘_∑r£_s¸ùt
(
di˘
 *
di˘i⁄¨y
, c⁄° *
s¸ùt
);

	@swupdate/include/swupdate_settings.h

8 #i‚de‡
_SWUPDATE_SETTINGS_H


9 
	#_SWUPDATE_SETTINGS_H


	)

11 #ifde‡
CONFIG_LIBCONFIG


12 
ªad_moduÀ_£âögs
(c⁄° *
fûíame
, c⁄° *
moduÀ
, 
£âögs_ˇŒback
 
f˙
, *
d©a
);

13 
ªad_£âögs_u£r_id
(c⁄° *
fûíame
, c⁄° *
moduÀ
, 
uid_t
 *
u£rid
, 
gid_t
 *
groupid
);

14 
£âögs_öto_di˘
(*
£âögs
, *
d©a
);

16 
	~<uni°d.h
>

17 
ölöe
 
ªad_moduÀ_£âögs
(c⁄° 
__©åibuã__
 ((
__unu£d__
))*
fûíame
,

18 c⁄° 
__©åibuã__
 ((
__unu£d__
)Ë*
moduÀ
,

19 
£âögs_ˇŒback
 
__©åibuã__
 ((
__unu£d__
)Ë
f˙
,

20 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

28 
ölöe
 
ªad_£âögs_u£r_id
(c⁄° 
__©åibuã__
 ((
__unu£d__
))*
fûíame
,

29 c⁄° 
__©åibuã__
 ((
__unu£d__
))*
moduÀ
,

30 
uid_t
 *
u£rid
, 
gid_t
 *
groupid
)

32 *
	gu£rid
 = 
gëuid
();

33 *
	ggroupid
 = 
gëgid
();

38 
ölöe
 
£âögs_öto_di˘
(
__©åibuã__
 ((
__unu£d__
)Ë*
£âögs
,

39 
__©åibuã__
 ((
__unu£d__
))*
d©a
)

	@swupdate/include/swupdate_status.h

8 #i‚de‡
_SWUPDATE_STATUS_H


9 
	#_SWUPDATE_STATUS_H


	)

18 
	mIDLE
,

19 
	mSTART
,

20 
	mRUN
,

21 
	mSUCCESS
,

22 
	mFAILURE
,

23 
	mDOWNLOAD
,

24 
	mDONE
,

25 
	mSUBPROCESS
,

26 } 
	tRECOVERY_STATUS
;

29 
	mSOURCE_UNKNOWN
,

30 
	mSOURCE_WEBSERVER
,

31 
	mSOURCE_SURICATTA
,

32 
	mSOURCE_DOWNLOADER
,

33 
	mSOURCE_LOCAL


34 } 
	tsour˚ty≥
;

	@swupdate/include/util.h

8 #i‚de‡
_UTIL_H


9 
	#_UTIL_H


	)

11 
	~<°döt.h
>

12 
	~<°rög.h
>

13 #i‡
deföed
(
__löux__
)

14 
	~<löux/ty≥s.h
>

16 
	~"swupd©e.h
"

17 
	~"swupd©e_°©us.h
"

18 
	~"com∑t.h
"

20 
	#NOTIFY_BUF_SIZE
 2048

	)

21 
	#ENOMEM_ASPRINTF
 -1

	)

23 
	#SWUPDATE_SHA_DIGEST_LENGTH
 20

	)

24 
	#AES_BLOCK_SIZE
 16

	)

26 
logÀvñ
;

29 
	mSERVER_OK
,

30 
	mSERVER_EERR
,

31 
	mSERVER_EBADMSG
,

32 
	mSERVER_EINIT
,

33 
	mSERVER_EACCES
,

34 
	mSERVER_EAGAIN
,

35 
	mSERVER_UPDATE_AVAILABLE
,

36 
	mSERVER_NO_UPDATE_AVAILABLE
,

37 
	mSERVER_UPDATE_CANCELED
,

38 
	mSERVER_ID_REQUESTED
,

39 } 
	t£rvî_›_ªs_t
;

47 
	mOFF
,

48 
	mERRORLEVEL
,

49 
	mWARNLEVEL
,

50 
	mINFOLEVEL
,

51 
	mDEBUGLEVEL
,

52 
	mTRACELEVEL
,

53 
	mLASTLOGLEVEL
=
TRACELEVEL


54 } 
	tLOGLEVEL
;

61 
	mCANCELUPDATE
=
LASTLOGLEVEL
 + 1,

62 
	mCHANGE
,

63 } 
	tNOTIFY_CAUSE
;

66 
	mRECOVERY_NO_ERROR
,

67 
	mRECOVERY_ERROR
,

70 
	sö°ÆÀr
 {

71 
	mfd
;

72 
RECOVERY_STATUS
 
	m°©us
;

73 
RECOVERY_STATUS
 
	mœ°_ö°Æl
;

74 
	mœ°_îr‹
;

75 
	mîr‹msg
[64];

76 
sour˚ty≥
 
	msour˚
;

77 
	mdry_run
;

78 
	mÀn
;

79 
	möfo
[2048];

82 (*
	tnŸifõr
Ë(
	tRECOVERY_STATUS
 
	t°©us
, 
	tîr‹
, 
	tÀvñ
, c⁄° *
	tmsg
);

84 
	#swupd©e_nŸify
(
°©us
, 
f‹m©
, 
Àvñ
, 
¨g
...) do { \

85 i‡(
logÀvñ
 >
Àvñ
) { \

86 
tmpbuf
[
NOTIFY_BUF_SIZE
]; \

87 i‡(
°©us
 =
FAILURE
) { \

88 i‡(
logÀvñ
 >
DEBUGLEVEL
) \

89 
	`¢¥ötf
(
tmpbuf
, (tmpbuf), \

90 "ERROR %†: %†: %d : " 
f‹m©
, \

91 
__FILE__
, \

92 
__func__
, \

93 
__LINE__
, \

94 ## 
¨g
); \

96 
	`¢¥ötf
(
tmpbuf
, (tmpbuf), \

97 "ERROR : " 
f‹m©
, ## 
¨g
); \

98 
	`nŸify
(
FAILURE
, 0, 
Àvñ
, 
tmpbuf
); \

100 
	`¢¥ötf
(
tmpbuf
, (tmpbuf), \

101 "[%s] : " 
f‹m©
, 
__func__
, ## 
¨g
); \

102 
	`nŸify
(
RUN
, 
RECOVERY_NO_ERROR
, 
Àvñ
, 
tmpbuf
); \

105 
	}
} 0)

	)

107 
	#ERROR
(
f‹m©
, 
¨g
...) \

108 
	`swupd©e_nŸify
(
FAILURE
, 
f‹m©
, 
ERRORLEVEL
, ## 
¨g
)

	)

110 
	#WARN
(
f‹m©
, 
¨g
...) \

111 
	`swupd©e_nŸify
(
RUN
, 
f‹m©
, 
WARNLEVEL
, ## 
¨g
)

	)

113 
	#INFO
(
f‹m©
, 
¨g
...) \

114 
	`swupd©e_nŸify
(
RUN
, 
f‹m©
, 
INFOLEVEL
, ## 
¨g
)

	)

116 
	#TRACE
(
f‹m©
, 
¨g
...) \

117 
	`swupd©e_nŸify
(
RUN
, 
f‹m©
, 
TRACELEVEL
, ## 
¨g
)

	)

119 
	#DEBUG
(
f‹m©
, 
¨g
...) \

120 
	`swupd©e_nŸify
(
RUN
, 
f‹m©
, 
DEBUGLEVEL
, ## 
¨g
)

	)

122 
	#ARRAY_SIZE
(
¨r
Ë(◊ºË/ (◊º)[0]))

	)

124 
	#STRINGIFY
(...Ë#__VA_ARGS__

	)

125 
	#SETSTRING
(
p
, 
v
) do { \

126 i‡(
p
) \

127 
	`‰ì
(
p
); \

128 
p
 = 
	`°rdup
(
v
); \

129 } 0)

	)

132 
	#LG_16
 4

	)

133 
	#FROM_HEX
(
f
Ë
	`‰om_ascii
 (f,  f, 
LG_16
)

	)

134 
uötmax_t


135 
‰om_ascii
 (c⁄° *
whîe
, 
size_t
 
digs
, 
logba£
);

136 
ascii_to_hash
(*
hash
, c⁄° *
s
);

137 
hash_to_ascii
(c⁄° *
hash
, *
s
);

138 
IsVÆidHash
(c⁄° *
hash
);

140 #i‚de‡
ty≥of


141 
	#ty≥of
 
__ty≥of__


	)

143 
	#max
(
a
, 
b
) ({\

144 
	`ty≥of
(
a
Ë
_a
 =á;\

145 
	`ty≥of
(
b
Ë
_b
 = b;\

146 
_a
 > 
_b
 ? _®: _b; })

	)

148 
	#mö
(
a
, 
b
) ({\

149 
	`ty≥of
(
a
Ë
_a
 =á;\

150 
	`ty≥of
(
b
Ë
_b
 = b;\

151 
_a
 < 
_b
 ? _®: _b; })

	)

153 *
sdup
(c⁄° *
°r
);

158 (*
	twrôeimage
Ë(*
	tout
, c⁄° *
	tbuf
, 
	tÀn
);

160 
	`›ífûe
(c⁄° *
fûíame
);

161 
	`c›y_wrôe
(*
out
, c⁄° *
buf
, 
Àn
);

162 #i‡
	`deföed
(
__FªeBSD__
)

163 
	`c›y_wrôe_∑dded
(*
out
, c⁄° *
buf
, 
Àn
);

165 
	`c›yfûe
(
fdö
, *
out
, 
nbyãs
, *
offs
,

166 
£ek
,

167 
skù_fûe
, 
com¥es£d
, 
uöt32_t
 *
checksum
,

168 *
hash
, 
í¸y±ed
, 
wrôeimage
 
ˇŒback
);

169 
	`c›yimage
(*
out
, 
img_ty≥
 *
img
, 
wrôeimage
 
ˇŒback
);

170 
	`exåa˘_sw_des¸ùti⁄
(
fd
, c⁄° *
descfûe
, 
off_t
 *
offs
);

171 
off_t
 
	`exåa˘_√xt_fûe
(
fd
, 
fdout
, off_à
°¨t
, 
com¥es£d
,

172 
í¸y±ed
, *
hash
);

173 
	`›ífûeouçut
(c⁄° *
fûíame
);

174 
	`mk∑th
(*
dú
, 
mode_t
 
mode
);

176 
	`ªgi°î_nŸifõr
(
nŸifõr
 
˛õ¡
);

177 
	`nŸify
(
RECOVERY_STATUS
 
°©us
, 
îr‹
, 
Àvñ
, c⁄° *
msg
);

178 
	`nŸify_öô
();

179 
	`sy¶og_öô
();

181 **
	`•lô¨gs
(*
¨gs
, *
¨gc
);

182 *
	`m°rˇt
(c⁄° **
nodes
, c⁄° *
dñim
);

183 ** 
	`°rög_•lô
(c⁄° * 
a_°r
, c⁄° 
a_dñim
);

184 
	`‰ì¨gs
 (**
¨gv
);

185 
	`gë_hw_ªvisi⁄
(
hw_ty≥
 *
hw
);

186 
	`gë_sw_vîsi⁄s
(*
cfg‚ame
, 
swupd©e_cfg
 *
sw
);

187 
__u64
 
	`vîsi⁄_to_numbî
(c⁄° *
vîsi⁄_°rög
);

188 
	`check_hw_com∑tibûôy
(
swupd©e_cfg
 *
cfg
);

189 
	`cou¡_ñem_li°
(
imgli°
 *
li°
);

190 
	`cou¡_°rög_¨øy
(c⁄° **
nodes
);

191 
	`‰ì_°rög_¨øy
(**
nodes
);

194 
	`lﬂd_de¸y±i⁄_key
(*
‚ame
);

195 *
	`gë_´s_key
();

196 *
	`gë_´s_ivt
();

197 *
	`gë_´s_ß…
();

200 
	`gë_ö°Æl_öfo
(
sour˚ty≥
 *
sour˚
, *
buf
, 
size_t
 
Àn
);

202 
	`u°πouŒ
(c⁄° *
˝
, 
ba£
);

204 c⁄° * 
	`gë_tmpdú
();

205 c⁄° * 
	`gë_tmpdús¸ùts
();

207 
	`swupd©e_mou¡
(c⁄° *
devi˚
, c⁄° *
dú
, c⁄° *
f°y≥
);

208 
	`swupd©e_umou¡
(c⁄° *
dú
);

211 *
	`swupd©e_time_iso8601
();

	@swupdate/ipc/network_ipc.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<uni°d.h
>

12 
	~<°rög.h
>

13 
	~<gë›t.h
>

14 
	~<î∫o.h
>

15 
	~<sig«l.h
>

16 
	~<sys/io˘l.h
>

17 
	~<f˙é.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/sockë.h
>

20 
	~<sys/un.h
>

21 
	~<¨∑/öë.h
>

22 
	~<√töë/ö.h
>

23 
	~<sys/°©.h
>

24 
	~<˘y≥.h
>

25 
	~<f˙é.h
>

26 
	~<sys/£À˘.h
>

27 
	~<î∫o.h
>

28 
	~<±hªad.h
>

30 
	~"√tw‹k_ùc.h
"

31 
	~"com∑t.h
"

33 #ifde‡
CONFIG_SOCKET_CTRL_PATH


34 * 
	gSOCKET_CTRL_PATH
 = (*)
CONFIG_SOCKET_CTRL_PATH
;

36 * 
	gSOCKET_CTRL_PATH
 = (*)"/tmp/sockinstctrl";

39 
	sasync_lib
 {

40 
	mc⁄nfd
;

41 
	m°©us
;

42 
wrôed©a
 
	mwr
;

43 
gë°©us
 
	mgë
;

44 
ãrmö©ed
 
	míd
;

47 
	gh™dÀ
 = 0;

48 
async_lib
 
	gªque°
;

49 
±hªad_t
 
	gasync_thªad_id
;

51 
	#gë_ªque°
(Ë(&
ªque°
)

	)

53 
	$¥ï¨e_ùc
() {

55 
c⁄nfd
;

56 
ªt
;

58 
sockaddr_un
 
£rvaddr
;

60 
c⁄nfd
 = 
	`sockë
(
AF_LOCAL
, 
SOCK_STREAM
, 0);

61 
	`bzîo
(&
£rvaddr
, (servaddr));

62 
£rvaddr
.
sun_Ámûy
 = 
AF_LOCAL
;

64 
	`°r˝y
(
£rvaddr
.
sun_∑th
, 
SOCKET_CTRL_PATH
);

66 
ªt
 = 
	`c⁄√˘
(
c⁄nfd
, (
sockaddr
 *Ë&
£rvaddr
, (servaddr));

67 i‡(
ªt
 < 0) {

68 
	`˛o£
(
c⁄nfd
);

69  
ªt
;

72  
c⁄nfd
;

73 
	}
}

75 
	$ùc_po°upd©e
(
ùc_mesßge
 *
msg
) {

76 
c⁄nfd
 = 
	`¥ï¨e_ùc
();

77 i‡(
c⁄nfd
 < 0) {

81 
ssize_t
 
ªt
;

82 * 
tmpbuf
 = 
NULL
;

83 i‡(
msg
->
d©a
.
ö°msg
.
Àn
 > 0) {

84 i‡((
tmpbuf
 = 
	`°∫du∑
(
msg
->
d©a
.
ö°msg
.
buf
,

85 
msg
->
d©a
.
ö°msg
.
Àn
 > (msg->d©a.ö°msg.
buf
)

86 ? (
msg
->
d©a
.
ö°msg
.
buf
)

87 : 
msg
->
d©a
.
ö°msg
.
Àn
)Ë=
NULL
) {

88 
	`˛o£
(
c⁄nfd
);

92 
	`mem£t
(
msg
, 0, (*msg));

93 i‡(
tmpbuf
 !
NULL
) {

94 
	`°∫˝y
(
msg
->
d©a
.
ö°msg
.
buf
, 
tmpbuf
, (msg->data.instmsg.buf));

95 
msg
->
d©a
.
ö°msg
.
Àn
 = 
	`°∫Àn
(
tmpbuf
, (msg->d©a.ö°msg.
buf
));

97 
msg
->
magic
 = 
IPC_MAGIC
;

98 
msg
->
ty≥
 = 
POST_UPDATE
;

99 
ªt
 = 
	`wrôe
(
c⁄nfd
, 
msg
, (*msg));

100 i‡(
ªt
 !(*
msg
)) {

101 
	`˛o£
(
c⁄nfd
);

104 
ªt
 = 
	`ªad
(
c⁄nfd
, 
msg
, (*msg));

105 i‡(
ªt
 <= 0) {

106 
	`˛o£
(
c⁄nfd
);

110 
	`˛o£
(
c⁄nfd
);

112 
	}
}

114 
	$__ùc_gë_°©us
(
c⁄nfd
, 
ùc_mesßge
 *
msg
)

116 
ssize_t
 
ªt
;

118 
	`mem£t
(
msg
, 0, (*msg));

119 
msg
->
magic
 = 
IPC_MAGIC
;

120 
msg
->
ty≥
 = 
GET_STATUS
;

121 
ªt
 = 
	`wrôe
(
c⁄nfd
, 
msg
, (*msg));

122 i‡(
ªt
 !(*
msg
))

125 
ªt
 = 
	`ªad
(
c⁄nfd
, 
msg
, (*msg));

126 i‡(
ªt
 <= 0)

130 
	}
}

132 
	$ùc_gë_°©us
(
ùc_mesßge
 *
msg
)

134 
ªt
;

135 
c⁄nfd
;

137 
c⁄nfd
 = 
	`¥ï¨e_ùc
();

138 i‡(
c⁄nfd
 < 0) {

141 
ªt
 = 
	`__ùc_gë_°©us
(
c⁄nfd
, 
msg
);

142 
	`˛o£
(
c⁄nfd
);

144  
ªt
;

145 
	}
}

147 
	$ùc_ö°_°¨t_ext
(
sour˚ty≥
 
sour˚
, 
size_t
 
Àn
, c⁄° *
buf
, 
boﬁ
 
dryrun
)

149 
c⁄nfd
;

150 
ùc_mesßge
 
msg
;

151 
ssize_t
 
ªt
;

153 
c⁄nfd
 = 
	`¥ï¨e_ùc
();

154 i‡(
c⁄nfd
 < 0)

157 
	`mem£t
(&
msg
, 0, (msg));

162 
msg
.
magic
 = 
IPC_MAGIC
;

163 
msg
.
ty≥
 = (!
dryrun
Ë? 
REQ_INSTALL
 : 
REQ_INSTALL_DRYRUN
;

169 
msg
.
d©a
.
ö°msg
.
sour˚
 = source;

170 i‡(
Àn
 > (
msg
.
d©a
.
ö°msg
.
buf
))

171 
Àn
 = (
msg
.
d©a
.
ö°msg
.
buf
);

172 i‡(!
sour˚
) {

173 
msg
.
d©a
.
ö°msg
.
Àn
 = 0;

175 
msg
.
d©a
.
ö°msg
.
Àn
 =Üen;

176 
	`mem˝y
(
msg
.
d©a
.
ö°msg
.
buf
, buf, 
Àn
);

179 
ªt
 = 
	`wrôe
(
c⁄nfd
, &
msg
, (msg));

180 i‡(
ªt
 !(
msg
)) {

181 
	`˛o£
(
c⁄nfd
);

185 
ªt
 = 
	`ªad
(
c⁄nfd
, &
msg
, (msg));

186 i‡(
ªt
 <= 0) {

187 
	`˛o£
(
c⁄nfd
);

191 i‡(
msg
.
ty≥
 !
ACK
) {

192 
	`˛o£
(
c⁄nfd
);

196  
c⁄nfd
;

197 
	}
}

203 
	$ùc_ö°_°¨t
()

205  
	`ùc_ö°_°¨t_ext
(
SOURCE_UNKNOWN
, 0, 
NULL
, 
Ál£
);

206 
	}
}

212 
	$ùc_£nd_d©a
(
c⁄nfd
, *
buf
, 
size
)

214 
ssize_t
 
ªt
;

216 
ªt
 = 
	`wrôe
(
c⁄nfd
, 
buf
, (
size_t
)
size
);

217 i‡(
ªt
 !
size
) {

221  ()
ªt
;

222 
	}
}

224 
	$ùc_íd
(
c⁄nfd
)

226 
	`˛o£
(
c⁄nfd
);

227 
	}
}

229 
	$swupd©e_image_wrôe
(*
buf
, 
size
)

231 
async_lib
 *
rq
;

233 
rq
 = 
	`gë_ªque°
();

235  
	`ùc_£nd_d©a
(
rq
->
c⁄nfd
, 
buf
, 
size
);

236 
	}
}

238 
	$ùc_waô_f‹_com∂ëe
(
gë°©us
 
ˇŒback
)

240 
fd
;

241 
RECOVERY_STATUS
 
°©us
 = 
IDLE
;

242 
ùc_mesßge
 
mesßge
;

243 
ªt
;

246 
fd
 = 
	`¥ï¨e_ùc
();

247 i‡(
fd
 < 0)

249 
ªt
 = 
	`__ùc_gë_°©us
(
fd
, &
mesßge
);

250 
	`ùc_íd
(
fd
);

252 i‡(
ªt
 < 0) {

253 
	`¥ötf
("__ùc_gë_°©u†ªtu∫ed %d\n", 
ªt
);

254 
mesßge
.
d©a
.
°©us
.
œ°_ªsu…
 = 
FAILURE
;

258 i‡(–(
°©us
 !(
RECOVERY_STATUS
)
mesßge
.
d©a
.°©us.
cuºít
) ||

259 
	`°æí
(
mesßge
.
d©a
.
°©us
.
desc
))) {

260 i‡(
ˇŒback
)

261 
	`ˇŒback
(&
mesßge
);

263 
	`¶ìp
(1);

265 
°©us
 = (
RECOVERY_STATUS
)
mesßge
.
d©a
.°©us.
cuºít
;

266 } 
mesßge
.
d©a
.
°©us
.
cuºít
 !
IDLE
);

268  
mesßge
.
d©a
.
°©us
.
œ°_ªsu…
;

269 
	}
}

271 *
	$swupd©e_async_thªad
(*
d©a
)

273 *
pbuf
;

274 
size
;

275 
sig£t_t
 
sigpùe_mask
;

276 
sig£t_t
 
ßved_mask
;

277 
time•ec
 
zîŸime
 = {0, 0};

278 
async_lib
 *
rq
 = (async_lib *)
d©a
;

279 
swupd©e_ªsu…
;

281 
	`sigem±y£t
(&
sigpùe_mask
);

282 
	`sigadd£t
(&
sigpùe_mask
, 
SIGPIPE
);

284 i‡(
	`±hªad_sigmask
(
SIG_BLOCK
, &
sigpùe_mask
, &
ßved_mask
) == -1) {

285 
	`≥º‹
("pthread_sigmask");

286 
	`exô
(1);

291 i‡(!
rq
->
wr
)

294 
rq
->
	`wr
(&
pbuf
, &
size
);

295 i‡(
size
)

296 
	`swupd©e_image_wrôe
(
pbuf
, 
size
);

297 } 
size
 > 0);

299 
	`ùc_íd
(
rq
->
c⁄nfd
);

300 
	`¥ötf
("Now getting status\n");

306 
swupd©e_ªsu…
 = 
	`ùc_waô_f‹_com∂ëe
(
rq
->
gë
);

308 
h™dÀ
 = 0;

310 i‡(
	`sigtimedwaô
(&
sigpùe_mask
, 0, &
zîŸime
) == -1) {

314 i‡(
	`±hªad_sigmask
(
SIG_SETMASK
, &
ßved_mask
, 0) == -1) {

315 
	`≥º‹
("pthread_sigmask");

318 i‡(
rq
->
íd
)

319 
rq
->
	`íd
((
RECOVERY_STATUS
)
swupd©e_ªsu…
);

321 
	`±hªad_exô
(
NULL
);

322 
	}
}

329 
±hªad_t
 
	$°¨t_ùc_thªad
(*(* 
°¨t_routöe
Ë(*), *
¨g
)

331 
ªt
;

332 
±hªad_t
 
id
;

333 
±hªad_©å_t
 
©å
;

335 
	`±hªad_©å_öô
(&
©å
);

336 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

338 
ªt
 = 
	`±hªad_¸óã
(&
id
, &
©å
, 
°¨t_routöe
, 
¨g
);

339 i‡(
ªt
) {

340 
	`exô
(1);

342  
id
;

343 
	}
}

349 
	$swupd©e_async_°¨t
(
wrôed©a
 
wr_func
, 
gë°©us
 
°©us_func
,

350 
ãrmö©ed
 
íd_func
, 
boﬁ
 
dryrun
)

352 
async_lib
 *
rq
;

353 
c⁄nfd
;

355 i‡(
h™dÀ
)

356  -
EBUSY
;

358 
rq
 = 
	`gë_ªque°
();

360 
rq
->
wr
 = 
wr_func
;

361 
rq
->
gë
 = 
°©us_func
;

362 
rq
->
íd
 = 
íd_func
;

364 
c⁄nfd
 = 
	`ùc_ö°_°¨t_ext
(
SOURCE_UNKNOWN
, 0, 
NULL
, 
dryrun
);

366 i‡(
c⁄nfd
 < 0)

367  
c⁄nfd
;

369 
rq
->
c⁄nfd
 = connfd;

371 
async_thªad_id
 = 
	`°¨t_ùc_thªad
(
swupd©e_async_thªad
, 
rq
);

373 
h™dÀ
++;

375  
h™dÀ
;

376 
	}
}

378 
	$ùc_£nd_cmd
(
ùc_mesßge
 *
msg
)

380 
c⁄nfd
 = 
	`¥ï¨e_ùc
();

381 
ªt
;

383 i‡(
c⁄nfd
 < 0) {

388 
msg
->
magic
 = 
IPC_MAGIC
;

389 
msg
->
ty≥
 = 
SWUPDATE_SUBPROCESS
;

390 
ªt
 = 
	`wrôe
(
c⁄nfd
, 
msg
, (*msg));

391 i‡(
ªt
 !(*
msg
)) {

392 
	`˛o£
(
c⁄nfd
);

395 
ªt
 = 
	`ªad
(
c⁄nfd
, 
msg
, (*msg));

396 i‡(
ªt
 <= 0) {

397 
	`˛o£
(
c⁄nfd
);

400 
	`˛o£
(
c⁄nfd
);

403 
	}
}

	@swupdate/ipc/progress_ipc.c

8 
	~<sys/sockë.h
>

9 
	~<sys/un.h
>

10 
	~<°rög.h
>

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

14 
	~<°dboﬁ.h
>

16 
	~<¥ogªss_ùc.h
>

18 #ifde‡
CONFIG_SOCKET_PROGRESS_PATH


19 * 
	gSOCKET_PROGRESS_PATH
 = (*)
CONFIG_SOCKET_PROGRESS_PATH
;

21 * 
	gSOCKET_PROGRESS_PATH
 = (*)"/tmp/swupdateprog";

24 
	$¥ogªss_ùc_c⁄√˘
(
boﬁ
 
ªc⁄√˘
)

26 
sockaddr_un
 
£rvaddr
;

27 
fd
 = 
	`sockë
(
AF_LOCAL
, 
SOCK_STREAM
, 0);

28 
	`bzîo
(&
£rvaddr
, (servaddr));

29 
£rvaddr
.
sun_Ámûy
 = 
AF_LOCAL
;

30 
	`°r˝y
(
£rvaddr
.
sun_∑th
, 
SOCKET_PROGRESS_PATH
);

32 
	`Ârötf
(
°dout
, "TryingÅo connectÅo SWUpdate...\n");

35 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *Ë&
£rvaddr
, (servaddr)) == 0) {

38 i‡(!
ªc⁄√˘
) {

39 
	`Ârötf
(
°dîr
, "ˇ¬Ÿ communiˇã wôh SWUpd©êvü %s\n", 
SOCKET_PROGRESS_PATH
);

40 
	`exô
(1);

43 
	`u¶ìp
(10000);

44 } 
åue
);

46 
	`Ârötf
(
°dout
, "C⁄√˘edÅÿSWUpd©êvü %s\n", 
SOCKET_PROGRESS_PATH
);

47  
fd
;

48 
	}
}

50 
	$¥ogªss_ùc_ª˚ive
(*
c⁄nfd
, 
¥ogªss_msg
 *
msg
) {

51 
ªt
 = 
	`ªad
(*
c⁄nfd
, 
msg
, (*msg));

52 i‡(
ªt
 !(*
msg
)) {

53 
	`Ârötf
(
°dout
, "Connection closing..\n");

54 
	`˛o£
(*
c⁄nfd
);

55 *
c⁄nfd
 = -1;

58  
ªt
;

59 
	}
}

	@swupdate/mongoose/mongoose.c

1 
	~"m⁄goo£.h
"

2 #ifde‡
MG_MODULE_LINES


12 #i‚de‡
CS_MONGOOSE_SRC_INTERNAL_H_


13 
	#CS_MONGOOSE_SRC_INTERNAL_H_


	)

17 #i‚de‡
MBUF_REALLOC


18 
	#MBUF_REALLOC
 
MG_REALLOC


	)

21 #i‚de‡
MBUF_FREE


22 
	#MBUF_FREE
 
MG_FREE


	)

25 
	#MG_SET_PTRPTR
(
_±r
, 
_v
) \

27 i‡(
_±r
Ë*(_±rË
_v
; \

28 } 0)

	)

30 #i‚de‡
MG_INTERNAL


31 
	#MG_INTERNAL
 

	)

34 #ifde‡
PICOTCP


35 
	#NO_LIBC


	)

36 
	#MG_DISABLE_PFS


	)

43 
	#MG_CTL_MSG_MESSAGE_SIZE
 8192

	)

46 
MG_INTERNAL
 
mg_c⁄√˘i⁄
 *
mg_do_c⁄√˘
(mg_c⁄√˘i⁄ *
nc
,

47 
¥Ÿo
,

48 
sockë_addªss
 *
ß
);

50 
MG_INTERNAL
 
mg_∑r£_addªss
(c⁄° *
°r
, 
sockë_addªss
 *
ß
,

51 *
¥Ÿo
, *
ho°
, 
size_t
 
ho°_Àn
);

52 
MG_INTERNAL
 
mg_ˇŒ
(
mg_c⁄√˘i⁄
 *
nc
,

53 
mg_evít_h™dÀr_t
 
ev_h™dÀr
, *
u£r_d©a
, 
ev
,

54 *
ev_d©a
);

55 
mg_f‹w¨d
(
mg_c⁄√˘i⁄
 *
‰om
, mg_c⁄√˘i⁄ *
to
);

56 
MG_INTERNAL
 
mg_add_c⁄n
(
mg_mgr
 *
mgr
, 
mg_c⁄√˘i⁄
 *
c
);

57 
MG_INTERNAL
 
mg_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
c
);

58 
MG_INTERNAL
 
mg_c⁄√˘i⁄
 *
mg_¸óã_c⁄√˘i⁄
(

59 
mg_mgr
 *
mgr
, 
mg_evít_h™dÀr_t
 
ˇŒback
,

60 
mg_add_sock_›ts
 
›ts
);

61 #ifde‡
_WIN32


63 
to_wch¨
(c⁄° *
∑th
, 
wch¨_t
 *
wbuf
, 
size_t
 
wbuf_Àn
);

66 
	s˘l_msg
 {

67 
mg_evít_h™dÀr_t
 
	mˇŒback
;

68 
	mmesßge
[
MG_CTL_MSG_MESSAGE_SIZE
];

71 #i‡
MG_ENABLE_MQTT


72 
	gmg_mqâ_mesßge
;

74 
	#MG_MQTT_ERROR_INCOMPLETE_MSG
 -1

	)

75 
	#MG_MQTT_ERROR_MALFORMED_MSG
 -2

	)

77 
MG_INTERNAL
 
∑r£_mqâ
(
mbuf
 *
io
, 
mg_mqâ_mesßge
 *
mm
);

81 *(*
ã°_mÆloc
)(
size_t
 
size
);

82 *(*
ã°_ˇŒoc
)(
size_t
 
cou¡
, size_à
size
);

84 #i‚de‡
MIN


85 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

88 #i‡
MG_ENABLE_HTTP


89 
	gmg_£rve_hâp_›ts
;

102 
MG_INTERNAL
 
size_t
 
mg_h™dÀ_chunked
(
mg_c⁄√˘i⁄
 *
nc
,

103 
hâp_mesßge
 *
hm
, *
buf
,

104 
size_t
 
bÀn
);

106 #i‡
MG_ENABLE_FILESYSTEM


107 
MG_INTERNAL
 
mg_uri_to_loˇl_∑th
(
hâp_mesßge
 *
hm
,

108 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

109 **
loˇl_∑th
,

110 
mg_°r
 *
ªmaödî
);

111 
MG_INTERNAL
 
time_t
 
mg_∑r£_d©e_°rög
(c⁄° *
d©ëime
);

112 
MG_INTERNAL
 
mg_is_nŸ_modifõd
(
hâp_mesßge
 *
hm
, 
cs_°©_t
 *
°
);

114 #i‡
MG_ENABLE_HTTP_CGI


115 
MG_INTERNAL
 
mg_h™dÀ_cgi
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
¥og
,

116 c⁄° 
mg_°r
 *
∑th_öfo
,

117 c⁄° 
hâp_mesßge
 *
hm
,

118 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
);

119 
	gmg_hâp_¥Ÿo_d©a_cgi
;

120 
MG_INTERNAL
 
mg_hâp_‰ì_¥Ÿo_d©a_cgi
(
mg_hâp_¥Ÿo_d©a_cgi
 *
d
);

122 #i‡
MG_ENABLE_HTTP_SSI


123 
MG_INTERNAL
 
mg_h™dÀ_ssi_ªque°
(
mg_c⁄√˘i⁄
 *
nc
,

124 
hâp_mesßge
 *
hm
,

125 c⁄° *
∑th
,

126 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
);

128 #i‡
MG_ENABLE_HTTP_WEBDAV


129 
MG_INTERNAL
 
mg_is_dav_ªque°
(c⁄° 
mg_°r
 *
s
);

130 
MG_INTERNAL
 
mg_h™dÀ_¥›föd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

131 
cs_°©_t
 *
°p
, 
hâp_mesßge
 *
hm
,

132 
mg_£rve_hâp_›ts
 *
›ts
);

133 
MG_INTERNAL
 
mg_h™dÀ_lock
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
);

134 
MG_INTERNAL
 
mg_h™dÀ_mkcﬁ
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

135 
hâp_mesßge
 *
hm
);

136 
MG_INTERNAL
 
mg_h™dÀ_move
(
mg_c⁄√˘i⁄
 *
c
,

137 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

138 c⁄° *
∑th
, 
hâp_mesßge
 *
hm
);

139 
MG_INTERNAL
 
mg_h™dÀ_dñëe
(
mg_c⁄√˘i⁄
 *
nc
,

140 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

141 c⁄° *
∑th
);

142 
MG_INTERNAL
 
mg_h™dÀ_put
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

143 
hâp_mesßge
 *
hm
);

145 #i‡
MG_ENABLE_HTTP_WEBSOCKET


146 
MG_INTERNAL
 
mg_ws_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

147 *
ev_d©a
 
MG_UD_ARG
(*
u£r_d©a
));

148 
MG_INTERNAL
 
mg_ws_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
,

149 c⁄° 
mg_°r
 *
key
,

150 
hâp_mesßge
 *);

154 
MG_INTERNAL
 
mg_gë_î∫o
();

156 
MG_INTERNAL
 
mg_˛o£_c⁄n
(
mg_c⁄√˘i⁄
 *
c⁄n
);

158 #i‡
MG_ENABLE_SNTP


159 
MG_INTERNAL
 
mg_¢ç_∑r£_ª∂y
(c⁄° *
buf
, 
Àn
,

160 
mg_¢ç_mesßge
 *
msg
);

164 #ifde‡
MG_MODULE_LINES


172 #i‚de‡
CS_COMMON_MG_MEM_H_


173 
	#CS_COMMON_MG_MEM_H_


	)

175 #ifde‡
__˝lu•lus


179 #i‚de‡
MG_MALLOC


180 
	#MG_MALLOC
 
mÆloc


	)

183 #i‚de‡
MG_CALLOC


184 
	#MG_CALLOC
 
ˇŒoc


	)

187 #i‚de‡
MG_REALLOC


188 
	#MG_REALLOC
 
ªÆloc


	)

191 #i‚de‡
MG_FREE


192 
	#MG_FREE
 
‰ì


	)

195 #ifde‡
__˝lu•lus


200 #ifde‡
MG_MODULE_LINES


208 #i‚de‡
EXCLUDE_COMMON


212 
	~<°rög.h
>

218 
	#NUM_UPPERCASES
 ('Z' - 'A' + 1)

	)

219 
	#NUM_LETTERS
 (
NUM_UPPERCASES
 * 2)

	)

220 
	#NUM_DIGITS
 ('9' - '0' + 1)

	)

227 
	$cs_ba£64_emô_code
(
cs_ba£64_˘x
 *
˘x
, 
v
) {

228 i‡(
v
 < 
NUM_UPPERCASES
) {

229 
˘x
->
	`b64_putc
(
v
 + 'A', ctx->
u£r_d©a
);

230 } i‡(
v
 < (
NUM_LETTERS
)) {

231 
˘x
->
	`b64_putc
(
v
 - 
NUM_UPPERCASES
 + 'a', ctx->
u£r_d©a
);

232 } i‡(
v
 < (
NUM_LETTERS
 + 
NUM_DIGITS
)) {

233 
˘x
->
	`b64_putc
(
v
 - 
NUM_LETTERS
 + '0', ctx->
u£r_d©a
);

235 
˘x
->
	`b64_putc
(
v
 - 
NUM_LETTERS
 - 
NUM_DIGITS
 == 0 ? '+' : '/',

236 
˘x
->
u£r_d©a
);

238 
	}
}

240 
	$cs_ba£64_emô_chunk
(
cs_ba£64_˘x
 *
˘x
) {

241 
a
, 
b
, 
c
;

243 
a
 = 
˘x
->
chunk
[0];

244 
b
 = 
˘x
->
chunk
[1];

245 
c
 = 
˘x
->
chunk
[2];

247 
	`cs_ba£64_emô_code
(
˘x
, 
a
 >> 2);

248 
	`cs_ba£64_emô_code
(
˘x
, ((
a
 & 3Ë<< 4Ë| (
b
 >> 4));

249 i‡(
˘x
->
chunk_size
 > 1) {

250 
	`cs_ba£64_emô_code
(
˘x
, (
b
 & 15Ë<< 2 | (
c
 >> 6));

252 i‡(
˘x
->
chunk_size
 > 2) {

253 
	`cs_ba£64_emô_code
(
˘x
, 
c
 & 63);

255 
	}
}

257 
	$cs_ba£64_öô
(
cs_ba£64_˘x
 *
˘x
, 
cs_ba£64_putc_t
 
b64_putc
,

258 *
u£r_d©a
) {

259 
˘x
->
chunk_size
 = 0;

260 
˘x
->
b64_putc
 = b64_putc;

261 
˘x
->
u£r_d©a
 = user_data;

262 
	}
}

264 
	$cs_ba£64_upd©e
(
cs_ba£64_˘x
 *
˘x
, c⁄° *
°r
, 
size_t
 
Àn
) {

265 c⁄° *
§c
 = (c⁄° *Ë
°r
;

266 
size_t
 
i
;

267 
i
 = 0; i < 
Àn
; i++) {

268 
˘x
->
chunk
[˘x->
chunk_size
++] = 
§c
[
i
];

269 i‡(
˘x
->
chunk_size
 == 3) {

270 
	`cs_ba£64_emô_chunk
(
˘x
);

271 
˘x
->
chunk_size
 = 0;

274 
	}
}

276 
	$cs_ba£64_föish
(
cs_ba£64_˘x
 *
˘x
) {

277 i‡(
˘x
->
chunk_size
 > 0) {

278 
i
;

279 
	`mem£t
(&
˘x
->
chunk
[˘x->
chunk_size
], 0, 3 - ctx->chunk_size);

280 
	`cs_ba£64_emô_chunk
(
˘x
);

281 
i
 = 0; i < (3 - 
˘x
->
chunk_size
); i++) {

282 
˘x
->
	`b64_putc
('=', ctx->
u£r_d©a
);

285 
	}
}

287 
	#BASE64_ENCODE_BODY
 \

288 c⁄° *
b64
 = \

290 
i
, 
j
, 
a
, 
b
, 
c
; \

292 
i
 = 
j
 = 0; i < 
§c_Àn
; i += 3) { \

293 
a
 = 
§c
[
i
]; \

294 
b
 = 
i
 + 1 >
§c_Àn
 ? 0 : 
§c
[i + 1]; \

295 
c
 = 
i
 + 2 >
§c_Àn
 ? 0 : 
§c
[i + 2]; \

297 
	`BASE64_OUT
(
b64
[
a
 >> 2]); \

298 
	`BASE64_OUT
(
b64
[((
a
 & 3Ë<< 4Ë| (
b
 >> 4)]); \

299 i‡(
i
 + 1 < 
§c_Àn
) { \

300 
	`BASE64_OUT
(
b64
[(
b
 & 15Ë<< 2 | (
c
 >> 6)]); \

302 i‡(
i
 + 2 < 
§c_Àn
) { \

303 
	`BASE64_OUT
(
b64
[
c
 & 63]); \

307 
j
 % 4 != 0) { \

308 
	`BASE64_OUT
('='); \

310 
	`BASE64_FLUSH
()

	)

312 
	#BASE64_OUT
(
ch
) \

314 
d°
[
j
++] = (
ch
); \

315 } 0)

	)

317 
	#BASE64_FLUSH
() \

319 
d°
[
j
++] = '\0'; \

320 } 0)

	)

322 
	$cs_ba£64_ícode
(c⁄° *
§c
, 
§c_Àn
, *
d°
) {

323 
BASE64_ENCODE_BODY
;

324 
	}
}

326 #unde‡
BASE64_OUT


327 #unde‡
BASE64_FLUSH


329 #i‡
CS_ENABLE_STDIO


330 
	#BASE64_OUT
(
ch
) \

332 
	`Ârötf
(
f
, "%c", (
ch
)); \

333 
j
++; \

334 } 0)

	)

336 
	#BASE64_FLUSH
()

	)

338 
	$cs_Âröt_ba£64
(
FILE
 *
f
, c⁄° *
§c
, 
§c_Àn
) {

339 
BASE64_ENCODE_BODY
;

340 
	}
}

342 #unde‡
BASE64_OUT


343 #unde‡
BASE64_FLUSH


347 
	$‰om_b64
(
ch
) {

349 c⁄° 
èb
[128] = {

383  
èb
[
ch
 & 127];

384 
	}
}

386 
	$cs_ba£64_decode
(c⁄° *
s
, 
Àn
, *
d°
, *
dec_Àn
) {

387 
a
, 
b
, 
c
, 
d
;

388 
‹ig_Àn
 = 
Àn
;

389 *
‹ig_d°
 = 
d°
;

390 
Àn
 >4 && (
a
 = 
	`‰om_b64
(
s
[0])) != 255 &&

391 (
b
 = 
	`‰om_b64
(
s
[1])Ë!255 && (
c
 = from_b64(s[2])) != 255 &&

392 (
d
 = 
	`‰om_b64
(
s
[3])) != 255) {

393 
s
 += 4;

394 
Àn
 -= 4;

395 i‡(
a
 =200 || 
b
 == 200) ;

396 *
d°
++ = 
a
 << 2 | 
b
 >> 4;

397 i‡(
c
 == 200) ;

398 *
d°
++ = 
b
 << 4 | 
c
 >> 2;

399 i‡(
d
 == 200) ;

400 *
d°
++ = 
c
 << 6 | 
d
;

402 *
d°
 = 0;

403 i‡(
dec_Àn
 !
NULL
Ë*dec_À¿(
d°
 - 
‹ig_d°
);

404  
‹ig_Àn
 - 
Àn
;

405 
	}
}

408 #ifde‡
MG_MODULE_LINES


416 #i‚de‡
CS_COMMON_CS_DBG_H_


417 
	#CS_COMMON_CS_DBG_H_


	)

421 #i‡
CS_ENABLE_STDIO


422 
	~<°dio.h
>

425 #i‚de‡
CS_ENABLE_DEBUG


426 
	#CS_ENABLE_DEBUG
 0

	)

429 #i‚de‡
CS_LOG_ENABLE_TS_DIFF


430 
	#CS_LOG_ENABLE_TS_DIFF
 0

	)

433 #ifde‡
__˝lu•lus


440 
	ecs_log_Àvñ
 {

441 
LL_NONE
 = -1,

442 
LL_ERROR
 = 0,

443 
LL_WARN
 = 1,

444 
LL_INFO
 = 2,

445 
LL_DEBUG
 = 3,

446 
LL_VERBOSE_DEBUG
 = 4,

448 
_LL_MIN
 = -2,

449 
_LL_MAX
 = 5,

456 
cs_log_£t_Àvñ
(
cs_log_Àvñ
 
Àvñ
);

490 
cs_log_£t_fûãr
(c⁄° *
∑âîn
);

500 
cs_log_¥öt_¥efix
(
cs_log_Àvñ
 
Àvñ
, c⁄° *
func
,

501 c⁄° *
fûíame
);

503 
cs_log_Àvñ
 
cs_log_thªshﬁd
;

505 #i‡
CS_ENABLE_STDIO


510 
cs_log_£t_fûe
(
FILE
 *
fûe
);

516 
cs_log_¥ötf
(c⁄° *
fmt
, ...)

517 #ifde‡
__GNUC__


518 
__©åibuã__
((
f‹m©
(
¥ötf
, 1, 2)))

530 
	#LOG
(
l
, 
x
) \

532 i‡(
	`cs_log_¥öt_¥efix
(
l
, 
__func__
, 
__FILE__
)Ë
cs_log_¥ötf
 
x
; \

533 } 0)

	)

535 #i‚de‡
CS_NDEBUG


540 
	#DBG
(
x
Ë
	`LOG
(
LL_VERBOSE_DEBUG
, x)

	)

544 
	#DBG
(
x
)

	)

550 
	#LOG
(
l
, 
x
)

	)

551 
	#DBG
(
x
)

	)

555 #ifde‡
__˝lu•lus


560 #ifde‡
MG_MODULE_LINES


570 
	~<°d¨g.h
>

571 
	~<°dio.h
>

572 
	~<°rög.h
>

577 
cs_log_Àvñ
 
cs_log_thªshﬁd
 
	gWEAK
 =

578 #i‡
CS_ENABLE_DEBUG


579 
LL_VERBOSE_DEBUG
;

581 
	gLL_ERROR
;

584 *
	gs_fûãr_∑âîn
 = 
NULL
;

585 
size_t
 
	gs_fûãr_∑âîn_Àn
;

587 
cs_log_£t_fûãr
(c⁄° *
∑âîn
Ë
	gWEAK
;

589 #i‡
CS_ENABLE_STDIO


591 
FILE
 *
cs_log_fûe
 
	gWEAK
 = 
NULL
;

593 #i‡
CS_LOG_ENABLE_TS_DIFF


594 
cs_log_ts
 
	gWEAK
;

597 
cs_log_Àvñ
 
cs_log_cur_msg_Àvñ
 
	gWEAK
 = 
LL_NONE
;

599 
cs_log_£t_fûãr
(c⁄° *
∑âîn
) {

600 
‰ì
(
s_fûãr_∑âîn
);

601 i‡(
	g∑âîn
 !
NULL
) {

602 
s_fûãr_∑âîn
 = 
°rdup
(
∑âîn
);

603 
	gs_fûãr_∑âîn_Àn
 = 
°æí
(
∑âîn
);

605 
	gs_fûãr_∑âîn
 = 
NULL
;

606 
	gs_fûãr_∑âîn_Àn
 = 0;

610 
cs_log_¥öt_¥efix
(
cs_log_Àvñ
, c⁄° *, c⁄° *Ë
	gWEAK
;

611 
cs_log_¥öt_¥efix
(
cs_log_Àvñ
 
Àvñ
, c⁄° *
func
,

612 c⁄° *
fûíame
) {

613 
	g¥efix
[21];

615 i‡(
	gÀvñ
 > 
	gcs_log_thªshﬁd
)  0;

616 i‡(
	gs_fûãr_∑âîn
 !
NULL
 &&

617 
mg_m©ch_¥efix
(
s_fûãr_∑âîn
, 
s_fûãr_∑âîn_Àn
, 
func
) == 0 &&

618 
mg_m©ch_¥efix
(
s_fûãr_∑âîn
, 
s_fûãr_∑âîn_Àn
, 
fûíame
) == 0) {

622 
°∫˝y
(
¥efix
, 
func
, 20);

623 
	g¥efix
[20] = '\0';

624 i‡(
	gcs_log_fûe
 =
NULL
Ë
cs_log_fûe
 = 
°dîr
;

625 
	gcs_log_cur_msg_Àvñ
 = 
Àvñ
;

626 
Ârötf
(
cs_log_fûe
, "%-20†", 
¥efix
);

627 #i‡
CS_LOG_ENABLE_TS_DIFF


629 
	gnow
 = 
cs_time
();

630 
Ârötf
(
cs_log_fûe
, "%7u ", (Ë((
now
 - 
cs_log_ts
) * 1000000));

631 
	gcs_log_ts
 = 
now
;

637 
cs_log_¥ötf
(c⁄° *
fmt
, ...Ë
	gWEAK
;

638 
cs_log_¥ötf
(c⁄° *
fmt
, ...) {

639 
va_li°
 
	g≠
;

640 
va_°¨t
(
≠
, 
fmt
);

641 
vÂrötf
(
cs_log_fûe
, 
fmt
, 
≠
);

642 
va_íd
(
≠
);

643 
Âutc
('\n', 
cs_log_fûe
);

644 
fÊush
(
cs_log_fûe
);

645 
	gcs_log_cur_msg_Àvñ
 = 
LL_NONE
;

648 
cs_log_£t_fûe
(
FILE
 *
fûe
Ë
	gWEAK
;

649 
cs_log_£t_fûe
(
FILE
 *
fûe
) {

650 
	gcs_log_fûe
 = 
fûe
;

655 
cs_log_£t_fûãr
(c⁄° *
∑âîn
) {

656 (Ë
	g∑âîn
;

661 
cs_log_£t_Àvñ
(
cs_log_Àvñ
 
Àvñ
Ë
	gWEAK
;

662 
cs_log_£t_Àvñ
(
cs_log_Àvñ
 
Àvñ
) {

663 
	gcs_log_thªshﬁd
 = 
Àvñ
;

664 #i‡
CS_LOG_ENABLE_TS_DIFF
 && 
CS_ENABLE_STDIO


665 
	gcs_log_ts
 = 
cs_time
();

668 #ifde‡
MG_MODULE_LINES


676 #i‚de‡
CS_COMMON_CS_DIRENT_H_


677 
	#CS_COMMON_CS_DIRENT_H_


	)

679 
	~<limôs.h
>

683 #ifde‡
__˝lu•lus


687 #ifde‡
CS_DEFINE_DIRENT


688 °ru˘ { 
dummy
; } 
	tDIR
;

690 
	sdúít
 {

691 
	gd_öo
;

692 #ifde‡
_WIN32


693 
	gd_«me
[
MAX_PATH
];

696 
	gd_«me
[256];

700 
DIR
 *
›ídú
(c⁄° *
dú_«me
);

701 
˛o£dú
(
DIR
 *
dú
);

702 
dúít
 *
ªaddú
(
DIR
 *
dú
);

705 #ifde‡
__˝lu•lus


710 #ifde‡
MG_MODULE_LINES


718 #i‚de‡
EXCLUDE_COMMON


728 #ifde‡
_WIN32


729 
	swö32_dú
 {

730 
DIR
 
	gd
;

731 
HANDLE
 
	gh™dÀ
;

732 
WIN32_FIND_DATAW
 
	göfo
;

733 
dúít
 
	gªsu…
;

736 
DIR
 *
›ídú
(c⁄° *
«me
) {

737 
wö32_dú
 *
	gdú
 = 
NULL
;

738 
wch¨_t
 
	gw∑th
[
MAX_PATH
];

739 
DWORD
 
	g©ås
;

741 i‡(
	g«me
 =
NULL
) {

742 
SëLa°Eº‹
(
ERROR_BAD_ARGUMENTS
);

743 } i‡((
	gdú
 = (
wö32_dú
 *Ë
MG_MALLOC
((*
dú
))Ë=
NULL
) {

744 
SëLa°Eº‹
(
ERROR_NOT_ENOUGH_MEMORY
);

746 
to_wch¨
(
«me
, 
w∑th
, 
ARRAY_SIZE
(wpath));

747 
	g©ås
 = 
GëFûeAâribuãsW
(
w∑th
);

748 i‡(
	g©ås
 !0xFFFFFFFF && (
©ås
 & 
FILE_ATTRIBUTE_DIRECTORY
)) {

749 (Ë
wcsˇt
(
w∑th
, 
L
"\\*");

750 
	gdú
->
	gh™dÀ
 = 
FödFú°FûeW
(
w∑th
, &
dú
->
öfo
);

751 
	gdú
->
	gªsu…
.
	gd_«me
[0] = '\0';

753 
MG_FREE
(
dú
);

754 
	gdú
 = 
NULL
;

758  (
	gDIR
 *Ë
	gdú
;

761 
˛o£dú
(
DIR
 *
d
) {

762 
wö32_dú
 *
	gdú
 = (wö32_dú *Ë
d
;

763 
	gªsu…
 = 0;

765 i‡(
	gdú
 !
NULL
) {

766 i‡(
dú
->
h™dÀ
 !
INVALID_HANDLE_VALUE
)

767 
ªsu…
 = 
FödClo£
(
dú
->
h™dÀ
) ? 0 : -1;

768 
MG_FREE
(
dú
);

770 
	gªsu…
 = -1;

771 
SëLa°Eº‹
(
ERROR_BAD_ARGUMENTS
);

774  
	gªsu…
;

777 
dúít
 *
ªaddú
(
DIR
 *
d
) {

778 
wö32_dú
 *
	gdú
 = (wö32_dú *Ë
d
;

779 
dúít
 *
	gªsu…
 = 
NULL
;

781 i‡(
	gdú
) {

782 
mem£t
(&
dú
->
ªsu…
, 0, (dir->result));

783 i‡(
	gdú
->
	gh™dÀ
 !
INVALID_HANDLE_VALUE
) {

784 
ªsu…
 = &
dú
->result;

785 (Ë
WideCh¨ToMu…iByã
(
CP_UTF8
, 0, 
dú
->
öfo
.
cFûeName
, -1,

786 
ªsu…
->
d_«me
, ‘esu…->d_«me), 
NULL
,

787 
NULL
);

789 i‡(!
FödNextFûeW
(
dú
->
h™dÀ
, &dú->
öfo
)) {

790 (Ë
FödClo£
(
dú
->
h™dÀ
);

791 
	gdú
->
	gh™dÀ
 = 
INVALID_HANDLE_VALUE
;

795 
SëLa°Eº‹
(
ERROR_FILE_NOT_FOUND
);

798 
SëLa°Eº‹
(
ERROR_BAD_ARGUMENTS
);

801  
	gªsu…
;

808 
	tcs_dúít_dummy
;

809 #ifde‡
MG_MODULE_LINES


819 #i‚de‡
_WIN32


820 
	~<°ddef.h
>

824 #i‡!(
deföed
(
__ARMCC_VERSION
Ë|| deföed(
__ICCARM__
)) && \

825 !
deföed
(
__TI_COMPILER_VERSION__
) && \

826 (!
deföed
(
CS_PLATFORM
Ë|| 
	gCS_PLATFORM
 !
CS_P_NXP_LPC
)

827 
	~<sys/time.h
>

830 
	~<wödows.h
>

833 
cs_time
(Ë
WEAK
;

834 
cs_time
() {

835 
	gnow
;

836 #i‚de‡
_WIN32


837 
timevÆ
 
	gtv
;

838 i‡(
gëtimeofday
(&
tv
, 
NULL
 ) != 0)  0;

839 
	gnow
 = (Ë
tv
.
tv_£c
 + (((Ëtv.
tv_u£c
) / 1000000.0);

841 
SYSTEMTIME
 
	gsy¢ow
;

842 
FILETIME
 
	g·ime
;

843 
GëLoˇlTime
(&
sy¢ow
);

844 
Sy°emTimeToFûeTime
(&
sy¢ow
, &
·ime
);

853 
	gnow
 = (Ë(((
öt64_t
Ë
·ime
.
dwLowD©eTime
 +

854 ((
öt64_t
Ë
·ime
.
dwHighD©eTime
 << 32)) /

858  
	gnow
;

861 
cs_timegm
(c⁄° 
tm
 *tm) {

863 c⁄° 
	gm⁄th_day
[12] = {0, 31, 59, 90, 120, 151,

867 
	gm⁄th
 = 
tm
->
tm_m⁄
 % 12;

868 
	gyór
 = 
tm
->
tm_yór
 +Åm->
tm_m⁄
 / 12;

869 
	gyór_f‹_À≠
;

870 
öt64_t
 
	gπ
;

872 i‡(
	gm⁄th
 < 0) {

873 
	gm⁄th
 += 12;

874 --
	gyór
;

878 
	gyór_f‹_À≠
 = (
m⁄th
 > 1Ë? 
yór
 + 1 : year;

880 
	gπ
 =

881 
tm
->
tm_£c


884 (
tm
->
tm_mö


886 60 * (
tm
->
tm_hour


888 24 * (
m⁄th_day
[
m⁄th
] + 
tm
->
tm_mday
 - 1

889 + 365 * (
yór
 - 70)

890 + (
yór_f‹_À≠
 - 69) / 4

891 - (
yór_f‹_À≠
 - 1) / 100

892 + (
yór_f‹_À≠
 + 299) / 400)));

893  
	gπ
 < 0 ? -1 : (Ë
π
;

895 #ifde‡
MG_MODULE_LINES


903 #i‚de‡
CS_COMMON_CS_ENDIAN_H_


904 
	#CS_COMMON_CS_ENDIAN_H_


	)

906 #ifde‡
__˝lu•lus


915 #i‡!
deföed
(
BYTE_ORDER
Ë&& deföed(
__BYTE_ORDER
)

916 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

917 #i‚de‡
LITTLE_ENDIAN


918 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

920 #i‚de‡
BIG_ENDIAN


921 
	#BIG_ENDIAN
 
__LITTLE_ENDIAN


	)

925 #ifde‡
__˝lu•lus


930 #ifde‡
MG_MODULE_LINES


953 #i‡!
deföed
(
EXCLUDE_COMMON
)

954 #i‡!
CS_DISABLE_MD5


958 
byãRevî£
(*
buf
, 
l⁄gs
) {

960 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


962 
uöt32_t
 
t
 = (uöt32_t)((Ë
buf
[3] << 8 | buf[2]) << 16 |

963 ((Ë
buf
[1] << 8 | buf[0]);

964 *(
uöt32_t
 *Ë
buf
 = 
t
;

965 
buf
 += 4;

966 } --
l⁄gs
);

968 (Ë
buf
;

969 (Ë
l⁄gs
;

973 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

974 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

975 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

976 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

978 
	#MD5STEP
(
f
, 
w
, 
x
, 
y
, 
z
, 
d©a
, 
s
) \

979 (
w
 +
	`f
(
x
, 
y
, 
z
Ë+ 
d©a
, w = w << 
s
 | w >> (32 - s), w +x)

	)

985 
cs_md5_öô
(
cs_md5_˘x
 *
˘x
) {

986 
˘x
->
buf
[0] = 0x67452301;

987 
˘x
->
buf
[1] = 0xefcdab89;

988 
˘x
->
buf
[2] = 0x98badcfe;

989 
˘x
->
buf
[3] = 0x10325476;

991 
˘x
->
bôs
[0] = 0;

992 
˘x
->
bôs
[1] = 0;

995 
cs_md5_å™sf‹m
(
uöt32_t
 
buf
[4], uöt32_àc⁄° 
ö
[16]) {

996 
uöt32_t
 
a
, 
b
, 
c
, 
d
;

998 
a
 = 
buf
[0];

999 
b
 = 
buf
[1];

1000 
c
 = 
buf
[2];

1001 
d
 = 
buf
[3];

1003 
MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xd76aa478, 7);

1004 
MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[1] + 0xe8c7b756, 12);

1005 
MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x242070db, 17);

1006 
MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[3] + 0xc1bdceee, 22);

1007 
MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf57c0faf, 7);

1008 
MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[5] + 0x4787c62a, 12);

1009 
MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa8304613, 17);

1010 
MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[7] + 0xfd469501, 22);

1011 
MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x698098d8, 7);

1012 
MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[9] + 0x8b44f7af, 12);

1013 
MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffff5bb1, 17);

1014 
MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[11] + 0x895cd7be, 22);

1015 
MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x6b901122, 7);

1016 
MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[13] + 0xfd987193, 12);

1017 
MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xa679438e, 17);

1018 
MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[15] + 0x49b40821, 22);

1020 
MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xf61e2562, 5);

1021 
MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[6] + 0xc040b340, 9);

1022 
MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x265e5a51, 14);

1023 
MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[0] + 0xe9b6c7aa, 20);

1024 
MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xd62f105d, 5);

1025 
MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[10] + 0x02441453, 9);

1026 
MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0xd8a1e681, 14);

1027 
MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[4] + 0xe7d3fbc8, 20);

1028 
MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0x21e1cde6, 5);

1029 
MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[14] + 0xc33707d6, 9);

1030 
MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xf4d50d87, 14);

1031 
MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[8] + 0x455a14ed, 20);

1032 
MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0xa9e3e905, 5);

1033 
MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[2] + 0xfcefa3f8, 9);

1034 
MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0x676f02d9, 14);

1035 
MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[12] + 0x8d2a4c8a, 20);

1037 
MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xfffa3942, 4);

1038 
MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[8] + 0x8771f681, 11);

1039 
MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x6d9d6122, 16);

1040 
MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[14] + 0xfde5380c, 23);

1041 
MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xa4beea44, 4);

1042 
MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[4] + 0x4bdecfa9, 11);

1043 
MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0xf6bb4b60, 16);

1044 
MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[10] + 0xbebfbc70, 23);

1045 
MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0x289b7ec6, 4);

1046 
MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[0] + 0xeaa127fa, 11);

1047 
MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xd4ef3085, 16);

1048 
MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[6] + 0x04881d05, 23);

1049 
MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0xd9d4d039, 4);

1050 
MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[12] + 0xe6db99e5, 11);

1051 
MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0x1fa27cf8, 16);

1052 
MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[2] + 0xc4ac5665, 23);

1054 
MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xf4292244, 6);

1055 
MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[7] + 0x432aff97, 10);

1056 
MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xab9423a7, 15);

1057 
MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[5] + 0xfc93a039, 21);

1058 
MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x655b59c3, 6);

1059 
MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[3] + 0x8f0ccc92, 10);

1060 
MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffeff47d, 15);

1061 
MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[1] + 0x85845dd1, 21);

1062 
MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x6fa87e4f, 6);

1063 
MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[15] + 0xfe2ce6e0, 10);

1064 
MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa3014314, 15);

1065 
MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[13] + 0x4e0811a1, 21);

1066 
MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf7537e82, 6);

1067 
MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[11] + 0xbd3af235, 10);

1068 
MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x2ad7d2bb, 15);

1069 
MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[9] + 0xeb86d391, 21);

1071 
buf
[0] +
a
;

1072 
buf
[1] +
b
;

1073 
buf
[2] +
c
;

1074 
buf
[3] +
d
;

1077 
cs_md5_upd©e
(
cs_md5_˘x
 *
˘x
, c⁄° *
buf
, 
size_t
 
Àn
) {

1078 
uöt32_t
 
t
;

1080 
t
 = 
˘x
->
bôs
[0];

1081 i‡((
˘x
->
bôs
[0] = 
t
 + ((
uöt32_t
Ë
Àn
 << 3)) <Å) ctx->bits[1]++;

1082 
˘x
->
bôs
[1] +(
uöt32_t
Ë
Àn
 >> 29;

1084 
t
 = (t >> 3) & 0x3f;

1086 i‡(
t
) {

1087 *
p
 = (*Ë
˘x
->
ö
 + 
t
;

1089 
t
 = 64 -Å;

1090 i‡(
Àn
 < 
t
) {

1091 
mem˝y
(
p
, 
buf
, 
Àn
);

1094 
mem˝y
(
p
, 
buf
, 
t
);

1095 
byãRevî£
(
˘x
->
ö
, 16);

1096 
cs_md5_å™sf‹m
(
˘x
->
buf
, (
uöt32_t
 *Ë˘x->
ö
);

1097 
buf
 +
t
;

1098 
Àn
 -
t
;

1101 
Àn
 >= 64) {

1102 
mem˝y
(
˘x
->
ö
, 
buf
, 64);

1103 
byãRevî£
(
˘x
->
ö
, 16);

1104 
cs_md5_å™sf‹m
(
˘x
->
buf
, (
uöt32_t
 *Ë˘x->
ö
);

1105 
buf
 += 64;

1106 
Àn
 -= 64;

1109 
mem˝y
(
˘x
->
ö
, 
buf
, 
Àn
);

1112 
cs_md5_föÆ
(
dige°
[16], 
cs_md5_˘x
 *
˘x
) {

1113 
cou¡
;

1114 *
p
;

1115 
uöt32_t
 *
a
;

1117 
cou¡
 = (
˘x
->
bôs
[0] >> 3) & 0x3F;

1119 
p
 = 
˘x
->
ö
 + 
cou¡
;

1120 *
p
++ = 0x80;

1121 
cou¡
 = 64 - 1 - count;

1122 i‡(
cou¡
 < 8) {

1123 
mem£t
(
p
, 0, 
cou¡
);

1124 
byãRevî£
(
˘x
->
ö
, 16);

1125 
cs_md5_å™sf‹m
(
˘x
->
buf
, (
uöt32_t
 *Ë˘x->
ö
);

1126 
mem£t
(
˘x
->
ö
, 0, 56);

1128 
mem£t
(
p
, 0, 
cou¡
 - 8);

1130 
byãRevî£
(
˘x
->
ö
, 14);

1132 
a
 = (
uöt32_t
 *Ë
˘x
->
ö
;

1133 
a
[14] = 
˘x
->
bôs
[0];

1134 
a
[15] = 
˘x
->
bôs
[1];

1136 
cs_md5_å™sf‹m
(
˘x
->
buf
, (
uöt32_t
 *Ë˘x->
ö
);

1137 
byãRevî£
((*Ë
˘x
->
buf
, 4);

1138 
mem˝y
(
dige°
, 
˘x
->
buf
, 16);

1139 
mem£t
((*Ë
˘x
, 0, (*ctx));

1144 #ifde‡
MG_MODULE_LINES


1152 #i‡!
CS_DISABLE_SHA1
 && !
deföed
(
EXCLUDE_COMMON
)

1156 
	#SHA1HANDSOFF


	)

1157 #i‡
deföed
(
__sun
)

1161 
	uch¨64l⁄g16
 {

1162 
c
[64];

1163 
uöt32_t
 
l
[16];

1166 
	#rﬁ
(
vÆue
, 
bôs
Ë(((vÆueË<< (bôs)Ë| ((vÆueË>> (32 - (bôs))))

	)

1168 
uöt32_t
 
blk0
(
ch¨64l⁄g16
 *
block
, 
i
) {

1170 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


1171 
block
->
l
[
i
] =

1172 (
rﬁ
(
block
->
l
[
i
], 24) & 0xFF00FF00) | (rol(block->l[i], 8) & 0x00FF00FF);

1174  
block
->
l
[
i
];

1178 #unde‡
blk


1179 #unde‡
R0


1180 #unde‡
R1


1181 #unde‡
R2


1182 #unde‡
R3


1183 #unde‡
R4


1185 
	#blk
(
i
) \

1186 (
block
->
l
[
i
 & 15] = 
	`rﬁ
(block->l[(i + 13) & 15] ^ block->l[(i + 8) & 15] ^ \

1187 
block
->
l
[(
i
 + 2) & 15] ^ block->l[i & 15], \

1188 1))

	)

1189 
	#R0
(
v
, 
w
, 
x
, 
y
, 
z
, 
i
) \

1190 
z
 +((
w
 & (
x
 ^ 
y
)Ë^ yË+ 
	`blk0
(
block
, 
i
Ë+ 0x5A827999 + 
	`rﬁ
(
v
, 5); \

1191 
w
 = 
	`rﬁ
(w, 30);

	)

1192 
	#R1
(
v
, 
w
, 
x
, 
y
, 
z
, 
i
) \

1193 
z
 +((
w
 & (
x
 ^ 
y
)Ë^ yË+ 
	`blk
(
i
Ë+ 0x5A827999 + 
	`rﬁ
(
v
, 5); \

1194 
w
 = 
	`rﬁ
(w, 30);

	)

1195 
	#R2
(
v
, 
w
, 
x
, 
y
, 
z
, 
i
) \

1196 
z
 +(
w
 ^ 
x
 ^ 
y
Ë+ 
	`blk
(
i
Ë+ 0x6ED9EBA1 + 
	`rﬁ
(
v
, 5); \

1197 
w
 = 
	`rﬁ
(w, 30);

	)

1198 
	#R3
(
v
, 
w
, 
x
, 
y
, 
z
, 
i
) \

1199 
z
 +(((
w
 | 
x
Ë& 
y
Ë| (w & x)Ë+ 
	`blk
(
i
Ë+ 0x8F1BBCDC + 
	`rﬁ
(
v
, 5); \

1200 
w
 = 
	`rﬁ
(w, 30);

	)

1201 
	#R4
(
v
, 
w
, 
x
, 
y
, 
z
, 
i
) \

1202 
z
 +(
w
 ^ 
x
 ^ 
y
Ë+ 
	`blk
(
i
Ë+ 0xCA62C1D6 + 
	`rﬁ
(
v
, 5); \

1203 
w
 = 
	`rﬁ
(w, 30);

	)

1205 
cs_sha1_å™sf‹m
(
uöt32_t
 
°©e
[5], c⁄° 
buf„r
[64]) {

1206 
uöt32_t
 
a
, 
b
, 
c
, 
d
, 
e
;

1207 
ch¨64l⁄g16
 
block
[1];

1209 
mem˝y
(
block
, 
buf„r
, 64);

1210 
a
 = 
°©e
[0];

1211 
b
 = 
°©e
[1];

1212 
c
 = 
°©e
[2];

1213 
d
 = 
°©e
[3];

1214 
e
 = 
°©e
[4];

1215 
R0
(
a
, 
b
, 
c
, 
d
, 
e
, 0);

1216 
R0
(
e
, 
a
, 
b
, 
c
, 
d
, 1);

1217 
R0
(
d
, 
e
, 
a
, 
b
, 
c
, 2);

1218 
R0
(
c
, 
d
, 
e
, 
a
, 
b
, 3);

1219 
R0
(
b
, 
c
, 
d
, 
e
, 
a
, 4);

1220 
R0
(
a
, 
b
, 
c
, 
d
, 
e
, 5);

1221 
R0
(
e
, 
a
, 
b
, 
c
, 
d
, 6);

1222 
R0
(
d
, 
e
, 
a
, 
b
, 
c
, 7);

1223 
R0
(
c
, 
d
, 
e
, 
a
, 
b
, 8);

1224 
R0
(
b
, 
c
, 
d
, 
e
, 
a
, 9);

1225 
R0
(
a
, 
b
, 
c
, 
d
, 
e
, 10);

1226 
R0
(
e
, 
a
, 
b
, 
c
, 
d
, 11);

1227 
R0
(
d
, 
e
, 
a
, 
b
, 
c
, 12);

1228 
R0
(
c
, 
d
, 
e
, 
a
, 
b
, 13);

1229 
R0
(
b
, 
c
, 
d
, 
e
, 
a
, 14);

1230 
R0
(
a
, 
b
, 
c
, 
d
, 
e
, 15);

1231 
R1
(
e
, 
a
, 
b
, 
c
, 
d
, 16);

1232 
R1
(
d
, 
e
, 
a
, 
b
, 
c
, 17);

1233 
R1
(
c
, 
d
, 
e
, 
a
, 
b
, 18);

1234 
R1
(
b
, 
c
, 
d
, 
e
, 
a
, 19);

1235 
R2
(
a
, 
b
, 
c
, 
d
, 
e
, 20);

1236 
R2
(
e
, 
a
, 
b
, 
c
, 
d
, 21);

1237 
R2
(
d
, 
e
, 
a
, 
b
, 
c
, 22);

1238 
R2
(
c
, 
d
, 
e
, 
a
, 
b
, 23);

1239 
R2
(
b
, 
c
, 
d
, 
e
, 
a
, 24);

1240 
R2
(
a
, 
b
, 
c
, 
d
, 
e
, 25);

1241 
R2
(
e
, 
a
, 
b
, 
c
, 
d
, 26);

1242 
R2
(
d
, 
e
, 
a
, 
b
, 
c
, 27);

1243 
R2
(
c
, 
d
, 
e
, 
a
, 
b
, 28);

1244 
R2
(
b
, 
c
, 
d
, 
e
, 
a
, 29);

1245 
R2
(
a
, 
b
, 
c
, 
d
, 
e
, 30);

1246 
R2
(
e
, 
a
, 
b
, 
c
, 
d
, 31);

1247 
R2
(
d
, 
e
, 
a
, 
b
, 
c
, 32);

1248 
R2
(
c
, 
d
, 
e
, 
a
, 
b
, 33);

1249 
R2
(
b
, 
c
, 
d
, 
e
, 
a
, 34);

1250 
R2
(
a
, 
b
, 
c
, 
d
, 
e
, 35);

1251 
R2
(
e
, 
a
, 
b
, 
c
, 
d
, 36);

1252 
R2
(
d
, 
e
, 
a
, 
b
, 
c
, 37);

1253 
R2
(
c
, 
d
, 
e
, 
a
, 
b
, 38);

1254 
R2
(
b
, 
c
, 
d
, 
e
, 
a
, 39);

1255 
R3
(
a
, 
b
, 
c
, 
d
, 
e
, 40);

1256 
R3
(
e
, 
a
, 
b
, 
c
, 
d
, 41);

1257 
R3
(
d
, 
e
, 
a
, 
b
, 
c
, 42);

1258 
R3
(
c
, 
d
, 
e
, 
a
, 
b
, 43);

1259 
R3
(
b
, 
c
, 
d
, 
e
, 
a
, 44);

1260 
R3
(
a
, 
b
, 
c
, 
d
, 
e
, 45);

1261 
R3
(
e
, 
a
, 
b
, 
c
, 
d
, 46);

1262 
R3
(
d
, 
e
, 
a
, 
b
, 
c
, 47);

1263 
R3
(
c
, 
d
, 
e
, 
a
, 
b
, 48);

1264 
R3
(
b
, 
c
, 
d
, 
e
, 
a
, 49);

1265 
R3
(
a
, 
b
, 
c
, 
d
, 
e
, 50);

1266 
R3
(
e
, 
a
, 
b
, 
c
, 
d
, 51);

1267 
R3
(
d
, 
e
, 
a
, 
b
, 
c
, 52);

1268 
R3
(
c
, 
d
, 
e
, 
a
, 
b
, 53);

1269 
R3
(
b
, 
c
, 
d
, 
e
, 
a
, 54);

1270 
R3
(
a
, 
b
, 
c
, 
d
, 
e
, 55);

1271 
R3
(
e
, 
a
, 
b
, 
c
, 
d
, 56);

1272 
R3
(
d
, 
e
, 
a
, 
b
, 
c
, 57);

1273 
R3
(
c
, 
d
, 
e
, 
a
, 
b
, 58);

1274 
R3
(
b
, 
c
, 
d
, 
e
, 
a
, 59);

1275 
R4
(
a
, 
b
, 
c
, 
d
, 
e
, 60);

1276 
R4
(
e
, 
a
, 
b
, 
c
, 
d
, 61);

1277 
R4
(
d
, 
e
, 
a
, 
b
, 
c
, 62);

1278 
R4
(
c
, 
d
, 
e
, 
a
, 
b
, 63);

1279 
R4
(
b
, 
c
, 
d
, 
e
, 
a
, 64);

1280 
R4
(
a
, 
b
, 
c
, 
d
, 
e
, 65);

1281 
R4
(
e
, 
a
, 
b
, 
c
, 
d
, 66);

1282 
R4
(
d
, 
e
, 
a
, 
b
, 
c
, 67);

1283 
R4
(
c
, 
d
, 
e
, 
a
, 
b
, 68);

1284 
R4
(
b
, 
c
, 
d
, 
e
, 
a
, 69);

1285 
R4
(
a
, 
b
, 
c
, 
d
, 
e
, 70);

1286 
R4
(
e
, 
a
, 
b
, 
c
, 
d
, 71);

1287 
R4
(
d
, 
e
, 
a
, 
b
, 
c
, 72);

1288 
R4
(
c
, 
d
, 
e
, 
a
, 
b
, 73);

1289 
R4
(
b
, 
c
, 
d
, 
e
, 
a
, 74);

1290 
R4
(
a
, 
b
, 
c
, 
d
, 
e
, 75);

1291 
R4
(
e
, 
a
, 
b
, 
c
, 
d
, 76);

1292 
R4
(
d
, 
e
, 
a
, 
b
, 
c
, 77);

1293 
R4
(
c
, 
d
, 
e
, 
a
, 
b
, 78);

1294 
R4
(
b
, 
c
, 
d
, 
e
, 
a
, 79);

1295 
°©e
[0] +
a
;

1296 
°©e
[1] +
b
;

1297 
°©e
[2] +
c
;

1298 
°©e
[3] +
d
;

1299 
°©e
[4] +
e
;

1302 
mem£t
(
block
, 0, (block));

1303 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 0;

1304 (Ë
a
;

1305 (Ë
b
;

1306 (Ë
c
;

1307 (Ë
d
;

1308 (Ë
e
;

1311 
cs_sha1_öô
(
cs_sha1_˘x
 *
c⁄ãxt
) {

1312 
c⁄ãxt
->
°©e
[0] = 0x67452301;

1313 
c⁄ãxt
->
°©e
[1] = 0xEFCDAB89;

1314 
c⁄ãxt
->
°©e
[2] = 0x98BADCFE;

1315 
c⁄ãxt
->
°©e
[3] = 0x10325476;

1316 
c⁄ãxt
->
°©e
[4] = 0xC3D2E1F0;

1317 
c⁄ãxt
->
cou¡
[0] = context->count[1] = 0;

1320 
cs_sha1_upd©e
(
cs_sha1_˘x
 *
c⁄ãxt
, c⁄° *
d©a
,

1321 
uöt32_t
 
Àn
) {

1322 
uöt32_t
 
i
, 
j
;

1324 
j
 = 
c⁄ãxt
->
cou¡
[0];

1325 i‡((
c⁄ãxt
->
cou¡
[0] +
Àn
 << 3Ë< 
j
) context->count[1]++;

1326 
c⁄ãxt
->
cou¡
[1] +(
Àn
 >> 29);

1327 
j
 = (j >> 3) & 63;

1328 i‡((
j
 + 
Àn
) > 63) {

1329 
mem˝y
(&
c⁄ãxt
->
buf„r
[
j
], 
d©a
, (
i
 = 64 - j));

1330 
cs_sha1_å™sf‹m
(
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

1331 ; 
i
 + 63 < 
Àn
; i += 64) {

1332 
cs_sha1_å™sf‹m
(
c⁄ãxt
->
°©e
, &
d©a
[
i
]);

1334 
j
 = 0;

1336 
i
 = 0;

1337 
mem˝y
(&
c⁄ãxt
->
buf„r
[
j
], &
d©a
[
i
], 
Àn
 - i);

1340 
cs_sha1_föÆ
(
dige°
[20], 
cs_sha1_˘x
 *
c⁄ãxt
) {

1341 
i
;

1342 
föÆcou¡
[8], 
c
;

1344 
i
 = 0; i < 8; i++) {

1345 
föÆcou¡
[
i
] = (Ë((
c⁄ãxt
->
cou¡
[(i >= 4 ? 0 : 1)] >>

1346 ((3 - (
i
 & 3)) * 8)) &

1349 
c
 = 0200;

1350 
cs_sha1_upd©e
(
c⁄ãxt
, &
c
, 1);

1351 (
c⁄ãxt
->
cou¡
[0] & 504) != 448) {

1352 
c
 = 0000;

1353 
cs_sha1_upd©e
(
c⁄ãxt
, &
c
, 1);

1355 
cs_sha1_upd©e
(
c⁄ãxt
, 
föÆcou¡
, 8);

1356 
i
 = 0; i < 20; i++) {

1357 
dige°
[
i
] =

1358 (Ë((
c⁄ãxt
->
°©e
[
i
 >> 2] >> ((3 - (i & 3)) * 8)) & 255);

1360 
mem£t
(
c⁄ãxt
, '\0', (*context));

1361 
mem£t
(&
föÆcou¡
, '\0', (finalcount));

1364 
cs_hmac_sha1
(c⁄° *
key
, 
size_t
 
keyÀn
,

1365 c⁄° *
d©a
, 
size_t
 
d©Æí
,

1366 
out
[20]) {

1367 
cs_sha1_˘x
 
˘x
;

1368 
buf1
[64], 
buf2
[64], 
tmp_key
[20], 
i
;

1370 i‡(
keyÀn
 > (
buf1
)) {

1371 
cs_sha1_öô
(&
˘x
);

1372 
cs_sha1_upd©e
(&
˘x
, 
key
, 
keyÀn
);

1373 
cs_sha1_föÆ
(
tmp_key
, &
˘x
);

1374 
key
 = 
tmp_key
;

1375 
keyÀn
 = (
tmp_key
);

1378 
mem£t
(
buf1
, 0, (buf1));

1379 
mem£t
(
buf2
, 0, (buf2));

1380 
mem˝y
(
buf1
, 
key
, 
keyÀn
);

1381 
mem˝y
(
buf2
, 
key
, 
keyÀn
);

1383 
i
 = 0; i < (
buf1
); i++) {

1384 
buf1
[
i
] ^= 0x36;

1385 
buf2
[
i
] ^= 0x5c;

1388 
cs_sha1_öô
(&
˘x
);

1389 
cs_sha1_upd©e
(&
˘x
, 
buf1
, (buf1));

1390 
cs_sha1_upd©e
(&
˘x
, 
d©a
, 
d©Æí
);

1391 
cs_sha1_föÆ
(
out
, &
˘x
);

1393 
cs_sha1_öô
(&
˘x
);

1394 
cs_sha1_upd©e
(&
˘x
, 
buf2
, (buf2));

1395 
cs_sha1_upd©e
(&
˘x
, 
out
, 20);

1396 
cs_sha1_föÆ
(
out
, &
˘x
);

1400 #ifde‡
MG_MODULE_LINES


1408 #i‚de‡
EXCLUDE_COMMON


1410 
	~<as£π.h
>

1411 
	~<°rög.h
>

1414 #i‚de‡
MBUF_REALLOC


1415 
	#MBUF_REALLOC
 
ªÆloc


	)

1418 #i‚de‡
MBUF_FREE


1419 
	#MBUF_FREE
 
‰ì


	)

1422 
mbuf_öô
(
mbuf
 *mbuf, 
size_t
 
öôül_size
Ë
WEAK
;

1423 
mbuf_öô
(
mbuf
 *mbuf, 
size_t
 
öôül_size
) {

1424 
mbuf
->
Àn
 = mbuf->
size
 = 0;

1425 
mbuf
->
buf
 = 
NULL
;

1426 
mbuf_ªsize
(
mbuf
, 
öôül_size
);

1429 
mbuf_‰ì
(
mbuf
 *mbufË
WEAK
;

1430 
mbuf_‰ì
(
mbuf
 *mbuf) {

1431 i‡(
mbuf
->
buf
 !
NULL
) {

1432 
MBUF_FREE
(
mbuf
->
buf
);

1433 
mbuf_öô
(
mbuf
, 0);

1437 
mbuf_ªsize
(
mbuf
 *
a
, 
size_t
 
√w_size
Ë
WEAK
;

1438 
mbuf_ªsize
(
mbuf
 *
a
, 
size_t
 
√w_size
) {

1439 i‡(
√w_size
 > 
a
->
size
 || (√w_sizê<á->sizê&&Çew_sizê>a->
Àn
)) {

1440 *
buf
 = (*Ë
MBUF_REALLOC
(
a
->buf, 
√w_size
);

1446 i‡(
buf
 =
NULL
 && 
√w_size
 != 0) ;

1447 
a
->
buf
 = buf;

1448 
a
->
size
 = 
√w_size
;

1452 
mbuf_åim
(
mbuf
 *mbufË
WEAK
;

1453 
mbuf_åim
(
mbuf
 *mbuf) {

1454 
mbuf_ªsize
(
mbuf
, mbuf->
Àn
);

1457 
size_t
 
mbuf_ö£π
(
mbuf
 *
a
, size_à
off
, c⁄° *
buf
, size_tË
WEAK
;

1458 
size_t
 
mbuf_ö£π
(
mbuf
 *
a
, size_à
off
, c⁄° *
buf
, size_à
Àn
) {

1459 *
p
 = 
NULL
;

1461 
as£π
(
a
 !
NULL
);

1462 
as£π
(
a
->
Àn
 <a->
size
);

1463 
as£π
(
off
 <
a
->
Àn
);

1466 i‡(~(
size_t
Ë0 - (size_tË
a
->
buf
 < 
Àn
)  0;

1468 i‡(
a
->
Àn
 +Üí <a->
size
) {

1469 
memmove
(
a
->
buf
 + 
off
 + 
Àn
,á->buf + off,á->len - off);

1470 i‡(
buf
 !
NULL
) {

1471 
mem˝y
(
a
->
buf
 + 
off
, buf, 
Àn
);

1473 
a
->
Àn
 +=Üen;

1475 
size_t
 
√w_size
 = (size_t)((
a
->
Àn
 +ÜíË* 
MBUF_SIZE_MULTIPLIER
);

1476 i‡((
p
 = (*Ë
MBUF_REALLOC
(
a
->
buf
, 
√w_size
)Ë!
NULL
) {

1477 
a
->
buf
 = 
p
;

1478 
memmove
(
a
->
buf
 + 
off
 + 
Àn
,á->buf + off,á->len - off);

1479 i‡(
buf
 !
NULL
Ë
mem˝y
(
a
->bu‡+ 
off
, buf, 
Àn
);

1480 
a
->
Àn
 +=Üen;

1481 
a
->
size
 = 
√w_size
;

1483 
Àn
 = 0;

1487  
Àn
;

1490 
size_t
 
mbuf_≠≥nd
(
mbuf
 *
a
, c⁄° *
buf
, size_à
Àn
Ë
WEAK
;

1491 
size_t
 
mbuf_≠≥nd
(
mbuf
 *
a
, c⁄° *
buf
, size_à
Àn
) {

1492  
mbuf_ö£π
(
a
,á->
Àn
, 
buf
,Üen);

1495 
mbuf_ªmove
(
mbuf
 *
mb
, 
size_t
 
n
Ë
WEAK
;

1496 
mbuf_ªmove
(
mbuf
 *
mb
, 
size_t
 
n
) {

1497 i‡(
n
 > 0 &&Ç <
mb
->
Àn
) {

1498 
memmove
(
mb
->
buf
, mb->bu‡+ 
n
, mb->
Àn
 -Ç);

1499 
mb
->
Àn
 -
n
;

1504 #ifde‡
MG_MODULE_LINES


1515 
	~<°dlib.h
>

1516 
	~<°rög.h
>

1518 
mg_nˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
Ë
WEAK
;

1520 
mg_°r
 
mg_mk_°r
(c⁄° *
s
Ë
WEAK
;

1521 
mg_°r
 
mg_mk_°r
(c⁄° *
s
) {

1522 
mg_°r
 
ªt
 = {
s
, 0};

1523 i‡(
s
 !
NULL
Ë
ªt
.
Àn
 = 
°æí
(s);

1524  
ªt
;

1527 
mg_°r
 
mg_mk_°r_n
(c⁄° *
s
, 
size_t
 
Àn
Ë
WEAK
;

1528 
mg_°r
 
mg_mk_°r_n
(c⁄° *
s
, 
size_t
 
Àn
) {

1529 
mg_°r
 
ªt
 = {
s
, 
Àn
};

1530  
ªt
;

1533 
mg_vcmp
(c⁄° 
mg_°r
 *
°r1
, c⁄° *
°r2
Ë
WEAK
;

1534 
mg_vcmp
(c⁄° 
mg_°r
 *
°r1
, c⁄° *
°r2
) {

1535 
size_t
 
n2
 = 
°æí
(
°r2
), 
n1
 = 
°r1
->
Àn
;

1536 
r
 = 
°∫cmp
(
°r1
->
p
, 
°r2
, (
n1
 < 
n2
) ?Ç1 :Ç2);

1537 i‡(
r
 == 0) {

1538  
n1
 - 
n2
;

1540  
r
;

1543 
mg_vˇ£cmp
(c⁄° 
mg_°r
 *
°r1
, c⁄° *
°r2
Ë
WEAK
;

1544 
mg_vˇ£cmp
(c⁄° 
mg_°r
 *
°r1
, c⁄° *
°r2
) {

1545 
size_t
 
n2
 = 
°æí
(
°r2
), 
n1
 = 
°r1
->
Àn
;

1546 
r
 = 
mg_nˇ£cmp
(
°r1
->
p
, 
°r2
, (
n1
 < 
n2
) ?Ç1 :Ç2);

1547 i‡(
r
 == 0) {

1548  
n1
 - 
n2
;

1550  
r
;

1553 
mg_°r
 
mg_°rdup_comm⁄
(c⁄° mg_°∏
s
,

1554 
nul_ãrmö©e
) {

1555 
mg_°r
 
r
 = {
NULL
, 0};

1556 i‡(
s
.
Àn
 > 0 && s.
p
 !
NULL
) {

1557 *
sc
 = (*Ë
MG_MALLOC
(
s
.
Àn
 + (
nul_ãrmö©e
 ? 1 : 0));

1558 i‡(
sc
 !
NULL
) {

1559 
mem˝y
(
sc
, 
s
.
p
, s.
Àn
);

1560 i‡(
nul_ãrmö©e
Ë
sc
[
s
.
Àn
] = '\0';

1561 
r
.
p
 = 
sc
;

1562 
r
.
Àn
 = 
s
.len;

1565  
r
;

1568 
mg_°r
 
mg_°rdup
(c⁄° mg_°∏
s
Ë
WEAK
;

1569 
mg_°r
 
mg_°rdup
(c⁄° mg_°∏
s
) {

1570  
mg_°rdup_comm⁄
(
s
, 0 );

1573 
mg_°r
 
mg_°rdup_nul
(c⁄° mg_°∏
s
Ë
WEAK
;

1574 
mg_°r
 
mg_°rdup_nul
(c⁄° mg_°∏
s
) {

1575  
mg_°rdup_comm⁄
(
s
, 1 );

1578 c⁄° *
mg_°rchr
(c⁄° 
mg_°r
 
s
, 
c
Ë
WEAK
;

1579 c⁄° *
mg_°rchr
(c⁄° 
mg_°r
 
s
, 
c
) {

1580 
size_t
 
i
;

1581 
i
 = 0; i < 
s
.
Àn
; i++) {

1582 i‡(
s
.
p
[
i
] =
c
)  &s.p[i];

1584  
NULL
;

1587 
mg_°rcmp
(c⁄° 
mg_°r
 
°r1
, c⁄° mg_°∏
°r2
Ë
WEAK
;

1588 
mg_°rcmp
(c⁄° 
mg_°r
 
°r1
, c⁄° mg_°∏
°r2
) {

1589 
size_t
 
i
 = 0;

1590 
i
 < 
°r1
.
Àn
 && i < 
°r2
.len) {

1591 i‡(
°r1
.
p
[
i
] < 
°r2
.p[i])  -1;

1592 i‡(
°r1
.
p
[
i
] > 
°r2
.p[i])  1;

1593 
i
++;

1595 i‡(
i
 < 
°r1
.
Àn
)  1;

1596 i‡(
i
 < 
°r2
.
Àn
)  -1;

1600 
mg_°∫cmp
(c⁄° 
mg_°r
, c⁄° mg_°r, 
size_t
 
n
Ë
WEAK
;

1601 
mg_°∫cmp
(c⁄° 
mg_°r
 
°r1
, c⁄° mg_°∏
°r2
, 
size_t
 
n
) {

1602 
mg_°r
 
s1
 = 
°r1
;

1603 
mg_°r
 
s2
 = 
°r2
;

1605 i‡(
s1
.
Àn
 > 
n
) {

1606 
s1
.
Àn
 = 
n
;

1608 i‡(
s2
.
Àn
 > 
n
) {

1609 
s2
.
Àn
 = 
n
;

1611  
mg_°rcmp
(
s1
, 
s2
);

1614 c⁄° *
mg_°r°r
(c⁄° 
mg_°r
 
hay°ack
,

1615 c⁄° 
mg_°r
 
√edÀ
Ë
WEAK
;

1616 c⁄° *
mg_°r°r
(c⁄° 
mg_°r
 
hay°ack
,

1617 c⁄° 
mg_°r
 
√edÀ
) {

1618 
size_t
 
i
;

1619 i‡(
√edÀ
.
Àn
 > 
hay°ack
.ÀnË 
NULL
;

1620 
i
 = 0; i <
hay°ack
.
Àn
 - 
√edÀ
.len; i++) {

1621 i‡(
memcmp
(
hay°ack
.
p
 + 
i
, 
√edÀ
.p,ÇìdÀ.
Àn
) == 0) {

1622  
hay°ack
.
p
 + 
i
;

1625  
NULL
;

1627 #ifde‡
MG_MODULE_LINES


1635 #i‚de‡
EXCLUDE_COMMON


1641 #i‚de‡
C_DISABLE_BUILTIN_SNPRINTF


1642 
	#C_DISABLE_BUILTIN_SNPRINTF
 0

	)

1647 
size_t
 
c_°∫Àn
(c⁄° *
s
, size_à
maxÀn
Ë
WEAK
;

1648 
size_t
 
c_°∫Àn
(c⁄° *
s
, size_à
maxÀn
) {

1649 
size_t
 
l
 = 0;

1650 ; 
l
 < 
maxÀn
 && 
s
[l] != '\0';Ü++) {

1652  
l
;

1655 
	#C_SNPRINTF_APPEND_CHAR
(
ch
) \

1657 i‡(
i
 < (Ë
buf_size
Ë
buf
[i] = 
ch
; \

1658 
i
++; \

1659 } 0)

	)

1661 
	#C_SNPRINTF_FLAG_ZERO
 1

	)

1663 #i‡
C_DISABLE_BUILTIN_SNPRINTF


1664 
c_v¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
fmt
, 
va_li°
 
≠
Ë
WEAK
;

1665 
c_v¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
fmt
, 
va_li°
 
≠
) {

1666  
v¢¥ötf
(
buf
, 
buf_size
, 
fmt
, 
≠
);

1669 
c_ôﬂ
(*
buf
, 
size_t
 
buf_size
, 
öt64_t
 
num
, 
ba£
, 
Êags
,

1670 
fõld_width
) {

1671 
tmp
[40];

1672 
i
 = 0, 
k
 = 0, 
√g
 = 0;

1674 i‡(
num
 < 0) {

1675 
√g
++;

1676 
num
 = -num;

1681 
ªm
 = 
num
 % 
ba£
;

1682 i‡(
ªm
 < 10) {

1683 
tmp
[
k
++] = '0' + 
ªm
;

1685 
tmp
[
k
++] = 'a' + (
ªm
 - 10);

1687 
num
 /
ba£
;

1688 } 
num
 > 0);

1691 i‡(
Êags
 && 
C_SNPRINTF_FLAG_ZERO
) {

1692 
k
 < 
fõld_width
 && k < (Ë(
tmp
) - 1) {

1693 
tmp
[
k
++] = '0';

1698 i‡(
√g
) {

1699 
tmp
[
k
++] = '-';

1703 --
k
 >= 0) {

1704 
C_SNPRINTF_APPEND_CHAR
(
tmp
[
k
]);

1707  
i
;

1710 
c_v¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
fmt
, 
va_li°
 
≠
Ë
WEAK
;

1711 
c_v¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
fmt
, 
va_li°
 
≠
) {

1712 
ch
, 
i
 = 0, 
Àn_mod
, 
Êags
, 
¥ecisi⁄
, 
fõld_width
;

1714 (
ch
 = *
fmt
++) != '\0') {

1715 i‡(
ch
 != '%') {

1716 
C_SNPRINTF_APPEND_CHAR
(
ch
);

1726 
Êags
 = 
fõld_width
 = 
¥ecisi⁄
 = 
Àn_mod
 = 0;

1729 i‡(*
fmt
 == '0') {

1730 
Êags
 |
C_SNPRINTF_FLAG_ZERO
;

1734 *
fmt
 >= '0' && *fmt <= '9') {

1735 
fõld_width
 *= 10;

1736 
fõld_width
 +*
fmt
++ - '0';

1739 i‡(*
fmt
 == '*') {

1740 
fõld_width
 = 
va_¨g
(
≠
, );

1741 
fmt
++;

1745 i‡(*
fmt
 == '.') {

1746 
fmt
++;

1747 i‡(*
fmt
 == '*') {

1748 
¥ecisi⁄
 = 
va_¨g
(
≠
, );

1749 
fmt
++;

1751 *
fmt
 >= '0' && *fmt <= '9') {

1752 
¥ecisi⁄
 *= 10;

1753 
¥ecisi⁄
 +*
fmt
++ - '0';

1759 *
fmt
) {

1768 
Àn_mod
 = *
fmt
++;

1769 i‡(*
fmt
 == 'h') {

1770 
Àn_mod
 = 'H';

1771 
fmt
++;

1773 i‡(*
fmt
 == 'l') {

1774 
Àn_mod
 = 'q';

1775 
fmt
++;

1780 
ch
 = *
fmt
++;

1781 i‡(
ch
 == 's') {

1782 c⁄° *
s
 = 
va_¨g
(
≠
, const *);

1783 
j
;

1784 
∑d
 = 
fõld_width
 - (
¥ecisi⁄
 >0 ? 
c_°∫Àn
(
s
,Örecision) : 0);

1785 
j
 = 0; j < 
∑d
; j++) {

1786 
C_SNPRINTF_APPEND_CHAR
(' ');

1790 i‡(
s
 !
NULL
) {

1792 
j
 = 0; (
¥ecisi⁄
 <0 || j <Öªcisi⁄Ë&& 
s
[j] != '\0'; j++) {

1793 
C_SNPRINTF_APPEND_CHAR
(
s
[
j
]);

1796 } i‡(
ch
 == 'c') {

1797 
ch
 = 
va_¨g
(
≠
, );

1798 
C_SNPRINTF_APPEND_CHAR
(
ch
);

1799 } i‡(
ch
 ='d' && 
Àn_mod
 == 0) {

1800 
i
 +
c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
va_¨g
(
≠
, ), 10, 
Êags
,

1801 
fõld_width
);

1802 } i‡(
ch
 ='d' && 
Àn_mod
 == 'l') {

1803 
i
 +
c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
va_¨g
(
≠
, ), 10, 
Êags
,

1804 
fõld_width
);

1805 #ifde‡
SSIZE_MAX


1806 } i‡(
ch
 ='d' && 
Àn_mod
 == 'z') {

1807 
i
 +
c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
va_¨g
(
≠
, 
ssize_t
), 10, 
Êags
,

1808 
fõld_width
);

1810 } i‡(
ch
 ='d' && 
Àn_mod
 == 'q') {

1811 
i
 +
c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
va_¨g
(
≠
, 
öt64_t
), 10, 
Êags
,

1812 
fõld_width
);

1813 } i‡((
ch
 ='x' || ch ='u'Ë&& 
Àn_mod
 == 0) {

1814 
i
 +
c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
va_¨g
(
≠
, ),

1815 
ch
 ='x' ? 16 : 10, 
Êags
, 
fõld_width
);

1816 } i‡((
ch
 ='x' || ch ='u'Ë&& 
Àn_mod
 == 'l') {

1817 
i
 +
c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
va_¨g
(
≠
, ),

1818 
ch
 ='x' ? 16 : 10, 
Êags
, 
fõld_width
);

1819 } i‡((
ch
 ='x' || ch ='u'Ë&& 
Àn_mod
 == 'z') {

1820 
i
 +
c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
va_¨g
(
≠
, 
size_t
),

1821 
ch
 ='x' ? 16 : 10, 
Êags
, 
fõld_width
);

1822 } i‡(
ch
 == 'p') {

1823 
num
 = (Ë(
uöçå_t
Ë
va_¨g
(
≠
, *);

1824 
C_SNPRINTF_APPEND_CHAR
('0');

1825 
C_SNPRINTF_APPEND_CHAR
('x');

1826 
i
 +
c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
num
, 16, 
Êags
, 0);

1828 #i‚de‡
NO_LIBC


1833 
ab‹t
();

1840 i‡(
buf_size
 > 0) {

1841 
buf
[
i
 < (Ë
buf_size
 ? i : () buf_size - 1] = '\0';

1844  
i
;

1848 
c_¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
fmt
, ...Ë
WEAK
;

1849 
c_¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
fmt
, ...) {

1850 
ªsu…
;

1851 
va_li°
 
≠
;

1852 
va_°¨t
(
≠
, 
fmt
);

1853 
ªsu…
 = 
c_v¢¥ötf
(
buf
, 
buf_size
, 
fmt
, 
≠
);

1854 
va_íd
(
≠
);

1855  
ªsu…
;

1858 #ifde‡
_WIN32


1859 
to_wch¨
(c⁄° *
∑th
, 
wch¨_t
 *
wbuf
, 
size_t
 
wbuf_Àn
) {

1860 
ªt
;

1861 
buf
[
MAX_PATH
 * 2], 
buf2
[MAX_PATH * 2], *
p
;

1863 
°∫˝y
(
buf
, 
∑th
, (buf));

1864 
buf
[(buf) - 1] = '\0';

1867 
p
 = 
buf
 + 
°æí
(buf) - 1;

1868 
p
 > 
buf
 &&Ö[-1] != ':' && (p[0] == '\\' ||Ö[0] == '/')) *p-- = '\0';

1870 
mem£t
(
wbuf
, 0, 
wbuf_Àn
 * (
wch¨_t
));

1871 
ªt
 = 
Mu…iByãToWideCh¨
(
CP_UTF8
, 0, 
buf
, -1, 
wbuf
, (Ë
wbuf_Àn
);

1877 
WideCh¨ToMu…iByã
(
CP_UTF8
, 0, 
wbuf
, (Ë
wbuf_Àn
, 
buf2
, (buf2),

1878 
NULL
, NULL);

1879 i‡(
°rcmp
(
buf
, 
buf2
) != 0) {

1880 
wbuf
[0] = 
L
'\0';

1881 
ªt
 = 0;

1884  
ªt
;

1889 c⁄° *
c_°∫°r
(c⁄° *
s
, c⁄° *
föd
, 
size_t
 
¶í
Ë
WEAK
;

1890 c⁄° *
c_°∫°r
(c⁄° *
s
, c⁄° *
föd
, 
size_t
 
¶í
) {

1891 
size_t
 
föd_Àngth
 = 
°æí
(
föd
);

1892 
size_t
 
i
;

1894 
i
 = 0; i < 
¶í
; i++) {

1895 i‡(
i
 + 
föd_Àngth
 > 
¶í
) {

1896  
NULL
;

1899 i‡(
°∫cmp
(&
s
[
i
], 
föd
, 
föd_Àngth
) == 0) {

1900  &
s
[
i
];

1904  
NULL
;

1907 #i‡
CS_ENABLE_STRDUP


1908 *
°rdup
(c⁄° *
§c
Ë
WEAK
;

1909 *
°rdup
(c⁄° *
§c
) {

1910 
size_t
 
Àn
 = 
°æí
(
§c
) + 1;

1911 *
ªt
 = 
MG_MALLOC
(
Àn
);

1912 i‡(
ªt
 !
NULL
) {

1913 
°r˝y
(
ªt
, 
§c
);

1915  
ªt
;

1919 
cs_to_hex
(*
to
, c⁄° *
p
, 
size_t
 
Àn
Ë
WEAK
;

1920 
cs_to_hex
(*
to
, c⁄° *
p
, 
size_t
 
Àn
) {

1921 c⁄° *
hex
 = "0123456789abcdef";

1923 ; 
Àn
--; 
p
++) {

1924 *
to
++ = 
hex
[
p
[0] >> 4];

1925 *
to
++ = 
hex
[
p
[0] & 0x0f];

1927 *
to
 = '\0';

1930 
fourbô
(
ch
) {

1931 i‡(
ch
 >= '0' && ch <= '9') {

1932  
ch
 - '0';

1933 } i‡(
ch
 >= 'a' && ch <= 'f') {

1934  
ch
 - 'a' + 10;

1935 } i‡(
ch
 >= 'A' && ch <= 'F') {

1936  
ch
 - 'A' + 10;

1941 
cs_‰om_hex
(*
to
, c⁄° *
p
, 
size_t
 
Àn
Ë
WEAK
;

1942 
cs_‰om_hex
(*
to
, c⁄° *
p
, 
size_t
 
Àn
) {

1943 
size_t
 
i
;

1945 
i
 = 0; i < 
Àn
; i += 2) {

1946 *
to
++ = (
fourbô
(
p
[
i
]) << 4) + fourbit(p[i + 1]);

1948 *
to
 = '\0';

1951 #i‡
CS_ENABLE_TO64


1952 
öt64_t
 
cs_to64
(c⁄° *
s
Ë
WEAK
;

1953 
öt64_t
 
cs_to64
(c⁄° *
s
) {

1954 
öt64_t
 
ªsu…
 = 0;

1955 
öt64_t
 
√g
 = 1;

1956 *
s
 && 
is•a˚
(() *s)) s++;

1957 i‡(*
s
 == '-') {

1958 
√g
 = -1;

1959 
s
++;

1961 
isdigô
((Ë*
s
)) {

1962 
ªsu…
 *= 10;

1963 
ªsu…
 +(*
s
 - '0');

1964 
s
++;

1966  
ªsu…
 * 
√g
;

1970 
°r_utû_lowîˇ£
(c⁄° *
s
) {

1971  
tﬁowî
(*(c⁄° *Ë
s
);

1974 
mg_nˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
Ë
WEAK
;

1975 
mg_nˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
) {

1976 
diff
 = 0;

1978 i‡(
Àn
 > 0) do {

1979 
diff
 = 
°r_utû_lowîˇ£
(
s1
++Ë- så_utû_lowîˇ£(
s2
++);

1980 } 
diff
 =0 && 
s1
[-1] !'\0' && --
Àn
 > 0);

1982  
diff
;

1985 
mg_ˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
Ë
WEAK
;

1986 
mg_ˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
) {

1987  
mg_nˇ£cmp
(
s1
, 
s2
, (
size_t
) ~0);

1990 
mg_a•rötf
(**
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...Ë
WEAK
;

1991 
mg_a•rötf
(**
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...) {

1992 
ªt
;

1993 
va_li°
 
≠
;

1994 
va_°¨t
(
≠
, 
fmt
);

1995 
ªt
 = 
mg_av¥ötf
(
buf
, 
size
, 
fmt
, 
≠
);

1996 
va_íd
(
≠
);

1997  
ªt
;

2000 
mg_av¥ötf
(**
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
Ë
WEAK
;

2001 
mg_av¥ötf
(**
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
) {

2002 
va_li°
 
≠_c›y
;

2003 
Àn
;

2005 
va_c›y
(
≠_c›y
, 
≠
);

2006 
Àn
 = 
v¢¥ötf
(*
buf
, 
size
, 
fmt
, 
≠_c›y
);

2007 
va_íd
(
≠_c›y
);

2009 i‡(
Àn
 < 0) {

2013 *
buf
 = 
NULL
;

2014 
Àn
 < 0) {

2015 
MG_FREE
(*
buf
);

2016 i‡(
size
 == 0) {

2017 
size
 = 5;

2019 
size
 *= 2;

2020 i‡((*
buf
 = (*Ë
MG_MALLOC
(
size
)Ë=
NULL
) {

2021 
Àn
 = -1;

2024 
va_c›y
(
≠_c›y
, 
≠
);

2025 
Àn
 = 
v¢¥ötf
(*
buf
, 
size
 - 1, 
fmt
, 
≠_c›y
);

2026 
va_íd
(
≠_c›y
);

2033 (*
buf
)[
Àn
] = 0;

2035 } i‡(
Àn
 >(Ë
size
) {

2037 i‡((*
buf
 = (*Ë
MG_MALLOC
(
Àn
 + 1)Ë=
NULL
) {

2038 
Àn
 = -1;

2040 
va_c›y
(
≠_c›y
, 
≠
);

2041 
Àn
 = 
v¢¥ötf
(*
buf
,Üí + 1, 
fmt
, 
≠_c›y
);

2042 
va_íd
(
≠_c›y
);

2046  
Àn
;

2049 c⁄° *
mg_√xt_comma_li°_íåy
(c⁄° *, 
mg_°r
 *,

2050 
mg_°r
 *Ë
WEAK
;

2051 c⁄° *
mg_√xt_comma_li°_íåy
(c⁄° *
li°
, 
mg_°r
 *
vÆ
,

2052 
mg_°r
 *
eq_vÆ
) {

2053 
mg_°r
 
ªt
 = 
mg_√xt_comma_li°_íåy_n
(
mg_mk_°r
(
li°
), 
vÆ
, 
eq_vÆ
);

2054  
ªt
.
p
;

2057 
mg_°r
 
mg_√xt_comma_li°_íåy_n
(mg_°∏
li°
, mg_°∏*
vÆ
,

2058 
mg_°r
 *
eq_vÆ
Ë
WEAK
;

2059 
mg_°r
 
mg_√xt_comma_li°_íåy_n
(mg_°∏
li°
, mg_°∏*
vÆ
,

2060 
mg_°r
 *
eq_vÆ
) {

2061 i‡(
li°
.
Àn
 == 0) {

2063 
li°
 = 
mg_mk_°r
(
NULL
);

2065 c⁄° *
chr
 = 
NULL
;

2066 *
vÆ
 = 
li°
;

2068 i‡((
chr
 = 
mg_°rchr
(*
vÆ
, ',')Ë!
NULL
) {

2070 
vÆ
->
Àn
 = 
chr
 - vÆ->
p
;

2071 
chr
++;

2072 
li°
.
Àn
 -(
chr
 -Üi°.
p
);

2073 
li°
.
p
 = 
chr
;

2076 
li°
 = 
mg_mk_°r_n
÷i°.
p
 +Üi°.
Àn
, 0);

2079 i‡(
eq_vÆ
 !
NULL
) {

2082 
eq_vÆ
->
Àn
 = 0;

2083 
eq_vÆ
->
p
 = (c⁄° *Ë
memchr
(
vÆ
->p, '=', vÆ->
Àn
);

2084 i‡(
eq_vÆ
->
p
 !
NULL
) {

2085 
eq_vÆ
->
p
++;

2086 
eq_vÆ
->
Àn
 = 
vÆ
->
p
 + val->len -Éq_val->p;

2087 
vÆ
->
Àn
 = (
eq_vÆ
->
p
 - val->p) - 1;

2092  
li°
;

2095 
size_t
 
mg_m©ch_¥efix_n
(c⁄° 
mg_°r
, c⁄° mg_°rË
WEAK
;

2096 
size_t
 
mg_m©ch_¥efix_n
(c⁄° 
mg_°r
 
∑âîn
, c⁄° mg_°∏
°r
) {

2097 c⁄° *
‹_°r
;

2098 
size_t
 
ªs
 = 0, 
Àn
 = 0, 
i
 = 0, 
j
 = 0;

2100 i‡((
‹_°r
 = (c⁄° *Ë
memchr
(
∑âîn
.
p
, '|',Ö©ã∫.
Àn
)Ë!
NULL
 ||

2101 (
‹_°r
 = (c⁄° *Ë
memchr
(
∑âîn
.
p
, ',',Ö©ã∫.
Àn
)Ë!
NULL
) {

2102 
mg_°r
 
p°r
 = {
∑âîn
.
p
, (
size_t
)(
‹_°r
 -Öattern.p)};

2103 
ªs
 = 
mg_m©ch_¥efix_n
(
p°r
, 
°r
);

2104 i‡(
ªs
 > 0) Ñes;

2105 
p°r
.
p
 = 
‹_°r
 + 1;

2106 
p°r
.
Àn
 = (
∑âîn
.
p
 +Ö©ã∫.ÀnË- (
‹_°r
 + 1);

2107  
mg_m©ch_¥efix_n
(
p°r
, 
°r
);

2110 ; 
i
 < 
∑âîn
.
Àn
 && 
j
 < 
°r
.len; i++, j++) {

2111 i‡(
∑âîn
.
p
[
i
] == '?') {

2113 } i‡(
∑âîn
.
p
[
i
] == '*') {

2114 
i
++;

2115 i‡(
i
 < 
∑âîn
.
Àn
 &&Ö©ã∫.
p
[i] == '*') {

2116 
i
++;

2117 
Àn
 = 
°r
.À¿- 
j
;

2119 
Àn
 = 0;

2120 
j
 + 
Àn
 < 
°r
.À¿&& så.
p
[j +Üen] != '/')Üen++;

2122 i‡(
i
 =
∑âîn
.
Àn
 || (∑âîn.
p
[i] == '$' && i ==Öattern.len - 1))

2123  
j
 + 
Àn
;

2125 c⁄° 
mg_°r
 
p°r
 = {
∑âîn
.
p
 + 
i
,Ö©ã∫.
Àn
 - i};

2126 c⁄° 
mg_°r
 
s°r
 = {
°r
.
p
 + 
j
 + 
Àn
, str.len - j -Üen};

2127 
ªs
 = 
mg_m©ch_¥efix_n
(
p°r
, 
s°r
);

2128 } 
ªs
 =0 && 
Àn
 != 0 &&Üen-- > 0);

2129  
ªs
 =0 ? 0 : 
j
 +Ñe†+ 
Àn
;

2130 } i‡(
°r_utû_lowîˇ£
(&
∑âîn
.
p
[
i
]) !=

2131 
°r_utû_lowîˇ£
(&
°r
.
p
[
j
])) {

2135 i‡(
i
 < 
∑âîn
.
Àn
 &&Ö©ã∫.
p
[i] == '$') {

2136  
j
 =
°r
.
Àn
 ? str.len : 0;

2138  
i
 =
∑âîn
.
Àn
 ? 
j
 : 0;

2141 
size_t
 
mg_m©ch_¥efix
(c⁄° *, , c⁄° *Ë
WEAK
;

2142 
size_t
 
mg_m©ch_¥efix
(c⁄° *
∑âîn
, 
∑âîn_Àn
, c⁄° *
°r
) {

2143 c⁄° 
mg_°r
 
p°r
 = {
∑âîn
, (
size_t
Ë
∑âîn_Àn
};

2144 
mg_°r
 
s
 = {
°r
, 0};

2145 i‡(
°r
 !
NULL
Ë
s
.
Àn
 = 
°æí
(str);

2146  
mg_m©ch_¥efix_n
(
p°r
, 
s
);

2150 #ifde‡
MG_MODULE_LINES


2177 
	#MG_MAX_HOST_LEN
 200

	)

2179 
	#MG_COPY_COMMON_CONNECTION_OPTIONS
(
d°
, 
§c
) \

2180 
	`mem˝y
(
d°
, 
§c
, (*d°));

	)

2183 
	#_MG_ALLOWED_CONNECT_FLAGS_MASK
 \

2184 (
MG_F_USER_1
 | 
MG_F_USER_2
 | 
MG_F_USER_3
 | 
MG_F_USER_4
 | 
MG_F_USER_5
 | \

2185 
MG_F_USER_6
 | 
MG_F_WEBSOCKET_NO_DEFRAG
 | 
MG_F_ENABLE_BROADCAST
)

	)

2187 
	#_MG_CALLBACK_MODIFIABLE_FLAGS_MASK
 \

2188 (
MG_F_USER_1
 | 
MG_F_USER_2
 | 
MG_F_USER_3
 | 
MG_F_USER_4
 | 
MG_F_USER_5
 | \

2189 
MG_F_USER_6
 | 
MG_F_WEBSOCKET_NO_DEFRAG
 | 
MG_F_SEND_AND_CLOSE
 | \

2190 
MG_F_CLOSE_IMMEDIATELY
 | 
MG_F_IS_WEBSOCKET
 | 
MG_F_DELETE_CHUNK
)

	)

2192 #i‚de‡
öçå_t


2193 
	#öçå_t
 

	)

2196 
MG_INTERNAL
 
mg_add_c⁄n
(
mg_mgr
 *
mgr
, 
mg_c⁄√˘i⁄
 *
c
) {

2197 
DBG
(("%∞%p", 
mgr
, 
c
));

2198 
c
->
mgr
 = mgr;

2199 
c
->
√xt
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;

2200 
mgr
->
a˘ive_c⁄√˘i⁄s
 = 
c
;

2201 
c
->
¥ev
 = 
NULL
;

2202 i‡(
c
->
√xt
 !
NULL
Ëc->√xt->
¥ev
 = c;

2203 i‡(
c
->
sock
 !
INVALID_SOCKET
) {

2204 
c
->
iÁ˚
->
vèbÀ
->
add_c⁄n
(c);

2208 
MG_INTERNAL
 
mg_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
c⁄n
) {

2209 i‡(
c⁄n
->
¥ev
 =
NULL
Ëc⁄n->
mgr
->
a˘ive_c⁄√˘i⁄s
 = c⁄n->
√xt
;

2210 i‡(
c⁄n
->
¥ev
Ëc⁄n->¥ev->
√xt
 = conn->next;

2211 i‡(
c⁄n
->
√xt
Ëc⁄n->√xt->
¥ev
 = conn->prev;

2212 
c⁄n
->
¥ev
 = c⁄n->
√xt
 = 
NULL
;

2213 
c⁄n
->
iÁ˚
->
vèbÀ
->
ªmove_c⁄n
(conn);

2216 
MG_INTERNAL
 
mg_ˇŒ
(
mg_c⁄√˘i⁄
 *
nc
,

2217 
mg_evít_h™dÀr_t
 
ev_h™dÀr
, *
u£r_d©a
, 
ev
,

2218 *
ev_d©a
) {

2219 
√°ög_Àvñ
 = 0;

2220 
√°ög_Àvñ
++;

2221 i‡(
ev_h™dÀr
 =
NULL
) {

2226 
ev_h™dÀr
 = 
nc
->
¥Ÿo_h™dÀr
 ?Çc->¥Ÿo_h™dÀ∏:Çc->
h™dÀr
;

2228 i‡(
ev
 !
MG_EV_POLL
) {

2229 
DBG
(("%∞%†ev=%dÉv_d©a=%∞Êags=%luÑmbl=%d smbl=%d", 
nc
,

2230 
ev_h™dÀr
 =
nc
->
h™dÀr
 ? "u£r" : "¥Ÿo", 
ev
, 
ev_d©a
,Çc->
Êags
,

2231 (Ë
nc
->
ªcv_mbuf
.
Àn
, (Ënc->
£nd_mbuf
.len));

2234 #i‡!
deföed
(
NO_LIBC
Ë&& 
MG_ENABLE_HEXDUMP


2235 i‡(
nc
->
mgr
->
hexdump_fûe
 !
NULL
 && 
ev
 !
MG_EV_POLL
 &&Év !
MG_EV_RECV
 &&

2236 
ev
 !
MG_EV_SEND
 ) {

2237 
mg_hexdump_c⁄√˘i⁄
(
nc
,Çc->
mgr
->
hexdump_fûe
, 
NULL
, 0, 
ev
);

2240 i‡(
ev_h™dÀr
 !
NULL
) {

2241 
Êags_bef‹e
 = 
nc
->
Êags
;

2242 
size_t
 
ªcv_mbuf_bef‹e
 = 
nc
->
ªcv_mbuf
.
Àn
, 
ªcved
;

2243 
ev_h™dÀr
(
nc
, 
ev
, 
ev_d©a
 
MG_UD_ARG
(
u£r_d©a
));

2244 
ªcved
 = (
ªcv_mbuf_bef‹e
 - 
nc
->
ªcv_mbuf
.
Àn
);

2246 i‡(
ev_h™dÀr
 =
nc
->
h™dÀr
 &&Çc->
Êags
 !
Êags_bef‹e
) {

2247 
nc
->
Êags
 = (
Êags_bef‹e
 & ~
_MG_CALLBACK_MODIFIABLE_FLAGS_MASK
) |

2248 (
nc
->
Êags
 & 
_MG_CALLBACK_MODIFIABLE_FLAGS_MASK
);

2253 i‡(
√°ög_Àvñ
 =1 && 
ªcved
 > 0 && !(
nc
->
Êags
 & 
MG_F_UDP
)) {

2254 
nc
->
iÁ˚
->
vèbÀ
->
ªcved
(nc,Ñecved);

2257 i‡(
ev
 !
MG_EV_POLL
) {

2258 
DBG
(("%∞a·î %†Êags=%luÑmbl=%d smbl=%d", 
nc
,

2259 
ev_h™dÀr
 =
nc
->
h™dÀr
 ? "u£r" : "¥Ÿo",Çc->
Êags
,

2260 (Ë
nc
->
ªcv_mbuf
.
Àn
, (Ënc->
£nd_mbuf
.len));

2262 
√°ög_Àvñ
--;

2263 #i‡!
MG_ENABLE_CALLBACK_USERDATA


2264 (Ë
u£r_d©a
;

2268 
mg_if_timî
(
mg_c⁄√˘i⁄
 *
c
, 
now
) {

2269 i‡(
c
->
ev_timî_time
 > 0 && 
now
 >= c->ev_timer_time) {

2270 
ﬁd_vÆue
 = 
c
->
ev_timî_time
;

2271 
c
->
ev_timî_time
 = 0;

2272 
mg_ˇŒ
(
c
, 
NULL
, c->
u£r_d©a
, 
MG_EV_TIMER
, &
ﬁd_vÆue
);

2276 
mg_if_pﬁl
(
mg_c⁄√˘i⁄
 *
nc
, 
time_t
 
now
) {

2277 i‡(!(
nc
->
Êags
 & 
MG_F_SSL
Ë|| (nc->Êag†& 
MG_F_SSL_HANDSHAKE_DONE
)) {

2278 
mg_ˇŒ
(
nc
, 
NULL
,Çc->
u£r_d©a
, 
MG_EV_POLL
, &
now
);

2282 
mg_de°roy_c⁄n
(
mg_c⁄√˘i⁄
 *
c⁄n
, 
de°roy_if
) {

2283 i‡(
de°roy_if
Ë
c⁄n
->
iÁ˚
->
vèbÀ
->
de°roy_c⁄n
(conn);

2284 i‡(
c⁄n
->
¥Ÿo_d©a
 !
NULL
 && c⁄n->
¥Ÿo_d©a_de°ru˘‹
 != NULL) {

2285 
c⁄n
->
¥Ÿo_d©a_de°ru˘‹
(c⁄n->
¥Ÿo_d©a
);

2287 #i‡
MG_ENABLE_SSL


2288 
mg_s¶_if_c⁄n_‰ì
(
c⁄n
);

2290 
mbuf_‰ì
(&
c⁄n
->
ªcv_mbuf
);

2291 
mbuf_‰ì
(&
c⁄n
->
£nd_mbuf
);

2293 
mem£t
(
c⁄n
, 0, (*conn));

2294 
MG_FREE
(
c⁄n
);

2297 
mg_˛o£_c⁄n
(
mg_c⁄√˘i⁄
 *
c⁄n
) {

2298 
DBG
(("%∞%lu %d", 
c⁄n
, c⁄n->
Êags
, c⁄n->
sock
));

2299 #i‡
MG_ENABLE_SSL


2300 i‡(
c⁄n
->
Êags
 & 
MG_F_SSL_HANDSHAKE_DONE
) {

2301 
mg_s¶_if_c⁄n_˛o£_nŸify
(
c⁄n
);

2304 
mg_ªmove_c⁄n
(
c⁄n
);

2305 
c⁄n
->
iÁ˚
->
vèbÀ
->
de°roy_c⁄n
(conn);

2306 
mg_ˇŒ
(
c⁄n
, 
NULL
, c⁄n->
u£r_d©a
, 
MG_EV_CLOSE
, NULL);

2307 
mg_de°roy_c⁄n
(
c⁄n
, 0 );

2310 
mg_mgr_öô
(
mg_mgr
 *
m
, *
u£r_d©a
) {

2311 
mg_mgr_öô_›ts
 
›ts
;

2312 
mem£t
(&
›ts
, 0, (opts));

2313 
mg_mgr_öô_›t
(
m
, 
u£r_d©a
, 
›ts
);

2316 
mg_mgr_öô_›t
(
mg_mgr
 *
m
, *
u£r_d©a
,

2317 
mg_mgr_öô_›ts
 
›ts
) {

2318 
mem£t
(
m
, 0, (*m));

2319 #i‡
MG_ENABLE_BROADCAST


2320 
m
->
˘l
[0] = m->˘l[1] = 
INVALID_SOCKET
;

2322 
m
->
u£r_d©a
 = user_data;

2324 #ifde‡
_WIN32


2326 
WSADATA
 
d©a
;

2327 
WSASèπup
(
MAKEWORD
(2, 2), &
d©a
);

2329 #ñi‡
deföed
(
__unix__
)

2332 
sig«l
(
SIGPIPE
, 
SIG_IGN
);

2335 #i‡
MG_ENABLE_SSL


2337 
öô_d⁄e
;

2338 i‡(!
öô_d⁄e
) {

2339 
mg_s¶_if_öô
();

2340 
öô_d⁄e
++;

2345 
i
;

2346 i‡(
›ts
.
num_iÁ˚s
 == 0) {

2347 
›ts
.
num_iÁ˚s
 = 
mg_num_iÁ˚s
;

2348 
›ts
.
iÁ˚s
 = 
mg_iÁ˚s
;

2350 i‡(
›ts
.
maö_iÁ˚
 !
NULL
) {

2351 
›ts
.
iÁ˚s
[
MG_MAIN_IFACE
] = o±s.
maö_iÁ˚
;

2353 
m
->
num_iÁ˚s
 = 
›ts
.num_ifaces;

2354 
m
->
iÁ˚s
 =

2355 (
mg_iÁ˚
 **Ë
MG_MALLOC
((*
m
->
iÁ˚s
Ë* 
›ts
.
num_iÁ˚s
);

2356 
i
 = 0; i < 
mg_num_iÁ˚s
; i++) {

2357 
m
->
iÁ˚s
[
i
] = 
mg_if_¸óã_iÁ˚
(
›ts
.ifaces[i], m);

2358 
m
->
iÁ˚s
[
i
]->
vèbÀ
->
öô
(m->ifaces[i]);

2361 i‡(
›ts
.
«me£rvî
 !
NULL
) {

2362 
m
->
«me£rvî
 = 
°rdup
(
›ts
.nameserver);

2364 
DBG
(("=================================="));

2365 
DBG
(("öô mgr=%p", 
m
));

2368 
mg_mgr_‰ì
(
mg_mgr
 *
m
) {

2369 
mg_c⁄√˘i⁄
 *
c⁄n
, *
tmp_c⁄n
;

2371 
DBG
(("%p", 
m
));

2372 i‡(
m
 =
NULL
) ;

2374 
mg_mgr_pﬁl
(
m
, 0);

2376 #i‡
MG_ENABLE_BROADCAST


2377 i‡(
m
->
˘l
[0] !
INVALID_SOCKET
Ë
˛o£sockë
(m->ctl[0]);

2378 i‡(
m
->
˘l
[1] !
INVALID_SOCKET
Ë
˛o£sockë
(m->ctl[1]);

2379 
m
->
˘l
[0] = m->˘l[1] = 
INVALID_SOCKET
;

2382 
c⁄n
 = 
m
->
a˘ive_c⁄√˘i⁄s
; c⁄¿!
NULL
; c⁄¿
tmp_c⁄n
) {

2383 
tmp_c⁄n
 = 
c⁄n
->
√xt
;

2384 
mg_˛o£_c⁄n
(
c⁄n
);

2388 
i
;

2389 
i
 = 0; i < 
m
->
num_iÁ˚s
; i++) {

2390 
m
->
iÁ˚s
[
i
]->
vèbÀ
->
‰ì
(m->ifaces[i]);

2391 
MG_FREE
(
m
->
iÁ˚s
[
i
]);

2393 
MG_FREE
(
m
->
iÁ˚s
);

2396 
MG_FREE
((*Ë
m
->
«me£rvî
);

2399 
time_t
 
mg_mgr_pﬁl
(
mg_mgr
 *
m
, 
timeout_ms
) {

2400 
i
;

2401 
time_t
 
now
 = 0;

2403 i‡(
m
->
num_iÁ˚s
 == 0) {

2404 
LOG
(
LL_ERROR
, ("cannotÖoll:Ço interfaces"));

2408 
i
 = 0; i < 
m
->
num_iÁ˚s
; i++) {

2409 
now
 = 
m
->
iÁ˚s
[
i
]->
vèbÀ
->
pﬁl
(m->iÁ˚s[i], 
timeout_ms
);

2411  
now
;

2414 
mg_v¥ötf
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
fmt
, 
va_li°
 
≠
) {

2415 
mem
[
MG_VPRINTF_BUFFER_SIZE
], *
buf
 = mem;

2416 
Àn
;

2418 i‡((
Àn
 = 
mg_av¥ötf
(&
buf
, (
mem
), 
fmt
, 
≠
)) > 0) {

2419 
mg_£nd
(
nc
, 
buf
, 
Àn
);

2421 i‡(
buf
 !
mem
 && bu‡!
NULL
) {

2422 
MG_FREE
(
buf
);

2425  
Àn
;

2428 
mg_¥ötf
(
mg_c⁄√˘i⁄
 *
c⁄n
, c⁄° *
fmt
, ...) {

2429 
Àn
;

2430 
va_li°
 
≠
;

2431 
va_°¨t
(
≠
, 
fmt
);

2432 
Àn
 = 
mg_v¥ötf
(
c⁄n
, 
fmt
, 
≠
);

2433 
va_íd
(
≠
);

2434  
Àn
;

2437 #i‡
MG_ENABLE_SYNC_RESOLVER


2439 
mg_ªsﬁve2
(c⁄° *
ho°
, 
ö_addr
 *
öa
) {

2440 #i‡
MG_ENABLE_GETADDRINFO


2441 
rv
 = 0;

2442 
addröfo
 
höts
, *
£rvöfo
, *
p
;

2443 
sockaddr_ö
 *
h
 = 
NULL
;

2444 
mem£t
(&
höts
, 0,  hints);

2445 
höts
.
ai_Ámûy
 = 
AF_INET
;

2446 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

2447 i‡((
rv
 = 
gëaddröfo
(
ho°
, 
NULL
, NULL, &
£rvöfo
)) != 0) {

2448 
DBG
(("gëaddröfo(%sËÁûed: %s", 
ho°
, 
°ªº‹
(
mg_gë_î∫o
())));

2451 
p
 = 
£rvöfo
;Ö !
NULL
;Ö =Ö->
ai_√xt
) {

2452 
mem˝y
(&
h
, &
p
->
ai_addr
, (
sockaddr_ö
 *));

2453 
mem˝y
(
öa
, &
h
->
sö_addr
, (ina));

2455 
‰ìaddröfo
(
£rvöfo
);

2458 
ho°ít
 *
he
;

2459 i‡((
he
 = 
gëho°by«me
(
ho°
)Ë=
NULL
) {

2460 
DBG
(("gëho°by«me(%sËÁûed: %s", 
ho°
, 
°ªº‹
(
mg_gë_î∫o
())));

2462 
mem˝y
(
öa
, 
he
->
h_addr_li°
[0], (*ina));

2469 
mg_ªsﬁve
(c⁄° *
ho°
, *
buf
, 
size_t
 
n
) {

2470 
ö_addr
 
ad
;

2471  
mg_ªsﬁve2
(
ho°
, &
ad
Ë? 
¢¥ötf
(
buf
, 
n
, "%s", 
öë_¡ﬂ
(ad)) : 0;

2475 
MG_INTERNAL
 
mg_c⁄√˘i⁄
 *
mg_¸óã_c⁄√˘i⁄_ba£
(

2476 
mg_mgr
 *
mgr
, 
mg_evít_h™dÀr_t
 
ˇŒback
,

2477 
mg_add_sock_›ts
 
›ts
) {

2478 
mg_c⁄√˘i⁄
 *
c⁄n
;

2480 i‡((
c⁄n
 = (
mg_c⁄√˘i⁄
 *Ë
MG_CALLOC
(1, (*c⁄n))Ë!
NULL
) {

2481 
c⁄n
->
sock
 = 
INVALID_SOCKET
;

2482 
c⁄n
->
h™dÀr
 = 
ˇŒback
;

2483 
c⁄n
->
mgr
 = mgr;

2484 
c⁄n
->
œ°_io_time
 = (
time_t
Ë
mg_time
();

2485 
c⁄n
->
iÁ˚
 =

2486 (
›ts
.
iÁ˚
 !
NULL
 ? o±s.iÁ˚ : 
mgr
->
iÁ˚s
[
MG_MAIN_IFACE
]);

2487 
c⁄n
->
Êags
 = 
›ts
.Êag†& 
_MG_ALLOWED_CONNECT_FLAGS_MASK
;

2488 
c⁄n
->
u£r_d©a
 = 
›ts
.user_data;

2494 
c⁄n
->
ªcv_mbuf_limô
 = ~0;

2496 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "failedÅo create connection");

2499  
c⁄n
;

2502 
MG_INTERNAL
 
mg_c⁄√˘i⁄
 *
mg_¸óã_c⁄√˘i⁄
(

2503 
mg_mgr
 *
mgr
, 
mg_evít_h™dÀr_t
 
ˇŒback
,

2504 
mg_add_sock_›ts
 
›ts
) {

2505 
mg_c⁄√˘i⁄
 *
c⁄n
 = 
mg_¸óã_c⁄√˘i⁄_ba£
(
mgr
, 
ˇŒback
, 
›ts
);

2507 i‡(
c⁄n
 !
NULL
 && !c⁄n->
iÁ˚
->
vèbÀ
->
¸óã_c⁄n
(conn)) {

2508 
MG_FREE
(
c⁄n
);

2509 
c⁄n
 = 
NULL
;

2511 i‡(
c⁄n
 =
NULL
) {

2512 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "failedÅo init connection");

2515  
c⁄n
;

2531 
MG_INTERNAL
 
mg_∑r£_addªss
(c⁄° *
°r
, 
sockë_addªss
 *
ß
,

2532 *
¥Ÿo
, *
ho°
, 
size_t
 
ho°_Àn
) {

2533 
a
, 
b
, 
c
, 
d
, 
p‹t
 = 0;

2534 
ch
, 
Àn
 = 0;

2535 #i‡
MG_ENABLE_IPV6


2536 
buf
[100];

2544 
mem£t
(
ß
, 0, (*sa));

2545 
ß
->
sö
.
sö_Ámûy
 = 
AF_INET
;

2547 *
¥Ÿo
 = 
SOCK_STREAM
;

2549 i‡(
°∫cmp
(
°r
, "udp://", 6) == 0) {

2550 
°r
 += 6;

2551 *
¥Ÿo
 = 
SOCK_DGRAM
;

2552 } i‡(
°∫cmp
(
°r
, "tcp://", 6) == 0) {

2553 
°r
 += 6;

2556 i‡(
ssˇnf
(
°r
, "%u.%u.%u.%u:%u%n", &
a
, &
b
, &
c
, &
d
, &
p‹t
, &
Àn
) == 5) {

2558 
ß
->
sö
.
sö_addr
.
s_addr
 =

2559 
ht⁄l
(((
uöt32_t
Ë
a
 << 24Ë| ((uöt32_tË
b
 << 16Ë| 
c
 << 8 | 
d
);

2560 
ß
->
sö
.
sö_p‹t
 = 
ht⁄s
((
uöt16_t
Ë
p‹t
);

2561 #i‡
MG_ENABLE_IPV6


2562 } i‡(
ssˇnf
(
°r
, "[%99[^]]]:%u%n", 
buf
, &
p‹t
, &
Àn
) == 2 &&

2563 
öë_±⁄
(
AF_INET6
, 
buf
, &
ß
->
sö6
.
sö6_addr
)) {

2565 
ß
->
sö6
.
sö6_Ámûy
 = 
AF_INET6
;

2566 
ß
->
sö
.
sö_p‹t
 = 
ht⁄s
((
uöt16_t
Ë
p‹t
);

2568 #i‡
MG_ENABLE_ASYNC_RESOLVER


2569 } i‡(
°æí
(
°r
Ë< 
ho°_Àn
 &&

2570 
ssˇnf
(
°r
, "%[^ :]:%u%n", 
ho°
, &
p‹t
, &
Àn
) == 2) {

2571 
ß
->
sö
.
sö_p‹t
 = 
ht⁄s
((
uöt16_t
Ë
p‹t
);

2572 i‡(
mg_ªsﬁve_‰om_ho°s_fûe
(
ho°
, 
ß
) != 0) {

2579 i‡(
mg_nˇ£cmp
(
ho°
, "localhost", 9) != 0) {

2583 #i‡
MG_ENABLE_SYNC_RESOLVER


2584 i‡(!
mg_ªsﬁve2
(
ho°
, &
ß
->
sö
.
sö_addr
)) {

2592 } i‡(
ssˇnf
(
°r
, ":%u%n", &
p‹t
, &
Àn
) == 1 ||

2593 
ssˇnf
(
°r
, "%u%n", &
p‹t
, &
Àn
) == 1) {

2595 
ß
->
sö
.
sö_p‹t
 = 
ht⁄s
((
uöt16_t
Ë
p‹t
);

2601 (Ë
ho°
;

2602 (Ë
ho°_Àn
;

2604 
ch
 = 
°r
[
Àn
];

2605  
p‹t
 < 0xffffUL && (
ch
 ='\0' || ch =',' || 
is•a˚
(ch)Ë? 
Àn
 : -1;

2608 
mg_c⁄√˘i⁄
 *
mg_if_ac˚±_√w_c⁄n
(mg_c⁄√˘i⁄ *
lc
) {

2609 
mg_add_sock_›ts
 
›ts
;

2610 
mg_c⁄√˘i⁄
 *
nc
;

2611 
mem£t
(&
›ts
, 0, (opts));

2612 
nc
 = 
mg_¸óã_c⁄√˘i⁄
(
lc
->
mgr
,Üc->
h™dÀr
, 
›ts
);

2613 i‡(
nc
 =
NULL
)  NULL;

2614 
nc
->
li°íî
 = 
lc
;

2615 
nc
->
¥Ÿo_h™dÀr
 = 
lc
->proto_handler;

2616 
nc
->
u£r_d©a
 = 
lc
->user_data;

2617 
nc
->
ªcv_mbuf_limô
 = 
lc
->recv_mbuf_limit;

2618 
nc
->
iÁ˚
 = 
lc
->iface;

2619 i‡(
lc
->
Êags
 & 
MG_F_SSL
Ë
nc
->flags |= MG_F_SSL;

2620 
mg_add_c⁄n
(
nc
->
mgr
,Çc);

2621 
DBG
(("%∞%∞%d %d", 
lc
, 
nc
,Çc->
sock
, (Ënc->
Êags
));

2622  
nc
;

2625 
mg_if_ac˚±_t˝_cb
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
,

2626 
size_t
 
ß_Àn
) {

2627 (Ë
ß_Àn
;

2628 
nc
->
ß
 = *sa;

2629 
mg_ˇŒ
(
nc
, 
NULL
,Çc->
u£r_d©a
, 
MG_EV_ACCEPT
, &nc->
ß
);

2632 
mg_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
Àn
) {

2633 
nc
->
œ°_io_time
 = (
time_t
Ë
mg_time
();

2634 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

2635 
nc
->
iÁ˚
->
vèbÀ
->
udp_£nd
“c, 
buf
, 
Àn
);

2637 
nc
->
iÁ˚
->
vèbÀ
->
t˝_£nd
“c, 
buf
, 
Àn
);

2641 
mg_if_£¡_cb
(
mg_c⁄√˘i⁄
 *
nc
, 
num_£¡
) {

2642 
DBG
(("%∞%d", 
nc
, 
num_£¡
));

2643 #i‡!
deföed
(
NO_LIBC
Ë&& 
MG_ENABLE_HEXDUMP


2644 i‡(
nc
->
mgr
 &&Çc->mgr->
hexdump_fûe
 !
NULL
) {

2645 *
buf
 = 
nc
->
£nd_mbuf
.buf;

2646 
mg_hexdump_c⁄√˘i⁄
(
nc
,Çc->
mgr
->
hexdump_fûe
, 
buf
, 
num_£¡
, 
MG_EV_SEND
);

2649 i‡(
num_£¡
 < 0) {

2650 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

2652 
mbuf_ªmove
(&
nc
->
£nd_mbuf
, 
num_£¡
);

2653 
mbuf_åim
(&
nc
->
£nd_mbuf
);

2655 
mg_ˇŒ
(
nc
, 
NULL
,Çc->
u£r_d©a
, 
MG_EV_SEND
, &
num_£¡
);

2658 
MG_INTERNAL
 
mg_ªcv_comm⁄
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
Àn
,

2659 
own
) {

2660 
DBG
(("%∞%d %u", 
nc
, 
Àn
, (Ënc->
ªcv_mbuf
.len));

2662 #i‡!
deföed
(
NO_LIBC
Ë&& 
MG_ENABLE_HEXDUMP


2663 i‡(
nc
->
mgr
 &&Çc->mgr->
hexdump_fûe
 !
NULL
) {

2664 
mg_hexdump_c⁄√˘i⁄
(
nc
,Çc->
mgr
->
hexdump_fûe
, 
buf
, 
Àn
, 
MG_EV_RECV
);

2668 i‡(
nc
->
Êags
 & 
MG_F_CLOSE_IMMEDIATELY
) {

2669 
DBG
(("%∞disˇrded %d byãs", 
nc
, 
Àn
));

2674 i‡(
own
) {

2675 
MG_FREE
(
buf
);

2679 
nc
->
œ°_io_time
 = (
time_t
Ë
mg_time
();

2680 i‡(!
own
) {

2681 
mbuf_≠≥nd
(&
nc
->
ªcv_mbuf
, 
buf
, 
Àn
);

2682 } i‡(
nc
->
ªcv_mbuf
.
Àn
 == 0) {

2684 
mbuf_‰ì
(&
nc
->
ªcv_mbuf
);

2685 
nc
->
ªcv_mbuf
.
buf
 = (*) buf;

2686 
nc
->
ªcv_mbuf
.
size
 =Çc->ªcv_mbuf.
Àn
 =Üen;

2688 
mbuf_≠≥nd
(&
nc
->
ªcv_mbuf
, 
buf
, 
Àn
);

2689 
MG_FREE
(
buf
);

2691 
mg_ˇŒ
(
nc
, 
NULL
,Çc->
u£r_d©a
, 
MG_EV_RECV
, &
Àn
);

2694 
mg_if_ªcv_t˝_cb
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
Àn
, 
own
) {

2695 
mg_ªcv_comm⁄
(
nc
, 
buf
, 
Àn
, 
own
);

2698 
mg_if_ªcv_udp_cb
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
Àn
,

2699 
sockë_addªss
 *
ß
, 
size_t
 
ß_Àn
) {

2700 
as£π
(
nc
->
Êags
 & 
MG_F_UDP
);

2701 
DBG
(("%∞%u", 
nc
, (Ë
Àn
));

2702 i‡(
nc
->
Êags
 & 
MG_F_LISTENING
) {

2703 
mg_c⁄√˘i⁄
 *
lc
 = 
nc
;

2708 
nc
 = 
mg_√xt
(
lc
->
mgr
, 
NULL
);Çc != NULL;Çc = mg_next(lc->mgr,Çc)) {

2709 i‡(
memcmp
(&
nc
->
ß
.ß, &ß->ß, 
ß_Àn
Ë=0 &&Çc->
li°íî
 =
lc
) {

2713 i‡(
nc
 =
NULL
) {

2714 
mg_add_sock_›ts
 
›ts
;

2715 
mem£t
(&
›ts
, 0, (opts));

2717 
nc
 = 
mg_¸óã_c⁄√˘i⁄_ba£
(
lc
->
mgr
,Üc->
h™dÀr
, 
›ts
);

2718 i‡(
nc
 !
NULL
) {

2719 
nc
->
sock
 = 
lc
->sock;

2720 
nc
->
li°íî
 = 
lc
;

2721 
nc
->
ß
 = *sa;

2722 
nc
->
¥Ÿo_h™dÀr
 = 
lc
->proto_handler;

2723 
nc
->
u£r_d©a
 = 
lc
->user_data;

2724 
nc
->
ªcv_mbuf_limô
 = 
lc
->recv_mbuf_limit;

2725 
nc
->
Êags
 = 
MG_F_UDP
;

2737 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

2738 
mg_add_c⁄n
(
lc
->
mgr
, 
nc
);

2739 
mg_ˇŒ
(
nc
, 
NULL
,Çc->
u£r_d©a
, 
MG_EV_ACCEPT
, &nc->
ß
);

2741 
DBG
(("OOM"));

2746 i‡(
nc
 !
NULL
) {

2747 
mg_ªcv_comm⁄
(
nc
, 
buf
, 
Àn
, 1);

2750 
MG_FREE
(
buf
);

2760 
MG_INTERNAL
 
mg_c⁄√˘i⁄
 *
mg_do_c⁄√˘
(mg_c⁄√˘i⁄ *
nc
,

2761 
¥Ÿo
,

2762 
sockë_addªss
 *
ß
) {

2763 
DBG
(("%∞%s://%s:%hu", 
nc
, 
¥Ÿo
 =
SOCK_DGRAM
 ? "udp" : "tcp",

2764 
öë_¡ﬂ
(
ß
->
sö
.
sö_addr
), 
¡ohs
(ß->sö.
sö_p‹t
)));

2766 
nc
->
Êags
 |
MG_F_CONNECTING
;

2767 i‡(
¥Ÿo
 =
SOCK_DGRAM
) {

2768 
nc
->
iÁ˚
->
vèbÀ
->
c⁄√˘_udp
(nc);

2770 
nc
->
iÁ˚
->
vèbÀ
->
c⁄√˘_t˝
“c, 
ß
);

2772 
mg_add_c⁄n
(
nc
->
mgr
,Çc);

2773  
nc
;

2776 
mg_if_c⁄√˘_cb
(
mg_c⁄√˘i⁄
 *
nc
, 
îr
) {

2777 
DBG
(("%∞c⁄√˘,Éº=%d", 
nc
, 
îr
));

2778 
nc
->
Êags
 &~
MG_F_CONNECTING
;

2779 i‡(
îr
 != 0) {

2780 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

2782 
mg_ˇŒ
(
nc
, 
NULL
,Çc->
u£r_d©a
, 
MG_EV_CONNECT
, &
îr
);

2785 #i‡
MG_ENABLE_ASYNC_RESOLVER


2792 
ªsﬁve_cb
(
mg_dns_mesßge
 *
msg
, *
d©a
,

2793 
mg_ªsﬁve_îr
 
e
) {

2794 
mg_c⁄√˘i⁄
 *
nc
 = (mg_c⁄√˘i⁄ *Ë
d©a
;

2795 
i
;

2796 
Áûuª
 = -1;

2798 
nc
->
Êags
 &~
MG_F_RESOLVING
;

2799 i‡(
msg
 !
NULL
) {

2803 
i
 = 0; i < 
msg
->
num_™swîs
; i++) {

2804 i‡(
msg
->
™swîs
[
i
].
πy≥
 =
MG_DNS_A_RECORD
) {

2809 
mg_dns_∑r£_ªc‹d_d©a
(
msg
, &msg->
™swîs
[
i
], &
nc
->
ß
.
sö
.
sö_addr
,

2811 
mg_do_c⁄√˘
(
nc
,Çc->
Êags
 & 
MG_F_UDP
 ? 
SOCK_DGRAM
 : 
SOCK_STREAM
,

2812 &
nc
->
ß
);

2818 i‡(
e
 =
MG_RESOLVE_TIMEOUT
) {

2819 
now
 = 
mg_time
();

2820 
mg_ˇŒ
(
nc
, 
NULL
,Çc->
u£r_d©a
, 
MG_EV_TIMER
, &
now
);

2826 
mg_ˇŒ
(
nc
, 
NULL
,Çc->
u£r_d©a
, 
MG_EV_CONNECT
, &
Áûuª
);

2827 
mg_ˇŒ
(
nc
, 
NULL
,Çc->
u£r_d©a
, 
MG_EV_CLOSE
, NULL);

2828 
mg_de°roy_c⁄n
(
nc
, 1 );

2832 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘
(
mg_mgr
 *
mgr
, c⁄° *
addªss
,

2833 
MG_CB
(
mg_evít_h™dÀr_t
 
ˇŒback
,

2834 *
u£r_d©a
)) {

2835 
mg_c⁄√˘_›ts
 
›ts
;

2836 
mem£t
(&
›ts
, 0, (opts));

2837  
mg_c⁄√˘_›t
(
mgr
, 
addªss
, 
MG_CB
(
ˇŒback
, 
u£r_d©a
), 
›ts
);

2840 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_›t
(
mg_mgr
 *
mgr
, c⁄° *
addªss
,

2841 
MG_CB
(
mg_evít_h™dÀr_t
 
ˇŒback
,

2842 *
u£r_d©a
),

2843 
mg_c⁄√˘_›ts
 
›ts
) {

2844 
mg_c⁄√˘i⁄
 *
nc
 = 
NULL
;

2845 
¥Ÿo
, 
rc
;

2846 
mg_add_sock_›ts
 
add_sock_›ts
;

2847 
ho°
[
MG_MAX_HOST_LEN
];

2849 
MG_COPY_COMMON_CONNECTION_OPTIONS
(&
add_sock_›ts
, &
›ts
);

2851 i‡((
nc
 = 
mg_¸óã_c⁄√˘i⁄
(
mgr
, 
ˇŒback
, 
add_sock_›ts
)Ë=
NULL
) {

2852  
NULL
;

2855 i‡((
rc
 = 
mg_∑r£_addªss
(
addªss
, &
nc
->
ß
, &
¥Ÿo
, 
ho°
, (host))) <

2858 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "cannotÖarseáddress");

2859 
mg_de°roy_c⁄n
(
nc
, 1 );

2860  
NULL
;

2863 
nc
->
Êags
 |
›ts
.Êag†& 
_MG_ALLOWED_CONNECT_FLAGS_MASK
;

2864 
nc
->
Êags
 |(
¥Ÿo
 =
SOCK_DGRAM
Ë? 
MG_F_UDP
 : 0;

2865 #i‡
MG_ENABLE_CALLBACK_USERDATA


2866 
nc
->
u£r_d©a
 = user_data;

2868 
nc
->
u£r_d©a
 = 
›ts
.user_data;

2871 #i‡
MG_ENABLE_SSL


2872 
DBG
(("%∞%†%s,%s,%s", 
nc
, 
addªss
, (
›ts
.
s¶_˚π
 ? opts.ssl_cert : "-"),

2873 (
›ts
.
s¶_key
 ? opts.ssl_key : "-"),

2874 (
›ts
.
s¶_ˇ_˚π
 ? opts.ssl_ca_cert : "-")));

2876 i‡(
›ts
.
s¶_˚π
 !
NULL
 || o±s.
s¶_ˇ_˚π
 != NULL ||

2877 
›ts
.
s¶_psk_idítôy
 !
NULL
) {

2878 c⁄° *
îr_msg
 = 
NULL
;

2879 
mg_s¶_if_c⁄n_∑øms
 
∑øms
;

2880 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

2881 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "SSL for UDP isÇot supported");

2882 
mg_de°roy_c⁄n
(
nc
, 1 );

2883  
NULL
;

2885 
mem£t
(&
∑øms
, 0, (params));

2886 
∑øms
.
˚π
 = 
›ts
.
s¶_˚π
;

2887 
∑øms
.
key
 = 
›ts
.
s¶_key
;

2888 
∑øms
.
ˇ_˚π
 = 
›ts
.
s¶_ˇ_˚π
;

2889 
∑øms
.
cùhî_suôes
 = 
›ts
.
s¶_cùhî_suôes
;

2890 
∑øms
.
psk_idítôy
 = 
›ts
.
s¶_psk_idítôy
;

2891 
∑øms
.
psk_key
 = 
›ts
.
s¶_psk_key
;

2892 i‡(
›ts
.
s¶_ˇ_˚π
 !
NULL
) {

2893 i‡(
›ts
.
s¶_£rvî_«me
 !
NULL
) {

2894 i‡(
°rcmp
(
›ts
.
s¶_£rvî_«me
, "*") != 0) {

2895 
∑øms
.
£rvî_«me
 = 
›ts
.
s¶_£rvî_«me
;

2897 } i‡(
rc
 == 0) {

2898 
∑øms
.
£rvî_«me
 = 
ho°
;

2901 i‡(
mg_s¶_if_c⁄n_öô
(
nc
, &
∑øms
, &
îr_msg
Ë!
MG_SSL_OK
) {

2902 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, 
îr_msg
);

2903 
mg_de°roy_c⁄n
(
nc
, 1 );

2904  
NULL
;

2906 
nc
->
Êags
 |
MG_F_SSL
;

2910 i‡(
rc
 == 0) {

2911 #i‡
MG_ENABLE_ASYNC_RESOLVER


2916 
mg_c⁄√˘i⁄
 *
dns_c⁄n
 = 
NULL
;

2917 
mg_ªsﬁve_async_›ts
 
o
;

2918 
mem£t
(&
o
, 0, (o));

2919 
o
.
dns_c⁄n
 = &dns_conn;

2920 
o
.
«me£rvî
 = 
›ts
.nameserver;

2921 i‡(
mg_ªsﬁve_async_›t
(
nc
->
mgr
, 
ho°
, 
MG_DNS_A_RECORD
, 
ªsﬁve_cb
,Çc,

2922 
o
) != 0) {

2923 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "cannot schedule DNSÜookup");

2924 
mg_de°roy_c⁄n
(
nc
, 1 );

2925  
NULL
;

2927 
nc
->
¥iv_2
 = 
dns_c⁄n
;

2928 
nc
->
Êags
 |
MG_F_RESOLVING
;

2929  
nc
;

2931 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "Resolver is disabled");

2932 
mg_de°roy_c⁄n
(
nc
, 1 );

2933  
NULL
;

2937  
mg_do_c⁄√˘
(
nc
, 
¥Ÿo
, &nc->
ß
);

2941 
mg_c⁄√˘i⁄
 *
mg_böd
(
mg_mgr
 *
§v
, c⁄° *
addªss
,

2942 
MG_CB
(
mg_evít_h™dÀr_t
 
evít_h™dÀr
,

2943 *
u£r_d©a
)) {

2944 
mg_böd_›ts
 
›ts
;

2945 
mem£t
(&
›ts
, 0, (opts));

2946  
mg_böd_›t
(
§v
, 
addªss
, 
MG_CB
(
evít_h™dÀr
, 
u£r_d©a
), 
›ts
);

2949 
mg_c⁄√˘i⁄
 *
mg_böd_›t
(
mg_mgr
 *
mgr
, c⁄° *
addªss
,

2950 
MG_CB
(
mg_evít_h™dÀr_t
 
ˇŒback
,

2951 *
u£r_d©a
),

2952 
mg_böd_›ts
 
›ts
) {

2953 
sockë_addªss
 
ß
;

2954 
mg_c⁄√˘i⁄
 *
nc
 = 
NULL
;

2955 
¥Ÿo
, 
rc
;

2956 
mg_add_sock_›ts
 
add_sock_›ts
;

2957 
ho°
[
MG_MAX_HOST_LEN
];

2959 #i‡
MG_ENABLE_CALLBACK_USERDATA


2960 
›ts
.
u£r_d©a
 = user_data;

2963 i‡(
ˇŒback
 =
NULL
) {

2964 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "handler isÑequired");

2965  
NULL
;

2968 
MG_COPY_COMMON_CONNECTION_OPTIONS
(&
add_sock_›ts
, &
›ts
);

2970 i‡(
mg_∑r£_addªss
(
addªss
, &
ß
, &
¥Ÿo
, 
ho°
, (host)) <= 0) {

2971 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "cannotÖarseáddress");

2972  
NULL
;

2975 
nc
 = 
mg_¸óã_c⁄√˘i⁄
(
mgr
, 
ˇŒback
, 
add_sock_›ts
);

2976 i‡(
nc
 =
NULL
) {

2977  
NULL
;

2980 
nc
->
ß
 = sa;

2981 
nc
->
Êags
 |
MG_F_LISTENING
;

2982 i‡(
¥Ÿo
 =
SOCK_DGRAM
Ë
nc
->
Êags
 |
MG_F_UDP
;

2984 #i‡
MG_ENABLE_SSL


2985 
DBG
(("%∞%†%s,%s,%s", 
nc
, 
addªss
, (
›ts
.
s¶_˚π
 ? opts.ssl_cert : "-"),

2986 (
›ts
.
s¶_key
 ? opts.ssl_key : "-"),

2987 (
›ts
.
s¶_ˇ_˚π
 ? opts.ssl_ca_cert : "-")));

2989 i‡(
›ts
.
s¶_˚π
 !
NULL
 || o±s.
s¶_ˇ_˚π
 != NULL) {

2990 c⁄° *
îr_msg
 = 
NULL
;

2991 
mg_s¶_if_c⁄n_∑øms
 
∑øms
;

2992 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

2993 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "SSL for UDP isÇot supported");

2994 
mg_de°roy_c⁄n
(
nc
, 1 );

2995  
NULL
;

2997 
mem£t
(&
∑øms
, 0, (params));

2998 
∑øms
.
˚π
 = 
›ts
.
s¶_˚π
;

2999 
∑øms
.
key
 = 
›ts
.
s¶_key
;

3000 
∑øms
.
ˇ_˚π
 = 
›ts
.
s¶_ˇ_˚π
;

3001 
∑øms
.
cùhî_suôes
 = 
›ts
.
s¶_cùhî_suôes
;

3002 i‡(
mg_s¶_if_c⁄n_öô
(
nc
, &
∑øms
, &
îr_msg
Ë!
MG_SSL_OK
) {

3003 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, 
îr_msg
);

3004 
mg_de°roy_c⁄n
(
nc
, 1 );

3005  
NULL
;

3007 
nc
->
Êags
 |
MG_F_SSL
;

3011 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

3012 
rc
 = 
nc
->
iÁ˚
->
vèbÀ
->
li°í_udp
“c, &nc->
ß
);

3014 
rc
 = 
nc
->
iÁ˚
->
vèbÀ
->
li°í_t˝
“c, &nc->
ß
);

3016 i‡(
rc
 != 0) {

3017 
DBG
(("FaûedÅÿ›íÜi°íî: %d", 
rc
));

3018 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "failedÅo openÜistener");

3019 
mg_de°roy_c⁄n
(
nc
, 1 );

3020  
NULL
;

3022 
mg_add_c⁄n
(
nc
->
mgr
,Çc);

3024  
nc
;

3027 
mg_c⁄√˘i⁄
 *
mg_√xt
(
mg_mgr
 *
s
, mg_c⁄√˘i⁄ *
c⁄n
) {

3028  
c⁄n
 =
NULL
 ? 
s
->
a˘ive_c⁄√˘i⁄s
 : c⁄n->
√xt
;

3031 #i‡
MG_ENABLE_BROADCAST


3032 
mg_brﬂdˇ°
(
mg_mgr
 *
mgr
, 
mg_evít_h™dÀr_t
 
cb
, *
d©a
,

3033 
size_t
 
Àn
) {

3034 
˘l_msg
 ctl_msg;

3043 i‡(
mgr
->
˘l
[0] !
INVALID_SOCKET
 && 
d©a
 !
NULL
 &&

3044 
Àn
 < (
˘l_msg
.
mesßge
)) {

3045 
size_t
 
dummy
;

3047 
˘l_msg
.
ˇŒback
 = 
cb
;

3048 
mem˝y
(
˘l_msg
.
mesßge
, 
d©a
, 
Àn
);

3049 
dummy
 = 
MG_SEND_FUNC
(
mgr
->
˘l
[0], (*Ë&
˘l_msg
,

3050 
off£tof
(
˘l_msg
, 
mesßge
Ë+ 
Àn
, 0);

3051 
dummy
 = 
MG_RECV_FUNC
(
mgr
->
˘l
[0], (*Ë&
Àn
, 1, 0);

3052 (Ë
dummy
;

3057 
isbyã
(
n
) {

3058  
n
 >= 0 &&Ç <= 255;

3061 
∑r£_√t
(c⁄° *
•ec
, 
uöt32_t
 *
√t
, uöt32_à*
mask
) {

3062 
n
, 
a
, 
b
, 
c
, 
d
, 
¶ash
 = 32, 
Àn
 = 0;

3064 i‡((
ssˇnf
(
•ec
, "%d.%d.%d.%d/%d%n", &
a
, &
b
, &
c
, &
d
, &
¶ash
, &
n
) == 5 ||

3065 
ssˇnf
(
•ec
, "%d.%d.%d.%d%n", &
a
, &
b
, &
c
, &
d
, &
n
) == 4) &&

3066 
isbyã
(
a
Ë&& isbyã(
b
Ë&& isbyã(
c
Ë&& isbyã(
d
Ë&& 
¶ash
 >= 0 &&

3067 
¶ash
 < 33) {

3068 
Àn
 = 
n
;

3069 *
√t
 =

3070 ((
uöt32_t
Ë
a
 << 24Ë| ((uöt32_tË
b
 << 16Ë| ((uöt32_tË
c
 << 8Ë| 
d
;

3071 *
mask
 = 
¶ash
 ? 0xffffffffU << (32 - slash) : 0;

3074  
Àn
;

3077 
mg_check_ù_a˛
(c⁄° *
a˛
, 
uöt32_t
 
ªmŸe_ù
) {

3078 
Ælowed
, 
Êag
;

3079 
uöt32_t
 
√t
, 
mask
;

3080 
mg_°r
 
vec
;

3083 
Ælowed
 = (
a˛
 =
NULL
 || *acl == '\0') ? '+' : '-';

3085 (
a˛
 = 
mg_√xt_comma_li°_íåy
◊˛, &
vec
, 
NULL
)) != NULL) {

3086 
Êag
 = 
vec
.
p
[0];

3087 i‡((
Êag
 != '+' && flag != '-') ||

3088 
∑r£_√t
(&
vec
.
p
[1], &
√t
, &
mask
) == 0) {

3092 i‡(
√t
 =(
ªmŸe_ù
 & 
mask
)) {

3093 
Ælowed
 = 
Êag
;

3097 
DBG
(("%08x %c", (Ë
ªmŸe_ù
, 
Ælowed
));

3098  
Ælowed
 == '+';

3102 
mg_f‹w¨d
(
mg_c⁄√˘i⁄
 *
‰om
, mg_c⁄√˘i⁄ *
to
) {

3103 
mg_£nd
(
to
, 
‰om
->
ªcv_mbuf
.
buf
, from->ªcv_mbuf.
Àn
);

3104 
mbuf_ªmove
(&
‰om
->
ªcv_mbuf
, from->ªcv_mbuf.
Àn
);

3107 
mg_£t_timî
(
mg_c⁄√˘i⁄
 *
c
, 
time°amp
) {

3108 
ªsu…
 = 
c
->
ev_timî_time
;

3109 
c
->
ev_timî_time
 = 
time°amp
;

3115 
DBG
(("%∞%∞%d -> %lu", 
c
, c->
¥iv_2
, (c->
Êags
 & 
MG_F_RESOLVING
 ? 1 : 0),

3116 (Ë
time°amp
));

3117 i‡((
c
->
Êags
 & 
MG_F_RESOLVING
Ë&& c->
¥iv_2
 !
NULL
) {

3118 ((
mg_c⁄√˘i⁄
 *Ë
c
->
¥iv_2
)->
ev_timî_time
 = 
time°amp
;

3120  
ªsu…
;

3123 
mg_sock_£t
(
mg_c⁄√˘i⁄
 *
nc
, 
sock_t
 
sock
) {

3124 i‡(
sock
 !
INVALID_SOCKET
) {

3125 
nc
->
iÁ˚
->
vèbÀ
->
sock_£t
“c, 
sock
);

3129 
mg_if_gë_c⁄n_addr
(
mg_c⁄√˘i⁄
 *
nc
, 
ªmŸe
,

3130 
sockë_addªss
 *
ß
) {

3131 
nc
->
iÁ˚
->
vèbÀ
->
gë_c⁄n_addr
“c, 
ªmŸe
, 
ß
);

3134 
mg_c⁄√˘i⁄
 *
mg_add_sock_›t
(
mg_mgr
 *
s
, 
sock_t
 
sock
,

3135 
MG_CB
(
mg_evít_h™dÀr_t
 
ˇŒback
,

3136 *
u£r_d©a
),

3137 
mg_add_sock_›ts
 
›ts
) {

3138 #i‡
MG_ENABLE_CALLBACK_USERDATA


3139 
›ts
.
u£r_d©a
 = user_data;

3142 
mg_c⁄√˘i⁄
 *
nc
 = 
mg_¸óã_c⁄√˘i⁄_ba£
(
s
, 
ˇŒback
, 
›ts
);

3143 i‡(
nc
 !
NULL
) {

3144 
mg_sock_£t
(
nc
, 
sock
);

3145 
mg_add_c⁄n
(
nc
->
mgr
,Çc);

3147  
nc
;

3150 
mg_c⁄√˘i⁄
 *
mg_add_sock
(
mg_mgr
 *
s
, 
sock_t
 
sock
,

3151 
MG_CB
(
mg_evít_h™dÀr_t
 
ˇŒback
,

3152 *
u£r_d©a
)) {

3153 
mg_add_sock_›ts
 
›ts
;

3154 
mem£t
(&
›ts
, 0, (opts));

3155  
mg_add_sock_›t
(
s
, 
sock
, 
MG_CB
(
ˇŒback
, 
u£r_d©a
), 
›ts
);

3158 
mg_time
() {

3159  
cs_time
();

3161 #ifde‡
MG_MODULE_LINES


3169 #i‚de‡
CS_MONGOOSE_SRC_NET_IF_SOCKET_H_


3170 
	#CS_MONGOOSE_SRC_NET_IF_SOCKET_H_


	)

3174 #ifde‡
__˝lu•lus


3178 #i‚de‡
MG_ENABLE_NET_IF_SOCKET


3179 
	#MG_ENABLE_NET_IF_SOCKET
 
MG_NET_IF
 =
MG_NET_IF_SOCKET


	)

3182 c⁄° 
mg_iÁ˚_vèbÀ
 
mg_sockë_iÁ˚_vèbÀ
;

3184 #ifde‡
__˝lu•lus


3189 #ifde‡
MG_MODULE_LINES


3197 #i‚de‡
CS_MONGOOSE_SRC_NET_IF_SOCKS_H_


3198 
	#CS_MONGOOSE_SRC_NET_IF_SOCKS_H_


	)

3200 #i‡
MG_ENABLE_SOCKS


3203 #ifde‡
__˝lu•lus


3207 c⁄° 
mg_iÁ˚_vèbÀ
 
mg_socks_iÁ˚_vèbÀ
;

3209 #ifde‡
__˝lu•lus


3214 #ifde‡
MG_MODULE_LINES


3221 c⁄° 
mg_iÁ˚_vèbÀ
 
mg_deÁu…_iÁ˚_vèbÀ
;

3223 c⁄° 
mg_iÁ˚_vèbÀ
 *
	gmg_iÁ˚s
[] = {

3224 &
mg_deÁu…_iÁ˚_vèbÀ
,

3227 
	gmg_num_iÁ˚s
 = (Ë((
mg_iÁ˚s
) / (mg_ifaces[0]));

3229 
mg_iÁ˚
 *
mg_if_¸óã_iÁ˚
(c⁄° 
mg_iÁ˚_vèbÀ
 *
vèbÀ
,

3230 
mg_mgr
 *
mgr
) {

3231 
mg_iÁ˚
 *
	giÁ˚
 = (mg_iÁ˚ *Ë
MG_CALLOC
(1, (*
iÁ˚
));

3232 
	giÁ˚
->
	gmgr
 = 
mgr
;

3233 
	giÁ˚
->
	gd©a
 = 
NULL
;

3234 
	giÁ˚
->
	gvèbÀ
 = 
vèbÀ
;

3235  
	giÁ˚
;

3238 
mg_iÁ˚
 *
mg_föd_iÁ˚
(
mg_mgr
 *
mgr
,

3239 c⁄° 
mg_iÁ˚_vèbÀ
 *
vèbÀ
,

3240 
mg_iÁ˚
 *
‰om
) {

3241 
	gi
 = 0;

3242 i‡(
	g‰om
 !
NULL
) {

3243 
i
 = 0; 
	gi
 < 
	gmgr
->
	gnum_iÁ˚s
; i++) {

3244 i‡(
	gmgr
->
	giÁ˚s
[
i
] =
‰om
) {

3245 
i
++;

3251 ; 
	gi
 < 
	gmgr
->
	gnum_iÁ˚s
; i++) {

3252 i‡(
	gmgr
->
	giÁ˚s
[
i
]->
	gvèbÀ
 =
vèbÀ
) {

3253  
mgr
->
iÁ˚s
[
i
];

3256  
	gNULL
;

3258 #ifde‡
MG_MODULE_LINES


3266 #i‡
MG_ENABLE_NET_IF_SOCKET


3272 
	#MG_TCP_RECV_BUFFER_SIZE
 1024

	)

3273 
	#MG_UDP_RECV_BUFFER_SIZE
 1500

	)

3275 
sock_t
 
mg_›í_li°íög_sockë
(
sockë_addªss
 *
ß
, 
ty≥
,

3276 
¥Ÿo
);

3277 #i‡
MG_ENABLE_SSL


3278 
mg_s¶_begö
(
mg_c⁄√˘i⁄
 *
nc
);

3281 
mg_£t_n⁄_blockög_mode
(
sock_t
 
sock
) {

3282 #ifde‡
_WIN32


3283 
	g⁄
 = 1;

3284 
io˘lsockë
(
sock
, 
FIONBIO
, &
⁄
);

3286 
	gÊags
 = 
f˙é
(
sock
, 
F_GETFL
, 0);

3287 
f˙é
(
sock
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

3291 
mg_is_îr‹
() {

3292 
	gîr
 = 
mg_gë_î∫o
();

3293  
	gîr
 !
EINPROGRESS
 && 
îr
 !
EWOULDBLOCK


3294 #i‚de‡
WINCE


3295 && 
îr
 !
EAGAIN
 &&Éº !
EINTR


3297 #ifde‡
_WIN32


3298 && 
WSAGëLa°Eº‹
(Ë!
WSAEINTR
 && WSAGëLa°Eº‹(Ë!
WSAEWOULDBLOCK


3303 
mg_sockë_if_c⁄√˘_t˝
(
mg_c⁄√˘i⁄
 *
nc
,

3304 c⁄° 
sockë_addªss
 *
ß
) {

3305 
	grc
, 
	g¥Ÿo
 = 0;

3306 
	gnc
->
	gsock
 = 
sockë
(
AF_INET
, 
SOCK_STREAM
, 
¥Ÿo
);

3307 i‡(
	gnc
->
	gsock
 =
INVALID_SOCKET
) {

3308 
nc
->
îr
 = 
mg_gë_î∫o
() ? mg_get_errno() : 1;

3311 #i‡!
deföed
(
MG_ESP8266
)

3312 
mg_£t_n⁄_blockög_mode
(
nc
->
sock
);

3314 
	grc
 = 
c⁄√˘
(
nc
->
sock
, &
ß
->ß, (ß->
sö
));

3315 
	gnc
->
	gîr
 = 
rc
 < 0 && 
mg_is_îr‹
(Ë? 
mg_gë_î∫o
() : 0;

3316 
DBG
(("%∞sock %dÑ¯%dÉºnÿ%dÉº %d", 
nc
,Çc->
sock
, 
rc
, 
mg_gë_î∫o
(),

3317 
nc
->
îr
));

3320 
mg_sockë_if_c⁄√˘_udp
(
mg_c⁄√˘i⁄
 *
nc
) {

3321 
	gnc
->
	gsock
 = 
sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

3322 i‡(
	gnc
->
	gsock
 =
INVALID_SOCKET
) {

3323 
nc
->
îr
 = 
mg_gë_î∫o
() ? mg_get_errno() : 1;

3326 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_ENABLE_BROADCAST
) {

3327 
	g›tvÆ
 = 1;

3328 i‡(
£tsock›t
(
nc
->
sock
, 
SOL_SOCKET
, 
SO_BROADCAST
, (c⁄° *Ë&
›tvÆ
,

3329 (
›tvÆ
)) < 0) {

3330 
	gnc
->
	gîr
 = 
mg_gë_î∫o
() ? mg_get_errno() : 1;

3334 
	gnc
->
	gîr
 = 0;

3337 
mg_sockë_if_li°í_t˝
(
mg_c⁄√˘i⁄
 *
nc
,

3338 
sockë_addªss
 *
ß
) {

3339 
	g¥Ÿo
 = 0;

3340 
sock_t
 
	gsock
 = 
mg_›í_li°íög_sockë
(
ß
, 
SOCK_STREAM
, 
¥Ÿo
);

3341 i‡(
	gsock
 =
INVALID_SOCKET
) {

3342  (
mg_gë_î∫o
() ? mg_get_errno() : 1);

3344 
mg_sock_£t
(
nc
, 
sock
);

3348 
mg_sockë_if_li°í_udp
(
mg_c⁄√˘i⁄
 *
nc
,

3349 
sockë_addªss
 *
ß
) {

3350 
sock_t
 
	gsock
 = 
mg_›í_li°íög_sockë
(
ß
, 
SOCK_DGRAM
, 0);

3351 i‡(
	gsock
 =
INVALID_SOCKET
Ë (
mg_gë_î∫o
() ? mg_get_errno() : 1);

3352 
mg_sock_£t
(
nc
, 
sock
);

3356 
mg_sockë_if_t˝_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
,

3357 
size_t
 
Àn
) {

3358 
mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

3361 
mg_sockë_if_udp_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
,

3362 
size_t
 
Àn
) {

3363 
mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

3366 
mg_sockë_if_ªcved
(
mg_c⁄√˘i⁄
 *
nc
, 
size_t
 
Àn
) {

3367 (Ë
	gnc
;

3368 (Ë
	gÀn
;

3371 
mg_sockë_if_¸óã_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

3372 (Ë
	gnc
;

3376 
mg_sockë_if_de°roy_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

3377 i‡(
	gnc
->
	gsock
 =
INVALID_SOCKET
) ;

3378 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
)) {

3379 
˛o£sockë
(
nc
->
sock
);

3382 i‡(
	gnc
->
	gli°íî
 =
NULL
Ë
˛o£sockë
(
nc
->
sock
);

3384 
	gnc
->
	gsock
 = 
INVALID_SOCKET
;

3387 
mg_ac˚±_c⁄n
(
mg_c⁄√˘i⁄
 *
lc
) {

3388 
mg_c⁄√˘i⁄
 *
	gnc
;

3389 
sockë_addªss
 
	gß
;

3390 
sockÀn_t
 
	gß_Àn
 = (
ß
);

3392 
sock_t
 
	gsock
 = 
ac˚±
(
lc
->
sock
, &
ß
.ß, &
ß_Àn
);

3393 i‡(
	gsock
 =
INVALID_SOCKET
) {

3394 i‡(
mg_is_îr‹
()Ë
DBG
(("%p: faûedÅÿac˚±: %d", 
lc
, 
mg_gë_î∫o
()));

3397 
	gnc
 = 
mg_if_ac˚±_√w_c⁄n
(
lc
);

3398 i‡(
	gnc
 =
NULL
) {

3399 
˛o£sockë
(
sock
);

3402 
DBG
(("%∞c⁄¿‰om %s:%d", 
nc
, 
öë_¡ﬂ
(
ß
.
sö
.
sö_addr
),

3403 
¡ohs
(
ß
.
sö
.
sö_p‹t
)));

3404 
mg_sock_£t
(
nc
, 
sock
);

3405 #i‡
MG_ENABLE_SSL


3406 i‡(
	glc
->
	gÊags
 & 
	gMG_F_SSL
) {

3407 i‡(
mg_s¶_if_c⁄n_ac˚±
(
nc
, 
lc
Ë!
MG_SSL_OK
Ë
mg_˛o£_c⁄n
(nc);

3411 
mg_if_ac˚±_t˝_cb
(
nc
, &
ß
, 
ß_Àn
);

3417 
sock_t
 
mg_›í_li°íög_sockë
(
sockë_addªss
 *
ß
, 
ty≥
,

3418 
¥Ÿo
) {

3419 
sockÀn_t
 
	gß_Àn
 =

3420 (
ß
->ß.
ß_Ámûy
 =
AF_INET
Ë? (ß->
sö
Ë: (ß->
sö6
);

3421 
sock_t
 
	gsock
 = 
INVALID_SOCKET
;

3422 #i‡!
MG_LWIP


3423 
	g⁄
 = 1;

3426 i‡((
	gsock
 = 
sockë
(
ß
->ß.
ß_Ámûy
, 
ty≥
, 
¥Ÿo
)Ë!
INVALID_SOCKET
 &&

3427 #i‡!
MG_LWIP


3428 #i‡
deföed
(
_WIN32
Ë&& deföed(
SO_EXCLUSIVEADDRUSE
Ë&& !deföed(
WINCE
)

3430 !
£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_EXCLUSIVEADDRUSE
, (*Ë&
⁄
,

3431 (
⁄
)) &&

3434 #i‡!
deföed
(
_WIN32
Ë|| !deföed(
SO_EXCLUSIVEADDRUSE
)

3444 !
£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
⁄
, (on)) &&

3448 !
böd
(
sock
, &
ß
->ß, 
ß_Àn
) &&

3449 (
	gty≥
 =
SOCK_DGRAM
 || 
li°í
(
sock
, 
SOMAXCONN
) == 0)) {

3450 #i‡!
MG_LWIP


3451 
mg_£t_n⁄_blockög_mode
(
sock
);

3453 (Ë
gësock«me
(
sock
, &
ß
->ß, &
ß_Àn
);

3455 } i‡(
	gsock
 !
INVALID_SOCKET
) {

3456 
˛o£sockë
(
sock
);

3457 
	gsock
 = 
INVALID_SOCKET
;

3460  
	gsock
;

3463 
mg_wrôe_to_sockë
(
mg_c⁄√˘i⁄
 *
nc
) {

3464 
mbuf
 *
	gio
 = &
nc
->
£nd_mbuf
;

3465 
	gn
 = 0;

3467 #i‡
MG_LWIP


3469 i‡(
	gio
->
	gÀn
 == 0) ;

3472 
as£π
(
io
->
Àn
 > 0);

3474 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
) {

3475 
	gn
 =

3476 
£ndto
(
nc
->
sock
, 
io
->
buf
, io->
Àn
, 0, &nc->
ß
.ß, “c->ß.
sö
));

3477 
DBG
(("%∞%d %d %d %s:%hu", 
nc
,Çc->
sock
, 
n
, 
mg_gë_î∫o
(),

3478 
öë_¡ﬂ
(
nc
->
ß
.
sö
.
sö_addr
), 
¡ohs
“c->ß.sö.
sö_p‹t
)));

3479 
mg_if_£¡_cb
(
nc
, 
n
);

3483 #i‡
MG_ENABLE_SSL


3484 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_SSL
) {

3485 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_SSL_HANDSHAKE_DONE
) {

3486 
	gn
 = 
mg_s¶_if_wrôe
(
nc
, 
io
->
buf
, io->
Àn
);

3487 
DBG
(("%∞%d byã†-> %d (SSL)", 
nc
, 
n
,Çc->
sock
));

3488 i‡(
	gn
 < 0) {

3489 i‡(
	gn
 !
MG_SSL_WANT_READ
 && 
n
 !
MG_SSL_WANT_WRITE
) {

3490 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

3495 
	gnc
->
	gÊags
 &~(
MG_F_WANT_READ
 | 
MG_F_WANT_WRITE
);

3498 
mg_s¶_begö
(
nc
);

3504 
	gn
 = (Ë
MG_SEND_FUNC
(
nc
->
sock
, 
io
->
buf
, io->
Àn
, 0);

3505 
DBG
(("%∞%d byã†-> %d", 
nc
, 
n
,Çc->
sock
));

3508 
mg_if_£¡_cb
(
nc
, 
n
);

3511 
MG_INTERNAL
 
size_t
 
ªcv_avaû_size
(
mg_c⁄√˘i⁄
 *
c⁄n
, size_à
max
) {

3512 
size_t
 
	gavaû
;

3513 i‡(
	gc⁄n
->
	gªcv_mbuf_limô
 < c⁄n->
	gªcv_mbuf
.
	gÀn
)  0;

3514 
	gavaû
 = 
c⁄n
->
ªcv_mbuf_limô
 - c⁄n->
ªcv_mbuf
.
Àn
;

3515  
	gavaû
 > 
	gmax
 ? max : 
avaû
;

3518 
mg_h™dÀ_t˝_ªad
(
mg_c⁄√˘i⁄
 *
c⁄n
) {

3519 
	gn
 = 0;

3520 *
	gbuf
 = (*Ë
MG_MALLOC
(
MG_TCP_RECV_BUFFER_SIZE
);

3522 i‡(
	gbuf
 =
NULL
) {

3523 
DBG
(("OOM"));

3527 #i‡
MG_ENABLE_SSL


3528 i‡(
	gc⁄n
->
	gÊags
 & 
	gMG_F_SSL
) {

3529 i‡(
	gc⁄n
->
	gÊags
 & 
	gMG_F_SSL_HANDSHAKE_DONE
) {

3533 (
	gn
 = 
mg_s¶_if_ªad
(
c⁄n
, 
buf
, 
MG_TCP_RECV_BUFFER_SIZE
)) > 0) {

3534 
DBG
(("%∞%d byã†<- %d (SSL)", 
c⁄n
, 
n
, c⁄n->
sock
));

3535 
mg_if_ªcv_t˝_cb
(
c⁄n
, 
buf
, 
n
, 1 );

3536 
	gbuf
 = 
NULL
;

3537 i‡(
	gc⁄n
->
	gÊags
 & 
	gMG_F_CLOSE_IMMEDIATELY
) ;

3539 
	gbuf
 = (*Ë
MG_MALLOC
(
MG_TCP_RECV_BUFFER_SIZE
);

3540 i‡(
	gbuf
 =
NULL
) ;

3542 
MG_FREE
(
buf
);

3543 i‡(
	gn
 < 0 &&Ç !
MG_SSL_WANT_READ
Ë
c⁄n
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

3545 
MG_FREE
(
buf
);

3546 
mg_s¶_begö
(
c⁄n
);

3552 
	gn
 = (Ë
MG_RECV_FUNC
(
c⁄n
->
sock
, 
buf
,

3553 
ªcv_avaû_size
(
c⁄n
, 
MG_TCP_RECV_BUFFER_SIZE
), 0);

3554 
DBG
(("%∞%d byã†(PLAINË<- %d", 
c⁄n
, 
n
, c⁄n->
sock
));

3555 i‡(
	gn
 > 0) {

3556 
mg_if_ªcv_t˝_cb
(
c⁄n
, 
buf
, 
n
, 1 );

3558 
MG_FREE
(
buf
);

3560 i‡(
	gn
 == 0) {

3562 
c⁄n
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

3563 } i‡(
	gn
 < 0 && 
mg_is_îr‹
()) {

3564 
	gc⁄n
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

3569 
mg_ªcv‰om
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
,

3570 
sockÀn_t
 *
ß_Àn
, **
buf
) {

3571 
	gn
;

3572 *
	gbuf
 = (*Ë
MG_MALLOC
(
MG_UDP_RECV_BUFFER_SIZE
);

3573 i‡(*
	gbuf
 =
NULL
) {

3574 
DBG
(("Out of memory"));

3575  -
	gENOMEM
;

3577 
	gn
 = 
ªcv‰om
(
nc
->
sock
, *
buf
, 
MG_UDP_RECV_BUFFER_SIZE
, 0, &
ß
->ß, 
ß_Àn
);

3578 i‡(
	gn
 <= 0) {

3579 
DBG
(("%∞ªcv‰om: %s", 
nc
, 
°ªº‹
(
mg_gë_î∫o
())));

3580 
MG_FREE
(*
buf
);

3582  
	gn
;

3585 
mg_h™dÀ_udp_ªad
(
mg_c⁄√˘i⁄
 *
nc
) {

3586 *
	gbuf
 = 
NULL
;

3587 
sockë_addªss
 
	gß
;

3588 
sockÀn_t
 
	gß_Àn
 = (
ß
);

3589 
	gn
 = 
mg_ªcv‰om
(
nc
, &
ß
, &
ß_Àn
, &
buf
);

3590 
DBG
(("%∞%d byã†‰om %s:%d", 
nc
, 
n
, 
öë_¡ﬂ
“c->
ß
.
sö
.
sö_addr
),

3591 
¡ohs
(
nc
->
ß
.
sö
.
sö_p‹t
)));

3592 
mg_if_ªcv_udp_cb
(
nc
, 
buf
, 
n
, &
ß
, 
ß_Àn
);

3595 #i‡
MG_ENABLE_SSL


3596 
mg_s¶_begö
(
mg_c⁄√˘i⁄
 *
nc
) {

3597 
	g£rvî_side
 = (
nc
->
li°íî
 !
NULL
);

3598 
mg_s¶_if_ªsu…
 
	gªs
 = 
mg_s¶_if_h™dshake
(
nc
);

3599 
DBG
(("%∞%dÑe†%d", 
nc
, 
£rvî_side
, 
ªs
));

3601 i‡(
	gªs
 =
MG_SSL_OK
) {

3602 
nc
->
Êags
 |
MG_F_SSL_HANDSHAKE_DONE
;

3603 
	gnc
->
	gÊags
 &~(
MG_F_WANT_READ
 | 
MG_F_WANT_WRITE
);

3605 i‡(
	g£rvî_side
) {

3606 
sockë_addªss
 
	gß
;

3607 
sockÀn_t
 
	gß_Àn
 = (
ß
);

3608 (Ë
gë≥î«me
(
nc
->
sock
, &
ß
.ß, &
ß_Àn
);

3609 
mg_if_ac˚±_t˝_cb
(
nc
, &
ß
, 
ß_Àn
);

3611 
mg_if_c⁄√˘_cb
(
nc
, 0);

3613 } i‡(
	gªs
 !
MG_SSL_WANT_READ
 && 
ªs
 !
MG_SSL_WANT_WRITE
) {

3614 i‡(!
£rvî_side
) {

3615 
mg_if_c⁄√˘_cb
(
nc
, 
ªs
);

3617 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

3622 
	#_MG_F_FD_CAN_READ
 1

	)

3623 
	#_MG_F_FD_CAN_WRITE
 1 << 1

	)

3624 
	#_MG_F_FD_ERROR
 1 << 2

	)

3626 
mg_mgr_h™dÀ_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
, 
fd_Êags
, 
now
) {

3627 
	gw‹th_loggög
 =

3628 
fd_Êags
 !0 || (
nc
->
Êags
 & (
MG_F_WANT_READ
 | 
MG_F_WANT_WRITE
));

3629 i‡(
	gw‹th_loggög
) {

3630 
DBG
(("%∞fd=%d fd_Êags=%dÇc_Êags=%luÑmbl=%d smbl=%d", 
nc
,Çc->
sock
,

3631 
fd_Êags
, 
nc
->
Êags
, (Ënc->
ªcv_mbuf
.
Àn
,

3632 (Ë
nc
->
£nd_mbuf
.
Àn
));

3635 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_CONNECTING
) {

3636 i‡(
	gfd_Êags
 != 0) {

3637 
îr
 = 0;

3638 #i‡!
deföed
(
MG_ESP8266
)

3639 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
)) {

3640 
sockÀn_t
 
	gÀn
 = (
îr
);

3641 
	gªt
 =

3642 
gësock›t
(
nc
->
sock
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
);

3643 i‡(
	gªt
 != 0) {

3644 
îr
 = 1;

3645 } i‡(
	gîr
 =
EAGAIN
 || 
îr
 =
EWOULDBLOCK
) {

3646 
îr
 = 0;

3653 
	gîr
 = 
nc
->
îr
;

3655 #i‡
MG_ENABLE_SSL


3656 i‡((
	gnc
->
	gÊags
 & 
	gMG_F_SSL
Ë&& 
	gîr
 == 0) {

3657 
mg_s¶_begö
(
nc
);

3659 
mg_if_c⁄√˘_cb
(
nc
, 
îr
);

3662 
mg_if_c⁄√˘_cb
(
nc
, 
îr
);

3664 } i‡(
	gnc
->
	gîr
 != 0) {

3665 
mg_if_c⁄√˘_cb
(
nc
,Çc->
îr
);

3669 i‡(
	gfd_Êags
 & 
	g_MG_F_FD_CAN_READ
) {

3670 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
) {

3671 
mg_h™dÀ_udp_ªad
(
nc
);

3673 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_LISTENING
) {

3679 
mg_ac˚±_c⁄n
(
nc
);

3681 
mg_h™dÀ_t˝_ªad
(
nc
);

3686 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_CLOSE_IMMEDIATELY
)) {

3687 i‡((
	gfd_Êags
 & 
	g_MG_F_FD_CAN_WRITE
Ë&& 
	gnc
->
	g£nd_mbuf
.
	gÀn
 > 0) {

3688 
mg_wrôe_to_sockë
(
nc
);

3690 
mg_if_pﬁl
(
nc
, (
time_t
Ë
now
);

3691 
mg_if_timî
(
nc
, 
now
);

3694 i‡(
	gw‹th_loggög
) {

3695 
DBG
(("%∞a·î fd=%dÇc_Êags=%luÑmbl=%d smbl=%d", 
nc
,Çc->
sock
,Çc->
Êags
,

3696 (Ë
nc
->
ªcv_mbuf
.
Àn
, (Ënc->
£nd_mbuf
.len));

3700 #i‡
MG_ENABLE_BROADCAST


3701 
mg_mgr_h™dÀ_˘l_sock
(
mg_mgr
 *
mgr
) {

3702 
˘l_msg
 
	g˘l_msg
;

3703 
	gÀn
 =

3704 (Ë
MG_RECV_FUNC
(
mgr
->
˘l
[1], (*Ë&
˘l_msg
, (ctl_msg), 0);

3705 
size_t
 
	gdummy
 = 
MG_SEND_FUNC
(
mgr
->
˘l
[1], 
˘l_msg
.
mesßge
, 1, 0);

3706 
DBG
(("ªad %d from cé sockë", 
Àn
));

3707 (Ë
	gdummy
;

3708 i‡(
	gÀn
 >(Ë(
˘l_msg
.
ˇŒback
Ë&& cé_msg.ˇŒback !
NULL
) {

3709 
mg_c⁄√˘i⁄
 *
nc
;

3710 
	gnc
 = 
mg_√xt
(
mgr
, 
NULL
);Ç¯!NULL;Ç¯mg_√xt(mgr, 
nc
)) {

3711 
	g˘l_msg
.
ˇŒback
(
nc
, 
MG_EV_POLL
,

3712 
˘l_msg
.
mesßge
 
MG_UD_ARG
(
nc
->
u£r_d©a
));

3719 
mg_sockë_if_sock_£t
(
mg_c⁄√˘i⁄
 *
nc
, 
sock_t
 
sock
) {

3720 
mg_£t_n⁄_blockög_mode
(
sock
);

3721 
mg_£t_˛o£_⁄_exec
(
sock
);

3722 
	gnc
->
	gsock
 = 
sock
;

3723 
DBG
(("%∞%d", 
nc
, 
sock
));

3726 
mg_sockë_if_öô
(
mg_iÁ˚
 *
iÁ˚
) {

3727 (Ë
	giÁ˚
;

3728 
DBG
(("%∞usög sñe˘()", 
iÁ˚
->
mgr
));

3729 #i‡
MG_ENABLE_BROADCAST


3730 
mg_sockë∑ú
(
iÁ˚
->
mgr
->
˘l
, 
SOCK_DGRAM
);

3734 
mg_sockë_if_‰ì
(
mg_iÁ˚
 *
iÁ˚
) {

3735 (Ë
	giÁ˚
;

3738 
mg_sockë_if_add_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

3739 (Ë
	gnc
;

3742 
mg_sockë_if_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

3743 (Ë
	gnc
;

3746 
mg_add_to_£t
(
sock_t
 
sock
, 
fd_£t
 *
£t
, sock_à*
max_fd
) {

3747 i‡(
	gsock
 !
INVALID_SOCKET


3748 #ifde‡
__unix__


3749 && 
sock
 < (
sock_t
Ë
FD_SETSIZE


3752 
FD_SET
(
sock
, 
£t
);

3753 i‡(*
	gmax_fd
 =
INVALID_SOCKET
 || 
sock
 > *
max_fd
) {

3754 *
max_fd
 = 
sock
;

3759 
time_t
 
mg_sockë_if_pﬁl
(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
) {

3760 
mg_mgr
 *
	gmgr
 = 
iÁ˚
->
mgr
;

3761 
	gnow
 = 
mg_time
();

3762 
	gmö_timî
;

3763 
mg_c⁄√˘i⁄
 *
	gnc
, *
	gtmp
;

3764 
timevÆ
 
	gtv
;

3765 
fd_£t
 
	gªad_£t
, 
	gwrôe_£t
, 
	gîr_£t
;

3766 
sock_t
 
	gmax_fd
 = 
INVALID_SOCKET
;

3767 
	gnum_fds
, 
	gnum_ev
, 
	gnum_timîs
 = 0;

3768 #ifde‡
__unix__


3769 
	gåy_dup
 = 1;

3772 
FD_ZERO
(&
ªad_£t
);

3773 
FD_ZERO
(&
wrôe_£t
);

3774 
FD_ZERO
(&
îr_£t
);

3775 #i‡
MG_ENABLE_BROADCAST


3776 
mg_add_to_£t
(
mgr
->
˘l
[1], &
ªad_£t
, &
max_fd
);

3783 
	gmö_timî
 = 0;

3784 
	gnc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
, 
	gnum_fds
 = 0;Ç¯!
NULL
;Ç¯
tmp
) {

3785 
tmp
 = 
nc
->
√xt
;

3787 i‡(
	gnc
->
	gsock
 !
INVALID_SOCKET
) {

3788 
num_fds
++;

3790 #ifde‡
__unix__


3792 i‡(
	gnc
->
	gsock
 >(
sock_t
Ë
FD_SETSIZE
 && 
åy_dup
) {

3793 
√w_sock
 = 
dup
(
nc
->
sock
);

3794 i‡(
	g√w_sock
 >= 0) {

3795 i‡(
√w_sock
 < (
sock_t
Ë
FD_SETSIZE
) {

3796 
˛o£sockë
(
nc
->
sock
);

3797 
DBG
(("√w sock %d -> %d", 
nc
->
sock
, 
√w_sock
));

3798 
	gnc
->
	gsock
 = 
√w_sock
;

3800 
˛o£sockë
(
√w_sock
);

3801 
DBG
(("new sock is stillÜargerÅhan FD_SETSIZE, disregard"));

3802 
	gåy_dup
 = 0;

3805 
	gåy_dup
 = 0;

3810 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_WANT_WRITE
) &&

3811 
	gnc
->
	gªcv_mbuf
.
	gÀn
 <Çc->
	gªcv_mbuf_limô
 &&

3812 (!(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
Ë||Çc->
	gli°íî
 =
NULL
)) {

3813 
mg_add_to_£t
(
nc
->
sock
, &
ªad_£t
, &
max_fd
);

3816 i‡(((
	gnc
->
	gÊags
 & 
	gMG_F_CONNECTING
Ë&& !“c->Êag†& 
	gMG_F_WANT_READ
)) ||

3817 (
	gnc
->
	g£nd_mbuf
.
	gÀn
 > 0 && !“c->
	gÊags
 & 
	gMG_F_CONNECTING
))) {

3818 
mg_add_to_£t
(
nc
->
sock
, &
wrôe_£t
, &
max_fd
);

3819 
mg_add_to_£t
(
nc
->
sock
, &
îr_£t
, &
max_fd
);

3823 i‡(
	gnc
->
	gev_timî_time
 > 0) {

3824 i‡(
	gnum_timîs
 =0 || 
nc
->
ev_timî_time
 < 
mö_timî
) {

3825 
mö_timî
 = 
nc
->
ev_timî_time
;

3827 
	gnum_timîs
++;

3835 i‡(
	gnum_timîs
 > 0) {

3836 
	gtimî_timeout_ms
 = (
mö_timî
 - 
mg_time
()) * 1000 + 1 ;

3837 i‡(
	gtimî_timeout_ms
 < 
	gtimeout_ms
) {

3838 
	gtimeout_ms
 = (Ë
timî_timeout_ms
;

3841 i‡(
	gtimeout_ms
 < 0)Åimeout_ms = 0;

3843 
	gtv
.
	gtv_£c
 = 
timeout_ms
 / 1000;

3844 
	gtv
.
	gtv_u£c
 = (
timeout_ms
 % 1000) * 1000;

3846 
	gnum_ev
 = 
£À˘
((Ë
max_fd
 + 1, &
ªad_£t
, &
wrôe_£t
, &
îr_£t
, &
tv
);

3847 
	gnow
 = 
mg_time
();

3849 
DBG
(("£À˘ @ %ldÇum_ev=%d o‡%d,Åimeout=%d", (Ë
now
, 
num_ev
, 
num_fds
,

3850 
timeout_ms
));

3853 #i‡
MG_ENABLE_BROADCAST


3854 i‡(
	gnum_ev
 > 0 && 
	gmgr
->
	g˘l
[1] !
INVALID_SOCKET
 &&

3855 
FD_ISSET
(
mgr
->
˘l
[1], &
ªad_£t
)) {

3856 
mg_mgr_h™dÀ_˘l_sock
(
mgr
);

3860 
	gnc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

3861 
fd_Êags
 = 0;

3862 i‡(
	gnc
->
	gsock
 !
INVALID_SOCKET
) {

3863 i‡(
num_ev
 > 0) {

3864 
fd_Êags
 = (
FD_ISSET
(
nc
->
sock
, &
ªad_£t
) &&

3865 (!(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
Ë||Çc->
	gli°íî
 =
NULL
)

3866 ? 
_MG_F_FD_CAN_READ


3868 (
FD_ISSET
(
nc
->
sock
, &
wrôe_£t
Ë? 
	g_MG_F_FD_CAN_WRITE
 : 0) |

3869 (
FD_ISSET
(
nc
->
sock
, &
îr_£t
Ë? 
	g_MG_F_FD_ERROR
 : 0);

3871 #i‡
MG_LWIP


3873 i‡((
	gnc
->
	gÊags
 & 
	gMG_F_UDP
Ë&&Çc->
	gli°íî
 =
NULL
) {

3874 
fd_Êags
 |
_MG_F_FD_CAN_WRITE
;

3878 
	gtmp
 = 
nc
->
√xt
;

3879 
mg_mgr_h™dÀ_c⁄n
(
nc
, 
fd_Êags
, 
now
);

3882 
	gnc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

3883 
tmp
 = 
nc
->
√xt
;

3884 i‡((
	gnc
->
	gÊags
 & 
	gMG_F_CLOSE_IMMEDIATELY
) ||

3885 (
	gnc
->
	g£nd_mbuf
.
	gÀn
 =0 && (
nc
->
Êags
 & 
MG_F_SEND_AND_CLOSE
))) {

3886 
mg_˛o£_c⁄n
(
nc
);

3890  (
	gtime_t
Ë
	gnow
;

3893 #i‡
MG_ENABLE_BROADCAST


3894 
MG_INTERNAL
 
mg_sockë∑ú_˛o£
(
sock_t
 *
sock
) {

3896 i‡(
˛o£sockë
(*
sock
Ë=-1 && 
î∫o
 =
EINTR
) ;

3899 *
	gsock
 = 
INVALID_SOCKET
;

3902 
MG_INTERNAL
 
sock_t


3903 
mg_sockë∑ú_ac˚±
(
sock_t
 
sock
, 
sockë_addªss
 *
ß
, 
sockÀn_t
 
ß_Àn
) {

3904 
sock_t
 
	grc
;

3906 i‡((
	grc
 = 
ac˚±
(
sock
, &
ß
->ß, &
ß_Àn
)Ë=
INVALID_SOCKET
 &&

3907 
î∫o
 =
EINTR
)

3911  
	grc
;

3914 
mg_sockë∑ú
(
sock_t
 
•
[2], 
sock_ty≥
) {

3915 
sockë_addªss
 
	gß
;

3916 
sock_t
 
	gsock
;

3917 
sockÀn_t
 
	gÀn
 = (
ß
.
sö
);

3918 
	gªt
 = 0;

3920 
	gsock
 = 
•
[0] = sp[1] = 
INVALID_SOCKET
;

3922 (Ë
mem£t
(&
ß
, 0, (sa));

3923 
	gß
.
	gsö
.
	gsö_Ámûy
 = 
AF_INET
;

3924 
	gß
.
	gsö
.
	gsö_p‹t
 = 
ht⁄s
(0);

3925 
	gß
.
	gsö
.
	gsö_addr
.
	gs_addr
 = 
ht⁄l
(0x7f000001);

3927 i‡((
	gsock
 = 
sockë
(
AF_INET
, 
sock_ty≥
, 0)Ë=
INVALID_SOCKET
) {

3928 } i‡(
böd
(
sock
, &
ß
.ß, 
Àn
) != 0) {

3929 } i‡(
sock_ty≥
 =
SOCK_STREAM
 && 
li°í
(
sock
, 1) != 0) {

3930 } i‡(
gësock«me
(
sock
, &
ß
.ß, &
Àn
) != 0) {

3931 } i‡((
•
[0] = 
sockë
(
AF_INET
, 
sock_ty≥
, 0)Ë=
INVALID_SOCKET
) {

3932 } i‡(
c⁄√˘
(
•
[0], &
ß
.ß, 
Àn
) != 0) {

3933 } i‡(
sock_ty≥
 =
SOCK_DGRAM
 &&

3934 (
gësock«me
(
•
[0], &
ß
.ß, &
Àn
) != 0 ||

3935 
c⁄√˘
(
sock
, &
ß
.ß, 
Àn
) != 0)) {

3936 } i‡((
•
[1] = (
sock_ty≥
 =
SOCK_DGRAM
 ? 
sock
 : 
mg_sockë∑ú_ac˚±
(

3937 
sock
, &
ß
, 
Àn
))) ==

3938 
INVALID_SOCKET
) {

3940 
mg_£t_˛o£_⁄_exec
(
•
[0]);

3941 
mg_£t_˛o£_⁄_exec
(
•
[1]);

3942 i‡(
	gsock_ty≥
 =
SOCK_STREAM
Ë
mg_sockë∑ú_˛o£
(&
sock
);

3943 
	gªt
 = 1;

3946 i‡(!
	gªt
) {

3947 i‡(
	g•
[0] !
INVALID_SOCKET
Ë
mg_sockë∑ú_˛o£
(&
•
[0]);

3948 i‡(
	g•
[1] !
INVALID_SOCKET
Ë
mg_sockë∑ú_˛o£
(&
•
[1]);

3949 i‡(
	gsock
 !
INVALID_SOCKET
Ë
mg_sockë∑ú_˛o£
(&
sock
);

3952  
	gªt
;

3956 
mg_sock_gë_addr
(
sock_t
 
sock
, 
ªmŸe
,

3957 
sockë_addªss
 *
ß
) {

3958 
sockÀn_t
 
	g¶í
 = (*
ß
);

3959 
mem£t
(
ß
, 0, 
¶í
);

3960 i‡(
	gªmŸe
) {

3961 
gë≥î«me
(
sock
, &
ß
->ß, &
¶í
);

3963 
gësock«me
(
sock
, &
ß
->ß, &
¶í
);

3967 
mg_sock_to_°r
(
sock_t
 
sock
, *
buf
, 
size_t
 
Àn
, 
Êags
) {

3968 
sockë_addªss
 
	gß
;

3969 
mg_sock_gë_addr
(
sock
, 
Êags
 & 
MG_SOCK_STRINGIFY_REMOTE
, &
ß
);

3970 
mg_sock_addr_to_°r
(&
ß
, 
buf
, 
Àn
, 
Êags
);

3973 
mg_sockë_if_gë_c⁄n_addr
(
mg_c⁄√˘i⁄
 *
nc
, 
ªmŸe
,

3974 
sockë_addªss
 *
ß
) {

3975 i‡((
	gnc
->
	gÊags
 & 
	gMG_F_UDP
Ë&& 
	gªmŸe
) {

3976 
mem˝y
(
ß
, &
nc
->sa, (*sa));

3979 
mg_sock_gë_addr
(
nc
->
sock
, 
ªmŸe
, 
ß
);

3983 
	#MG_SOCKET_IFACE_VTABLE
 \

3985 
mg_sockë_if_öô
, \

3986 
mg_sockë_if_‰ì
, \

3987 
mg_sockë_if_add_c⁄n
, \

3988 
mg_sockë_if_ªmove_c⁄n
, \

3989 
mg_sockë_if_pﬁl
, \

3990 
mg_sockë_if_li°í_t˝
, \

3991 
mg_sockë_if_li°í_udp
, \

3992 
mg_sockë_if_c⁄√˘_t˝
, \

3993 
mg_sockë_if_c⁄√˘_udp
, \

3994 
mg_sockë_if_t˝_£nd
, \

3995 
mg_sockë_if_udp_£nd
, \

3996 
mg_sockë_if_ªcved
, \

3997 
mg_sockë_if_¸óã_c⁄n
, \

3998 
mg_sockë_if_de°roy_c⁄n
, \

3999 
mg_sockë_if_sock_£t
, \

4000 
mg_sockë_if_gë_c⁄n_addr
, \

4001 }

	)

4004 c⁄° 
mg_iÁ˚_vèbÀ
 
	gmg_sockë_iÁ˚_vèbÀ
 = 
MG_SOCKET_IFACE_VTABLE
;

4005 #i‡
MG_NET_IF
 =
MG_NET_IF_SOCKET


4006 c⁄° 
mg_iÁ˚_vèbÀ
 
	gmg_deÁu…_iÁ˚_vèbÀ
 = 
MG_SOCKET_IFACE_VTABLE
;

4010 #ifde‡
MG_MODULE_LINES


4018 #i‡
MG_ENABLE_SOCKS


4020 
	ssocksd©a
 {

4021 *
	g¥oxy_addr
;

4022 
mg_c⁄√˘i⁄
 *
	gs
;

4023 
mg_c⁄√˘i⁄
 *
	gc
;

4024 
mbuf
 
	gtmp
;

4027 
socks_if_disb™d
(
socksd©a
 *
d
) {

4028 
LOG
(
LL_DEBUG
, ("disb™dögÖroxy %∞%p", 
d
->
c
, d->
s
));

4029 i‡(
	gd
->
	gc
Ëd->c->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

4030 i‡(
	gd
->
	gs
Ëd->s->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

4031 
	gd
->
	gc
 = 
d
->
s
 = 
NULL
;

4034 
socks_if_h™dÀr
(
mg_c⁄√˘i⁄
 *
c
, 
ev
, *
ev_d©a
) {

4035 
socksd©a
 *
	gd
 = (socksd©®*Ë
c
->
u£r_d©a
;

4036 i‡(
	gev
 =
MG_EV_CONNECT
) {

4037 
ªs
 = *(*Ë
ev_d©a
;

4038 i‡(
	gªs
 == 0) {

4040 
buf
[] = {
MG_SOCKS_VERSION
, 1, 
MG_SOCKS_HANDSHAKE_NOAUTH
};

4041 
mg_£nd
(
d
->
s
, 
buf
, (buf));

4042 
LOG
(
LL_DEBUG
, ("Síàh™dshakêtÿ%s", 
d
->
¥oxy_addr
));

4044 
LOG
(
LL_ERROR
, ("C™nŸ c⁄√˘Åÿ%s: %d", 
d
->
¥oxy_addr
, 
ªs
));

4045 
	gd
->
	gc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

4047 } i‡(
	gev
 =
MG_EV_CLOSE
) {

4048 
socks_if_disb™d
(
d
);

4049 } i‡(
	gev
 =
MG_EV_RECV
) {

4051 i‡(!(
c
->
Êags
 & 
MG_SOCKS_HANDSHAKE_DONE
)) {

4053 
buf
[10] = {
MG_SOCKS_VERSION
, 
MG_SOCKS_CMD_CONNECT
, 0,

4054 
MG_SOCKS_ADDR_IPV4
};

4055 i‡(
	gc
->
	gªcv_mbuf
.
	gÀn
 < 2) ;

4056 i‡((Ë
	gc
->
	gªcv_mbuf
.
	gbuf
[1] =
MG_SOCKS_HANDSHAKE_FAILURE
) {

4057 
LOG
(
LL_ERROR
, ("Server kicked us out"));

4058 
socks_if_disb™d
(
d
);

4061 
mbuf_ªmove
(&
c
->
ªcv_mbuf
, 2);

4062 
	gc
->
	gÊags
 |
MG_SOCKS_HANDSHAKE_DONE
;

4065 
mem˝y
(
buf
 + 4, &
d
->
c
->
ß
.
sö
.
sö_addr
, 4);

4066 
mem˝y
(
buf
 + 8, &
d
->
c
->
ß
.
sö
.
sö_p‹t
, 2);

4067 
mg_£nd
(
c
, 
buf
, (buf));

4070 i‡((
	gc
->
	gÊags
 & 
	gMG_SOCKS_HANDSHAKE_DONE
) &&

4071 !(
	gc
->
	gÊags
 & 
	gMG_SOCKS_CONNECT_DONE
)) {

4072 i‡(
	gc
->
	gªcv_mbuf
.
	gÀn
 < 10) ;

4073 i‡(
	gc
->
	gªcv_mbuf
.
	gbuf
[1] !
MG_SOCKS_SUCCESS
) {

4074 
LOG
(
LL_ERROR
, ("Sock†c⁄√˘i⁄Éº‹: %d", 
c
->
ªcv_mbuf
.
buf
[1]));

4075 
socks_if_disb™d
(
d
);

4078 
mbuf_ªmove
(&
c
->
ªcv_mbuf
, 10);

4079 
	gc
->
	gÊags
 |
MG_SOCKS_CONNECT_DONE
;

4081 i‡(
	gd
->
	gs
 && d->
	gc
) {

4082 
mbuf_≠≥nd
(&
d
->
s
->
£nd_mbuf
, d->
tmp
.
buf
, d->tmp.
Àn
);

4083 
mbuf_‰ì
(&
d
->
tmp
);

4087 i‡((
	gc
->
	gÊags
 & 
	gMG_SOCKS_CONNECT_DONE
Ë&& 
	gd
->¯&& d->
	gs
) {

4088 
mbuf_≠≥nd
(&
d
->
c
->
ªcv_mbuf
, d->
s
->ªcv_mbuf.
buf
, d->s->ªcv_mbuf.
Àn
);

4089 
mbuf_ªmove
(&
d
->
s
->
ªcv_mbuf
, d->s->ªcv_mbuf.
Àn
);

4094 
mg_socks_if_c⁄√˘_t˝
(
mg_c⁄√˘i⁄
 *
c
,

4095 c⁄° 
sockë_addªss
 *
ß
) {

4096 
socksd©a
 *
	gd
 = (socksd©®*Ë
c
->
iÁ˚
->
d©a
;

4097 
	gd
->
	gc
 = 
c
;

4098 
	gd
->
	gs
 = 
mg_c⁄√˘
(
c
->
mgr
, 
d
->
¥oxy_addr
, 
socks_if_h™dÀr
);

4099 
	gd
->
	gs
->
	gu£r_d©a
 = 
d
;

4100 
LOG
(
LL_DEBUG
, ("%∞%s", 
c
, 
d
->
¥oxy_addr
));

4101 (Ë
	gß
;

4104 
mg_socks_if_c⁄√˘_udp
(
mg_c⁄√˘i⁄
 *
c
) {

4105 (Ë
	gc
;

4108 
mg_socks_if_li°í_t˝
(
mg_c⁄√˘i⁄
 *
c
,

4109 
sockë_addªss
 *
ß
) {

4110 (Ë
	gc
;

4111 (Ë
	gß
;

4115 
mg_socks_if_li°í_udp
(
mg_c⁄√˘i⁄
 *
c
,

4116 
sockë_addªss
 *
ß
) {

4117 (Ë
	gc
;

4118 (Ë
	gß
;

4122 
mg_socks_if_t˝_£nd
(
mg_c⁄√˘i⁄
 *
c
, c⁄° *
buf
,

4123 
size_t
 
Àn
) {

4124 
socksd©a
 *
	gd
 = (socksd©®*Ë
c
->
iÁ˚
->
d©a
;

4125 
LOG
(
LL_DEBUG
, ("%∞-> %∞%d %d", 
c
, 
buf
, (Ë
Àn
, (Ëc->
£nd_mbuf
.len));

4126 i‡(
	gd
 && d->
	gs
 && d->s->
	gÊags
 & 
	gMG_SOCKS_CONNECT_DONE
) {

4127 
mbuf_≠≥nd
(&
d
->
s
->
£nd_mbuf
, d->
tmp
.
buf
, d->tmp.
Àn
);

4128 
mbuf_≠≥nd
(&
d
->
s
->
£nd_mbuf
, 
buf
, 
Àn
);

4129 
mbuf_‰ì
(&
d
->
tmp
);

4131 
mbuf_≠≥nd
(&
d
->
tmp
, 
buf
, 
Àn
);

4135 
mg_socks_if_udp_£nd
(
mg_c⁄√˘i⁄
 *
c
, c⁄° *
buf
,

4136 
size_t
 
Àn
) {

4137 (Ë
	gc
;

4138 (Ë
	gbuf
;

4139 (Ë
	gÀn
;

4142 
mg_socks_if_ªcved
(
mg_c⁄√˘i⁄
 *
c
, 
size_t
 
Àn
) {

4143 (Ë
	gc
;

4144 (Ë
	gÀn
;

4147 
mg_socks_if_¸óã_c⁄n
(
mg_c⁄√˘i⁄
 *
c
) {

4148 (Ë
	gc
;

4152 
mg_socks_if_de°roy_c⁄n
(
mg_c⁄√˘i⁄
 *
c
) {

4153 
	gc
->
	giÁ˚
->
	gvèbÀ
->
‰ì
(
c
->
iÁ˚
);

4154 
MG_FREE
(
c
->
iÁ˚
);

4155 
	gc
->
	giÁ˚
 = 
NULL
;

4156 
LOG
(
LL_DEBUG
, ("%p", 
c
));

4159 
mg_socks_if_sock_£t
(
mg_c⁄√˘i⁄
 *
c
, 
sock_t
 
sock
) {

4160 (Ë
	gc
;

4161 (Ë
	gsock
;

4164 
mg_socks_if_öô
(
mg_iÁ˚
 *
iÁ˚
) {

4165 (Ë
	giÁ˚
;

4168 
mg_socks_if_‰ì
(
mg_iÁ˚
 *
iÁ˚
) {

4169 
socksd©a
 *
	gd
 = (socksd©®*Ë
iÁ˚
->
d©a
;

4170 
LOG
(
LL_DEBUG
, ("%p", 
iÁ˚
));

4171 i‡(
	gd
 !
NULL
) {

4172 
socks_if_disb™d
(
d
);

4173 
mbuf_‰ì
(&
d
->
tmp
);

4174 
MG_FREE
(
d
->
¥oxy_addr
);

4175 
MG_FREE
(
d
);

4176 
	giÁ˚
->
	gd©a
 = 
NULL
;

4180 
mg_socks_if_add_c⁄n
(
mg_c⁄√˘i⁄
 *
c
) {

4181 
	gc
->
	gsock
 = 
INVALID_SOCKET
;

4184 
mg_socks_if_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
c
) {

4185 (Ë
	gc
;

4188 
time_t
 
mg_socks_if_pﬁl
(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
) {

4189 
LOG
(
LL_DEBUG
, ("%p", 
iÁ˚
));

4190 (Ë
	giÁ˚
;

4191 (Ë
	gtimeout_ms
;

4192  (
	gtime_t
Ë
cs_time
();

4195 
mg_socks_if_gë_c⁄n_addr
(
mg_c⁄√˘i⁄
 *
c
, 
ªmŸe
,

4196 
sockë_addªss
 *
ß
) {

4197 
LOG
(
LL_DEBUG
, ("%p", 
c
));

4198 (Ë
	gc
;

4199 (Ë
	gªmŸe
;

4200 (Ë
	gß
;

4203 c⁄° 
mg_iÁ˚_vèbÀ
 
	gmg_socks_iÁ˚_vèbÀ
 = {

4204 
mg_socks_if_öô
, 
mg_socks_if_‰ì
,

4205 
mg_socks_if_add_c⁄n
, 
mg_socks_if_ªmove_c⁄n
,

4206 
mg_socks_if_pﬁl
, 
mg_socks_if_li°í_t˝
,

4207 
mg_socks_if_li°í_udp
, 
mg_socks_if_c⁄√˘_t˝
,

4208 
mg_socks_if_c⁄√˘_udp
, 
mg_socks_if_t˝_£nd
,

4209 
mg_socks_if_udp_£nd
, 
mg_socks_if_ªcved
,

4210 
mg_socks_if_¸óã_c⁄n
, 
mg_socks_if_de°roy_c⁄n
,

4211 
mg_socks_if_sock_£t
, 
mg_socks_if_gë_c⁄n_addr
,

4214 
mg_iÁ˚
 *
mg_socks_mk_iÁ˚
(
mg_mgr
 *
mgr
, c⁄° *
¥oxy_addr
) {

4215 
mg_iÁ˚
 *
	giÁ˚
 = 
mg_if_¸óã_iÁ˚
(&
mg_socks_iÁ˚_vèbÀ
, 
mgr
);

4216 
	giÁ˚
->
	gd©a
 = 
MG_CALLOC
(1, (
socksd©a
));

4217 ((
	gsocksd©a
 *Ë
	giÁ˚
->
	gd©a
)->
	g¥oxy_addr
 = 
°rdup
(
¥oxy_addr
);

4218  
	giÁ˚
;

4222 #ifde‡
MG_MODULE_LINES


4230 #i‡
MG_ENABLE_SSL
 && 
MG_SSL_IF
 =
MG_SSL_IF_OPENSSL


4232 #ifde‡
__APPLE__


4233 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wdeprecated-declarations"

4236 
	~<›ís¶/s¶.h
>

4238 
	smg_s¶_if_˘x
 {

4239 
SSL
 *
	gs¶
;

4240 
SSL_CTX
 *
	gs¶_˘x
;

4241 
mbuf
 
	gpsk
;

4242 
size_t
 
	gidítôy_Àn
;

4245 
mg_s¶_if_öô
() {

4246 
SSL_libøry_öô
();

4249 
mg_s¶_if_ªsu…
 
mg_s¶_if_c⁄n_ac˚±
(
mg_c⁄√˘i⁄
 *
nc
,

4250 
mg_c⁄√˘i⁄
 *
lc
) {

4251 
mg_s¶_if_˘x
 *
	g˘x
 =

4252 (
mg_s¶_if_˘x
 *Ë
MG_CALLOC
(1, (*
˘x
));

4253 
mg_s¶_if_˘x
 *
	glc_˘x
 = (mg_s¶_if_˘x *Ë
lc
->
s¶_if_d©a
;

4254 
	gnc
->
	gs¶_if_d©a
 = 
˘x
;

4255 i‡(
	g˘x
 =
NULL
 || 
lc_˘x
 =NULLË 
MG_SSL_ERROR
;

4256 
	g˘x
->
	gs¶_˘x
 = 
lc_˘x
->
s¶_˘x
;

4257 i‡((
	g˘x
->
	gs¶
 = 
SSL_√w
(
˘x
->
s¶_˘x
)Ë=
NULL
) {

4258  
MG_SSL_ERROR
;

4260  
	gMG_SSL_OK
;

4263 
mg_s¶_if_ªsu…
 
mg_u£_˚π
(
SSL_CTX
 *
˘x
, c⁄° *
˚π
,

4264 c⁄° *
key
, c⁄° **
îr_msg
);

4265 
mg_s¶_if_ªsu…
 
mg_u£_ˇ_˚π
(
SSL_CTX
 *
˘x
, c⁄° *
˚π
);

4266 
mg_s¶_if_ªsu…
 
mg_£t_cùhî_li°
(
SSL_CTX
 *
˘x
, c⁄° *
˛
);

4267 
mg_s¶_if_ªsu…
 
mg_s¶_if_os¶_£t_psk
(
mg_s¶_if_˘x
 *
˘x
,

4268 c⁄° *
idítôy
,

4269 c⁄° *
key_°r
);

4271 
mg_s¶_if_ªsu…
 
mg_s¶_if_c⁄n_öô
(

4272 
mg_c⁄√˘i⁄
 *
nc
, c⁄° 
mg_s¶_if_c⁄n_∑øms
 *
∑øms
,

4273 c⁄° **
îr_msg
) {

4274 
mg_s¶_if_˘x
 *
	g˘x
 =

4275 (
mg_s¶_if_˘x
 *Ë
MG_CALLOC
(1, (*
˘x
));

4276 
DBG
(("%∞%s,%s,%s", 
nc
, (
∑øms
->
˚π
 ?Öarams->cert : ""),

4277 (
∑øms
->
key
 ?Öarams->key : ""),

4278 (
∑øms
->
ˇ_˚π
 ?Öarams->ca_cert : "")));

4279 i‡(
	g˘x
 =
NULL
) {

4280 
MG_SET_PTRPTR
(
îr_msg
, "Out of memory");

4281  
	gMG_SSL_ERROR
;

4283 
	gnc
->
	gs¶_if_d©a
 = 
˘x
;

4284 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_LISTENING
) {

4285 
	g˘x
->
	gs¶_˘x
 = 
SSL_CTX_√w
(
SSLv23_£rvî_mëhod
());

4287 
	g˘x
->
	gs¶_˘x
 = 
SSL_CTX_√w
(
SSLv23_˛õ¡_mëhod
());

4289 i‡(
	g˘x
->
	gs¶_˘x
 =
NULL
) {

4290 
MG_SET_PTRPTR
(
îr_msg
, "FailedÅo create SSL context");

4291  
	gMG_SSL_ERROR
;

4294 #i‚de‡
KR_VERSION


4296 
SSL_CTX_£t_›ti⁄s
(
˘x
->
s¶_˘x
, 
SSL_OP_NO_SSLv2
);

4297 
SSL_CTX_£t_›ti⁄s
(
˘x
->
s¶_˘x
, 
SSL_OP_NO_SSLv3
);

4298 
SSL_CTX_£t_›ti⁄s
(
˘x
->
s¶_˘x
, 
SSL_OP_NO_TLSv1
);

4299 #ifde‡
MG_SSL_OPENSSL_NO_COMPRESSION


4300 
SSL_CTX_£t_›ti⁄s
(
˘x
->
s¶_˘x
, 
SSL_OP_NO_COMPRESSION
);

4302 #ifde‡
MG_SSL_OPENSSL_CIPHER_SERVER_PREFERENCE


4303 
SSL_CTX_£t_›ti⁄s
(
˘x
->
s¶_˘x
, 
SSL_OP_CIPHER_SERVER_PREFERENCE
);

4309 i‡(
	g∑øms
->
	g˚π
 !
NULL
 &&

4310 
mg_u£_˚π
(
˘x
->
s¶_˘x
, 
∑øms
->
˚π
,Ö¨ams->
key
, 
îr_msg
) !=

4311 
MG_SSL_OK
) {

4312  
MG_SSL_ERROR
;

4315 i‡(
	g∑øms
->
	gˇ_˚π
 !
NULL
 &&

4316 
mg_u£_ˇ_˚π
(
˘x
->
s¶_˘x
, 
∑øms
->
ˇ_˚π
Ë!
MG_SSL_OK
) {

4317 
MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL CA cert");

4318  
	gMG_SSL_ERROR
;

4321 i‡(
	g∑øms
->
	g£rvî_«me
 !
NULL
) {

4322 #ifde‡
KR_VERSION


4323 
SSL_CTX_kr_£t_vîify_«me
(
˘x
->
s¶_˘x
, 
∑øms
->
£rvî_«me
);

4329 i‡(
mg_£t_cùhî_li°
(
˘x
->
s¶_˘x
, 
∑øms
->
cùhî_suôes
Ë!
MG_SSL_OK
) {

4330 
MG_SET_PTRPTR
(
îr_msg
, "Invalid cipher suiteÜist");

4331  
	gMG_SSL_ERROR
;

4334 
mbuf_öô
(&
˘x
->
psk
, 0);

4335 i‡(
mg_s¶_if_os¶_£t_psk
(
˘x
, 
∑øms
->
psk_idítôy
,Ö¨ams->
psk_key
) !=

4336 
MG_SSL_OK
) {

4337 
MG_SET_PTRPTR
(
îr_msg
, "Invalid PSK settings");

4338  
	gMG_SSL_ERROR
;

4341 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_LISTENING
) &&

4342 (
	g˘x
->
	gs¶
 = 
SSL_√w
(
˘x
->
s¶_˘x
)Ë=
NULL
) {

4343 
MG_SET_PTRPTR
(
îr_msg
, "FailedÅo create SSL session");

4344  
	gMG_SSL_ERROR
;

4347 
	gnc
->
	gÊags
 |
MG_F_SSL
;

4349  
	gMG_SSL_OK
;

4352 
mg_s¶_if_ªsu…
 
mg_s¶_if_s¶_îr
(
mg_c⁄√˘i⁄
 *
nc
,

4353 
ªs
) {

4354 
mg_s¶_if_˘x
 *
	g˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4355 
	gîr
 = 
SSL_gë_îr‹
(
˘x
->
s¶
, 
ªs
);

4356 i‡(
	gîr
 =
SSL_ERROR_WANT_READ
Ë 
MG_SSL_WANT_READ
;

4357 i‡(
	gîr
 =
SSL_ERROR_WANT_WRITE
Ë 
MG_SSL_WANT_WRITE
;

4358 
DBG
(("%∞%∞SSLÉº‹: %d %d", 
nc
, 
˘x
->
s¶_˘x
, 
ªs
, 
îr
));

4359 
	gnc
->
	gîr
 = 
îr
;

4360  
	gMG_SSL_ERROR
;

4363 
mg_s¶_if_ªsu…
 
mg_s¶_if_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
) {

4364 
mg_s¶_if_˘x
 *
	g˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4365 
	g£rvî_side
 = (
nc
->
li°íî
 !
NULL
);

4366 
	gªs
;

4368 i‡(
SSL_gë_fd
(
˘x
->
s¶
) < 0) {

4369 i‡(
SSL_£t_fd
(
˘x
->
s¶
, 
nc
->
sock
Ë!1Ë 
MG_SSL_ERROR
;

4371 
	gªs
 = 
£rvî_side
 ? 
SSL_ac˚±
(
˘x
->
s¶
Ë: 
SSL_c⁄√˘
(ctx->ssl);

4372 i‡(
	gªs
 !1Ë 
mg_s¶_if_s¶_îr
(
nc
, 
ªs
);

4373  
	gMG_SSL_OK
;

4376 
mg_s¶_if_ªad
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
size_t
 
buf_size
) {

4377 
mg_s¶_if_˘x
 *
	g˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4378 
	gn
 = 
SSL_ªad
(
˘x
->
s¶
, 
buf
, 
buf_size
);

4379 
DBG
(("%∞%d -> %d", 
nc
, (Ë
buf_size
, 
n
));

4380 i‡(
	gn
 < 0Ë 
mg_s¶_if_s¶_îr
(
nc
, 
n
);

4381 i‡(
	gn
 =0Ë
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

4382  
	gn
;

4385 
mg_s¶_if_wrôe
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
d©a
, 
size_t
 
Àn
) {

4386 
mg_s¶_if_˘x
 *
	g˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4387 
	gn
 = 
SSL_wrôe
(
˘x
->
s¶
, 
d©a
, 
Àn
);

4388 
DBG
(("%∞%d -> %d", 
nc
, (Ë
Àn
, 
n
));

4389 i‡(
	gn
 <0Ë 
mg_s¶_if_s¶_îr
(
nc
, 
n
);

4390  
	gn
;

4393 
mg_s¶_if_c⁄n_˛o£_nŸify
(
mg_c⁄√˘i⁄
 *
nc
) {

4394 
mg_s¶_if_˘x
 *
	g˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4395 i‡(
	g˘x
 =
NULL
) ;

4396 
SSL_shutdown
(
˘x
->
s¶
);

4399 
mg_s¶_if_c⁄n_‰ì
(
mg_c⁄√˘i⁄
 *
nc
) {

4400 
mg_s¶_if_˘x
 *
	g˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4401 i‡(
	g˘x
 =
NULL
) ;

4402 
	gnc
->
	gs¶_if_d©a
 = 
NULL
;

4403 i‡(
	g˘x
->
	gs¶
 !
NULL
Ë
SSL_‰ì
(
˘x
->
s¶
);

4404 i‡(
	g˘x
->
	gs¶_˘x
 !
NULL
 && 
nc
->
li°íî
 =NULLË
SSL_CTX_‰ì
(
˘x
->
s¶_˘x
);

4405 
mbuf_‰ì
(&
˘x
->
psk
);

4406 
mem£t
(
˘x
, 0, (*ctx));

4407 
MG_FREE
(
˘x
);

4414 c⁄° 
	gmg_s_cùhî_li°
[] =

4415 #i‡
deföed
(
MG_SSL_CRYPTO_MODERN
)

4425 #ñi‡
deföed
(
MG_SSL_CRYPTO_OLD
)

4457 #i‡!
MG_DISABLE_PFS
 && !
deföed
(
KR_VERSION
)

4458 c⁄° 
	gmg_s_deÁu…_dh_∑øms
[] =

4470 
mg_s¶_if_ªsu…
 
mg_u£_ˇ_˚π
(
SSL_CTX
 *
˘x
, c⁄° *
˚π
) {

4471 i‡(
	g˚π
 =
NULL
 || 
°rcmp
(
˚π
, "*") == 0) {

4472  
MG_SSL_OK
;

4474 
SSL_CTX_£t_vîify
(
˘x
, 
SSL_VERIFY_PEER
 | 
SSL_VERIFY_FAIL_IF_NO_PEER_CERT
, 0);

4475  
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
˘x
, 
˚π
, 
NULL
Ë=1 ? 
MG_SSL_OK


4476 : 
MG_SSL_ERROR
;

4479 
mg_s¶_if_ªsu…
 
mg_u£_˚π
(
SSL_CTX
 *
˘x
, c⁄° *
˚π
,

4480 c⁄° *
key
,

4481 c⁄° **
îr_msg
) {

4482 i‡(
	gkey
 =
NULL
Ë
key
 = 
˚π
;

4483 i‡(
	g˚π
 =
NULL
 || 
˚π
[0] ='\0' || 
key
 == NULL || key[0] == '\0') {

4484  
MG_SSL_OK
;

4485 } i‡(
SSL_CTX_u£_˚πifiˇã_fûe
(
˘x
, 
˚π
, 1) == 0) {

4486 
MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL cert");

4487  
	gMG_SSL_ERROR
;

4488 } i‡(
SSL_CTX_u£_Priv©eKey_fûe
(
˘x
, 
key
, 1) == 0) {

4489 
MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL key");

4490  
	gMG_SSL_ERROR
;

4491 } i‡(
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
˘x
, 
˚π
) == 0) {

4492 
MG_SET_PTRPTR
(
îr_msg
, "Invalid CA bundle");

4493  
	gMG_SSL_ERROR
;

4495 
SSL_CTX_£t_mode
(
˘x
, 
SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
);

4496 #i‡!
MG_DISABLE_PFS
 && !
deföed
(
KR_VERSION
)

4497 
BIO
 *
	gbio
 = 
NULL
;

4498 
DH
 *
	gdh
 = 
NULL
;

4501 
	gbio
 = 
BIO_√w_fûe
(
˚π
, "r");

4502 i‡(
	gbio
 !
NULL
) {

4503 
dh
 = 
PEM_ªad_bio_DH∑øms
(
bio
, 
NULL
, NULL, NULL);

4504 
BIO_‰ì
(
bio
);

4510 i‡(
	gdh
 =
NULL
) {

4511 
bio
 = 
BIO_√w_mem_buf
((*Ë
mg_s_deÁu…_dh_∑øms
, -1);

4512 
	gdh
 = 
PEM_ªad_bio_DH∑øms
(
bio
, 
NULL
, NULL, NULL);

4513 
BIO_‰ì
(
bio
);

4515 i‡(
	gdh
 !
NULL
) {

4516 
SSL_CTX_£t_tmp_dh
(
˘x
, 
dh
);

4517 
SSL_CTX_£t_›ti⁄s
(
˘x
, 
SSL_OP_SINGLE_DH_USE
);

4518 
DH_‰ì
(
dh
);

4520 #i‡
OPENSSL_VERSION_NUMBER
 > 0x10002000L

4521 
SSL_CTX_£t_ecdh_auto
(
˘x
, 1);

4525  
	gMG_SSL_OK
;

4528 
mg_s¶_if_ªsu…
 
mg_£t_cùhî_li°
(
SSL_CTX
 *
˘x
, c⁄° *
˛
) {

4529  (
SSL_CTX_£t_cùhî_li°
(
˘x
, 
˛
 ? c»: 
mg_s_cùhî_li°
) == 1

4530 ? 
MG_SSL_OK


4531 : 
MG_SSL_ERROR
);

4534 #i‚de‡
KR_VERSION


4535 
mg_s¶_if_os¶_psk_cb
(
SSL
 *
s¶
, c⁄° *
höt
,

4536 *
idítôy
,

4537 
max_idítôy_Àn
,

4538 *
psk
,

4539 
max_psk_Àn
) {

4540 
mg_s¶_if_˘x
 *
	g˘x
 =

4541 (
mg_s¶_if_˘x
 *Ë
SSL_CTX_gë_≠p_d©a
(
SSL_gë_SSL_CTX
(
s¶
));

4542 
size_t
 
	gkey_Àn
 = 
˘x
->
psk
.
Àn
 - ctx->
idítôy_Àn
 - 1;

4543 
DBG
(("höt: '%s'", (
höt
 ? hint : "")));

4544 i‡(
	g˘x
->
	gidítôy_Àn
 + 1 > 
	gmax_idítôy_Àn
) {

4545 
DBG
(("identityÅooÜong"));

4548 i‡(
	gkey_Àn
 > 
	gmax_psk_Àn
) {

4549 
DBG
(("keyÅooÜong"));

4552 
mem˝y
(
idítôy
, 
˘x
->
psk
.
buf
, ctx->
idítôy_Àn
 + 1);

4553 
mem˝y
(
psk
, 
˘x
->psk.
buf
 + ctx->
idítôy_Àn
 + 1, 
key_Àn
);

4554 (Ë
	gs¶
;

4555  
	gkey_Àn
;

4558 
mg_s¶_if_ªsu…
 
mg_s¶_if_os¶_£t_psk
(
mg_s¶_if_˘x
 *
˘x
,

4559 c⁄° *
idítôy
,

4560 c⁄° *
key_°r
) {

4561 
	gkey
[32];

4562 
size_t
 
	gkey_Àn
;

4563 
size_t
 
	gi
 = 0;

4564 i‡(
	gidítôy
 =
NULL
 && 
key_°r
 =NULLË 
MG_SSL_OK
;

4565 i‡(
	gidítôy
 =
NULL
 || 
key_°r
 =NULLË 
MG_SSL_ERROR
;

4566 
	gkey_Àn
 = 
°æí
(
key_°r
);

4567 i‡(
	gkey_Àn
 !32 && 
key_Àn
 !64Ë 
MG_SSL_ERROR
;

4568 
mem£t
(
key
, 0, (key));

4569 
	gkey_Àn
 = 0;

4570 
	gi
 = 0; 
	gkey_°r
[
i
] != '\0'; i++) {

4571 
	gc
;

4572 
	ghc
 = 
tﬁowî
((Ë
key_°r
[
i
]);

4573 i‡(
	ghc
 >'0' && 
hc
 <= '9') {

4574 
c
 = 
hc
 - '0';

4575 } i‡(
	ghc
 >'a' && 
hc
 <= 'f') {

4576 
c
 = 
hc
 - 'a' + 0xa;

4578  
	gMG_SSL_ERROR
;

4580 
	gkey_Àn
 = 
i
 / 2;

4581 
	gkey
[
key_Àn
] <<= 4;

4582 
	gkey
[
key_Àn
] |
c
;

4584 
	gkey_Àn
++;

4585 
DBG
(("idítôy = '%s', key = (%u)", 
idítôy
, (Ë
key_Àn
));

4586 
	g˘x
->
	gidítôy_Àn
 = 
°æí
(
idítôy
);

4587 
mbuf_≠≥nd
(&
˘x
->
psk
, 
idítôy
, ctx->
idítôy_Àn
 + 1);

4588 
mbuf_≠≥nd
(&
˘x
->
psk
, 
key
, 
key_Àn
);

4589 
SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
˘x
->
s¶_˘x
, 
mg_s¶_if_os¶_psk_cb
);

4590 
SSL_CTX_£t_≠p_d©a
(
˘x
->
s¶_˘x
, ctx);

4591  
	gMG_SSL_OK
;

4594 
mg_s¶_if_ªsu…
 
mg_s¶_if_os¶_£t_psk
(
mg_s¶_if_˘x
 *
˘x
,

4595 c⁄° *
idítôy
,

4596 c⁄° *
key_°r
) {

4597 (Ë
	g˘x
;

4598 (Ë
	gidítôy
;

4599 (Ë
	gkey_°r
;

4601  
	gMG_SSL_ERROR
;

4605 c⁄° *
mg_£t_s¶
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˚π
,

4606 c⁄° *
ˇ_˚π
) {

4607 c⁄° *
	gîr_msg
 = 
NULL
;

4608 
mg_s¶_if_c⁄n_∑øms
 
	g∑øms
;

4609 
mem£t
(&
∑øms
, 0, (params));

4610 
	g∑øms
.
	g˚π
 = 
˚π
;

4611 
	g∑øms
.
	gˇ_˚π
 = 
ˇ_˚π
;

4612 i‡(
mg_s¶_if_c⁄n_öô
(
nc
, &
∑øms
, &
îr_msg
Ë!
MG_SSL_OK
) {

4613  
îr_msg
;

4615  
	gNULL
;

4619 #ifde‡
MG_MODULE_LINES


4627 #i‡
MG_ENABLE_SSL
 && 
MG_SSL_IF
 =
MG_SSL_IF_MBEDTLS


4629 
	~<mbedés/debug.h
>

4630 
	~<mbedés/e˝.h
>

4631 
	~<mbedés/∂©f‹m.h
>

4632 
	~<mbedés/s¶.h
>

4633 
	~<mbedés/x509_¸t.h
>

4635 
mg_s¶_mbed_log
(*
˘x
, 
Àvñ
, c⁄° *
fûe
, 
löe
,

4636 c⁄° *
°r
) {

4637 
cs_log_Àvñ
 
	gcs_Àvñ
;

4638 
	gÀvñ
) {

4640 
cs_Àvñ
 = 
LL_ERROR
;

4644 
cs_Àvñ
 = 
LL_DEBUG
;

4647 
cs_Àvñ
 = 
LL_VERBOSE_DEBUG
;

4650 
LOG
(
cs_Àvñ
, ("%∞%.*s", 
˘x
, (Ë(
°æí
(
°r
) - 1), str));

4651 (Ë
	gfûe
;

4652 (Ë
	glöe
;

4655 
	smg_s¶_if_˘x
 {

4656 
mbedés_s¶_c⁄fig
 *
	gc⁄f
;

4657 
mbedés_s¶_c⁄ãxt
 *
	gs¶
;

4658 
mbedés_x509_¸t
 *
	g˚π
;

4659 
mbedés_pk_c⁄ãxt
 *
	gkey
;

4660 
mbedés_x509_¸t
 *
	gˇ_˚π
;

4661 
mbuf
 
	gcùhî_suôes
;

4665 
mg_s¶_if_mbed_øndom
(*
˘x
, *
buf
, 
size_t
 
Àn
);

4667 
mg_s¶_if_öô
() {

4670 
mg_s¶_if_ªsu…
 
mg_s¶_if_c⁄n_ac˚±
(
mg_c⁄√˘i⁄
 *
nc
,

4671 
mg_c⁄√˘i⁄
 *
lc
) {

4672 
mg_s¶_if_˘x
 *
	g˘x
 =

4673 (
mg_s¶_if_˘x
 *Ë
MG_CALLOC
(1, (*
˘x
));

4674 
mg_s¶_if_˘x
 *
	glc_˘x
 = (mg_s¶_if_˘x *Ë
lc
->
s¶_if_d©a
;

4675 
	gnc
->
	gs¶_if_d©a
 = 
˘x
;

4676 i‡(
	g˘x
 =
NULL
 || 
lc_˘x
 =NULLË 
MG_SSL_ERROR
;

4677 
	g˘x
->
	gs¶
 = (
mbedés_s¶_c⁄ãxt
 *Ë
MG_CALLOC
(1, (*
˘x
->
s¶
));

4678 i‡(
mbedés_s¶_£tup
(
˘x
->
s¶
, 
lc_˘x
->
c⁄f
) != 0) {

4679  
MG_SSL_ERROR
;

4681  
	gMG_SSL_OK
;

4684 
mg_s¶_if_ªsu…
 
mg_u£_˚π
(
mg_s¶_if_˘x
 *
˘x
,

4685 c⁄° *
˚π
, c⁄° *
key
,

4686 c⁄° **
îr_msg
);

4687 
mg_s¶_if_ªsu…
 
mg_u£_ˇ_˚π
(
mg_s¶_if_˘x
 *
˘x
,

4688 c⁄° *
˚π
);

4689 
mg_s¶_if_ªsu…
 
mg_£t_cùhî_li°
(
mg_s¶_if_˘x
 *
˘x
,

4690 c⁄° *
cùhîs
);

4691 
mg_s¶_if_ªsu…
 
mg_s¶_if_mbed_£t_psk
(
mg_s¶_if_˘x
 *
˘x
,

4692 c⁄° *
idítôy
,

4693 c⁄° *
key
);

4695 
mg_s¶_if_ªsu…
 
mg_s¶_if_c⁄n_öô
(

4696 
mg_c⁄√˘i⁄
 *
nc
, c⁄° 
mg_s¶_if_c⁄n_∑øms
 *
∑øms
,

4697 c⁄° **
îr_msg
) {

4698 
mg_s¶_if_˘x
 *
	g˘x
 =

4699 (
mg_s¶_if_˘x
 *Ë
MG_CALLOC
(1, (*
˘x
));

4700 
DBG
(("%∞%s,%s,%s", 
nc
, (
∑øms
->
˚π
 ?Öarams->cert : ""),

4701 (
∑øms
->
key
 ?Öarams->key : ""),

4702 (
∑øms
->
ˇ_˚π
 ?Öarams->ca_cert : "")));

4704 i‡(
	g˘x
 =
NULL
) {

4705 
MG_SET_PTRPTR
(
îr_msg
, "Out of memory");

4706  
	gMG_SSL_ERROR
;

4708 
	gnc
->
	gs¶_if_d©a
 = 
˘x
;

4709 
	g˘x
->
	gc⁄f
 = (
mbedés_s¶_c⁄fig
 *Ë
MG_CALLOC
(1, (*
˘x
->
c⁄f
));

4710 
mbuf_öô
(&
˘x
->
cùhî_suôes
, 0);

4711 
mbedés_s¶_c⁄fig_öô
(
˘x
->
c⁄f
);

4712 
mbedés_s¶_c⁄f_dbg
(
˘x
->
c⁄f
, 
mg_s¶_mbed_log
, 
nc
);

4713 i‡(
mbedés_s¶_c⁄fig_deÁu…s
(

4714 
˘x
->
c⁄f
, (
nc
->
Êags
 & 
MG_F_LISTENING
 ? 
MBEDTLS_SSL_IS_SERVER


4715 : 
MBEDTLS_SSL_IS_CLIENT
),

4716 
MBEDTLS_SSL_TRANSPORT_STREAM
, 
MBEDTLS_SSL_PRESET_DEFAULT
) != 0) {

4717 
MG_SET_PTRPTR
(
îr_msg
, "FailedÅo init SSL config");

4718  
	gMG_SSL_ERROR
;

4722 
mbedés_s¶_c⁄f_mö_vîsi⁄
(
˘x
->
c⁄f
, 
MBEDTLS_SSL_MAJOR_VERSION_3
,

4723 
MBEDTLS_SSL_MINOR_VERSION_3
);

4724 
mbedés_s¶_c⁄f_∫g
(
˘x
->
c⁄f
, 
mg_s¶_if_mbed_øndom
, 
nc
);

4726 i‡(
	g∑øms
->
	g˚π
 !
NULL
 &&

4727 
mg_u£_˚π
(
˘x
, 
∑øms
->
˚π
,Ö¨ams->
key
, 
îr_msg
Ë!
MG_SSL_OK
) {

4728  
MG_SSL_ERROR
;

4731 i‡(
	g∑øms
->
	gˇ_˚π
 !
NULL
 &&

4732 
mg_u£_ˇ_˚π
(
˘x
, 
∑øms
->
ˇ_˚π
Ë!
MG_SSL_OK
) {

4733 
MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL CA cert");

4734  
	gMG_SSL_ERROR
;

4737 i‡(
mg_£t_cùhî_li°
(
˘x
, 
∑øms
->
cùhî_suôes
Ë!
MG_SSL_OK
) {

4738 
MG_SET_PTRPTR
(
îr_msg
, "Invalid cipher suiteÜist");

4739  
	gMG_SSL_ERROR
;

4742 i‡(
mg_s¶_if_mbed_£t_psk
(
˘x
, 
∑øms
->
psk_idítôy
,Ö¨ams->
psk_key
) !=

4743 
MG_SSL_OK
) {

4744 
MG_SET_PTRPTR
(
îr_msg
, "Invalid PSK settings");

4745  
	gMG_SSL_ERROR
;

4748 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_LISTENING
)) {

4749 
	g˘x
->
	gs¶
 = (
mbedés_s¶_c⁄ãxt
 *Ë
MG_CALLOC
(1, (*
˘x
->
s¶
));

4750 
mbedés_s¶_öô
(
˘x
->
s¶
);

4751 i‡(
mbedés_s¶_£tup
(
˘x
->
s¶
, ctx->
c⁄f
) != 0) {

4752 
MG_SET_PTRPTR
(
îr_msg
, "FailedÅo create SSL session");

4753  
	gMG_SSL_ERROR
;

4755 i‡(
	g∑øms
->
	g£rvî_«me
 !
NULL
 &&

4756 
mbedés_s¶_£t_ho°«me
(
˘x
->
s¶
, 
∑øms
->
£rvî_«me
) != 0) {

4757  
MG_SSL_ERROR
;

4761 #ifde‡
MG_SSL_IF_MBEDTLS_MAX_FRAG_LEN


4762 i‡(
mbedés_s¶_c⁄f_max_‰ag_Àn
(
˘x
->
c⁄f
,

4763 #i‡
MG_SSL_IF_MBEDTLS_MAX_FRAG_LEN
 == 512

4764 
MBEDTLS_SSL_MAX_FRAG_LEN_512


4765 #ñi‡
MG_SSL_IF_MBEDTLS_MAX_FRAG_LEN
 == 1024

4766 
MBEDTLS_SSL_MAX_FRAG_LEN_1024


4767 #ñi‡
MG_SSL_IF_MBEDTLS_MAX_FRAG_LEN
 == 2048

4768 
MBEDTLS_SSL_MAX_FRAG_LEN_2048


4769 #ñi‡
MG_SSL_IF_MBEDTLS_MAX_FRAG_LEN
 == 4096

4770 
MBEDTLS_SSL_MAX_FRAG_LEN_4096


4772 #îr‹ 
InvÆid
 
MG_SSL_IF_MBEDTLS_MAX_FRAG_LEN


4775  
MG_SSL_ERROR
;

4779 
	gnc
->
	gÊags
 |
MG_F_SSL
;

4781  
	gMG_SSL_OK
;

4784 #i‡
MG_NET_IF
 =
MG_NET_IF_LWIP_LOW_LEVEL


4785 
s¶_sockë_£nd
(*
˘x
, c⁄° *
buf
, 
size_t
 
Àn
);

4786 
s¶_sockë_ªcv
(*
˘x
, *
buf
, 
size_t
 
Àn
);

4788 
s¶_sockë_£nd
(*
˘x
, c⁄° *
buf
, 
size_t
 
Àn
) {

4789 
mg_c⁄√˘i⁄
 *
	gnc
 = (mg_c⁄√˘i⁄ *Ë
˘x
;

4790 
	gn
 = (Ë
MG_SEND_FUNC
(
nc
->
sock
, 
buf
, 
Àn
, 0);

4791 
LOG
(
LL_DEBUG
, ("%∞%d -> %d", 
nc
, (Ë
Àn
, 
n
));

4792 i‡(
	gn
 >0Ë 
n
;

4793 
	gn
 = 
mg_gë_î∫o
();

4794  ((
	gn
 =
EAGAIN
 || 
n
 =
EINPROGRESS
Ë? 
MBEDTLS_ERR_SSL_WANT_WRITE
 : -1);

4797 
s¶_sockë_ªcv
(*
˘x
, *
buf
, 
size_t
 
Àn
) {

4798 
mg_c⁄√˘i⁄
 *
	gnc
 = (mg_c⁄√˘i⁄ *Ë
˘x
;

4799 
	gn
 = (Ë
MG_RECV_FUNC
(
nc
->
sock
, 
buf
, 
Àn
, 0);

4800 
LOG
(
LL_DEBUG
, ("%∞%d <- %d", 
nc
, (Ë
Àn
, 
n
));

4801 i‡(
	gn
 >0Ë 
n
;

4802 
	gn
 = 
mg_gë_î∫o
();

4803  ((
	gn
 =
EAGAIN
 || 
n
 =
EINPROGRESS
Ë? 
MBEDTLS_ERR_SSL_WANT_READ
 : -1);

4807 
mg_s¶_if_ªsu…
 
mg_s¶_if_mbed_îr
(
mg_c⁄√˘i⁄
 *
nc
,

4808 
ªt
) {

4809 i‡(
	gªt
 =
MBEDTLS_ERR_SSL_WANT_READ
Ë 
MG_SSL_WANT_READ
;

4810 i‡(
	gªt
 =
MBEDTLS_ERR_SSL_WANT_WRITE
Ë 
MG_SSL_WANT_WRITE
;

4811 i‡(
	gªt
 !=

4812 
MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY
) {

4813 
LOG
(
LL_ERROR
, ("%∞SSLÉº‹: %d", 
nc
, 
ªt
));

4815 
	gnc
->
	gîr
 = 
ªt
;

4816 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

4817  
	gMG_SSL_ERROR
;

4820 
mg_s¶_if_mbed_‰ì_˚πs_™d_keys
(
mg_s¶_if_˘x
 *
˘x
) {

4821 i‡(
	g˘x
->
	g˚π
 !
NULL
) {

4822 
mbedés_x509_¸t_‰ì
(
˘x
->
˚π
);

4823 
MG_FREE
(
˘x
->
˚π
);

4824 
	g˘x
->
	g˚π
 = 
NULL
;

4825 
mbedés_pk_‰ì
(
˘x
->
key
);

4826 
MG_FREE
(
˘x
->
key
);

4827 
	g˘x
->
	gkey
 = 
NULL
;

4829 i‡(
	g˘x
->
	gˇ_˚π
 !
NULL
) {

4830 
mbedés_s¶_c⁄f_ˇ_chaö
(
˘x
->
c⁄f
, 
NULL
, NULL);

4831 #ifde‡
MBEDTLS_X509_CA_CHAIN_ON_DISK


4832 i‡(
	g˘x
->
	gˇ_˚π
->
	gˇ_chaö_fûe
 !
NULL
) {

4833 
MG_FREE
((*Ë
˘x
->
ˇ_˚π
->
ˇ_chaö_fûe
);

4834 
	g˘x
->
	gˇ_˚π
->
	gˇ_chaö_fûe
 = 
NULL
;

4837 
mbedés_x509_¸t_‰ì
(
˘x
->
ˇ_˚π
);

4838 
MG_FREE
(
˘x
->
ˇ_˚π
);

4839 
	g˘x
->
	gˇ_˚π
 = 
NULL
;

4843 
mg_s¶_if_ªsu…
 
mg_s¶_if_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
) {

4844 
mg_s¶_if_˘x
 *
	g˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4845 
	gîr
;

4847 i‡(
	g˘x
->
	gs¶
->
	gp_bio
 =
NULL
) {

4848 
mbedés_s¶_£t_bio
(
˘x
->
s¶
, 
nc
, 
s¶_sockë_£nd
, 
s¶_sockë_ªcv
, 
NULL
);

4850 
	gîr
 = 
mbedés_s¶_h™dshake
(
˘x
->
s¶
);

4851 i‡(
	gîr
 !0Ë 
mg_s¶_if_mbed_îr
(
nc
, 
îr
);

4852 #ifde‡
MG_SSL_IF_MBEDTLS_FREE_CERTS


4857 
mbedés_x509_¸t_‰ì
(
˘x
->
s¶
->
£ssi⁄
->
≥î_˚π
);

4858 
mbedés_‰ì
(
˘x
->
s¶
->
£ssi⁄
->
≥î_˚π
);

4859 
	g˘x
->
	gs¶
->
	g£ssi⁄
->
	g≥î_˚π
 = 
NULL
;

4861 i‡(
	gnc
->
	gli°íî
 =
NULL
) {

4862 i‡(
˘x
->
c⁄f
->
key_˚π
 !
NULL
) {

4864 
MG_FREE
(
˘x
->
c⁄f
->
key_˚π
);

4865 
	g˘x
->
	gc⁄f
->
	gkey_˚π
 = 
NULL
;

4867 
mbedés_s¶_c⁄f_ˇ_chaö
(
˘x
->
c⁄f
, 
NULL
, NULL);

4868 
mg_s¶_if_mbed_‰ì_˚πs_™d_keys
(
˘x
);

4871  
	gMG_SSL_OK
;

4874 
mg_s¶_if_ªad
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
size_t
 
buf_size
) {

4875 
mg_s¶_if_˘x
 *
	g˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4876 
	gn
 = 
mbedés_s¶_ªad
(
˘x
->
s¶
, (*Ë
buf
, 
buf_size
);

4877 
DBG
(("%∞%d -> %d", 
nc
, (Ë
buf_size
, 
n
));

4878 i‡(
	gn
 < 0Ë 
mg_s¶_if_mbed_îr
(
nc
, 
n
);

4879 i‡(
	gn
 =0Ë
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

4880  
	gn
;

4883 
mg_s¶_if_wrôe
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
d©a
, 
size_t
 
Àn
) {

4884 
mg_s¶_if_˘x
 *
	g˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4885 
	gn
 = 
mbedés_s¶_wrôe
(
˘x
->
s¶
, (c⁄° *Ë
d©a
, 
Àn
);

4886 
DBG
(("%∞%d -> %d", 
nc
, (Ë
Àn
, 
n
));

4887 i‡(
	gn
 < 0Ë 
mg_s¶_if_mbed_îr
(
nc
, 
n
);

4888  
	gn
;

4891 
mg_s¶_if_c⁄n_˛o£_nŸify
(
mg_c⁄√˘i⁄
 *
nc
) {

4892 
mg_s¶_if_˘x
 *
	g˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4893 i‡(
	g˘x
 =
NULL
) ;

4894 
mbedés_s¶_˛o£_nŸify
(
˘x
->
s¶
);

4897 
mg_s¶_if_c⁄n_‰ì
(
mg_c⁄√˘i⁄
 *
nc
) {

4898 
mg_s¶_if_˘x
 *
	g˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4899 i‡(
	g˘x
 =
NULL
) ;

4900 
	gnc
->
	gs¶_if_d©a
 = 
NULL
;

4901 i‡(
	g˘x
->
	gs¶
 !
NULL
) {

4902 
mbedés_s¶_‰ì
(
˘x
->
s¶
);

4903 
MG_FREE
(
˘x
->
s¶
);

4905 
mg_s¶_if_mbed_‰ì_˚πs_™d_keys
(
˘x
);

4906 i‡(
	g˘x
->
	gc⁄f
 !
NULL
) {

4907 
mbedés_s¶_c⁄fig_‰ì
(
˘x
->
c⁄f
);

4908 
MG_FREE
(
˘x
->
c⁄f
);

4910 
mbuf_‰ì
(&
˘x
->
cùhî_suôes
);

4911 
mem£t
(
˘x
, 0, (*ctx));

4912 
MG_FREE
(
˘x
);

4915 
mg_s¶_if_ªsu…
 
mg_u£_ˇ_˚π
(
mg_s¶_if_˘x
 *
˘x
,

4916 c⁄° *
ˇ_˚π
) {

4917 i‡(
	gˇ_˚π
 =
NULL
 || 
°rcmp
(
ˇ_˚π
, "*") == 0) {

4918 
mbedés_s¶_c⁄f_authmode
(
˘x
->
c⁄f
, 
MBEDTLS_SSL_VERIFY_NONE
);

4919  
	gMG_SSL_OK
;

4921 
	g˘x
->
	gˇ_˚π
 = (
mbedés_x509_¸t
 *Ë
MG_CALLOC
(1, (*
˘x
->
ˇ_˚π
));

4922 
mbedés_x509_¸t_öô
(
˘x
->
ˇ_˚π
);

4923 #ifde‡
MBEDTLS_X509_CA_CHAIN_ON_DISK


4924 
	gˇ_˚π
 = 
°rdup
(
ˇ_˚π
);

4925 i‡(
mbedés_x509_¸t_£t_ˇ_chaö_fûe
(
˘x
->
ˇ_˚π
, ca_cert) != 0) {

4926  
MG_SSL_ERROR
;

4929 i‡(
mbedés_x509_¸t_∑r£_fûe
(
˘x
->
ˇ_˚π
, ca_cert) != 0) {

4930  
MG_SSL_ERROR
;

4933 
mbedés_s¶_c⁄f_ˇ_chaö
(
˘x
->
c⁄f
, ctx->
ˇ_˚π
, 
NULL
);

4934 
mbedés_s¶_c⁄f_authmode
(
˘x
->
c⁄f
, 
MBEDTLS_SSL_VERIFY_REQUIRED
);

4935  
	gMG_SSL_OK
;

4938 
mg_s¶_if_ªsu…
 
mg_u£_˚π
(
mg_s¶_if_˘x
 *
˘x
,

4939 c⁄° *
˚π
, c⁄° *
key
,

4940 c⁄° **
îr_msg
) {

4941 i‡(
	gkey
 =
NULL
Ë
key
 = 
˚π
;

4942 i‡(
	g˚π
 =
NULL
 || 
˚π
[0] ='\0' || 
key
 == NULL || key[0] == '\0') {

4943  
MG_SSL_OK
;

4945 
	g˘x
->
	g˚π
 = (
mbedés_x509_¸t
 *Ë
MG_CALLOC
(1, (*
˘x
->
˚π
));

4946 
mbedés_x509_¸t_öô
(
˘x
->
˚π
);

4947 
	g˘x
->
	gkey
 = (
mbedés_pk_c⁄ãxt
 *Ë
MG_CALLOC
(1, (*
˘x
->
key
));

4948 
mbedés_pk_öô
(
˘x
->
key
);

4949 i‡(
mbedés_x509_¸t_∑r£_fûe
(
˘x
->
˚π
, cert) != 0) {

4950 
MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL cert");

4951  
	gMG_SSL_ERROR
;

4953 i‡(
mbedés_pk_∑r£_keyfûe
(
˘x
->
key
, key, 
NULL
) != 0) {

4954 
MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL key");

4955  
	gMG_SSL_ERROR
;

4957 i‡(
mbedés_s¶_c⁄f_own_˚π
(
˘x
->
c⁄f
, ctx->
˚π
, ctx->
key
) != 0) {

4958 
MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL key or cert");

4959  
	gMG_SSL_ERROR
;

4961  
	gMG_SSL_OK
;

4964 c⁄° 
	gmg_s_cùhî_li°
[] = {

4965 #i‡
CS_PLATFORM
 !
CS_P_ESP8266


4966 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
,

4967 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
,

4968 
MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
,

4969 
MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
,

4970 
MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
,

4971 
MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
,

4972 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
,

4973 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
,

4974 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
,

4975 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
,

4976 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
,

4977 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
,

4978 
MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256
,

4979 
MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256
,

4980 
MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA
,

4987 
MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256
,

4988 
MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256
,

4989 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
,

4990 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
,

4991 
MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
,

4992 
MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
,

4993 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
,

4994 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
,

4995 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
,

4996 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
,

4997 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
,

4998 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
,

4999 
MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA
,

5010 
mg_s¶_if_ªsu…
 
mg_£t_cùhî_li°
(
mg_s¶_if_˘x
 *
˘x
,

5011 c⁄° *
cùhîs
) {

5012 i‡(
	gcùhîs
 !
NULL
) {

5013 
l
, 
id
;

5014 c⁄° *
	gs
 = 
cùhîs
, *
	ge
;

5015 
	gtmp
[50];

5016 
	gs
 !
NULL
) {

5017 
e
 = 
°rchr
(
s
, ':');

5018 
	gl
 = (
e
 !
NULL
 ? (ê- 
s
Ë: (Ë
°æí
(s));

5019 
°∫˝y
(
tmp
, 
s
, 
l
);

5020 
	gtmp
[
l
] = '\0';

5021 
	gid
 = 
mbedés_s¶_gë_cùhîsuôe_id
(
tmp
);

5022 
DBG
(("%†-> %04x", 
tmp
, 
id
));

5023 i‡(
	gid
 != 0) {

5024 
mbuf_≠≥nd
(&
˘x
->
cùhî_suôes
, &
id
, (id));

5026 
	gs
 = (
e
 !
NULL
 ?É + 1 : NULL);

5028 i‡(
	g˘x
->
	gcùhî_suôes
.
	gÀn
 =0Ë 
MG_SSL_ERROR
;

5029 
	gid
 = 0;

5030 
mbuf_≠≥nd
(&
˘x
->
cùhî_suôes
, &
id
, (id));

5031 
mbuf_åim
(&
˘x
->
cùhî_suôes
);

5032 
mbedés_s¶_c⁄f_cùhîsuôes
(
˘x
->
c⁄f
,

5033 (c⁄° *Ë
˘x
->
cùhî_suôes
.
buf
);

5035 
mbedés_s¶_c⁄f_cùhîsuôes
(
˘x
->
c⁄f
, 
mg_s_cùhî_li°
);

5037  
	gMG_SSL_OK
;

5040 
mg_s¶_if_ªsu…
 
mg_s¶_if_mbed_£t_psk
(
mg_s¶_if_˘x
 *
˘x
,

5041 c⁄° *
idítôy
,

5042 c⁄° *
key_°r
) {

5043 
	gkey
[32];

5044 
size_t
 
	gkey_Àn
;

5045 i‡(
	gidítôy
 =
NULL
 && 
key_°r
 =NULLË 
MG_SSL_OK
;

5046 i‡(
	gidítôy
 =
NULL
 || 
key_°r
 =NULLË 
MG_SSL_ERROR
;

5047 
	gkey_Àn
 = 
°æí
(
key_°r
);

5048 i‡(
	gkey_Àn
 !32 && 
key_Àn
 !64Ë 
MG_SSL_ERROR
;

5049 
size_t
 
	gi
 = 0;

5050 
mem£t
(
key
, 0, (key));

5051 
	gkey_Àn
 = 0;

5052 
	gi
 = 0; 
	gkey_°r
[
i
] != '\0'; i++) {

5053 
	gc
;

5054 
	ghc
 = 
tﬁowî
((Ë
key_°r
[
i
]);

5055 i‡(
	ghc
 >'0' && 
hc
 <= '9') {

5056 
c
 = 
hc
 - '0';

5057 } i‡(
	ghc
 >'a' && 
hc
 <= 'f') {

5058 
c
 = 
hc
 - 'a' + 0xa;

5060  
	gMG_SSL_ERROR
;

5062 
	gkey_Àn
 = 
i
 / 2;

5063 
	gkey
[
key_Àn
] <<= 4;

5064 
	gkey
[
key_Àn
] |
c
;

5066 
	gkey_Àn
++;

5067 
DBG
(("idítôy = '%s', key = (%u)", 
idítôy
, (Ë
key_Àn
));

5069 i‡(
mbedés_s¶_c⁄f_psk
(
˘x
->
c⁄f
, (c⁄° *Ë
key
, 
key_Àn
,

5070 (c⁄° *Ë
idítôy
,

5071 
°æí
(
idítôy
)) != 0) {

5072  
MG_SSL_ERROR
;

5074  
	gMG_SSL_OK
;

5077 c⁄° *
mg_£t_s¶
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˚π
,

5078 c⁄° *
ˇ_˚π
) {

5079 c⁄° *
	gîr_msg
 = 
NULL
;

5080 
mg_s¶_if_c⁄n_∑øms
 
	g∑øms
;

5081 
mem£t
(&
∑øms
, 0, (params));

5082 
	g∑øms
.
	g˚π
 = 
˚π
;

5083 
	g∑øms
.
	gˇ_˚π
 = 
ˇ_˚π
;

5084 i‡(
mg_s¶_if_c⁄n_öô
(
nc
, &
∑øms
, &
îr_msg
Ë!
MG_SSL_OK
) {

5085  
îr_msg
;

5087  
	gNULL
;

5091 #ifde‡
MG_SSL_MBED_DUMMY_RANDOM


5092 
mg_s¶_if_mbed_øndom
(*
˘x
, *
buf
, 
size_t
 
Àn
) {

5093 (Ë
	g˘x
;

5094 
	gÀn
--Ë*
	gbuf
++ = 
ønd
();

5100 #ifde‡
MG_MODULE_LINES


5117 
∑r£_uri_comp⁄ít
(c⁄° **
p
, c⁄° *
íd
,

5118 c⁄° *
£ps
, 
mg_°r
 *
ªs
) {

5119 c⁄° *
	gq
;

5120 
	gªs
->
	gp
 = *
p
;

5121 ; *
	gp
 < 
	gíd
; (*p)++) {

5122 
	gq
 = 
£ps
; *q != '\0'; q++) {

5123 i‡(**
	gp
 =*
q
) ;

5125 i‡(*
	gq
 != '\0') ;

5127 
	gªs
->
	gÀn
 = (*
p
Ë- 
ªs
->p;

5128 i‡(*
	gp
 < 
	gíd
) (*p)++;

5131 
mg_∑r£_uri
(c⁄° 
mg_°r
 
uri
, mg_°∏*
scheme
,

5132 
mg_°r
 *
u£r_öfo
, mg_°∏*
ho°
,

5133 *
p‹t
, 
mg_°r
 *
∑th
, mg_°∏*
quîy
,

5134 
mg_°r
 *
‰agmít
) {

5135 
mg_°r
 
	grscheme
 = {0, 0}, 
	gru£r_öfo
 = {0, 0}, 
	grho°
 = {0, 0},

5136 
	gΩ©h
 = {0, 0}, 
	grquîy
 = {0, 0}, 
	gr‰agmít
 = {0, 0};

5137 
	gΩ‹t
 = 0;

5139 
	gP_START
,

5140 
	gP_SCHEME_OR_PORT
,

5141 
	gP_USER_INFO
,

5142 
	gP_HOST
,

5143 
	gP_PORT
,

5144 
	gP_REST


5145 } 
	g°©e
 = 
P_START
;

5147 c⁄° *
	gp
 = 
uri
.
p
, *
	gíd
 =Ö + uri.
Àn
;

5148 
	gp
 < 
	gíd
) {

5149 
	g°©e
) {

5150 
	gP_START
:

5158 i‡(*
p
 == '[') {

5159 
°©e
 = 
P_HOST
;

5162 ; 
	gp
 < 
	gíd
;Ö++) {

5163 i‡(*
	gp
 == ':') {

5164 
°©e
 = 
P_SCHEME_OR_PORT
;

5166 } i‡(*
	gp
 == '/') {

5167 
°©e
 = 
P_REST
;

5171 i‡(
	g°©e
 =
P_START
 || 
°©e
 =
P_REST
) {

5172 
rho°
.
p
 = 
uri
.p;

5173 
	grho°
.
	gÀn
 = 
p
 - 
uri
.p;

5176 
	gP_SCHEME_OR_PORT
:

5177 i‡(
íd
 - 
p
 >3 && 
°∫cmp
(p, "://", 3) == 0) {

5178 
rscheme
.
p
 = 
uri
.p;

5179 
	grscheme
.
	gÀn
 = 
p
 - 
uri
.p;

5180 
	g°©e
 = 
P_USER_INFO
;

5181 
	gp
 += 3;

5183 
	grho°
.
	gp
 = 
uri
.
p
;

5184 
	grho°
.
	gÀn
 = 
p
 - 
uri
.p;

5185 
	g°©e
 = 
P_PORT
;

5188 
	gP_USER_INFO
:

5189 
ru£r_öfo
.
p
 =Ö;

5190 ; 
	gp
 < 
	gíd
;Ö++) {

5191 i‡(*
	gp
 ='@' || *
p
 == '[' || *p == '/') {

5195 i‡(
	gp
 =
íd
 || *
p
 == '/' || *p == '[') {

5197 
p
 = 
ru£r_öfo
.p;

5199 
	gru£r_öfo
.
	gÀn
 = 
p
 - 
ru£r_öfo
.p;

5200 
	g°©e
 = 
P_HOST
;

5202 
	gP_HOST
:

5203 i‡(*
p
 == '@')Ö++;

5204 
	grho°
.
	gp
 = 
p
;

5205 i‡(*
	gp
 == '[') {

5206 
found
 = 0;

5207 ; !
	gfound
 && 
	gp
 < 
	gíd
;Ö++) {

5208 
	gfound
 = (*
p
 == ']');

5210 i‡(!
	gfound
)  -1;

5212 ; 
	gp
 < 
	gíd
;Ö++) {

5213 i‡(*
	gp
 =':' || *
p
 == '/') ;

5216 
	grho°
.
	gÀn
 = 
p
 - 
rho°
.p;

5217 i‡(
	gp
 < 
	gíd
) {

5218 i‡(*
	gp
 == ':') {

5219 
°©e
 = 
P_PORT
;

5221 } i‡(*
	gp
 == '/') {

5222 
°©e
 = 
P_REST
;

5227 
	gP_PORT
:

5228 
p
++;

5229 ; 
	gp
 < 
	gíd
;Ö++) {

5230 i‡(*
	gp
 == '/') {

5231 
°©e
 = 
P_REST
;

5234 
	gΩ‹t
 *= 10;

5235 
	gΩ‹t
 +*
p
 - '0';

5238 
	gP_REST
:

5240 
∑r£_uri_comp⁄ít
(&
p
, 
íd
, "?#", &
Ω©h
);

5241 i‡(
	gp
 < 
	gíd
 && *(p - 1) == '?') {

5242 
∑r£_uri_comp⁄ít
(&
p
, 
íd
, "#", &
rquîy
);

5244 
∑r£_uri_comp⁄ít
(&
p
, 
íd
, "", &
r‰agmít
);

5249 i‡(
	gscheme
 !0Ë*
scheme
 = 
rscheme
;

5250 i‡(
	gu£r_öfo
 !0Ë*
u£r_öfo
 = 
ru£r_öfo
;

5251 i‡(
	gho°
 !0Ë*
ho°
 = 
rho°
;

5252 i‡(
	gp‹t
 !0Ë*
p‹t
 = 
Ω‹t
;

5253 i‡(
	g∑th
 !0Ë*
∑th
 = 
Ω©h
;

5254 i‡(
	gquîy
 !0Ë*
quîy
 = 
rquîy
;

5255 i‡(
	g‰agmít
 !0Ë*
‰agmít
 = 
r‰agmít
;

5261 
mg_n‹mÆize_uri_∑th
(c⁄° 
mg_°r
 *
ö
, mg_°∏*
out
) {

5262 c⁄° *
	gs
 = 
ö
->
p
, *
	g£
 = 
s
 + in->
Àn
;

5263 *
	g˝
 = (*Ë
out
->
p
, *
	gd
;

5265 i‡(
	gö
->
	gÀn
 =0 || *
s
 != '/') {

5266 
out
->
Àn
 = 0;

5270 
	gd
 = 
˝
;

5272 
	gs
 < 
	g£
) {

5273 c⁄° *
	g√xt
 = 
s
;

5274 
mg_°r
 
	gcomp⁄ít
;

5275 
∑r£_uri_comp⁄ít
(&
√xt
, 
£
, "/", &
comp⁄ít
);

5276 i‡(
mg_vcmp
(&
comp⁄ít
, ".") == 0) {

5278 } i‡(
mg_vcmp
(&
comp⁄ít
, "..") == 0) {

5280 i‡(
d
 > 
˝
 + 1 && *(d - 1) == '/') d--;

5281 
	gd
 > 
	g˝
 && *(d - 1Ë!'/'Ë
d
--;

5283 
memmove
(
d
, 
s
, 
√xt
 - s);

5284 
	gd
 +
√xt
 - 
s
;

5286 
	gs
 = 
√xt
;

5288 i‡(
	gd
 =
˝
Ë*
d
++ = '/';

5290 
	gout
->
	gp
 = 
˝
;

5291 
	gout
->
	gÀn
 = 
d
 - 
˝
;

5295 
mg_as£mbÀ_uri
(c⁄° 
mg_°r
 *
scheme
, c⁄° mg_°∏*
u£r_öfo
,

5296 c⁄° 
mg_°r
 *
ho°
, 
p‹t
,

5297 c⁄° 
mg_°r
 *
∑th
, c⁄° mg_°∏*
quîy
,

5298 c⁄° 
mg_°r
 *
‰agmít
, 
n‹mÆize_∑th
,

5299 
mg_°r
 *
uri
) {

5300 
	gªsu…
 = -1;

5301 
mbuf
 
	gout
;

5302 
mbuf_öô
(&
out
, 0);

5304 i‡(
	gscheme
 !
NULL
 && 
scheme
->
Àn
 > 0) {

5305 
mbuf_≠≥nd
(&
out
, 
scheme
->
p
, scheme->
Àn
);

5306 
mbuf_≠≥nd
(&
out
, "://", 3);

5309 i‡(
	gu£r_öfo
 !
NULL
 && 
u£r_öfo
->
Àn
 > 0) {

5310 
mbuf_≠≥nd
(&
out
, 
u£r_öfo
->
p
, u£r_öfo->
Àn
);

5311 
mbuf_≠≥nd
(&
out
, "@", 1);

5314 i‡(
	gho°
 !
NULL
 && 
ho°
->
Àn
 > 0) {

5315 
mbuf_≠≥nd
(&
out
, 
ho°
->
p
, ho°->
Àn
);

5318 i‡(
	gp‹t
 != 0) {

5319 
p‹t_°r
[20];

5320 
	gp‹t_°r_Àn
 = 
•rötf
(
p‹t_°r
, ":%u", 
p‹t
);

5321 
mbuf_≠≥nd
(&
out
, 
p‹t_°r
, 
p‹t_°r_Àn
);

5324 i‡(
	g∑th
 !
NULL
 && 
∑th
->
Àn
 > 0) {

5325 i‡(
n‹mÆize_∑th
) {

5326 
mg_°r
 
≈©h
 = 
mg_°rdup
(*
∑th
);

5327 i‡(
	g≈©h
.
	gÀn
 !
∑th
->
Àn
Ë
out
;

5328 i‡(!
mg_n‹mÆize_uri_∑th
(
∑th
, &
≈©h
)) {

5329 
‰ì
((*Ë
≈©h
.
p
);

5330 
	gout
;

5332 
mbuf_≠≥nd
(&
out
, 
≈©h
.
p
,Ç∑th.
Àn
);

5333 
‰ì
((*Ë
≈©h
.
p
);

5335 
mbuf_≠≥nd
(&
out
, 
∑th
->
p
,Ö©h->
Àn
);

5337 } i‡(
	gn‹mÆize_∑th
) {

5338 
mbuf_≠≥nd
(&
out
, "/", 1);

5341 i‡(
	gquîy
 !
NULL
 && 
quîy
->
Àn
 > 0) {

5342 
mbuf_≠≥nd
(&
out
, "?", 1);

5343 
mbuf_≠≥nd
(&
out
, 
quîy
->
p
, quîy->
Àn
);

5346 i‡(
	g‰agmít
 !
NULL
 && 
‰agmít
->
Àn
 > 0) {

5347 
mbuf_≠≥nd
(&
out
, "#", 1);

5348 
mbuf_≠≥nd
(&
out
, 
‰agmít
->
p
, føgmít->
Àn
);

5351 
	gªsu…
 = 0;

5353 
	gout
:

5354 i‡(
ªsu…
 == 0) {

5355 
uri
->
p
 = 
out
.
buf
;

5356 
	guri
->
	gÀn
 = 
out
.
Àn
;

5358 
mbuf_‰ì
(&
out
);

5359 
	guri
->
	gp
 = 
NULL
;

5360 
	guri
->
	gÀn
 = 0;

5362  
	gªsu…
;

5364 #ifde‡
MG_MODULE_LINES


5372 #i‡
MG_ENABLE_HTTP


5384 
	sÆtbuf
 {

5385 
mbuf
 
	gm
;

5386 *
	gu£r_buf
;

5387 
size_t
 
	gÀn
;

5388 
size_t
 
	gu£r_buf_size
;

5394 
MG_INTERNAL
 
Ætbuf_öô
(
Ætbuf
 *
ab
, *
buf
, 
size_t
 
buf_size
) {

5395 
mbuf_öô
(&
ab
->
m
, 0);

5396 
	gab
->
	gu£r_buf
 = 
buf
;

5397 
	gab
->
	gu£r_buf_size
 = 
buf_size
;

5398 
	gab
->
	gÀn
 = 0;

5404 
MG_INTERNAL
 
Ætbuf_≠≥nd
(
Ætbuf
 *
ab
, 
c
) {

5405 i‡(
	gab
->
	gÀn
 <áb->
	gu£r_buf_size
) {

5407 
	gab
->
	gu£r_buf
[
ab
->
Àn
++] = 
c
;

5416 i‡(
	gab
->
	gÀn
 > 0 &&áb->
	gm
.len == 0) {

5417 
mbuf_≠≥nd
(&
ab
->
m
,áb->
u£r_buf
,áb->
Àn
);

5420 
mbuf_≠≥nd
(&
ab
->
m
, &
c
, 1);

5421 
	gab
->
	gÀn
 = 
ab
->
m
.
Àn
;

5428 
MG_INTERNAL
 
Ætbuf_ª£t
(
Ætbuf
 *
ab
) {

5429 
mbuf_‰ì
(&
ab
->
m
);

5430 
	gab
->
	gÀn
 = 0;

5437 
MG_INTERNAL
 
Ætbuf_ªÆloˇãd
(
Ætbuf
 *
ab
) {

5438  
	gab
->
	gÀn
 >áb->
	gu£r_buf_size
;

5445 
MG_INTERNAL
 *
Ætbuf_gë_buf
(
Ætbuf
 *
ab
, 
åim
) {

5446 i‡(
Ætbuf_ªÆloˇãd
(
ab
)) {

5447 i‡(
	gåim
) {

5448 
mbuf_åim
(&
ab
->
m
);

5450  
	gab
->
	gm
.
	gbuf
;

5452  
	gab
->
	gu£r_buf
;

5458 c⁄° *
	gmg_vîsi⁄_hódî
 = "M⁄goo£/" 
MG_VERSION
;

5460 
	emg_hâp_¥Ÿo_d©a_ty≥
 { 
	gDATA_NONE
, 
	gDATA_FILE
, 
	gDATA_PUT
 };

5462 
	smg_hâp_¥Ÿo_d©a_fûe
 {

5463 
FILE
 *
	gÂ
;

5464 
öt64_t
 
	g˛
;

5465 
öt64_t
 
	g£¡
;

5466 
	gkì∑live
;

5467 
mg_hâp_¥Ÿo_d©a_ty≥
 
	gty≥
;

5470 #i‡
MG_ENABLE_HTTP_CGI


5471 
	smg_hâp_¥Ÿo_d©a_cgi
 {

5472 
mg_c⁄√˘i⁄
 *
	gcgi_nc
;

5476 
	smg_hâp_¥Ÿo_d©a_chuncked
 {

5477 
öt64_t
 
	gbody_Àn
;

5480 
	smg_hâp_ídpoöt
 {

5481 
mg_hâp_ídpoöt
 *
	g√xt
;

5482 
mg_°r
 
	guri_∑âîn
;

5483 *
	gauth_domaö
;

5484 *
	gauth_fûe
;

5486 
mg_evít_h™dÀr_t
 
	gh™dÀr
;

5487 #i‡
MG_ENABLE_CALLBACK_USERDATA


5488 *
	gu£r_d©a
;

5492 
	emg_hâp_mu…ù¨t_°ªam_°©e
 {

5493 
	gMPS_BEGIN
,

5494 
	gMPS_WAITING_FOR_BOUNDARY
,

5495 
	gMPS_WAITING_FOR_CHUNK
,

5496 
	gMPS_GOT_CHUNK
,

5497 
	gMPS_GOT_BOUNDARY
,

5498 
	gMPS_FINALIZE
,

5499 
	gMPS_FINISHED


5502 
	smg_hâp_mu…ù¨t_°ªam
 {

5503 c⁄° *
	gbound¨y
;

5504 
	gbound¨y_Àn
;

5505 c⁄° *
	gv¨_«me
;

5506 c⁄° *
	gfûe_«me
;

5507 *
	gu£r_d©a
;

5508 
	g¥ev_io_Àn
;

5509 
mg_hâp_mu…ù¨t_°ªam_°©e
 
	g°©e
;

5510 
	g¥o˚ssög_∑π
;

5513 
	smg_ªvî£_¥oxy_d©a
 {

5514 
mg_c⁄√˘i⁄
 *
	glöked_c⁄n
;

5517 
	smg_ws_¥Ÿo_d©a
 {

5524 
size_t
 
	gªass_Àn
;

5527 
	smg_hâp_¥Ÿo_d©a
 {

5528 #i‡
MG_ENABLE_FILESYSTEM


5529 
mg_hâp_¥Ÿo_d©a_fûe
 
	gfûe
;

5531 #i‡
MG_ENABLE_HTTP_CGI


5532 
mg_hâp_¥Ÿo_d©a_cgi
 
	gcgi
;

5534 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


5535 
mg_hâp_mu…ù¨t_°ªam
 
	gmp_°ªam
;

5537 #i‡
MG_ENABLE_HTTP_WEBSOCKET


5538 
mg_ws_¥Ÿo_d©a
 
	gws_d©a
;

5540 
mg_hâp_¥Ÿo_d©a_chuncked
 
	gchunk
;

5541 
mg_hâp_ídpoöt
 *
	gídpoöts
;

5542 
mg_evít_h™dÀr_t
 
	gídpoöt_h™dÀr
;

5543 
mg_ªvî£_¥oxy_d©a
 
	gªvî£_¥oxy_d©a
;

5544 
size_t
 
	grcvd
;

5547 
mg_hâp_c⁄n_de°ru˘‹
(*
¥Ÿo_d©a
);

5548 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_hâp_ba£
(

5549 
mg_mgr
 *
mgr
, 
MG_CB
(
mg_evít_h™dÀr_t
 
ev_h™dÀr
, *
u£r_d©a
),

5550 
mg_c⁄√˘_›ts
 
›ts
, c⁄° *
scheme1
, c⁄° *
scheme2
,

5551 c⁄° *
scheme_s¶1
, c⁄° *
scheme_s¶2
, c⁄° *
uæ
,

5552 
mg_°r
 *
∑th
, mg_°∏*
u£r_öfo
, mg_°∏*
ho°
);

5554 
mg_hâp_¥Ÿo_d©a
 *
mg_hâp_gë_¥Ÿo_d©a
(

5555 
mg_c⁄√˘i⁄
 *
c
) {

5556 i‡(
	gc
->
	g¥Ÿo_d©a
 =
NULL
) {

5557 
c
->
¥Ÿo_d©a
 = 
MG_CALLOC
(1, (
mg_hâp_¥Ÿo_d©a
));

5558 
	gc
->
	g¥Ÿo_d©a_de°ru˘‹
 = 
mg_hâp_c⁄n_de°ru˘‹
;

5561  (
	gmg_hâp_¥Ÿo_d©a
 *Ë
	gc
->
	g¥Ÿo_d©a
;

5564 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


5565 
mg_hâp_‰ì_¥Ÿo_d©a_mp_°ªam
(

5566 
mg_hâp_mu…ù¨t_°ªam
 *
mp
) {

5567 
MG_FREE
((*Ë
mp
->
bound¨y
);

5568 
MG_FREE
((*Ë
mp
->
v¨_«me
);

5569 
MG_FREE
((*Ë
mp
->
fûe_«me
);

5570 
mem£t
(
mp
, 0, (*mp));

5574 #i‡
MG_ENABLE_FILESYSTEM


5575 
mg_hâp_‰ì_¥Ÿo_d©a_fûe
(
mg_hâp_¥Ÿo_d©a_fûe
 *
d
) {

5576 i‡(
	gd
 !
NULL
) {

5577 i‡(
d
->
Â
 !
NULL
) {

5578 
f˛o£
(
d
->
Â
);

5580 
mem£t
(
d
, 0, (
mg_hâp_¥Ÿo_d©a_fûe
));

5585 
mg_hâp_‰ì_¥Ÿo_d©a_ídpoöts
(
mg_hâp_ídpoöt
 **
ï
) {

5586 
mg_hâp_ídpoöt
 *
	gcuºít
 = *
ï
;

5588 
	gcuºít
 !
NULL
) {

5589 
mg_hâp_ídpoöt
 *
tmp
 = 
cuºít
->
√xt
;

5590 
MG_FREE
((*Ë
cuºít
->
uri_∑âîn
.
p
);

5591 
MG_FREE
((*Ë
cuºít
->
auth_domaö
);

5592 
MG_FREE
((*Ë
cuºít
->
auth_fûe
);

5593 
MG_FREE
(
cuºít
);

5594 
	gcuºít
 = 
tmp
;

5597 
	gï
 = 
NULL
;

5600 
mg_hâp_‰ì_ªvî£_¥oxy_d©a
(
mg_ªvî£_¥oxy_d©a
 *
Ωd
) {

5601 i‡(
	gΩd
->
	glöked_c⁄n
 !
NULL
) {

5607 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
Ωd
->
löked_c⁄n
);

5608 i‡(
	gpd
->
	gªvî£_¥oxy_d©a
.
	glöked_c⁄n
 !
NULL
) {

5609 
pd
->
ªvî£_¥oxy_d©a
.
löked_c⁄n
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

5610 
	gpd
->
	gªvî£_¥oxy_d©a
.
	glöked_c⁄n
 = 
NULL
;

5612 
	gΩd
->
	glöked_c⁄n
 = 
NULL
;

5616 
mg_hâp_c⁄n_de°ru˘‹
(*
¥Ÿo_d©a
) {

5617 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = (mg_hâp_¥Ÿo_d©®*Ë
¥Ÿo_d©a
;

5618 #i‡
MG_ENABLE_FILESYSTEM


5619 
mg_hâp_‰ì_¥Ÿo_d©a_fûe
(&
pd
->
fûe
);

5621 #i‡
MG_ENABLE_HTTP_CGI


5622 
mg_hâp_‰ì_¥Ÿo_d©a_cgi
(&
pd
->
cgi
);

5624 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


5625 
mg_hâp_‰ì_¥Ÿo_d©a_mp_°ªam
(&
pd
->
mp_°ªam
);

5627 
mg_hâp_‰ì_¥Ÿo_d©a_ídpoöts
(&
pd
->
ídpoöts
);

5628 
mg_hâp_‰ì_ªvî£_¥oxy_d©a
(&
pd
->
ªvî£_¥oxy_d©a
);

5629 
MG_FREE
(
¥Ÿo_d©a
);

5632 #i‡
MG_ENABLE_FILESYSTEM


5634 
	#MIME_ENTRY
(
_ext
, 
_ty≥
) \

5635 { 
_ext
, (_extË- 1, 
_ty≥
 }

	)

5637 c⁄° *
	gexãnsi⁄
;

5638 
size_t
 
	gext_Àn
;

5639 c⁄° *
	gmime_ty≥
;

5640 } 
	gmg_°©ic_buûtö_mime_ty≥s
[] = {

5641 
MIME_ENTRY
("html", "text/html"),

5642 
MIME_ENTRY
("html", "text/html"),

5643 
MIME_ENTRY
("htm", "text/html"),

5644 
MIME_ENTRY
("shtm", "text/html"),

5645 
MIME_ENTRY
("shtml", "text/html"),

5646 
MIME_ENTRY
("css", "text/css"),

5647 
MIME_ENTRY
("js", "application/x-javascript"),

5648 
MIME_ENTRY
("ico", "image/x-icon"),

5649 
MIME_ENTRY
("gif", "image/gif"),

5650 
MIME_ENTRY
("jpg", "image/jpeg"),

5651 
MIME_ENTRY
("jpeg", "image/jpeg"),

5652 
MIME_ENTRY
("png", "image/png"),

5653 
MIME_ENTRY
("svg", "image/svg+xml"),

5654 
MIME_ENTRY
("txt", "text/plain"),

5655 
MIME_ENTRY
("torrent", "application/x-bittorrent"),

5656 
MIME_ENTRY
("wav", "audio/x-wav"),

5657 
MIME_ENTRY
("mp3", "audio/x-mp3"),

5658 
MIME_ENTRY
("mid", "audio/mid"),

5659 
MIME_ENTRY
("m3u", "audio/x-mpegurl"),

5660 
MIME_ENTRY
("ogg", "application/ogg"),

5661 
MIME_ENTRY
("ram", "audio/x-pn-realaudio"),

5662 
MIME_ENTRY
("xml", "text/xml"),

5663 
MIME_ENTRY
("ttf", "application/x-font-ttf"),

5664 
MIME_ENTRY
("json", "application/json"),

5665 
MIME_ENTRY
("xslt", "application/xml"),

5666 
MIME_ENTRY
("xsl", "application/xml"),

5667 
MIME_ENTRY
("ra", "audio/x-pn-realaudio"),

5668 
MIME_ENTRY
("doc", "application/msword"),

5669 
MIME_ENTRY
("exe", "application/octet-stream"),

5670 
MIME_ENTRY
("zip", "application/x-zip-compressed"),

5671 
MIME_ENTRY
("xls", "application/excel"),

5672 
MIME_ENTRY
("tgz", "application/x-tar-gz"),

5673 
MIME_ENTRY
("tar", "application/x-tar"),

5674 
MIME_ENTRY
("gz", "application/x-gunzip"),

5675 
MIME_ENTRY
("arj", "application/x-arj-compressed"),

5676 
MIME_ENTRY
("rar", "application/x-rar-compressed"),

5677 
MIME_ENTRY
("rtf", "application/rtf"),

5678 
MIME_ENTRY
("pdf", "application/pdf"),

5679 
MIME_ENTRY
("swf", "application/x-shockwave-flash"),

5680 
MIME_ENTRY
("mpg", "video/mpeg"),

5681 
MIME_ENTRY
("webm", "video/webm"),

5682 
MIME_ENTRY
("mpeg", "video/mpeg"),

5683 
MIME_ENTRY
("mov", "video/quicktime"),

5684 
MIME_ENTRY
("mp4", "video/mp4"),

5685 
MIME_ENTRY
("m4v", "video/x-m4v"),

5686 
MIME_ENTRY
("asf", "video/x-ms-asf"),

5687 
MIME_ENTRY
("avi", "video/x-msvideo"),

5688 
MIME_ENTRY
("bmp", "image/bmp"),

5689 {
NULL
, 0, NULL}};

5691 
mg_°r
 
mg_gë_mime_ty≥
(c⁄° *
∑th
, c⁄° *
dÊt
,

5692 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

5693 c⁄° *
	gext
, *
	govîrides
;

5694 
size_t
 
	gi
, 
	g∑th_Àn
;

5695 
mg_°r
 
	gr
, 
	gk
, 
	gv
;

5697 
	g∑th_Àn
 = 
°æí
(
∑th
);

5699 
	govîrides
 = 
›ts
->
cu°om_mime_ty≥s
;

5700 (
	govîrides
 = 
mg_√xt_comma_li°_íåy
(
ovîrides
, &
k
, &
v
)Ë!
NULL
) {

5701 
ext
 = 
∑th
 + (
∑th_Àn
 - 
k
.
Àn
);

5702 i‡(
	g∑th_Àn
 > 
	gk
.
	gÀn
 && 
mg_vˇ£cmp
(&
k
, 
ext
) == 0) {

5703  
v
;

5707 
	gi
 = 0; 
	gmg_°©ic_buûtö_mime_ty≥s
[
i
].
	gexãnsi⁄
 !
NULL
; i++) {

5708 
	gext
 = 
∑th
 + (
∑th_Àn
 - 
mg_°©ic_buûtö_mime_ty≥s
[
i
].
ext_Àn
);

5709 i‡(
	g∑th_Àn
 > 
	gmg_°©ic_buûtö_mime_ty≥s
[
i
].
	gext_Àn
 && 
	gext
[-1] == '.' &&

5710 
mg_ˇ£cmp
(
ext
, 
mg_°©ic_buûtö_mime_ty≥s
[
i
].
exãnsi⁄
) == 0) {

5711 
r
.
p
 = 
mg_°©ic_buûtö_mime_ty≥s
[
i
].
mime_ty≥
;

5712 
	gr
.
	gÀn
 = 
°æí
(
r
.
p
);

5713  
	gr
;

5717 
	gr
.
	gp
 = 
dÊt
;

5718 
	gr
.
	gÀn
 = 
°æí
(
r
.
p
);

5719  
	gr
;

5729 
mg_hâp_gë_ªque°_Àn
(c⁄° *
s
, 
buf_Àn
) {

5730 c⁄° *
	gbuf
 = (*Ë
s
;

5731 
	gi
;

5733 
	gi
 = 0; i < 
	gbuf_Àn
; i++) {

5734 i‡(!
i•röt
(
buf
[
i
]Ë&& 
	gbuf
[i] != '\r' && buf[i] != '\n' && buf[i] < 128) {

5736 } i‡(
	gbuf
[
i
] ='\n' && i + 1 < 
buf_Àn
 && 
buf
[i + 1] == '\n') {

5737  
i
 + 2;

5738 } i‡(
	gbuf
[
i
] ='\n' && i + 2 < 
buf_Àn
 && 
buf
[i + 1] == '\r' &&

5739 
buf
[
i
 + 2] == '\n') {

5740  
i
 + 3;

5747 c⁄° *
mg_hâp_∑r£_hódîs
(c⁄° *
s
, c⁄° *
íd
,

5748 
Àn
, 
hâp_mesßge
 *
ªq
) {

5749 
	gi
 = 0;

5750 
	gi
 < (Ë
ARRAY_SIZE
(
ªq
->
hódî_«mes
) - 1) {

5751 
mg_°r
 *
	gk
 = &
ªq
->
hódî_«mes
[
i
], *
	gv
 = &ªq->
hódî_vÆues
[i];

5753 
	gs
 = 
mg_skù
(
s
, 
íd
, ": ", 
k
);

5754 
	gs
 = 
mg_skù
(
s
, 
íd
, "\r\n", 
v
);

5756 
	gv
->
	gÀn
 > 0 && v->
	gp
[
v
->
Àn
 - 1] == ' ') {

5757 
v
->
Àn
--;

5765 i‡(
	gk
->
	gÀn
 !0 && 
v
->
Àn
 == 0) {

5769 i‡(
	gk
->
	gÀn
 =0 || 
v
->
Àn
 == 0) {

5770 
k
->
p
 = 
v
->∞
NULL
;

5771 
	gk
->
	gÀn
 = 
v
->
Àn
 = 0;

5775 i‡(!
mg_nˇ£cmp
(
k
->
p
, "Content-Length", 14)) {

5776 
	gªq
->
	gbody
.
	gÀn
 = (
size_t
Ë
to64
(
v
->
p
);

5777 
	gªq
->
	gmesßge
.
	gÀn
 = 
Àn
 + 
ªq
->
body
.len;

5780 
	gi
++;

5783  
	gs
;

5786 
mg_∑r£_hâp
(c⁄° *
s
, 
n
, 
hâp_mesßge
 *
hm
, 
is_ªq
) {

5787 c⁄° *
	gíd
, *
	gqs
;

5788 
	gÀn
 = 
mg_hâp_gë_ªque°_Àn
(
s
, 
n
);

5790 i‡(
	gÀn
 <0Ë 
Àn
;

5792 
mem£t
(
hm
, 0, (*hm));

5793 
	ghm
->
	gmesßge
.
	gp
 = 
s
;

5794 
	ghm
->
	gbody
.
	gp
 = 
s
 + 
Àn
;

5795 
	ghm
->
	gmesßge
.
	gÀn
 = 
hm
->
body
.
Àn
 = (
size_t
) ~0;

5796 
	gíd
 = 
s
 + 
Àn
;

5799 
	gs
 < 
	gíd
 && 
is•a˚
(*(*Ë
s
)) s++;

5801 i‡(
	gis_ªq
) {

5803 
	gs
 = 
mg_skù
(
s
, 
íd
, " ", &
hm
->
mëhod
);

5804 
	gs
 = 
mg_skù
(
s
, 
íd
, " ", &
hm
->
uri
);

5805 
	gs
 = 
mg_skù
(
s
, 
íd
, "\r\n", &
hm
->
¥Ÿo
);

5806 i‡(
	ghm
->
	guri
.
	gp
 <
hm
->
mëhod
.
p
 || hm->
¥Ÿo
.∞<hm->
uri
.p)  -1;

5809 i‡((
	gqs
 = (*Ë
memchr
(
hm
->
uri
.
p
, '?', hm->uri.
Àn
)Ë!
NULL
) {

5810 
hm
->
quîy_°rög
.
p
 = 
qs
 + 1;

5811 
	ghm
->
	gquîy_°rög
.
	gÀn
 = &
hm
->
uri
.
p
[hm->uri.
Àn
] - (
qs
 + 1);

5812 
	ghm
->
	guri
.
	gÀn
 = 
qs
 - 
hm
->
uri
.
p
;

5815 
	gs
 = 
mg_skù
(
s
, 
íd
, " ", &
hm
->
¥Ÿo
);

5816 i‡(
	gíd
 - 
	gs
 < 4 || s[3] != ' ')  -1;

5817 
	ghm
->
	gª•_code
 = 
©oi
(
s
);

5818 i‡(
	ghm
->
	gª•_code
 < 100 || hm->resp_code >= 600)  -1;

5819 
	gs
 += 4;

5820 
	gs
 = 
mg_skù
(
s
, 
íd
, "\r\n", &
hm
->
ª•_°©us_msg
);

5823 
	gs
 = 
mg_hâp_∑r£_hódîs
(
s
, 
íd
, 
Àn
, 
hm
);

5840 i‡(
	ghm
->
	gbody
.
	gÀn
 =(
size_t
Ë~0 && 
is_ªq
 &&

5841 
mg_vˇ£cmp
(&
hm
->
mëhod
, "PUT") != 0 &&

5842 
mg_vˇ£cmp
(&
hm
->
mëhod
, "POST") != 0) {

5843 
hm
->
body
.
Àn
 = 0;

5844 
	ghm
->
	gmesßge
.
	gÀn
 = 
Àn
;

5847  
	gÀn
;

5850 
mg_°r
 *
mg_gë_hâp_hódî
(
hâp_mesßge
 *
hm
, c⁄° *
«me
) {

5851 
size_t
 
	gi
, 
	gÀn
 = 
°æí
(
«me
);

5853 
	gi
 = 0; 
	ghm
->
	ghódî_«mes
[
i
].
	gÀn
 > 0; i++) {

5854 
mg_°r
 *
	gh
 = &
hm
->
hódî_«mes
[
i
], *
	gv
 = &hm->
hódî_vÆues
[i];

5855 i‡(
	gh
->
	gp
 !
NULL
 && 
h
->
Àn
 =À¿&& !
mg_nˇ£cmp
(h->
p
, 
«me
,Üen))

5856  
	gv
;

5859  
	gNULL
;

5862 #i‡
MG_ENABLE_FILESYSTEM


5863 
mg_hâp_å™s„r_fûe_d©a
(
mg_c⁄√˘i⁄
 *
nc
) {

5864 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
nc
);

5865 
	gbuf
[
MG_MAX_HTTP_SEND_MBUF
];

5866 
size_t
 
	gto_ªad
 = 0, 
	gÀ·
 = (size_t)(
pd
->
fûe
.
˛
 -Öd->fûe.
£¡
);

5868 i‡(
	gpd
->
	gfûe
.
	gty≥
 =
DATA_FILE
) {

5869 
mbuf
 *
io
 = &
nc
->
£nd_mbuf
;

5870 i‡(
	gio
->
	gÀn
 >
MG_MAX_HTTP_SEND_MBUF
) {

5871 
to_ªad
 = 0;

5873 
	gto_ªad
 = 
MG_MAX_HTTP_SEND_MBUF
 - 
io
->
Àn
;

5875 i‡(
	gto_ªad
 > 
	gÀ·
) {

5876 
	gto_ªad
 = 
À·
;

5878 i‡(
	gto_ªad
 > 0) {

5879 
size_t
 
	gn
 = 
mg_‰ód
(
buf
, 1, 
to_ªad
, 
pd
->
fûe
.
Â
);

5880 i‡(
	gn
 > 0) {

5881 
mg_£nd
(
nc
, 
buf
, 
n
);

5882 
	gpd
->
	gfûe
.
	g£¡
 +
n
;

5883 
DBG
(("%∞£¡ %d (tŸÆ %d)", 
nc
, (Ë
n
, (Ë
pd
->
fûe
.
£¡
));

5888 i‡(
	gpd
->
	gfûe
.
	g£¡
 >
pd
->
fûe
.
˛
) {

5889 
LOG
(
LL_DEBUG
, ("%∞d⁄e, %d byãs", 
nc
, (Ë
pd
->
fûe
.
£¡
));

5890 i‡(!
	gpd
->
	gfûe
.
	gkì∑live
Ë
	gnc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

5891 
mg_hâp_‰ì_¥Ÿo_d©a_fûe
(&
pd
->
fûe
);

5893 } i‡(
	gpd
->
	gfûe
.
	gty≥
 =
DATA_PUT
) {

5894 
mbuf
 *
io
 = &
nc
->
ªcv_mbuf
;

5895 
size_t
 
	gto_wrôe
 = 
À·
 <0 ? 0 :Üe· < 
io
->
Àn
 ? (size_t)Üeft : io->len;

5896 
size_t
 
	gn
 = 
mg_fwrôe
(
io
->
buf
, 1, 
to_wrôe
, 
pd
->
fûe
.
Â
);

5897 i‡(
	gn
 > 0) {

5898 
mbuf_ªmove
(
io
, 
n
);

5899 
	gpd
->
	gfûe
.
	g£¡
 +
n
;

5901 i‡(
	gn
 =0 || 
pd
->
fûe
.
£¡
 >pd->fûe.
˛
) {

5902 i‡(!
pd
->
fûe
.
kì∑live
Ë
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

5903 
mg_hâp_‰ì_¥Ÿo_d©a_fûe
(&
pd
->
fûe
);

5906 #i‡
MG_ENABLE_HTTP_CGI


5907 i‡(
	gpd
->
	gcgi
.
	gcgi_nc
 !
NULL
) {

5909 i‡(
pd
->
cgi
.
cgi_nc
 !
NULL
) {

5910 
mg_f‹w¨d
(
nc
, 
pd
->
cgi
.
cgi_nc
);

5912 
	gnc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

5924 
size_t
 
mg_hâp_∑r£_chunk
(*
buf
, size_à
Àn
, **
chunk_d©a
,

5925 
size_t
 *
chunk_Àn
) {

5926 *
	gs
 = (*Ë
buf
;

5927 
size_t
 
	gn
 = 0;

5928 
size_t
 
	gi
 = 0;

5931 
	gi
 < 
	gÀn
 && 
isxdigô
(
s
[
i
])) {

5932 
	gn
 *= 16;

5933 
	gn
 +(
s
[
i
] >'0' && s[i] <'9'Ë? s[i] - '0' : 
tﬁowî
(s[i]) - 'a' + 10;

5934 
	gi
++;

5938 i‡(
	gi
 =0 || 
i
 + 2 > 
Àn
 || 
s
[i] != '\r' || s[i + 1] != '\n') {

5941 
	gi
 += 2;

5944 *
	gchunk_d©a
 = (*Ë
s
 + 
i
;

5945 *
	gchunk_Àn
 = 
n
;

5948 
	gi
 +
n
;

5951 i‡(
	gi
 =0 || 
i
 + 2 > 
Àn
 || 
s
[i] != '\r' || s[i + 1] != '\n') {

5954  
	gi
 + 2;

5957 
MG_INTERNAL
 
size_t
 
mg_h™dÀ_chunked
(
mg_c⁄√˘i⁄
 *
nc
,

5958 
hâp_mesßge
 *
hm
, *
buf
,

5959 
size_t
 
bÀn
) {

5960 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
nc
);

5961 *
	gd©a
;

5962 
size_t
 
	gi
, 
	gn
, 
	gd©a_Àn
, 
	gbody_Àn
, 
	gzîo_chunk_ª˚ived
 = 0;

5964 
	gbody_Àn
 = (
size_t
Ë
pd
->
chunk
.
body_Àn
;

5965 
as£π
(
bÀn
 >
body_Àn
);

5968 
	gi
 = 
body_Àn
;

5969 (
	gn
 = 
mg_hâp_∑r£_chunk
(
buf
 + 
i
, 
bÀn
 - i, &
d©a
, &
d©a_Àn
)) > 0;

5970 
	gi
 +
n
) {

5972 
memmove
(
buf
 + 
body_Àn
, 
d©a
, 
d©a_Àn
);

5973 
	gbody_Àn
 +
d©a_Àn
;

5974 
	ghm
->
	gbody
.
	gÀn
 = 
body_Àn
;

5976 i‡(
	gd©a_Àn
 == 0) {

5977 
zîo_chunk_ª˚ived
 = 1;

5978 
	gi
 +
n
;

5983 i‡(
	gi
 > 
	gbody_Àn
) {

5985 
as£π
(
i
 <
bÀn
);

5986 
memmove
(
buf
 + 
body_Àn
, bu‡+ 
i
, 
bÀn
 - i);

5987 
mem£t
(
buf
 + 
body_Àn
 + 
bÀn
 - 
i
, 0, i - body_len);

5988 
	gnc
->
	gªcv_mbuf
.
	gÀn
 -
i
 - 
body_Àn
;

5989 
	gpd
->
	gchunk
.
	gbody_Àn
 = 
body_Àn
;

5992 
	gnc
->
	gÊags
 &~
MG_F_DELETE_CHUNK
;

5993 
mg_ˇŒ
(
nc
,Çc->
h™dÀr
,Çc->
u£r_d©a
, 
MG_EV_HTTP_CHUNK
, 
hm
);

5996 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_DELETE_CHUNK
) {

5997 
mem£t
(
buf
, 0, 
body_Àn
);

5998 
memmove
(
buf
, bu‡+ 
body_Àn
, 
bÀn
 - 
i
);

5999 
	gnc
->
	gªcv_mbuf
.
	gÀn
 -
body_Àn
;

6000 
	ghm
->
	gbody
.
	gÀn
 = 0;

6001 
	gpd
->
	gchunk
.
	gbody_Àn
 = 0;

6004 i‡(
	gzîo_chunk_ª˚ived
) {

6006 
	ghm
->
	gmesßge
.
	gÀn
 =

6007 (
size_t
Ë
pd
->
chunk
.
body_Àn
 + 
bÀn
 - 
i
 + (
hm
->
body
.
p
 - hm->
mesßge
.p);

6011  
	gbody_Àn
;

6014 
mg_hâp_ídpoöt
 *
mg_hâp_gë_ídpoöt_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
,

6015 
mg_°r
 *
uri_∑th
) {

6016 
mg_hâp_¥Ÿo_d©a
 *
	gpd
;

6017 
mg_hâp_ídpoöt
 *
	gªt
 = 
NULL
;

6018 
	gm©ched
, 
	gm©ched_max
 = 0;

6019 
mg_hâp_ídpoöt
 *
	gï
;

6021 i‡(
	gnc
 =
NULL
) {

6022  
NULL
;

6025 
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
nc
);

6027 
	gï
 = 
pd
->
ídpoöts
;

6028 
	gï
 !
NULL
) {

6029 i‡((
m©ched
 = 
mg_m©ch_¥efix_n
(
ï
->
uri_∑âîn
, *
uri_∑th
)) > 0) {

6030 i‡(
	gm©ched
 > 
	gm©ched_max
) {

6032 
	gªt
 = 
ï
;

6033 
	gm©ched_max
 = 
m©ched
;

6037 
	gï
 = 
ï
->
√xt
;

6040  
	gªt
;

6043 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


6044 
mg_hâp_mu…ù¨t_c⁄töue
(
mg_c⁄√˘i⁄
 *
nc
);

6046 
mg_hâp_mu…ù¨t_begö
(
mg_c⁄√˘i⁄
 *
nc
,

6047 
hâp_mesßge
 *
hm
, 
ªq_Àn
);

6051 
mg_hâp_ˇŒ_ídpoöt_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

6052 
hâp_mesßge
 *
hm
);

6054 
dñivî_chunk
(
mg_c⁄√˘i⁄
 *
c
, 
hâp_mesßge
 *
hm
,

6055 
ªq_Àn
) {

6057 
	ghm
->
	gbody
.
	gÀn
 = 
c
->
ªcv_mbuf
.
Àn
 - 
ªq_Àn
;

6058 
	gc
->
	gÊags
 &~
MG_F_DELETE_CHUNK
;

6059 
mg_ˇŒ
(
c
, c->
h™dÀr
, c->
u£r_d©a
, 
MG_EV_HTTP_CHUNK
, 
hm
);

6061 i‡(
	gc
->
	gÊags
 & 
	gMG_F_DELETE_CHUNK
Ëc->
	gªcv_mbuf
.
	gÀn
 = 
ªq_Àn
;

6069 #ifde‡
__xãnß__


6070 
mg_hâp_h™dÀr2
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

6071 *
ev_d©a
 
MG_UD_ARG
(*
u£r_d©a
),

6072 
hâp_mesßge
 *
hm
Ë
__©åibuã__
((
noölöe
));

6074 
mg_hâp_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

6075 *
ev_d©a
 
MG_UD_ARG
(*
u£r_d©a
)) {

6076 
hâp_mesßge
 
	ghm
;

6077 
mg_hâp_h™dÀr2
(
nc
, 
ev
, 
ev_d©a
 
MG_UD_ARG
(
u£r_d©a
), &
hm
);

6080 
mg_hâp_h™dÀr2
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

6081 *
ev_d©a
 
MG_UD_ARG
(*
u£r_d©a
),

6082 
hâp_mesßge
 *
hm
) {

6084 
mg_hâp_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

6085 *
ev_d©a
 
MG_UD_ARG
(*
u£r_d©a
)) {

6086 
hâp_mesßge
 
	gshm
, *
	ghm
 = &
shm
;

6088 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
nc
);

6089 
mbuf
 *
	gio
 = &
nc
->
ªcv_mbuf
;

6090 
	gªq_Àn
;

6091 c⁄° 
	gis_ªq
 = (
nc
->
li°íî
 !
NULL
);

6092 #i‡
MG_ENABLE_HTTP_WEBSOCKET


6093 
mg_°r
 *
	gvec
;

6095 i‡(
	gev
 =
MG_EV_CLOSE
) {

6096 #i‡
MG_ENABLE_HTTP_CGI


6098 i‡(
pd
->
cgi
.
cgi_nc
 !
NULL
) {

6099 
pd
->
cgi
.
cgi_nc
->
u£r_d©a
 = 
NULL
;

6100 
	gpd
->
	gcgi
.
	gcgi_nc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

6103 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


6104 i‡(
	gpd
->
	gmp_°ªam
.
	gbound¨y
 !
NULL
) {

6109 
mg_hâp_mu…ù¨t_∑π
 
mp
;

6110 
mem£t
(&
mp
, 0, (mp));

6111 
	gmp
.
	g°©us
 = -1;

6112 
	gmp
.
	gv¨_«me
 = 
pd
->
mp_°ªam
.
v¨_«me
;

6113 
	gmp
.
	gfûe_«me
 = 
pd
->
mp_°ªam
.
fûe_«me
;

6114 
mg_ˇŒ
(
nc
, (
pd
->
ídpoöt_h™dÀr
 ?Öd->ídpoöt_h™dÀ∏:Çc->
h™dÀr
),

6115 
nc
->
u£r_d©a
, 
MG_EV_HTTP_PART_END
, &
mp
);

6116 
	gmp
.
	gv¨_«me
 = 
NULL
;

6117 
	gmp
.
	gfûe_«me
 = 
NULL
;

6118 
mg_ˇŒ
(
nc
, (
pd
->
ídpoöt_h™dÀr
 ?Öd->ídpoöt_h™dÀ∏:Çc->
h™dÀr
),

6119 
nc
->
u£r_d©a
, 
MG_EV_HTTP_MULTIPART_REQUEST_END
, &
mp
);

6122 i‡(
	gio
->
	gÀn
 > 0 &&

6123 (
	gªq_Àn
 = 
mg_∑r£_hâp
(
io
->
buf
, io->
Àn
, 
hm
, 
is_ªq
)) > 0) {

6128 
	gev2
 = 
is_ªq
 ? 
MG_EV_HTTP_REQUEST
 : 
MG_EV_HTTP_REPLY
;

6129 
	ghm
->
	gmesßge
.
	gÀn
 = 
io
->
Àn
;

6130 
	ghm
->
	gbody
.
	gÀn
 = 
io
->
buf
 + io->
Àn
 - 
hm
->
body
.
p
;

6131 
dñivî_chunk
(
nc
, 
hm
, 
ªq_Àn
);

6132 
mg_hâp_ˇŒ_ídpoöt_h™dÀr
(
nc
, 
ev2
, 
hm
);

6134 
	gpd
->
	grcvd
 = 0;

6137 #i‡
MG_ENABLE_FILESYSTEM


6138 i‡(
	gpd
->
	gfûe
.
	gÂ
 !
NULL
) {

6139 
mg_hâp_å™s„r_fûe_d©a
(
nc
);

6143 
mg_ˇŒ
(
nc
,Çc->
h™dÀr
,Çc->
u£r_d©a
, 
ev
, 
ev_d©a
);

6145 i‡(
	gev
 =
MG_EV_RECV
) {

6146 
mg_°r
 *
s
;

6147 
	gpd
->
	grcvd
 +*(*Ë
ev_d©a
;

6149 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


6150 i‡(
	gpd
->
	gmp_°ªam
.
	gbound¨y
 !
NULL
) {

6151 
mg_hâp_mu…ù¨t_c⁄töue
(
nc
);

6156 
	gªq_Àn
 = 
mg_∑r£_hâp
(
io
->
buf
, io->
Àn
, 
hm
, 
is_ªq
);

6158 i‡(
	gªq_Àn
 > 0 &&

6159 (
	gs
 = 
mg_gë_hâp_hódî
(
hm
, "Tøns„r-Encodög")Ë!
NULL
 &&

6160 
mg_vˇ£cmp
(
s
, "chunked") == 0) {

6161 
mg_h™dÀ_chunked
(
nc
, 
hm
, 
io
->
buf
 + 
ªq_Àn
, io->
Àn
 -Ñeq_len);

6164 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


6165 i‡(
	gªq_Àn
 > 0 && (
	gs
 = 
mg_gë_hâp_hódî
(
hm
, "C⁄ã¡-Ty≥")Ë!
NULL
 &&

6166 
s
->
Àn
 >9 && 
°∫cmp
(s->
p
, "multipart", 9) == 0) {

6167 
mg_hâp_mu…ù¨t_begö
(
nc
, 
hm
, 
ªq_Àn
);

6168 
mg_hâp_mu…ù¨t_c⁄töue
(
nc
);

6174 i‡((
	gªq_Àn
 < 0 ||

6175 (
	gªq_Àn
 =0 && 
io
->
Àn
 >
MG_MAX_HTTP_REQUEST_SIZE
))) {

6176 
DBG
(("invalidÑequest"));

6177 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

6178 } i‡(
	gªq_Àn
 == 0) {

6181 #i‡
MG_ENABLE_HTTP_WEBSOCKET


6182 i‡(
nc
->
li°íî
 =
NULL
 &&

6183 
mg_gë_hâp_hódî
(
hm
, "Sec-WebSocket-Accept")) {

6186 
mbuf_ªmove
(
io
, 
ªq_Àn
);

6187 
	gnc
->
	g¥Ÿo_h™dÀr
 = 
mg_ws_h™dÀr
;

6188 
	gnc
->
	gÊags
 |
MG_F_IS_WEBSOCKET
;

6189 
mg_ˇŒ
(
nc
,Çc->
h™dÀr
,Çc->
u£r_d©a
, 
MG_EV_WEBSOCKET_HANDSHAKE_DONE
,

6190 
NULL
);

6191 
mg_ws_h™dÀr
(
nc
, 
MG_EV_RECV
, 
ev_d©a
 
MG_UD_ARG
(
u£r_d©a
));

6192 } i‡(
	gnc
->
	gli°íî
 !
NULL
 &&

6193 (
vec
 = 
mg_gë_hâp_hódî
(
hm
, "Sec-WebSockë-Key")Ë!
NULL
) {

6194 
mg_hâp_ídpoöt
 *
ï
;

6197 
mbuf_ªmove
(
io
, 
ªq_Àn
);

6198 
	gnc
->
	g¥Ÿo_h™dÀr
 = 
mg_ws_h™dÀr
;

6199 
	gnc
->
	gÊags
 |
MG_F_IS_WEBSOCKET
;

6206 
	gï
 = 
mg_hâp_gë_ídpoöt_h™dÀr
(
nc
->
li°íî
, &
hm
->
uri
);

6207 i‡(
	gï
 !
NULL
) {

6208 
nc
->
h™dÀr
 = 
ï
->handler;

6209 #i‡
MG_ENABLE_CALLBACK_USERDATA


6210 
	gnc
->
	gu£r_d©a
 = 
ï
->
u£r_d©a
;

6215 
mg_ˇŒ
(
nc
,Çc->
h™dÀr
,Çc->
u£r_d©a
, 
MG_EV_WEBSOCKET_HANDSHAKE_REQUEST
,

6216 
hm
);

6217 i‡(!(
	gnc
->
	gÊags
 & (
	gMG_F_CLOSE_IMMEDIATELY
 | 
	gMG_F_SEND_AND_CLOSE
))) {

6218 i‡(
	gnc
->
	g£nd_mbuf
.
	gÀn
 == 0) {

6219 
mg_ws_h™dshake
(
nc
, 
vec
, 
hm
);

6221 
mg_ˇŒ
(
nc
,Çc->
h™dÀr
,Çc->
u£r_d©a
, 
MG_EV_WEBSOCKET_HANDSHAKE_DONE
,

6222 
NULL
);

6223 
mg_ws_h™dÀr
(
nc
, 
MG_EV_RECV
, 
ev_d©a
 
MG_UD_ARG
(
u£r_d©a
));

6227 i‡(
	ghm
->
	gmesßge
.
	gÀn
 > 
	gpd
->
	grcvd
) {

6229 
dñivî_chunk
(
nc
, 
hm
, 
ªq_Àn
);

6230 i‡(
	gnc
->
	gªcv_mbuf_limô
 > 0 &&Çc->
	gªcv_mbuf
.
	gÀn
 >
nc
->
ªcv_mbuf_limô
) {

6231 
LOG
(
LL_ERROR
, ("%pÑecv buffer (%lu bytes)ÉxceedsÅheÜimit "

6233 
nc
, (Ënc->
ªcv_mbuf
.
Àn
,

6234 (Ë
nc
->
ªcv_mbuf_limô
));

6235 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

6239 
	gåiggî_ev
 = 
nc
->
li°íî
 ? 
MG_EV_HTTP_REQUEST
 : 
MG_EV_HTTP_REPLY
;

6240 
	gaddr
[32];

6241 
mg_sock_addr_to_°r
(&
nc
->
ß
, 
addr
, (addr),

6242 
MG_SOCK_STRINGIFY_IP
 | 
MG_SOCK_STRINGIFY_PORT
);

6243 
DBG
(("%∞%†%.*†%.*s", 
nc
, 
addr
, (Ë
hm
->
mëhod
.
Àn
, hm->mëhod.
p
,

6244 (Ë
hm
->
uri
.
Àn
, hm->uri.
p
));

6245 
dñivî_chunk
(
nc
, 
hm
, 
ªq_Àn
);

6247 
mg_hâp_ˇŒ_ídpoöt_h™dÀr
(
nc
, 
åiggî_ev
, 
hm
);

6248 
mbuf_ªmove
(
io
, 
hm
->
mesßge
.
Àn
);

6249 
	gpd
->
	grcvd
 = 0;

6254 
size_t
 
mg_gë_löe_Àn
(c⁄° *
buf
, size_à
buf_Àn
) {

6255 
size_t
 
	gÀn
 = 0;

6256 
	gÀn
 < 
	gbuf_Àn
 && 
	gbuf
[
Àn
] != '\n')Üen++;

6257  
	gÀn
 =
buf_Àn
 ? 0 : 
Àn
 + 1;

6260 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


6261 
mg_hâp_mu…ù¨t_begö
(
mg_c⁄√˘i⁄
 *
nc
,

6262 
hâp_mesßge
 *
hm
, 
ªq_Àn
) {

6263 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
nc
);

6264 
mg_°r
 *
	g˘
;

6265 
mbuf
 *
	gio
 = &
nc
->
ªcv_mbuf
;

6267 
	gbound¨y_buf
[100];

6268 *
	gbound¨y
 = 
bound¨y_buf
;

6269 
	gbound¨y_Àn
;

6271 
	g˘
 = 
mg_gë_hâp_hódî
(
hm
, "Content-Type");

6272 i‡(
	g˘
 =
NULL
) {

6274 
exô_mp
;

6278 i‡(
	g˘
->
	gÀn
 < 9 || 
°∫cmp
(
˘
->
p
, "multipart", 9) != 0) {

6279 
exô_mp
;

6282 
	gbound¨y_Àn
 =

6283 
mg_hâp_∑r£_hódî2
(
˘
, "bound¨y", &
bound¨y
, (
bound¨y_buf
));

6284 i‡(
	gbound¨y_Àn
 == 0) {

6289 
nc
->
Êags
 = 
MG_F_CLOSE_IMMEDIATELY
;

6290 
DBG
(("invalidÑequest"));

6291 
	gexô_mp
;

6296 i‡(
	gpd
->
	gmp_°ªam
.
	gbound¨y
 !
NULL
) {

6301 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

6303 
mg_hâp_ídpoöt
 *
	gï
 = 
NULL
;

6304 
	gpd
->
	gmp_°ªam
.
	g°©e
 = 
MPS_BEGIN
;

6305 
	gpd
->
	gmp_°ªam
.
	gbound¨y
 = 
°rdup
(
bound¨y
);

6306 
	gpd
->
	gmp_°ªam
.
	gbound¨y_Àn
 = 
°æí
(
bound¨y
);

6307 
	gpd
->
	gmp_°ªam
.
	gv¨_«me
 = 
pd
->
mp_°ªam
.
fûe_«me
 = 
NULL
;

6308 
	gpd
->
	gídpoöt_h™dÀr
 = 
nc
->
h™dÀr
;

6310 
	gï
 = 
mg_hâp_gë_ídpoöt_h™dÀr
(
nc
->
li°íî
, &
hm
->
uri
);

6311 i‡(
	gï
 !
NULL
) {

6312 
pd
->
ídpoöt_h™dÀr
 = 
ï
->
h™dÀr
;

6315 
mg_hâp_ˇŒ_ídpoöt_h™dÀr
(
nc
, 
MG_EV_HTTP_MULTIPART_REQUEST
, 
hm
);

6317 
mbuf_ªmove
(
io
, 
ªq_Àn
);

6319 
	gexô_mp
:

6320 i‡(
bound¨y
 !
bound¨y_buf
Ë
MG_FREE
(boundary);

6323 
	#CONTENT_DISPOSITION
 "C⁄ã¡-Di•osôi⁄: "

	)

6325 
mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
mg_c⁄√˘i⁄
 *
c
, 
ev
,

6326 c⁄° *
d©a
, 
size_t
 
d©a_Àn
) {

6327 
mg_hâp_mu…ù¨t_∑π
 
	gmp
;

6328 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
c
);

6329 
mem£t
(&
mp
, 0, (mp));

6331 
	gmp
.
	gv¨_«me
 = 
pd
->
mp_°ªam
.
v¨_«me
;

6332 
	gmp
.
	gfûe_«me
 = 
pd
->
mp_°ªam
.
fûe_«me
;

6333 
	gmp
.
	gu£r_d©a
 = 
pd
->
mp_°ªam
.
u£r_d©a
;

6334 
	gmp
.
	gd©a
.
	gp
 = 
d©a
;

6335 
	gmp
.
	gd©a
.
	gÀn
 = 
d©a_Àn
;

6336 
mg_ˇŒ
(
c
, 
pd
->
ídpoöt_h™dÀr
, c->
u£r_d©a
, 
ev
, &
mp
);

6337 
	gpd
->
	gmp_°ªam
.
	gu£r_d©a
 = 
mp
.
u£r_d©a
;

6340 
mg_hâp_mu…ù¨t_gŸ_chunk
(
mg_c⁄√˘i⁄
 *
c
) {

6341 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
c
);

6342 
mbuf
 *
	gio
 = &
c
->
ªcv_mbuf
;

6344 
mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
c
, 
MG_EV_HTTP_PART_DATA
, 
io
->
buf
,

6345 
pd
->
mp_°ªam
.
¥ev_io_Àn
);

6346 
mbuf_ªmove
(
io
, 
pd
->
mp_°ªam
.
¥ev_io_Àn
);

6347 
	gpd
->
	gmp_°ªam
.
	g¥ev_io_Àn
 = 0;

6348 
	gpd
->
	gmp_°ªam
.
	g°©e
 = 
MPS_WAITING_FOR_CHUNK
;

6353 
mg_hâp_mu…ù¨t_föÆize
(
mg_c⁄√˘i⁄
 *
c
) {

6354 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
c
);

6356 
mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
c
, 
MG_EV_HTTP_PART_END
, 
NULL
, 0);

6357 
MG_FREE
((*Ë
pd
->
mp_°ªam
.
fûe_«me
);

6358 
	gpd
->
	gmp_°ªam
.
	gfûe_«me
 = 
NULL
;

6359 
MG_FREE
((*Ë
pd
->
mp_°ªam
.
v¨_«me
);

6360 
	gpd
->
	gmp_°ªam
.
	gv¨_«me
 = 
NULL
;

6361 
mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
c
, 
MG_EV_HTTP_MULTIPART_REQUEST_END
, 
NULL
, 0);

6362 
mg_hâp_‰ì_¥Ÿo_d©a_mp_°ªam
(&
pd
->
mp_°ªam
);

6363 
	gpd
->
	gmp_°ªam
.
	g°©e
 = 
MPS_FINISHED
;

6368 
mg_hâp_mu…ù¨t_waô_f‹_bound¨y
(
mg_c⁄√˘i⁄
 *
c
) {

6369 c⁄° *
	gbound¨y
;

6370 
mbuf
 *
	gio
 = &
c
->
ªcv_mbuf
;

6371 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
c
);

6373 i‡(
	gpd
->
	gmp_°ªam
.
	gbound¨y
 =
NULL
) {

6374 
pd
->
mp_°ªam
.
°©e
 = 
MPS_FINALIZE
;

6375 
DBG
(("InvalidÑequest: boundaryÇot initialized"));

6379 i‡((Ë
	gio
->
	gÀn
 < 
	gpd
->
	gmp_°ªam
.
	gbound¨y_Àn
 + 2) {

6383 
	gbound¨y
 = 
c_°∫°r
(
io
->
buf
, 
pd
->
mp_°ªam
.
bound¨y
, io->
Àn
);

6384 i‡(
	gbound¨y
 !
NULL
) {

6385 c⁄° *
bound¨y_íd
 = (
bound¨y
 + 
pd
->
mp_°ªam
.
bound¨y_Àn
);

6386 i‡(
	gio
->
	gÀn
 - (
	gbound¨y_íd
 - io->
	gbuf
) < 4) {

6389 i‡(
°∫cmp
(
bound¨y_íd
, "--\r\n", 4) == 0) {

6390 
pd
->
mp_°ªam
.
°©e
 = 
MPS_FINALIZE
;

6391 
mbuf_ªmove
(
io
, (
bound¨y_íd
 - io->
buf
) + 4);

6393 
	gpd
->
	gmp_°ªam
.
	g°©e
 = 
MPS_GOT_BOUNDARY
;

6402 
mg_hâp_∑r£_hódî_öã∫Æ
(
mg_°r
 *
hdr
,

6403 c⁄° *
v¨_«me
,

6404 
Ætbuf
 *
ab
);

6406 
mg_hâp_mu…ù¨t_¥o˚ss_bound¨y
(
mg_c⁄√˘i⁄
 *
c
) {

6407 
	gd©a_size
;

6408 c⁄° *
	gbound¨y
, *
	gblock_begö
;

6409 
mbuf
 *
	gio
 = &
c
->
ªcv_mbuf
;

6410 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
c
);

6411 
Ætbuf
 
	gab_fûe_«me
, 
	gab_v¨_«me
;

6412 
	glöe_Àn
;

6413 
	gbound¨y
 = 
c_°∫°r
(
io
->
buf
, 
pd
->
mp_°ªam
.
bound¨y
, io->
Àn
);

6414 
	gblock_begö
 = 
bound¨y
 + 
pd
->
mp_°ªam
.
bound¨y_Àn
 + 2;

6415 
	gd©a_size
 = 
io
->
Àn
 - (
block_begö
 - io->
buf
);

6417 
Ætbuf_öô
(&
ab_fûe_«me
, 
NULL
, 0);

6418 
Ætbuf_öô
(&
ab_v¨_«me
, 
NULL
, 0);

6420 
	gd©a_size
 > 0 &&

6421 (
	glöe_Àn
 = 
mg_gë_löe_Àn
(
block_begö
, 
d©a_size
)) != 0) {

6422 i‡(
löe_Àn
 > (Ë(
CONTENT_DISPOSITION
) &&

6423 
mg_nˇ£cmp
(
block_begö
, 
CONTENT_DISPOSITION
,

6424 (
CONTENT_DISPOSITION
) - 1) == 0) {

6425 
mg_°r
 
hódî
;

6427 
	ghódî
.
	gp
 = 
block_begö
 + (
CONTENT_DISPOSITION
) - 1;

6428 
	ghódî
.
	gÀn
 = 
löe_Àn
 - (
CONTENT_DISPOSITION
) - 1;

6430 
Ætbuf_ª£t
(&
ab_v¨_«me
);

6431 
mg_hâp_∑r£_hódî_öã∫Æ
(&
hódî
, "«me", &
ab_v¨_«me
);

6433 
Ætbuf_ª£t
(&
ab_fûe_«me
);

6434 
mg_hâp_∑r£_hódî_öã∫Æ
(&
hódî
, "fûíame", &
ab_fûe_«me
);

6436 
	gblock_begö
 +
löe_Àn
;

6437 
	gd©a_size
 -
löe_Àn
;

6442 i‡(
	glöe_Àn
 =2 && 
mg_nˇ£cmp
(
block_begö
, "\r\n", 2) == 0) {

6443 
mbuf_ªmove
(
io
, 
block_begö
 - io->
buf
 + 2);

6445 i‡(
	gpd
->
	gmp_°ªam
.
	g¥o˚ssög_∑π
 != 0) {

6446 
mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
c
, 
MG_EV_HTTP_PART_END
, 
NULL
, 0);

6450 
Ætbuf_≠≥nd
(&
ab_fûe_«me
, '\0');

6451 
Ætbuf_≠≥nd
(&
ab_fûe_«me
, '\0');

6452 
Ætbuf_≠≥nd
(&
ab_v¨_«me
, '\0');

6453 
Ætbuf_≠≥nd
(&
ab_v¨_«me
, '\0');

6455 
MG_FREE
((*Ë
pd
->
mp_°ªam
.
fûe_«me
);

6456 
	gpd
->
	gmp_°ªam
.
	gfûe_«me
 = 
Ætbuf_gë_buf
(&
ab_fûe_«me
, 1 );

6457 
MG_FREE
((*Ë
pd
->
mp_°ªam
.
v¨_«me
);

6458 
	gpd
->
	gmp_°ªam
.
	gv¨_«me
 = 
Ætbuf_gë_buf
(&
ab_v¨_«me
, 1 );

6460 
mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
c
, 
MG_EV_HTTP_PART_BEGIN
, 
NULL
, 0);

6461 
	gpd
->
	gmp_°ªam
.
	g°©e
 = 
MPS_WAITING_FOR_CHUNK
;

6462 
	gpd
->
	gmp_°ªam
.
	g¥o˚ssög_∑π
++;

6466 
	gblock_begö
 +
löe_Àn
;

6469 
	gpd
->
	gmp_°ªam
.
	g°©e
 = 
MPS_WAITING_FOR_BOUNDARY
;

6471 
Ætbuf_ª£t
(&
ab_v¨_«me
);

6472 
Ætbuf_ª£t
(&
ab_fûe_«me
);

6477 
mg_hâp_mu…ù¨t_c⁄töue_waô_f‹_chunk
(
mg_c⁄√˘i⁄
 *
c
) {

6478 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
c
);

6479 
mbuf
 *
	gio
 = &
c
->
ªcv_mbuf
;

6481 c⁄° *
	gbound¨y
;

6482 i‡((Ë
	gio
->
	gÀn
 < 
	gpd
->
	gmp_°ªam
.
	gbound¨y_Àn
 + 6 ) {

6486 
	gbound¨y
 = 
c_°∫°r
(
io
->
buf
, 
pd
->
mp_°ªam
.
bound¨y
, io->
Àn
);

6487 i‡(
	gbound¨y
 =
NULL
 && 
pd
->
mp_°ªam
.
¥ev_io_Àn
 == 0) {

6488 
pd
->
mp_°ªam
.
¥ev_io_Àn
 = 
io
->
Àn
;

6490 } i‡(
	gbound¨y
 =
NULL
 &&

6491 (Ë
io
->
Àn
 >

6492 
pd
->
mp_°ªam
.
¥ev_io_Àn
 +Öd->mp_°ªam.
bound¨y_Àn
 + 4) {

6493 
pd
->
mp_°ªam
.
°©e
 = 
MPS_GOT_CHUNK
;

6495 } i‡(
	gbound¨y
 !
NULL
) {

6496 
d©a_size
 = (
bound¨y
 - 
io
->
buf
 - 4);

6497 
mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
c
, 
MG_EV_HTTP_PART_DATA
, 
io
->
buf
, 
d©a_size
);

6498 
mbuf_ªmove
(
io
, (
bound¨y
 - io->
buf
));

6499 
	gpd
->
	gmp_°ªam
.
	g¥ev_io_Àn
 = 0;

6500 
	gpd
->
	gmp_°ªam
.
	g°©e
 = 
MPS_WAITING_FOR_BOUNDARY
;

6507 
mg_hâp_mu…ù¨t_c⁄töue
(
mg_c⁄√˘i⁄
 *
c
) {

6508 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
c
);

6510 
	gpd
->
	gmp_°ªam
.
	g°©e
) {

6511 
	gMPS_BEGIN
: {

6512 
pd
->
mp_°ªam
.
°©e
 = 
MPS_WAITING_FOR_BOUNDARY
;

6515 
	gMPS_WAITING_FOR_BOUNDARY
: {

6516 i‡(
mg_hâp_mu…ù¨t_waô_f‹_bound¨y
(
c
) == 0) {

6521 
	gMPS_GOT_BOUNDARY
: {

6522 i‡(
mg_hâp_mu…ù¨t_¥o˚ss_bound¨y
(
c
) == 0) {

6527 
	gMPS_WAITING_FOR_CHUNK
: {

6528 i‡(
mg_hâp_mu…ù¨t_c⁄töue_waô_f‹_chunk
(
c
) == 0) {

6533 
	gMPS_GOT_CHUNK
: {

6534 i‡(
mg_hâp_mu…ù¨t_gŸ_chunk
(
c
) == 0) {

6539 
	gMPS_FINALIZE
: {

6540 i‡(
mg_hâp_mu…ù¨t_föÆize
(
c
) == 0) {

6545 
	gMPS_FINISHED
: {

6546 
mbuf_ªmove
(&
c
->
ªcv_mbuf
, c->ªcv_mbuf.
Àn
);

6553 
	sfûe_u∂ﬂd_°©e
 {

6554 *
	gl‚
;

6555 
size_t
 
	gnum_ªcd
;

6556 
FILE
 *
	gÂ
;

6561 
mg_£t_¥Ÿocﬁ_hâp_websockë
(
mg_c⁄√˘i⁄
 *
nc
) {

6562 
	gnc
->
	g¥Ÿo_h™dÀr
 = 
mg_hâp_h™dÀr
;

6565 c⁄° *
mg_°©us_mesßge
(
°©us_code
) {

6566 
	g°©us_code
) {

6592 #i‡
MG_ENABLE_EXTRA_ERRORS_DESC


6696 
mg_£nd_ª•⁄£_löe_s
(
mg_c⁄√˘i⁄
 *
nc
, 
°©us_code
,

6697 c⁄° 
mg_°r
 
exåa_hódîs
) {

6698 
mg_¥ötf
(
nc
, "HTTP/1.1 %d %s\r\nSîvî: %s\r\n", 
°©us_code
,

6699 
mg_°©us_mesßge
(
°©us_code
), 
mg_vîsi⁄_hódî
);

6700 i‡(
	gexåa_hódîs
.
	gÀn
 > 0) {

6701 
mg_¥ötf
(
nc
, "%.*s\r\n", (Ë
exåa_hódîs
.
Àn
,Éxåa_hódîs.
p
);

6705 
mg_£nd_ª•⁄£_löe
(
mg_c⁄√˘i⁄
 *
nc
, 
°©us_code
,

6706 c⁄° *
exåa_hódîs
) {

6707 
mg_£nd_ª•⁄£_löe_s
(
nc
, 
°©us_code
, 
mg_mk_°r
(
exåa_hódîs
));

6710 
mg_hâp_£nd_ªdúe˘
(
mg_c⁄√˘i⁄
 *
nc
, 
°©us_code
,

6711 c⁄° 
mg_°r
 
loˇti⁄
,

6712 c⁄° 
mg_°r
 
exåa_hódîs
) {

6713 
	gbbody
[100], *
	gpbody
 = 
bbody
;

6714 
	gbl
 = 
mg_a•rötf
(&
pbody
, (
bbody
),

6716 (Ë
loˇti⁄
.
Àn
,Üoˇti⁄.
p
);

6717 
	gbhód
[150], *
	gphód
 = 
bhód
;

6718 
mg_a•rötf
(&
phód
, (
bhód
),

6724 (Ë
loˇti⁄
.
Àn
,Üoˇti⁄.
p
, 
bl
, (Ë
exåa_hódîs
.len,

6725 
exåa_hódîs
.
p
, (exåa_hódîs.
Àn
 > 0 ? "\r\n" : ""));

6726 
mg_£nd_ª•⁄£_löe
(
nc
, 
°©us_code
, 
phód
);

6727 i‡(
	gphód
 !
bhód
Ë
MG_FREE
(
phód
);

6728 
mg_£nd
(
nc
, 
pbody
, 
bl
);

6729 i‡(
	gpbody
 !
bbody
Ë
MG_FREE
(
pbody
);

6732 
mg_£nd_hód
(
mg_c⁄√˘i⁄
 *
c
, 
°©us_code
,

6733 
öt64_t
 
c⁄ã¡_Àngth
, c⁄° *
exåa_hódîs
) {

6734 
mg_£nd_ª•⁄£_löe
(
c
, 
°©us_code
, 
exåa_hódîs
);

6735 i‡(
	gc⁄ã¡_Àngth
 < 0) {

6736 
mg_¥ötf
(
c
, "%s", "Transfer-Encoding: chunked\r\n");

6738 
mg_¥ötf
(
c
, "C⁄ã¡-Lígth: %" 
INT64_FMT
 "\r\n", 
c⁄ã¡_Àngth
);

6740 
mg_£nd
(
c
, "\r\n", 2);

6743 
mg_hâp_£nd_îr‹
(
mg_c⁄√˘i⁄
 *
nc
, 
code
,

6744 c⁄° *
ªas⁄
) {

6745 i‡(!
	gªas⁄
Ëªas⁄ = 
mg_°©us_mesßge
(
code
);

6746 
LOG
(
LL_DEBUG
, ("%∞%d %s", 
nc
, 
code
, 
ªas⁄
));

6747 
mg_£nd_hód
(
nc
, 
code
, 
°æí
(
ªas⁄
),

6749 
mg_£nd
(
nc
, 
ªas⁄
, 
°æí
(reason));

6750 
	gnc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

6753 #i‡
MG_ENABLE_FILESYSTEM


6754 
mg_hâp_c⁄°ru˘_ëag
(*
buf
, 
size_t
 
buf_Àn
,

6755 c⁄° 
cs_°©_t
 *
°
) {

6756 
¢¥ötf
(
buf
, 
buf_Àn
, "\"%lx.%" 
INT64_FMT
 "\"", (Ë
°
->
°_mtime
,

6757 (
öt64_t
Ë
°
->
°_size
);

6760 #i‚de‡
WINCE


6761 
mg_gmt_time_°rög
(*
buf
, 
size_t
 
buf_Àn
, 
time_t
 *
t
) {

6762 
°r·ime
(
buf
, 
buf_Àn
, "%a, %d %b %Y %H:%M:%S GMT", 
gmtime
(
t
));

6766 
mg_gmt_time_°rög
(*
buf
, 
size_t
 
buf_Àn
, 
time_t
 *
t
);

6769 
mg_hâp_∑r£_ønge_hódî
(c⁄° 
mg_°r
 *
hódî
, 
öt64_t
 *
a
,

6770 
öt64_t
 *
b
) {

6775 
	gªsu…
;

6776 *
	gp
 = (*Ë
MG_MALLOC
(
hódî
->
Àn
 + 1);

6777 i‡(
	gp
 =
NULL
)  0;

6778 
mem˝y
(
p
, 
hódî
->p, hódî->
Àn
);

6779 
	gp
[
hódî
->
Àn
] = '\0';

6780 
	gªsu…
 = 
ssˇnf
(
p
, "byãs=%" 
INT64_FMT
 "-%" INT64_FMT, 
a
, 
b
);

6781 
MG_FREE
(
p
);

6782  
	gªsu…
;

6785 
mg_hâp_£rve_fûe
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

6786 c⁄° *
∑th
, c⁄° 
mg_°r
 
mime_ty≥
,

6787 c⁄° 
mg_°r
 
exåa_hódîs
) {

6788 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
nc
);

6789 
cs_°©_t
 
	g°
;

6790 
LOG
(
LL_DEBUG
, ("%∞[%s] %.*s", 
nc
, 
∑th
, (Ë
mime_ty≥
.
Àn
, mime_ty≥.
p
));

6791 i‡(
mg_°©
(
∑th
, &
°
Ë!0 || (
pd
->
fûe
.
Â
 = 
mg_f›í
’©h, "rb")Ë=
NULL
) {

6792 
code
, 
îr
 = 
mg_gë_î∫o
();

6793 
	gîr
) {

6794 
	gEACCES
:

6795 
code
 = 403;

6797 
	gENOENT
:

6798 
code
 = 404;

6801 
code
 = 500;

6803 
mg_hâp_£nd_îr‹
(
nc
, 
code
, "Open failed");

6805 
	gëag
[50], 
	gcuºít_time
[50], 
	gœ°_modifõd
[50], 
	gønge
[70];

6806 
time_t
 
	gt
 = (time_tË
mg_time
();

6807 
öt64_t
 
	gr1
 = 0, 
	gr2
 = 0, 
	g˛
 = 
°
.
°_size
;

6808 
mg_°r
 *
	gønge_hdr
 = 
mg_gë_hâp_hódî
(
hm
, "Range");

6809 
	gn
, 
	g°©us_code
 = 200;

6812 
	gønge
[0] = '\0';

6813 i‡(
	gønge_hdr
 !
NULL
 &&

6814 (
n
 = 
mg_hâp_∑r£_ønge_hódî
(
ønge_hdr
, &
r1
, &
r2
)Ë> 0 && 
	gr1
 >= 0 &&

6815 
r2
 >= 0) {

6817 i‡(
n
 == 1) {

6818 
r2
 = 
˛
 - 1;

6820 i‡(
	gr1
 > 
	gr2
 ||Ñ2 >
˛
) {

6821 
°©us_code
 = 416;

6822 
	g˛
 = 0;

6823 
¢¥ötf
(
ønge
, (range),

6824 "C⁄ã¡-R™ge: byã†*/%" 
INT64_FMT
 "\r\n",

6825 (
öt64_t
Ë
°
.
°_size
);

6827 
	g°©us_code
 = 206;

6828 
	g˛
 = 
r2
 - 
r1
 + 1;

6829 
¢¥ötf
(
ønge
, ‘™ge), "C⁄ã¡-R™ge: byã†%" 
INT64_FMT


6830 "-%" 
INT64_FMT
 "/%" INT64_FMT "\r\n",

6831 
r1
,Ñ1 + 
˛
 - 1, (
öt64_t
Ë
°
.
°_size
);

6832 #i‡
_FILE_OFFSET_BITS
 =64 || 
_POSIX_C_SOURCE
 >= 200112L || \

6833 
	g_XOPEN_SOURCE
 >= 600

6834 
f£eko
(
pd
->
fûe
.
Â
, 
r1
, 
SEEK_SET
);

6836 
f£ek
(
pd
->
fûe
.
Â
, (Ë
r1
, 
SEEK_SET
);

6841 #i‡!
MG_DISABLE_HTTP_KEEP_ALIVE


6843 
mg_°r
 *
	gc⁄n_hdr
 = 
mg_gë_hâp_hódî
(
hm
, "Connection");

6844 i‡(
	gc⁄n_hdr
 !
NULL
) {

6845 
pd
->
fûe
.
kì∑live
 = (
mg_vˇ£cmp
(
c⁄n_hdr
, "keep-alive") == 0);

6847 
	gpd
->
	gfûe
.
	gkì∑live
 = (
mg_vcmp
(&
hm
->
¥Ÿo
, "HTTP/1.1") == 0);

6852 
mg_hâp_c⁄°ru˘_ëag
(
ëag
, ”èg), &
°
);

6853 
mg_gmt_time_°rög
(
cuºít_time
, (cuºít_time), &
t
);

6854 
mg_gmt_time_°rög
(
œ°_modifõd
, ÷a°_modifõd), &
°
.
°_mtime
);

6862 
mg_£nd_ª•⁄£_löe_s
(
nc
, 
°©us_code
, 
exåa_hódîs
);

6863 
mg_¥ötf
(
nc
,

6869 "C⁄ã¡-Lígth: %" 
SIZE_T_FMT


6872 
cuºít_time
, 
œ°_modifõd
, (Ë
mime_ty≥
.
Àn
, mime_ty≥.
p
,

6873 (
pd
->
fûe
.
kì∑live
 ? "kìp-Æive" : "˛o£"), (
size_t
Ë
˛
, 
ønge
,

6874 
ëag
);

6876 
	gpd
->
	gfûe
.
	g˛
 = 
˛
;

6877 
	gpd
->
	gfûe
.
	gty≥
 = 
DATA_FILE
;

6878 
mg_hâp_å™s„r_fûe_d©a
(
nc
);

6882 
mg_hâp_£rve_fûe2
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

6883 
hâp_mesßge
 *
hm
,

6884 
mg_£rve_hâp_›ts
 *
›ts
) {

6885 #i‡
MG_ENABLE_HTTP_SSI


6886 i‡(
mg_m©ch_¥efix
(
›ts
->
ssi_∑âîn
, 
°æí
(›ts->ssi_∑âîn), 
∑th
) > 0) {

6887 
mg_h™dÀ_ssi_ªque°
(
nc
, 
hm
, 
∑th
, 
›ts
);

6891 
mg_hâp_£rve_fûe
(
nc
, 
hm
, 
∑th
, 
mg_gë_mime_ty≥
’©h, "ãxt/∂aö", 
›ts
),

6892 
mg_mk_°r
(
›ts
->
exåa_hódîs
));

6897 
mg_uæ_decode
(c⁄° *
§c
, 
§c_Àn
, *
d°
, 
d°_Àn
,

6898 
is_f‹m_uæ_ícoded
) {

6899 
	gi
, 
	gj
, 
	ga
, 
	gb
;

6900 
	#HEXTOI
(
x
Ë(
	`isdigô
(xË? x - '0' : x - 'W')

	)

6902 
	gi
 = 
j
 = 0; i < 
	g§c_Àn
 && 
	gj
 < 
	gd°_Àn
 - 1; i++, j++) {

6903 i‡(
	g§c
[
i
] == '%') {

6904 i‡(
i
 < 
§c_Àn
 - 2 && 
isxdigô
(*(c⁄° *Ë(
§c
 + i + 1)) &&

6905 
isxdigô
(*(c⁄° *Ë(
§c
 + 
i
 + 2))) {

6906 
a
 = 
tﬁowî
(*(c⁄° *Ë(
§c
 + 
i
 + 1));

6907 
	gb
 = 
tﬁowî
(*(c⁄° *Ë(
§c
 + 
i
 + 2));

6908 
	gd°
[
j
] = (Ë((
HEXTOI
(
a
Ë<< 4Ë| HEXTOI(
b
));

6909 
	gi
 += 2;

6913 } i‡(
	gis_f‹m_uæ_ícoded
 && 
	g§c
[
i
] == '+') {

6914 
d°
[
j
] = ' ';

6916 
	gd°
[
j
] = 
§c
[
i
];

6920 
	gd°
[
j
] = '\0';

6922  
	gi
 >
§c_Àn
 ? 
j
 : -1;

6925 
mg_gë_hâp_v¨
(c⁄° 
mg_°r
 *
buf
, c⁄° *
«me
, *
d°
,

6926 
size_t
 
d°_Àn
) {

6927 c⁄° *
	gp
, *
	ge
, *
	gs
;

6928 
size_t
 
	g«me_Àn
;

6929 
	gÀn
;

6939 i‡(
	gd°
 =
NULL
 || 
d°_Àn
 == 0) {

6940 
Àn
 = -2;

6941 } i‡(
	gbuf
->
	gp
 =
NULL
 || 
«me
 =NULL || 
buf
->
Àn
 == 0) {

6942 
Àn
 = -1;

6943 
	gd°
[0] = '\0';

6945 
	g«me_Àn
 = 
°æí
(
«me
);

6946 
	ge
 = 
buf
->
p
 + buf->
Àn
;

6947 
	gÀn
 = -4;

6948 
	gd°
[0] = '\0';

6950 
	gp
 = 
buf
->
p
;Ö + 
	g«me_Àn
 < 
	ge
;Ö++) {

6951 i‡((
	gp
 =
buf
->
p
 ||Ö[-1] ='&'Ë&&Ö[
«me_Àn
] == '=' &&

6952 !
mg_nˇ£cmp
(
«me
, 
p
, 
«me_Àn
)) {

6953 
	gp
 +
«me_Àn
 + 1;

6954 
	gs
 = (c⁄° *Ë
memchr
(
p
, '&', (
size_t
)(
e
 -Ö));

6955 i‡(
	gs
 =
NULL
) {

6956 
s
 = 
e
;

6958 
	gÀn
 = 
mg_uæ_decode
(
p
, (
size_t
)(
s
 -Ö), 
d°
, 
d°_Àn
, 1);

6960 i‡(
	gÀn
 == -1) {

6961 
Àn
 = -3;

6968  
	gÀn
;

6971 
mg_£nd_hâp_chunk
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
) {

6972 
	gchunk_size
[50];

6973 
	gn
;

6975 
	gn
 = 
¢¥ötf
(
chunk_size
, (chunk_size), "%lX\r\n", (Ë
Àn
);

6976 
mg_£nd
(
nc
, 
chunk_size
, 
n
);

6977 
mg_£nd
(
nc
, 
buf
, 
Àn
);

6978 
mg_£nd
(
nc
, "\r\n", 2);

6981 
mg_¥ötf_hâp_chunk
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
fmt
, ...) {

6982 
	gmem
[
MG_VPRINTF_BUFFER_SIZE
], *
	gbuf
 = 
mem
;

6983 
	gÀn
;

6984 
va_li°
 
	g≠
;

6986 
va_°¨t
(
≠
, 
fmt
);

6987 
	gÀn
 = 
mg_av¥ötf
(&
buf
, (
mem
), 
fmt
, 
≠
);

6988 
va_íd
(
≠
);

6990 i‡(
	gÀn
 >= 0) {

6991 
mg_£nd_hâp_chunk
(
nc
, 
buf
, 
Àn
);

6995 i‡(
	gbuf
 !
mem
 && 
buf
 !
NULL
) {

6996 
MG_FREE
(
buf
);

7001 
mg_¥ötf_html_esˇ≥
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
fmt
, ...) {

7002 
	gmem
[
MG_VPRINTF_BUFFER_SIZE
], *
	gbuf
 = 
mem
;

7003 
	gi
, 
	gj
, 
	gÀn
;

7004 
va_li°
 
	g≠
;

7006 
va_°¨t
(
≠
, 
fmt
);

7007 
	gÀn
 = 
mg_av¥ötf
(&
buf
, (
mem
), 
fmt
, 
≠
);

7008 
va_íd
(
≠
);

7010 i‡(
	gÀn
 >= 0) {

7011 
i
 = 
j
 = 0; 
	gi
 < 
	gÀn
; i++) {

7012 i‡(
	gbuf
[
i
] ='<' || 
buf
[i] == '>') {

7013 
mg_£nd
(
nc
, 
buf
 + 
j
, 
i
 - j);

7014 
mg_£nd
(
nc
, 
buf
[
i
] == '<' ? "&lt;" : "&gt;", 4);

7015 
	gj
 = 
i
 + 1;

7018 
mg_£nd
(
nc
, 
buf
 + 
j
, 
i
 - j);

7022 i‡(
	gbuf
 !
mem
 && 
buf
 !
NULL
) {

7023 
MG_FREE
(
buf
);

7028 
mg_hâp_∑r£_hódî_öã∫Æ
(
mg_°r
 *
hdr
,

7029 c⁄° *
v¨_«me
,

7030 
Ætbuf
 *
ab
) {

7031 
	gch
 = ' ', 
	gch1
 = ',', 
	gn
 = 
°æí
(
v¨_«me
);

7032 c⁄° *
	gp
, *
	gíd
 = 
hdr
 ? hdr->
p
 + hdr->
Àn
 : 
NULL
, *
	gs
 = NULL;

7035 
	gs
 = 
hdr
->
p
; s !
NULL
 && 
s
 + 
n
 < 
íd
; s++) {

7036 i‡((
	gs
 =
hdr
->
p
 || 
s
[-1] =
ch
 || s[-1] =
ch1
 || s[-1] == ';') &&

7037 
s
[
n
] ='=' && !
°∫cmp
(s, 
v¨_«me
,Ç))

7041 i‡(
	gs
 !
NULL
 && &
s
[
n
 + 1] < 
íd
) {

7042 
s
 +
n
 + 1;

7043 i‡(*
	gs
 ='"' || *
s
 == '\'') {

7044 
ch
 = 
ch1
 = *
s
++;

7046 
	gp
 = 
s
;

7047 
	gp
 < 
	gíd
 &&Ö[0] !
ch
 && 
p
[0] !
ch1
) {

7048 i‡(
ch
 !' ' && 
p
[0] == '\\' &&Ö[1] == ch)Ö++;

7049 
Ætbuf_≠≥nd
(
ab
, *
p
++);

7052 i‡(
	gch
 !' ' && *
p
 !
ch
) {

7053 
Ætbuf_ª£t
(
ab
);

7058 i‡(
	gab
->
	gÀn
 > 0) {

7059 
Ætbuf_≠≥nd
(
ab
, '\0');

7063 
mg_hâp_∑r£_hódî2
(
mg_°r
 *
hdr
, c⁄° *
v¨_«me
, **
buf
,

7064 
size_t
 
buf_size
) {

7065 
Ætbuf
 
	gab
;

7066 
Ætbuf_öô
(&
ab
, *
buf
, 
buf_size
);

7067 i‡(
	ghdr
 =
NULL
)  0;

7068 i‡(*
	gbuf
 !
NULL
 && 
buf_size
 > 0Ë*
buf
[0] = '\0';

7070 
mg_hâp_∑r£_hódî_öã∫Æ
(
hdr
, 
v¨_«me
, &
ab
);

7076 *
	gbuf
 = 
Ætbuf_gë_buf
(&
ab
, 1 );

7077  
	gab
.
	gÀn
 > 0 ?áb.len - 1 : 0;

7080 
mg_hâp_∑r£_hódî
(
mg_°r
 *
hdr
, c⁄° *
v¨_«me
, *
buf
,

7081 
size_t
 
buf_size
) {

7082 *
	gbuf2
 = 
buf
;

7084 
	gÀn
 = 
mg_hâp_∑r£_hódî2
(
hdr
, 
v¨_«me
, &
buf2
, 
buf_size
);

7086 i‡(
	gbuf2
 !
buf
) {

7088 
MG_FREE
(
buf2
);

7092  
	gÀn
;

7095 
mg_gë_hâp_basic_auth
(
hâp_mesßge
 *
hm
, *
u£r
, 
size_t
 
u£r_Àn
,

7096 *
∑ss
, 
size_t
 
∑ss_Àn
) {

7097 
mg_°r
 *
	ghdr
 = 
mg_gë_hâp_hódî
(
hm
, "Authorization");

7098 i‡(
	ghdr
 =
NULL
)  -1;

7099  
mg_∑r£_hâp_basic_auth
(
hdr
, 
u£r
, 
u£r_Àn
, 
∑ss
, 
∑ss_Àn
);

7102 
mg_∑r£_hâp_basic_auth
(
mg_°r
 *
hdr
, *
u£r
, 
size_t
 
u£r_Àn
,

7103 *
∑ss
, 
size_t
 
∑ss_Àn
) {

7104 *
	gbuf
 = 
NULL
;

7105 
	gfmt
[64];

7106 
	gªs
 = 0;

7108 i‡(
mg_°∫cmp
(*
hdr
, 
mg_mk_°r
("Basic "), 6) != 0)  -1;

7110 
	gbuf
 = (*Ë
MG_MALLOC
(
hdr
->
Àn
);

7111 
cs_ba£64_decode
((*Ë
hdr
->
p
 + 6, hdr->
Àn
, 
buf
, 
NULL
);

7114 
¢¥ötf
(
fmt
, (fmt), "%%%" 
SIZE_T_FMT
 "[^:]:%%%" SIZE_T_FMT "[^\n]",

7115 
u£r_Àn
 - 1, 
∑ss_Àn
 - 1);

7116 i‡(
ssˇnf
(
buf
, 
fmt
, 
u£r
, 
∑ss
) == 0) {

7117 
ªs
 = -1;

7120 
MG_FREE
(
buf
);

7121  
	gªs
;

7124 #i‡
MG_ENABLE_FILESYSTEM


7125 
mg_is_fûe_hiddí
(c⁄° *
∑th
,

7126 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

7127 
ex˛ude_•ecüls
) {

7128 c⁄° *
	gp1
 = 
›ts
->
≥r_dúe˘‹y_auth_fûe
;

7129 c⁄° *
	gp2
 = 
›ts
->
hiddí_fûe_∑âîn
;

7132 c⁄° *
	gpdú
 = 
°ºchr
(
∑th
, 
DIRSEP
);

7133 i‡(
	gpdú
 !
NULL
) {

7134 
∑th
 = 
pdú
 + 1;

7137  (
	gex˛ude_•ecüls
 && (!
°rcmp
(
∑th
, ".") || !strcmp(path, ".."))) ||

7138 (
	gp1
 !
NULL
 && 
mg_m©ch_¥efix
(
p1
, 
°æí
’1), 
∑th
) == strlen(p1)) ||

7139 (
p2
 !
NULL
 && 
mg_m©ch_¥efix
’2, 
°æí
’2), 
∑th
) > 0);

7142 #i‡!
MG_DISABLE_HTTP_DIGEST_AUTH


7144 #i‚de‡
MG_EXT_MD5


7145 
mg_hash_md5_v
(
size_t
 
num_msgs
, c⁄° 
uöt8_t
 *
msgs
[],

7146 c⁄° 
size_t
 *
msg_Àns
, 
uöt8_t
 *
dige°
) {

7147 
size_t
 
	gi
;

7148 
cs_md5_˘x
 
	gmd5_˘x
;

7149 
cs_md5_öô
(&
md5_˘x
);

7150 
	gi
 = 0; i < 
	gnum_msgs
; i++) {

7151 
cs_md5_upd©e
(&
md5_˘x
, 
msgs
[
i
], 
msg_Àns
[i]);

7153 
cs_md5_föÆ
(
dige°
, &
md5_˘x
);

7156 
mg_hash_md5_v
(
size_t
 
num_msgs
, c⁄° 
uöt8_t
 *
msgs
[],

7157 c⁄° 
size_t
 *
msg_Àns
, 
uöt8_t
 *
dige°
);

7160 
cs_md5
(
buf
[33], ...) {

7161 
	ghash
[16];

7162 c⁄° 
uöt8_t
 *
	gmsgs
[20], *
	gp
;

7163 
size_t
 
	gmsg_Àns
[20];

7164 
size_t
 
	gnum_msgs
 = 0;

7165 
va_li°
 
	g≠
;

7167 
va_°¨t
(
≠
, 
buf
);

7168 (
	gp
 = 
va_¨g
(
≠
, c⁄° *ËË!
NULL
) {

7169 
msgs
[
num_msgs
] = 
p
;

7170 
	gmsg_Àns
[
num_msgs
] = 
va_¨g
(
≠
, 
size_t
);

7171 
	gnum_msgs
++;

7173 
va_íd
(
≠
);

7175 
mg_hash_md5_v
(
num_msgs
, 
msgs
, 
msg_Àns
, 
hash
);

7176 
cs_to_hex
(
buf
, 
hash
, (hash));

7179 
mg_mkmd5ª•
(c⁄° *
mëhod
, 
size_t
 
mëhod_Àn
, c⁄° *
uri
,

7180 
size_t
 
uri_Àn
, c⁄° *
ha1
, size_à
ha1_Àn
,

7181 c⁄° *
n⁄˚
, 
size_t
 
n⁄˚_Àn
, c⁄° *
nc
,

7182 
size_t
 
nc_Àn
, c⁄° *
˙⁄˚
, size_à
˙⁄˚_Àn
,

7183 c⁄° *
q›
, 
size_t
 
q›_Àn
, *
ª•
) {

7184 c⁄° 
	gcﬁ⁄
[] = ":";

7185 c⁄° 
size_t
 
	g⁄e
 = 1;

7186 
	gha2
[33];

7187 
cs_md5
(
ha2
, 
mëhod
, 
mëhod_Àn
, 
cﬁ⁄
, 
⁄e
, 
uri
, 
uri_Àn
, 
NULL
);

7188 
cs_md5
(
ª•
, 
ha1
, 
ha1_Àn
, 
cﬁ⁄
, 
⁄e
, 
n⁄˚
, 
n⁄˚_Àn
, cﬁ⁄, o√, 
nc
,

7189 
nc_Àn
, 
cﬁ⁄
, 
⁄e
, 
˙⁄˚
, 
˙⁄˚_Àn
, cﬁ⁄, o√, 
q›
, 
q›_Àn
,

7190 
cﬁ⁄
, 
⁄e
, 
ha2
, (ha2Ë- 1, 
NULL
);

7193 
mg_hâp_¸óã_dige°_auth_hódî
(*
buf
, 
size_t
 
buf_Àn
,

7194 c⁄° *
mëhod
, c⁄° *
uri
,

7195 c⁄° *
auth_domaö
, c⁄° *
u£r
,

7196 c⁄° *
∑sswd
, c⁄° *
n⁄˚
) {

7197 c⁄° 
	gcﬁ⁄
[] = ":", 
	gq›
[] = "auth";

7198 c⁄° 
size_t
 
	g⁄e
 = 1;

7199 
	gha1
[33], 
	gª•
[33], 
	g˙⁄˚
[40];

7201 
¢¥ötf
(
˙⁄˚
, (˙⁄˚), "%lx", (Ë
mg_time
());

7202 
cs_md5
(
ha1
, 
u£r
, (
size_t
Ë
°æí
(u£r), 
cﬁ⁄
, 
⁄e
, 
auth_domaö
,

7203 (
size_t
Ë
°æí
(
auth_domaö
), 
cﬁ⁄
, 
⁄e
, 
∑sswd
,

7204 (
size_t
Ë
°æí
(
∑sswd
), 
NULL
);

7205 
mg_mkmd5ª•
(
mëhod
, 
°æí
(mëhod), 
uri
, såÀn(uri), 
ha1
, (ha1) - 1,

7206 
n⁄˚
, 
°æí
“⁄˚), "1", 
⁄e
, 
˙⁄˚
, såÀn(˙⁄˚), 
q›
,

7207 (
q›
Ë- 1, 
ª•
);

7208  
¢¥ötf
(
buf
, 
buf_Àn
,

7212 
u£r
, 
auth_domaö
, 
uri
, 
q›
, 
˙⁄˚
, 
n⁄˚
, 
ª•
);

7221 
mg_check_n⁄˚
(c⁄° *
n⁄˚
) {

7222 
	gnow
 = (Ë
mg_time
();

7223 
	gvÆ
 = (Ë
°πoul
(
n⁄˚
, 
NULL
, 16);

7224  (
	gnow
 >
vÆ
Ë&& (
now
 - val < 60 * 60);

7227 
mg_hâp_check_dige°_auth
(
hâp_mesßge
 *
hm
, c⁄° *
auth_domaö
,

7228 
FILE
 *
Â
) {

7229 
	gªt
 = 0;

7230 
mg_°r
 *
	ghdr
;

7231 
	gu£∫ame_buf
[50], 
	g˙⁄˚_buf
[64], 
	gª•⁄£_buf
[40], 
	guri_buf
[200],

7232 
	gq›_buf
[20], 
	gnc_buf
[20], 
	gn⁄˚_buf
[16];

7234 *
	gu£∫ame
 = 
u£∫ame_buf
, *
	g˙⁄˚
 = 
˙⁄˚_buf
, *
	gª•⁄£
 = 
ª•⁄£_buf
,

7235 *
	guri
 = 
uri_buf
, *
	gq›
 = 
q›_buf
, *
	gnc
 = 
nc_buf
, *
	gn⁄˚
 = 
n⁄˚_buf
;

7238 i‡(
	ghm
 =
NULL
 || 
Â
 == NULL ||

7239 (
hdr
 = 
mg_gë_hâp_hódî
(
hm
, "Auth‹iz©i⁄")Ë=
NULL
 ||

7240 
mg_hâp_∑r£_hódî2
(
hdr
, "u£∫ame", &
u£∫ame
, (
u£∫ame_buf
)) ==

7242 
mg_hâp_∑r£_hódî2
(
hdr
, "˙⁄˚", &
˙⁄˚
, (
˙⁄˚_buf
)) == 0 ||

7243 
mg_hâp_∑r£_hódî2
(
hdr
, "ª•⁄£", &
ª•⁄£
, (
ª•⁄£_buf
)) ==

7245 
mg_hâp_∑r£_hódî2
(
hdr
, "uri", &
uri
, (
uri_buf
)) == 0 ||

7246 
mg_hâp_∑r£_hódî2
(
hdr
, "q›", &
q›
, (
q›_buf
)) == 0 ||

7247 
mg_hâp_∑r£_hódî2
(
hdr
, "nc", &
nc
, (
nc_buf
)) == 0 ||

7248 
mg_hâp_∑r£_hódî2
(
hdr
, "n⁄˚", &
n⁄˚
, (
n⁄˚_buf
)) == 0 ||

7249 
mg_check_n⁄˚
(
n⁄˚
) == 0) {

7250 
ªt
 = 0;

7251 
	g˛ón
;

7256 
	gªt
 = 
mg_check_dige°_auth
(

7257 
hm
->
mëhod
,

7258 
mg_mk_°r_n
(

7259 
hm
->
uri
.
p
,

7260 
hm
->
uri
.
Àn
 + (hm->
quîy_°rög
.len ? hm->query_string.len + 1 : 0)),

7261 
mg_mk_°r
(
u£∫ame
), mg_mk_°r(
˙⁄˚
), mg_mk_°r(
ª•⁄£
),

7262 
mg_mk_°r
(
q›
), mg_mk_°r(
nc
), mg_mk_°r(
n⁄˚
), mg_mk_°r(
auth_domaö
),

7263 
Â
);

7265 
	g˛ón
:

7266 i‡(
u£∫ame
 !
u£∫ame_buf
Ë
MG_FREE
(username);

7267 i‡(
	g˙⁄˚
 !
˙⁄˚_buf
Ë
MG_FREE
(
˙⁄˚
);

7268 i‡(
	gª•⁄£
 !
ª•⁄£_buf
Ë
MG_FREE
(
ª•⁄£
);

7269 i‡(
	guri
 !
uri_buf
Ë
MG_FREE
(
uri
);

7270 i‡(
	gq›
 !
q›_buf
Ë
MG_FREE
(
q›
);

7271 i‡(
	gnc
 !
nc_buf
Ë
MG_FREE
(
nc
);

7272 i‡(
	gn⁄˚
 !
n⁄˚_buf
Ë
MG_FREE
(
n⁄˚
);

7274  
	gªt
;

7277 
mg_check_dige°_auth
(
mg_°r
 
mëhod
, mg_°∏
uri
,

7278 
mg_°r
 
u£∫ame
, mg_°∏
˙⁄˚
,

7279 
mg_°r
 
ª•⁄£
, mg_°∏
q›
,

7280 
mg_°r
 
nc
, mg_°∏
n⁄˚
,

7281 
mg_°r
 
auth_domaö
, 
FILE
 *
Â
) {

7282 
	gbuf
[128], 
	gf_u£r
[(
buf
)], 
	gf_ha1
[(buf)], 
	gf_domaö
[(buf)];

7283 
	gex≥˘ed_ª•⁄£
[33];

7290 
fgës
(
buf
, (buf), 
Â
Ë!
NULL
) {

7291 i‡(
ssˇnf
(
buf
, "%[^:]:%[^:]:%s", 
f_u£r
, 
f_domaö
, 
f_ha1
) == 3 &&

7292 
mg_vcmp
(&
u£∫ame
, 
f_u£r
) == 0 &&

7293 
mg_vcmp
(&
auth_domaö
, 
f_domaö
) == 0) {

7295 
mg_mkmd5ª•
(
mëhod
.
p
, mëhod.
Àn
, 
uri
.p, uri.Àn, 
f_ha1
, 
°æí
(f_ha1),

7296 
n⁄˚
.
p
,Ç⁄˚.
Àn
, 
nc
.p,Çc.Àn, 
˙⁄˚
.p, cnonce.len,

7297 
q›
.
p
, q›.
Àn
, 
ex≥˘ed_ª•⁄£
);

7298 
LOG
(
LL_DEBUG
,

7299 ("%.*†%†%.*†%s", (Ë
u£∫ame
.
Àn
, u£∫ame.
p
, 
f_domaö
,

7300 (Ë
ª•⁄£
.
Àn
,Ñe•⁄£.
p
, 
ex≥˘ed_ª•⁄£
));

7301  
mg_nˇ£cmp
(
ª•⁄£
.
p
, 
ex≥˘ed_ª•⁄£
,Ñe•⁄£.
Àn
) == 0;

7309 
mg_hâp_is_auth‹ized
(
hâp_mesßge
 *
hm
, 
mg_°r
 
∑th
,

7310 c⁄° *
domaö
, c⁄° *
∑ssw‹ds_fûe
,

7311 
Êags
) {

7312 
	gbuf
[
MG_MAX_PATH
];

7313 c⁄° *
	gp
;

7314 
FILE
 *
	gÂ
;

7315 
	gauth‹ized
 = 1;

7317 i‡(
	gdomaö
 !
NULL
 && 
∑ssw‹ds_fûe
 != NULL) {

7318 i‡(
Êags
 & 
MG_AUTH_FLAG_IS_GLOBAL_PASS_FILE
) {

7319 
Â
 = 
mg_f›í
(
∑ssw‹ds_fûe
, "r");

7320 } i‡(
	gÊags
 & 
	gMG_AUTH_FLAG_IS_DIRECTORY
) {

7321 
¢¥ötf
(
buf
, (buf), "%.*s%c%s", (Ë
∑th
.
Àn
,Ö©h.
p
, 
DIRSEP
,

7322 
∑ssw‹ds_fûe
);

7323 
	gÂ
 = 
mg_f›í
(
buf
, "r");

7325 
	gp
 = 
°ºchr
(
∑th
.
p
, 
DIRSEP
);

7326 i‡(
	gp
 =
NULL
Ë
p
 = 
∑th
.p;

7327 
¢¥ötf
(
buf
, (buf), "%.*s%c%s", (Ë(
p
 - 
∑th
.p),Ö©h.p, 
DIRSEP
,

7328 
∑ssw‹ds_fûe
);

7329 
	gÂ
 = 
mg_f›í
(
buf
, "r");

7332 i‡(
	gÂ
 !
NULL
) {

7333 
auth‹ized
 = 
mg_hâp_check_dige°_auth
(
hm
, 
domaö
, 
Â
);

7334 
f˛o£
(
Â
);

7335 } i‡(!(
	gÊags
 & 
	gMG_AUTH_FLAG_ALLOW_MISSING_FILE
)) {

7336 
	gauth‹ized
 = 0;

7340 
LOG
(
LL_DEBUG
, ("%.*†%†%x %d", (Ë
∑th
.
Àn
,Ö©h.
p
,

7341 
∑ssw‹ds_fûe
 ?Öassw‹ds_fûê: "", 
Êags
, 
auth‹ized
));

7342  
	gauth‹ized
;

7345 
mg_hâp_is_auth‹ized
(
hâp_mesßge
 *
hm
, c⁄° 
mg_°r
 
∑th
,

7346 c⁄° *
domaö
, c⁄° *
∑ssw‹ds_fûe
,

7347 
Êags
) {

7348 (Ë
	ghm
;

7349 (Ë
	g∑th
;

7350 (Ë
	gdomaö
;

7351 (Ë
	g∑ssw‹ds_fûe
;

7352 (Ë
	gÊags
;

7357 #i‡
MG_ENABLE_DIRECTORY_LISTING


7358 
mg_esˇ≥
(c⁄° *
§c
, *
d°
, 
size_t
 
d°_Àn
) {

7359 
size_t
 
	gn
 = 0;

7360 *
	g§c
 !'\0' && 
n
 + 5 < 
d°_Àn
) {

7361 
ch
 = *(*Ë
§c
++;

7362 i‡(
	gch
 == '<') {

7363 
n
 +
¢¥ötf
(
d°
 +Ç, 
d°_Àn
 -Ç, "%s", "&lt;");

7365 
	gd°
[
n
++] = 
ch
;

7368 
	gd°
[
n
] = '\0';

7371 
mg_¥öt_dú_íåy
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
fûe_«me
,

7372 
cs_°©_t
 *
°p
) {

7373 
	gsize
[64], 
	gmod
[64], 
	g∑th
[
MG_MAX_PATH
];

7374 
öt64_t
 
	gfsize
 = 
°p
->
°_size
;

7375 
	gis_dú
 = 
S_ISDIR
(
°p
->
°_mode
);

7376 c⁄° *
	g¶ash
 = 
is_dú
 ? "/" : "";

7377 
mg_°r
 
	ghªf
;

7379 i‡(
	gis_dú
) {

7380 
¢¥ötf
(
size
, (size), "%s", "[DIRECTORY]");

7386 i‡(
	gfsize
 < 1024) {

7387 
¢¥ötf
(
size
, (size), "%d", (Ë
fsize
);

7388 } i‡(
	gfsize
 < 0x100000) {

7389 
¢¥ötf
(
size
, (size), "%.1fk", (Ë
fsize
 / 1024.0);

7390 } i‡(
	gfsize
 < 0x40000000) {

7391 
¢¥ötf
(
size
, (size), "%.1fM", (Ë
fsize
 / 1048576);

7393 
¢¥ötf
(
size
, (size), "%.1fG", (Ë
fsize
 / 1073741824);

7396 
°r·ime
(
mod
, (mod), "%d-%b-%Y %H:%M", 
loˇ…ime
(&
°p
->
°_mtime
));

7397 
mg_esˇ≥
(
fûe_«me
, 
∑th
, (path));

7398 
	ghªf
 = 
mg_uæ_ícode
(
mg_mk_°r
(
fûe_«me
));

7399 
mg_¥ötf_hâp_chunk
(
nc
,

7401 "<td>%s</td><tdÇame=%" 
INT64_FMT
 ">%s</td></tr>\n",

7402 
hªf
.
p
, 
¶ash
, 
∑th
, sœsh, 
mod
, 
is_dú
 ? -1 : 
fsize
,

7403 
size
);

7404 
‰ì
((*Ë
hªf
.
p
);

7407 
mg_sˇn_dúe˘‹y
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
dú
,

7408 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

7409 (*
func
)(
mg_c⁄√˘i⁄
 *, const *,

7410 
cs_°©_t
 *)) {

7411 
	g∑th
[
MG_MAX_PATH
];

7412 
cs_°©_t
 
	g°
;

7413 
dúít
 *
	gdp
;

7414 
DIR
 *
	gdúp
;

7416 
LOG
(
LL_DEBUG
, ("%∞[%s]", 
nc
, 
dú
));

7417 i‡((
	gdúp
 = (
›ídú
(
dú
))Ë!
NULL
) {

7418 (
dp
 = 
ªaddú
(
dúp
)Ë!
NULL
) {

7420 i‡(
mg_is_fûe_hiddí
((c⁄° *Ë
dp
->
d_«me
, 
›ts
, 1)) {

7423 
¢¥ötf
(
∑th
, ’©h), "%s/%s", 
dú
, 
dp
->
d_«me
);

7424 i‡(
mg_°©
(
∑th
, &
°
) == 0) {

7425 
func
(
nc
, (c⁄° *Ë
dp
->
d_«me
, &
°
);

7428 
˛o£dú
(
dúp
);

7430 
LOG
(
LL_DEBUG
, ("%∞›ídú(%sË-> %d", 
nc
, 
dú
, 
mg_gë_î∫o
()));

7434 
mg_£nd_dúe˘‹y_li°ög
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
dú
,

7435 
hâp_mesßge
 *
hm
,

7436 
mg_£rve_hâp_›ts
 *
›ts
) {

7437 c⁄° *
	gs‹t_js_code
 =

7447 c⁄° *
	gs‹t_js_code2
 =

7461 
mg_£nd_ª•⁄£_löe
(
nc
, 200, 
›ts
->
exåa_hódîs
);

7462 
mg_¥ötf
(
nc
, "%s: %s\r\n%s: %s\r\n\r\n", "Transfer-Encoding", "chunked",

7465 
mg_¥ötf_hâp_chunk
(

7466 
nc
,

7477 (Ë
hm
->
uri
.
Àn
, hm->uri.
p
, 
s‹t_js_code
, 
s‹t_js_code2
,

7478 (Ë
hm
->
uri
.
Àn
, hm->uri.
p
);

7479 
mg_sˇn_dúe˘‹y
(
nc
, 
dú
, 
›ts
, 
mg_¥öt_dú_íåy
);

7480 
mg_¥ötf_hâp_chunk
(
nc
,

7485 
mg_vîsi⁄_hódî
);

7486 
mg_£nd_hâp_chunk
(
nc
, "", 0);

7488 
	gnc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

7499 
MG_INTERNAL
 
mg_föd_ödex_fûe
(c⁄° *
∑th
, c⁄° *
li°
,

7500 **
ödex_fûe
, 
cs_°©_t
 *
°p
) {

7501 
mg_°r
 
	gvec
;

7502 
size_t
 
	g∑th_Àn
 = 
°æí
(
∑th
);

7503 
	gfound
 = 0;

7504 *
	gödex_fûe
 = 
NULL
;

7508 (
	gli°
 = 
mg_√xt_comma_li°_íåy
(
li°
, &
vec
, 
NULL
)) != NULL) {

7509 
cs_°©_t
 
°
;

7510 
size_t
 
	gÀn
 = 
∑th_Àn
 + 1 + 
vec
.
Àn
 + 1;

7511 *
	gödex_fûe
 = (*Ë
MG_REALLOC
(*
ödex_fûe
, 
Àn
);

7512 i‡(*
	gödex_fûe
 =
NULL
) ;

7513 
¢¥ötf
(*
ödex_fûe
, 
Àn
, "%s%c%.*s", 
∑th
, 
DIRSEP
, (Ë
vec
.Àn, vec.
p
);

7516 i‡(
mg_°©
(*
ödex_fûe
, &
°
Ë=0 && 
S_ISREG
(°.
°_mode
)) {

7518 *
°p
 = 
°
;

7519 
	gfound
 = 1;

7523 i‡(!
	gfound
) {

7524 
MG_FREE
(*
ödex_fûe
);

7525 *
	gödex_fûe
 = 
NULL
;

7527 
LOG
(
LL_DEBUG
, ("[%s] [%s]", 
∑th
, (*
ödex_fûe
 ? *index_file : "")));

7530 #i‡
MG_ENABLE_HTTP_URL_REWRITES


7531 
mg_hâp_£nd_p‹t_ba£d_ªdúe˘
(

7532 
mg_c⁄√˘i⁄
 *
c
, 
hâp_mesßge
 *
hm
,

7533 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

7534 c⁄° *
	gªwrôes
 = 
›ts
->
uæ_ªwrôes
;

7535 
mg_°r
 
	ga
, 
	gb
;

7536 
	gloˇl_p‹t
[20] = {'%'};

7538 
mg_c⁄n_addr_to_°r
(
c
, 
loˇl_p‹t
 + 1, (local_port) - 1,

7539 
MG_SOCK_STRINGIFY_PORT
);

7541 (
	gªwrôes
 = 
mg_√xt_comma_li°_íåy
(
ªwrôes
, &
a
, &
b
)Ë!
NULL
) {

7542 i‡(
mg_vcmp
(&
a
, 
loˇl_p‹t
) == 0) {

7543 
mg_£nd_ª•⁄£_löe
(
c
, 301, 
NULL
);

7544 
mg_¥ötf
(
c
, "Content-Length: 0\r\nLocation: %.*s%.*s\r\n\r\n",

7545 (Ë
b
.
Àn
, b.
p
, (Ë(
hm
->
¥Ÿo
.∞- hm->
uri
.p - 1),

7546 
hm
->
uri
.
p
);

7554 
mg_ªvî£_¥oxy_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

7555 *
ev_d©a
 
MG_UD_ARG
(*
u£r_d©a
)) {

7556 
hâp_mesßge
 *
	ghm
 = (hâp_mesßgê*Ë
ev_d©a
;

7557 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
nc
);

7559 i‡(
	gpd
 =
NULL
 || 
pd
->
ªvî£_¥oxy_d©a
.
löked_c⁄n
 == NULL) {

7560 
DBG
(("%p: up°ªam clo£d", 
nc
));

7564 
	gev
) {

7565 
	gMG_EV_CONNECT
:

7566 i‡(*(*Ë
ev_d©a
 != 0) {

7567 
mg_hâp_£nd_îr‹
(
pd
->
ªvî£_¥oxy_d©a
.
löked_c⁄n
, 502, 
NULL
);

7571 
	gMG_EV_HTTP_REPLY
:

7572 
mg_£nd
(
pd
->
ªvî£_¥oxy_d©a
.
löked_c⁄n
, 
hm
->
mesßge
.
p
,

7573 
hm
->
mesßge
.
Àn
);

7574 
	gpd
->
	gªvî£_¥oxy_d©a
.
	glöked_c⁄n
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

7575 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

7577 
	gMG_EV_CLOSE
:

7578 
pd
->
ªvî£_¥oxy_d©a
.
löked_c⁄n
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

7582 #i‡
MG_ENABLE_CALLBACK_USERDATA


7583 (Ë
	gu£r_d©a
;

7587 
mg_hâp_ªvî£_¥oxy
(
mg_c⁄√˘i⁄
 *
nc
,

7588 c⁄° 
hâp_mesßge
 *
hm
, 
mg_°r
 
mou¡
,

7589 
mg_°r
 
up°ªam
) {

7590 
mg_c⁄√˘i⁄
 *
	gbe
;

7591 
	gbuæ
[256], *
	gpuæ
 = 
buæ
;

7592 
	gi
;

7593 c⁄° *
	gîr‹
;

7594 
mg_c⁄√˘_›ts
 
	g›ts
;

7595 
mg_°r
 
	g∑th
 = 
MG_NULL_STR
, 
	gu£r_öfo
 = MG_NULL_STR, 
	gho°
 = MG_NULL_STR;

7596 
mem£t
(&
›ts
, 0, (opts));

7597 
	g›ts
.
	gîr‹_°rög
 = &
îr‹
;

7599 
mg_a•rötf
(&
puæ
, (
buæ
), "%.*s%.*s", (Ë
up°ªam
.
Àn
, up°ªam.
p
,

7600 (Ë(
hm
->
uri
.
Àn
 - 
mou¡
.Àn), hm->uri.
p
 + mount.len);

7602 
	gbe
 = 
mg_c⁄√˘_hâp_ba£
(
nc
->
mgr
, 
MG_CB
(
mg_ªvî£_¥oxy_h™dÀr
, 
NULL
),

7603 
›ts
, "hâp", 
NULL
, "hâps", NULL, 
puæ
, &
∑th
,

7604 &
u£r_öfo
, &
ho°
);

7605 
LOG
(
LL_DEBUG
, ("Proxyög %.*†tÿ%†‘uÀ: %.*s)", (Ë
hm
->
uri
.
Àn
,

7606 
hm
->
uri
.
p
, 
puæ
, (Ë
mou¡
.
Àn
, mount.p));

7608 i‡(
	gbe
 =
NULL
) {

7609 
LOG
(
LL_ERROR
, ("Eº‹ c⁄√˘ögÅÿ%s: %s", 
puæ
, 
îr‹
));

7610 
mg_hâp_£nd_îr‹
(
nc
, 502, 
NULL
);

7611 
	g˛ónup
;

7615 
mg_hâp_gë_¥Ÿo_d©a
(
be
)->
	gªvî£_¥oxy_d©a
.
	glöked_c⁄n
 = 
nc
;

7616 
mg_hâp_gë_¥Ÿo_d©a
(
nc
)->
	gªvî£_¥oxy_d©a
.
	glöked_c⁄n
 = 
be
;

7619 
mg_¥ötf
(
be
, "%.*†%.*†HTTP/1.1\r\n", (Ë
hm
->
mëhod
.
Àn
, hm->mëhod.
p
,

7620 (Ë
∑th
.
Àn
,Ö©h.
p
);

7622 
mg_¥ötf
(
be
, "Ho°: %.*s\r\n", (Ë
ho°
.
Àn
, ho°.
p
);

7623 
	gi
 = 0; i < 
	gMG_MAX_HTTP_HEADERS
 && 
	ghm
->
	ghódî_«mes
[
i
].
	gÀn
 > 0; i++) {

7624 
mg_°r
 
	ghn
 = 
hm
->
hódî_«mes
[
i
];

7625 
mg_°r
 
	ghv
 = 
hm
->
hódî_vÆues
[
i
];

7628 i‡(
mg_vˇ£cmp
(&
hn
, "Host") == 0) ;

7633 i‡(
mg_vˇ£cmp
(&
hn
, "Transfer-encoding") == 0 &&

7634 
mg_vˇ£cmp
(&
hv
, "chunked") == 0) {

7635 
mg_¥ötf
(
be
, "C⁄ã¡-Lígth: %" 
SIZE_T_FMT
 "\r\n", 
hm
->
body
.
Àn
);

7639 i‡(
mg_vˇ£cmp
(&
hn
, "Expect") == 0 &&

7640 
mg_vˇ£cmp
(&
hv
, "100-continue") == 0) {

7644 
mg_¥ötf
(
be
, "%.*s: %.*s\r\n", (Ë
hn
.
Àn
, hn.
p
, (Ë
hv
.len, hv.p);

7647 
mg_£nd
(
be
, "\r\n", 2);

7648 
mg_£nd
(
be
, 
hm
->
body
.
p
, hm->body.
Àn
);

7650 
	g˛ónup
:

7651 i‡(
puæ
 !
buæ
Ë
MG_FREE
(purl);

7654 
mg_hâp_h™dÀ_f‹w¨dög
(
mg_c⁄√˘i⁄
 *
nc
,

7655 
hâp_mesßge
 *
hm
,

7656 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

7657 c⁄° *
	gªwrôes
 = 
›ts
->
uæ_ªwrôes
;

7658 
mg_°r
 
	ga
, 
	gb
;

7659 
mg_°r
 
	gp1
 = 
MG_MK_STR
("hâp://"), 
	gp2
 = MG_MK_STR("https://");

7661 (
	gªwrôes
 = 
mg_√xt_comma_li°_íåy
(
ªwrôes
, &
a
, &
b
)Ë!
NULL
) {

7662 i‡(
mg_°∫cmp
(
a
, 
hm
->
uri
,á.
Àn
) == 0) {

7663 i‡(
mg_°∫cmp
(
b
, 
p1
,Ö1.
Àn
Ë=0 || mg_°∫cmp(b, 
p2
,Ö2.len) == 0) {

7664 
mg_hâp_ªvî£_¥oxy
(
nc
, 
hm
, 
a
, 
b
);

7674 
MG_INTERNAL
 
mg_uri_to_loˇl_∑th
(
hâp_mesßge
 *
hm
,

7675 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

7676 **
loˇl_∑th
,

7677 
mg_°r
 *
ªmaödî
) {

7678 
	gok
 = 1;

7679 c⁄° *
	g˝
 = 
hm
->
uri
.
p
, *
	g˝_íd
 = hm->uri.∞+ hm->uri.
Àn
;

7680 
mg_°r
 
	groŸ
 = {
NULL
, 0};

7681 c⁄° *
	gfûe_uri_°¨t
 = 
˝
;

7682 *
	gloˇl_∑th
 = 
NULL
;

7683 
	gªmaödî
->
	gp
 = 
NULL
;

7684 
	gªmaödî
->
	gÀn
 = 0;

7688 #i‡
MG_ENABLE_HTTP_URL_REWRITES


7689 c⁄° *
	gªwrôes
 = 
›ts
->
uæ_ªwrôes
;

7691 c⁄° *
	gªwrôes
 = "";

7693 
mg_°r
 *
	ghh
 = 
mg_gë_hâp_hódî
(
hm
, "Host");

7694 
mg_°r
 
	ga
, 
	gb
;

7696 (
	gªwrôes
 = 
mg_√xt_comma_li°_íåy
(
ªwrôes
, &
a
, &
b
)Ë!
NULL
) {

7697 i‡(
a
.
Àn
 > 1 &&á.
p
[0] == '@') {

7699 i‡(
hh
 !
NULL
 && hh->
Àn
 =
a
.len - 1 &&

7700 
mg_nˇ£cmp
(
a
.
p
 + 1, 
hh
->p,á.
Àn
 - 1) == 0) {

7701 
roŸ
 = 
b
;

7706 
size_t
 
	gm©ch_Àn
 = 
mg_m©ch_¥efix_n
(
a
, 
hm
->
uri
);

7707 i‡(
	gm©ch_Àn
 > 0) {

7708 
	gfûe_uri_°¨t
 = 
hm
->
uri
.
p
 + 
m©ch_Àn
;

7709 i‡(*
	gfûe_uri_°¨t
 ='/' || 
fûe_uri_°¨t
 =
˝_íd
) {

7711 } i‡(*(
fûe_uri_°¨t
 - 1) == '/') {

7713 
fûe_uri_°¨t
--;

7718 
	groŸ
 = 
b
;

7724 i‡(
	groŸ
.
	gp
 =
NULL
) {

7725 #i‡
MG_ENABLE_HTTP_WEBDAV


7726 i‡(
›ts
->
dav_documít_roŸ
 !
NULL
 && 
mg_is_dav_ªque°
(&
hm
->
mëhod
)) {

7727 
roŸ
.
p
 = 
›ts
->
dav_documít_roŸ
;

7728 
	groŸ
.
	gÀn
 = 
°æí
(
›ts
->
dav_documít_roŸ
);

7732 
	groŸ
.
	gp
 = 
›ts
->
documít_roŸ
;

7733 
	groŸ
.
	gÀn
 = 
°æí
(
›ts
->
documít_roŸ
);

7736 
as£π
(
roŸ
.
p
 !
NULL
 &&ÑoŸ.
Àn
 > 0);

7740 c⁄° *
	gu
 = 
fûe_uri_°¨t
 + 1;

7741 *
	gÕ
 = (*Ë
MG_MALLOC
(
roŸ
.
Àn
 + 
hm
->
uri
.len + 1);

7742 *
	gÕ_íd
 = 
Õ
 + 
roŸ
.
Àn
 + 
hm
->
uri
.len + 1;

7743 *
	gp
 = 
Õ
, *
	gps
;

7744 
	gexi°s
 = 1;

7745 i‡(
	gÕ
 =
NULL
) {

7746 
ok
 = 0;

7747 
	gout
;

7749 
mem˝y
(
p
, 
roŸ
.p,ÑoŸ.
Àn
);

7750 
	gp
 +
roŸ
.
Àn
;

7751 i‡(*(
	gp
 - 1Ë=
DIRSEP
Ë
p
--;

7752 *
	gp
 = '\0';

7753 
	gps
 = 
p
;

7756 
	gu
 <
˝_íd
) {

7757 c⁄° *
√xt
 = 
u
;

7758 
mg_°r
 
	gcomp⁄ít
;

7759 i‡(
	gexi°s
) {

7760 
cs_°©_t
 
	g°
;

7761 
	gexi°s
 = (
mg_°©
(
Õ
, &
°
) == 0);

7762 i‡(
	gexi°s
 && 
S_ISREG
(
°
.
°_mode
)) {

7765 i‡(*(
	gu
 - 1Ë='/'Ë
u
--;

7769 i‡(
	gu
 >
˝_íd
) ;

7770 
∑r£_uri_comp⁄ít
((c⁄° **Ë&
√xt
, 
˝_íd
, "/", &
comp⁄ít
);

7771 i‡(
	gcomp⁄ít
.
	gÀn
 > 0) {

7772 
	gÀn
;

7773 
memmove
(
p
 + 1, 
comp⁄ít
.p, comp⁄ít.
Àn
);

7774 
	gÀn
 = 
mg_uæ_decode
(
p
 + 1, 
comp⁄ít
.
Àn
,Ö + 1, 
Õ_íd
 -Ö - 1, 0);

7775 i‡(
	gÀn
 <= 0) {

7776 
ok
 = 0;

7779 
	gcomp⁄ít
.
	gp
 = 
p
 + 1;

7780 
	gcomp⁄ít
.
	gÀn
 = 
Àn
;

7781 i‡(
mg_vcmp
(&
comp⁄ít
, ".") == 0) {

7783 } i‡(
mg_vcmp
(&
comp⁄ít
, "..") == 0) {

7784 
p
 > 
ps
 && *∞!
DIRSEP
)Ö--;

7785 *
	gp
 = '\0';

7787 
size_t
 
	gi
;

7788 #ifde‡
_WIN32


7790 
wch¨_t
 
	gbuf
[
MG_MAX_PATH
 * 2];

7791 i‡(
to_wch¨
(
comp⁄ít
.
p
, 
buf
, 
MG_MAX_PATH
) == 0) {

7792 
DBG
(("[%.*s] smñl†fu¬y", (Ë
comp⁄ít
.
Àn
, comp⁄ít.
p
));

7793 
	gok
 = 0;

7797 *
	gp
++ = 
DIRSEP
;

7799 
	gi
 = 0; i < 
	gcomp⁄ít
.
	gÀn
; i++, 
	gp
++) {

7800 i‡(*
	gp
 ='\0' || *
p
 =
DIRSEP


7801 #ifde‡
_WIN32


7804 *
p
 == '/'

7807 
ok
 = 0;

7813 
	gu
 = 
√xt
;

7815 i‡(
	gok
) {

7816 *
	gloˇl_∑th
 = 
Õ
;

7817 i‡(
	gu
 > 
	g˝_íd
Ëu = 
˝_íd
;

7818 
	gªmaödî
->
	gp
 = 
u
;

7819 
	gªmaödî
->
	gÀn
 = 
˝_íd
 - 
u
;

7821 
MG_FREE
(
Õ
);

7825 
	gout
:

7826 
LOG
(
LL_DEBUG
,

7827 ("'%.*s' -> '%s' + '%.*s'", (Ë
hm
->
uri
.
Àn
, hm->uri.
p
,

7828 *
loˇl_∑th
 ? *loˇl_∑th : "", (Ë
ªmaödî
->
Àn
,Ñemaödî->
p
));

7829  
	gok
;

7832 
mg_gë_m⁄th_ödex
(c⁄° *
s
) {

7833 c⁄° *
	gm⁄th_«mes
[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun",

7835 
size_t
 
	gi
;

7837 
	gi
 = 0; i < 
ARRAY_SIZE
(
m⁄th_«mes
); i++)

7838 i‡(!
°rcmp
(
s
, 
m⁄th_«mes
[
i
])Ë (Ë
	gi
;

7843 
mg_num_À≠_yórs
(
yór
) {

7844  
	gyór
 / 4 - year / 100 + year / 400;

7848 
MG_INTERNAL
 
time_t
 
mg_∑r£_d©e_°rög
(c⁄° *
d©ëime
) {

7849 c⁄° 
	gdays_bef‹e_m⁄th
[] = {

7851 
	gm⁄th_°r
[32];

7852 
	g£c⁄d
, 
	gmöuã
, 
	ghour
, 
	gday
, 
	gm⁄th
, 
	gyór
, 
	gÀ≠_days
, 
	gdays
;

7853 
time_t
 
	gªsu…
 = (time_t) 0;

7855 i‡(((
ssˇnf
(
d©ëime
, "%d/%3s/%d %d:%d:%d", &
day
, 
m⁄th_°r
, &
yór
, &
hour
,

7856 &
möuã
, &
£c⁄d
) == 6) ||

7857 (
ssˇnf
(
d©ëime
, "%d %3†%d %d:%d:%d", &
day
, 
m⁄th_°r
, &
yór
, &
hour
,

7858 &
möuã
, &
£c⁄d
) == 6) ||

7859 (
ssˇnf
(
d©ëime
, "%*3s, %d %3†%d %d:%d:%d", &
day
, 
m⁄th_°r
, &
yór
,

7860 &
hour
, &
möuã
, &
£c⁄d
) == 6) ||

7861 (
ssˇnf
(
d©ëime
, "%d-%3s-%d %d:%d:%d", &
day
, 
m⁄th_°r
, &
yór
, &
hour
,

7862 &
möuã
, &
£c⁄d
) == 6)) &&

7863 
yór
 > 1970 && (
m⁄th
 = 
mg_gë_m⁄th_ödex
(
m⁄th_°r
)) != -1) {

7864 
À≠_days
 = 
mg_num_À≠_yórs
(
yór
) - mg_num_leap_years(1970);

7865 
	gyór
 -= 1970;

7866 
	gdays
 = 
yór
 * 365 + 
days_bef‹e_m⁄th
[
m⁄th
] + (
day
 - 1Ë+ 
À≠_days
;

7867 
	gªsu…
 = 
days
 * 24 * 3600 + 
hour
 * 3600 + 
möuã
 * 60 + 
£c⁄d
;

7870  
	gªsu…
;

7873 
MG_INTERNAL
 
mg_is_nŸ_modifõd
(
hâp_mesßge
 *
hm
, 
cs_°©_t
 *
°
) {

7874 
mg_°r
 *
	ghdr
;

7875 i‡((
	ghdr
 = 
mg_gë_hâp_hódî
(
hm
, "If-N⁄e-M©ch")Ë!
NULL
) {

7876 
ëag
[64];

7877 
mg_hâp_c⁄°ru˘_ëag
(
ëag
, ”èg), 
°
);

7878  
mg_vˇ£cmp
(
hdr
, 
ëag
) == 0;

7879 } i‡((
	ghdr
 = 
mg_gë_hâp_hódî
(
hm
, "If-Modifõd-Sö˚")Ë!
NULL
) {

7880  
°
->
°_mtime
 <
mg_∑r£_d©e_°rög
(
hdr
->
p
);

7886 
mg_hâp_£nd_dige°_auth_ªque°
(
mg_c⁄√˘i⁄
 *
c
,

7887 c⁄° *
domaö
) {

7888 
mg_¥ötf
(
c
,

7893 
domaö
, (Ë
mg_time
());

7896 
mg_hâp_£nd_›ti⁄s
(
mg_c⁄√˘i⁄
 *
nc
) {

7897 
mg_¥ötf
(
nc
, "%s",

7899 #i‡
MG_ENABLE_HTTP_WEBDAV


7903 
	gnc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

7906 
mg_is_¸óti⁄_ªque°
(c⁄° 
hâp_mesßge
 *
hm
) {

7907  
mg_vcmp
(&
hm
->
mëhod
, "MKCOL") == 0 || mg_vcmp(&hm->method, "PUT") == 0;

7910 
MG_INTERNAL
 
mg_£nd_hâp_fûe
(
mg_c⁄√˘i⁄
 *
nc
, *
∑th
,

7911 c⁄° 
mg_°r
 *
∑th_öfo
,

7912 
hâp_mesßge
 *
hm
,

7913 
mg_£rve_hâp_›ts
 *
›ts
) {

7914 
	gexi°s
, 
	gis_dúe˘‹y
, 
	gis_cgi
;

7915 #i‡
MG_ENABLE_HTTP_WEBDAV


7916 
	gis_dav
 = 
mg_is_dav_ªque°
(&
hm
->
mëhod
);

7918 
	gis_dav
 = 0;

7920 *
	gödex_fûe
 = 
NULL
;

7921 
cs_°©_t
 
	g°
;

7923 
	gexi°s
 = (
mg_°©
(
∑th
, &
°
) == 0);

7924 
	gis_dúe˘‹y
 = 
exi°s
 && 
S_ISDIR
(
°
.
°_mode
);

7926 i‡(
	gis_dúe˘‹y
)

7927 
mg_föd_ödex_fûe
(
∑th
, 
›ts
->
ödex_fûes
, &
ödex_fûe
, &
°
);

7929 
	gis_cgi
 =

7930 (
mg_m©ch_¥efix
(
›ts
->
cgi_fûe_∑âîn
, 
°æí
(opts->cgi_file_pattern),

7931 
ödex_fûe
 ? index_fûê: 
∑th
) > 0);

7933 
LOG
(
LL_DEBUG
,

7934 ("%∞%.*†[%s]Éxi°s=%d is_dú=%d is_dav=%d is_cgi=%d index=%s", 
nc
,

7935 (Ë
hm
->
mëhod
.
Àn
, hm->mëhod.
p
, 
∑th
, 
exi°s
, 
is_dúe˘‹y
, 
is_dav
,

7936 
is_cgi
, 
ödex_fûe
 ? index_file : ""));

7938 i‡(
	gis_dúe˘‹y
 && 
	ghm
->
	guri
.
	gp
[
hm
->
uri
.
Àn
 - 1] !'/' && !
is_dav
) {

7939 
mg_¥ötf
(
nc
,

7942 (Ë
hm
->
uri
.
Àn
, hm->uri.
p
);

7943 
MG_FREE
(
ödex_fûe
);

7948 i‡(
	g∑th_öfo
->
	gÀn
 > 0 && !
	gis_cgi
) {

7949 
mg_hâp_£nd_îr‹
(
nc
, 501, 
NULL
);

7950 
MG_FREE
(
ödex_fûe
);

7954 i‡(
	gis_dav
 && 
	g›ts
->
	gdav_documít_roŸ
 =
NULL
) {

7955 
mg_hâp_£nd_îr‹
(
nc
, 501, 
NULL
);

7956 } i‡(!
mg_hâp_is_auth‹ized
(

7957 
hm
, 
mg_mk_°r
(
∑th
), 
›ts
->
auth_domaö
, o±s->
globÆ_auth_fûe
,

7958 ((
is_dúe˘‹y
 ? 
MG_AUTH_FLAG_IS_DIRECTORY
 : 0) |

7959 
MG_AUTH_FLAG_IS_GLOBAL_PASS_FILE
 |

7960 
MG_AUTH_FLAG_ALLOW_MISSING_FILE
)) ||

7961 !
mg_hâp_is_auth‹ized
(

7962 
hm
, 
mg_mk_°r
(
∑th
), 
›ts
->
auth_domaö
,

7963 
›ts
->
≥r_dúe˘‹y_auth_fûe
,

7964 ((
is_dúe˘‹y
 ? 
MG_AUTH_FLAG_IS_DIRECTORY
 : 0) |

7965 
MG_AUTH_FLAG_ALLOW_MISSING_FILE
))) {

7966 
mg_hâp_£nd_dige°_auth_ªque°
(
nc
, 
›ts
->
auth_domaö
);

7967 } i‡(
	gis_cgi
) {

7968 #i‡
MG_ENABLE_HTTP_CGI


7969 
mg_h™dÀ_cgi
(
nc
, 
ödex_fûe
 ? index_fûê: 
∑th
, 
∑th_öfo
, 
hm
, 
›ts
);

7971 
mg_hâp_£nd_îr‹
(
nc
, 501, 
NULL
);

7973 } i‡((!
	gexi°s
 ||

7974 
mg_is_fûe_hiddí
(
∑th
, 
›ts
, 0 )) &&

7975 !
mg_is_¸óti⁄_ªque°
(
hm
)) {

7976 
mg_hâp_£nd_îr‹
(
nc
, 404, 
NULL
);

7977 #i‡
MG_ENABLE_HTTP_WEBDAV


7978 } i‡(!
mg_vcmp
(&
hm
->
mëhod
, "PROPFIND")) {

7979 
mg_h™dÀ_¥›föd
(
nc
, 
∑th
, &
°
, 
hm
, 
›ts
);

7980 #i‡!
MG_DISABLE_DAV_AUTH


7981 } i‡(
	gis_dav
 &&

7982 (
	g›ts
->
	gdav_auth_fûe
 =
NULL
 ||

7983 (
°rcmp
(
›ts
->
dav_auth_fûe
, "-") != 0 &&

7984 !
mg_hâp_is_auth‹ized
(

7985 
hm
, 
mg_mk_°r
(
∑th
), 
›ts
->
auth_domaö
, o±s->
dav_auth_fûe
,

7986 ((
is_dúe˘‹y
 ? 
MG_AUTH_FLAG_IS_DIRECTORY
 : 0) |

7987 
MG_AUTH_FLAG_IS_GLOBAL_PASS_FILE
 |

7988 
MG_AUTH_FLAG_ALLOW_MISSING_FILE
))))) {

7989 
mg_hâp_£nd_dige°_auth_ªque°
(
nc
, 
›ts
->
auth_domaö
);

7991 } i‡(!
mg_vcmp
(&
hm
->
mëhod
, "MKCOL")) {

7992 
mg_h™dÀ_mkcﬁ
(
nc
, 
∑th
, 
hm
);

7993 } i‡(!
mg_vcmp
(&
hm
->
mëhod
, "DELETE")) {

7994 
mg_h™dÀ_dñëe
(
nc
, 
›ts
, 
∑th
);

7995 } i‡(!
mg_vcmp
(&
hm
->
mëhod
, "PUT")) {

7996 
mg_h™dÀ_put
(
nc
, 
∑th
, 
hm
);

7997 } i‡(!
mg_vcmp
(&
hm
->
mëhod
, "MOVE")) {

7998 
mg_h™dÀ_move
(
nc
, 
›ts
, 
∑th
, 
hm
);

7999 #i‡
MG_ENABLE_FAKE_DAVLOCK


8000 } i‡(!
mg_vcmp
(&
hm
->
mëhod
, "LOCK")) {

8001 
mg_h™dÀ_lock
(
nc
, 
∑th
);

8004 } i‡(!
mg_vcmp
(&
hm
->
mëhod
, "OPTIONS")) {

8005 
mg_hâp_£nd_›ti⁄s
(
nc
);

8006 } i‡(
	gis_dúe˘‹y
 && 
	gödex_fûe
 =
NULL
) {

8007 #i‡
MG_ENABLE_DIRECTORY_LISTING


8008 i‡(
°rcmp
(
›ts
->
íabÀ_dúe˘‹y_li°ög
, "yes") == 0) {

8009 
mg_£nd_dúe˘‹y_li°ög
(
nc
, 
∑th
, 
hm
, 
›ts
);

8011 
mg_hâp_£nd_îr‹
(
nc
, 403, 
NULL
);

8014 
mg_hâp_£nd_îr‹
(
nc
, 501, 
NULL
);

8016 } i‡(
mg_is_nŸ_modifõd
(
hm
, &
°
)) {

8017 
mg_hâp_£nd_îr‹
(
nc
, 304, "Not Modified");

8019 
mg_hâp_£rve_fûe2
(
nc
, 
ödex_fûe
 ? index_fûê: 
∑th
, 
hm
, 
›ts
);

8021 
MG_FREE
(
ödex_fûe
);

8024 
mg_£rve_hâp
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

8025 
mg_£rve_hâp_›ts
 
›ts
) {

8026 *
	g∑th
 = 
NULL
;

8027 
mg_°r
 *
	ghdr
, 
	g∑th_öfo
;

8028 
uöt32_t
 
	gªmŸe_ù
 = 
¡ohl
(*(uöt32_à*Ë&
nc
->
ß
.
sö
.
sö_addr
);

8030 i‡(
mg_check_ù_a˛
(
›ts
.
ù_a˛
, 
ªmŸe_ù
) != 1) {

8032 
mg_hâp_£nd_îr‹
(
nc
, 403, 
NULL
);

8033 
	gnc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

8037 #i‡
MG_ENABLE_HTTP_URL_REWRITES


8038 i‡(
mg_hâp_h™dÀ_f‹w¨dög
(
nc
, 
hm
, &
›ts
)) {

8042 i‡(
mg_hâp_£nd_p‹t_ba£d_ªdúe˘
(
nc
, 
hm
, &
›ts
)) {

8047 i‡(
	g›ts
.
	gdocumít_roŸ
 =
NULL
) {

8048 
›ts
.
documít_roŸ
 = ".";

8050 i‡(
	g›ts
.
	g≥r_dúe˘‹y_auth_fûe
 =
NULL
) {

8051 
›ts
.
≥r_dúe˘‹y_auth_fûe
 = ".htpasswd";

8053 i‡(
	g›ts
.
	gíabÀ_dúe˘‹y_li°ög
 =
NULL
) {

8054 
›ts
.
íabÀ_dúe˘‹y_li°ög
 = "yes";

8056 i‡(
	g›ts
.
	gcgi_fûe_∑âîn
 =
NULL
) {

8057 
›ts
.
cgi_fûe_∑âîn
 = "**.cgi$|**.php$";

8059 i‡(
	g›ts
.
	gssi_∑âîn
 =
NULL
) {

8060 
›ts
.
ssi_∑âîn
 = "**.shtml$|**.shtm$";

8062 i‡(
	g›ts
.
	gödex_fûes
 =
NULL
) {

8063 
›ts
.
ödex_fûes
 = "index.html,index.htm,index.shtml,index.cgi,index.php";

8066 i‡(!
mg_n‹mÆize_uri_∑th
(&
hm
->
uri
, &hm->uri)) {

8067 
mg_hâp_£nd_îr‹
(
nc
, 400, 
NULL
);

8070 i‡(
mg_uri_to_loˇl_∑th
(
hm
, &
›ts
, &
∑th
, &
∑th_öfo
) == 0) {

8071 
mg_hâp_£nd_îr‹
(
nc
, 404, 
NULL
);

8074 
mg_£nd_hâp_fûe
(
nc
, 
∑th
, &
∑th_öfo
, 
hm
, &
›ts
);

8076 
MG_FREE
(
∑th
);

8077 
	g∑th
 = 
NULL
;

8080 i‡(
mg_vcmp
(&
hm
->
¥Ÿo
, "HTTP/1.1") != 0 ||

8081 ((
hdr
 = 
mg_gë_hâp_hódî
(
hm
, "C⁄√˘i⁄")Ë!
NULL
 &&

8082 
mg_vcmp
(
hdr
, "keep-alive") != 0)) {

8084 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

8089 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


8090 
mg_fûe_u∂ﬂd_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
,

8091 
mg_fu_‚ame_‚
 
loˇl_«me_‚


8092 
MG_UD_ARG
(*
u£r_d©a
)) {

8093 
	gev
) {

8094 
	gMG_EV_HTTP_PART_BEGIN
: {

8095 
mg_hâp_mu…ù¨t_∑π
 *
mp
 =

8096 (
mg_hâp_mu…ù¨t_∑π
 *Ë
ev_d©a
;

8097 
fûe_u∂ﬂd_°©e
 *
	gfus
 =

8098 (
fûe_u∂ﬂd_°©e
 *Ë
MG_CALLOC
(1, (*
fus
));

8099 
mg_°r
 
	gl‚
 = 
loˇl_«me_‚
(
nc
, 
mg_mk_°r
(
mp
->
fûe_«me
));

8100 
	gmp
->
	gu£r_d©a
 = 
NULL
;

8101 i‡(
	gl‚
.
	gp
 =
NULL
 || 
l‚
.
Àn
 == 0) {

8102 
LOG
(
LL_ERROR
, ("%∞NŸáŒowedÅÿu∂ﬂd %s", 
nc
, 
mp
->
fûe_«me
));

8103 
mg_¥ötf
(
nc
,

8108 
mp
->
fûe_«me
);

8109 
	gnc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

8112 
	gfus
->
	gl‚
 = (*Ë
MG_MALLOC
(
l‚
.
Àn
 + 1);

8113 
mem˝y
(
fus
->
l‚
,Ü‚.
p
,Ü‚.
Àn
);

8114 
	gfus
->
	gl‚
[
l‚
.
Àn
] = '\0';

8115 i‡(
	gl‚
.
	gp
 !
mp
->
fûe_«me
Ë
MG_FREE
((*Ë
l‚
.
p
);

8116 
LOG
(
LL_DEBUG
,

8117 ("%∞Re˚ivög fûê%†-> %s", 
nc
, 
mp
->
fûe_«me
, 
fus
->
l‚
));

8118 
	gfus
->
	gÂ
 = 
mg_f›í
(
fus
->
l‚
, "w");

8119 i‡(
	gfus
->
	gÂ
 =
NULL
) {

8120 
mg_¥ötf
(
nc
,

8124 
LOG
(
LL_ERROR
, ("FaûedÅÿ›í %s: %d\n", 
fus
->
l‚
, 
mg_gë_î∫o
()));

8125 
mg_¥ötf
(
nc
, "FaûedÅÿ›í %s: %d\n", 
fus
->
l‚
, 
mg_gë_î∫o
());

8130 
	gmp
->
	gu£r_d©a
 = (*Ë
fus
;

8133 
	gMG_EV_HTTP_PART_DATA
: {

8134 
mg_hâp_mu…ù¨t_∑π
 *
mp
 =

8135 (
mg_hâp_mu…ù¨t_∑π
 *Ë
ev_d©a
;

8136 
fûe_u∂ﬂd_°©e
 *
	gfus
 =

8137 (
fûe_u∂ﬂd_°©e
 *Ë
mp
->
u£r_d©a
;

8138 i‡(
	gfus
 =
NULL
 || 
fus
->
Â
 == NULL) ;

8139 i‡(
mg_fwrôe
(
mp
->
d©a
.
p
, 1, mp->d©a.
Àn
, 
fus
->
Â
) != mp->data.len) {

8140 
LOG
(
LL_ERROR
, ("FaûedÅÿwrôêtÿ%s: %d, wrŸê%d", 
fus
->
l‚
,

8141 
mg_gë_î∫o
(), (Ë
fus
->
num_ªcd
));

8142 i‡(
mg_gë_î∫o
(Ë=
ENOSPC


8143 #ifde‡
SPIFFS_ERR_FULL


8144 || 
mg_gë_î∫o
(Ë=
SPIFFS_ERR_FULL


8147 
mg_¥ötf
(
nc
,

8151 
mg_¥ötf
(
nc
, "FailedÅo writeÅo %s:Ço spaceÜeft; wrote %d\r\n",

8152 
fus
->
l‚
, (Ëfus->
num_ªcd
);

8154 
mg_¥ötf
(
nc
,

8158 
mg_¥ötf
(
nc
, "FaûedÅÿwrôêtÿ%s: %d, wrŸê%d", 
mp
->
fûe_«me
,

8159 
mg_gë_î∫o
(), (Ë
fus
->
num_ªcd
);

8161 
f˛o£
(
fus
->
Â
);

8162 
ªmove
(
fus
->
l‚
);

8163 
	gfus
->
	gÂ
 = 
NULL
;

8169 
	gfus
->
	gnum_ªcd
 +
mp
->
d©a
.
Àn
;

8170 
LOG
(
LL_DEBUG
, ("%∞ªc'd %d byãs, %dÅŸÆ", 
nc
, (Ë
mp
->
d©a
.
Àn
,

8171 (Ë
fus
->
num_ªcd
));

8174 
	gMG_EV_HTTP_PART_END
: {

8175 
mg_hâp_mu…ù¨t_∑π
 *
mp
 =

8176 (
mg_hâp_mu…ù¨t_∑π
 *Ë
ev_d©a
;

8177 
fûe_u∂ﬂd_°©e
 *
	gfus
 =

8178 (
fûe_u∂ﬂd_°©e
 *Ë
mp
->
u£r_d©a
;

8179 i‡(
	gfus
 =
NULL
) ;

8180 i‡(
	gmp
->
	g°©us
 >0 && 
fus
->
Â
 !
NULL
) {

8181 
LOG
(
LL_DEBUG
, ("%∞U∂ﬂded %†(%s), %d byãs", 
nc
, 
mp
->
fûe_«me
,

8182 
fus
->
l‚
, (Ëfus->
num_ªcd
));

8183 
mg_¥ötf
(
nc
,

8188 
mp
->
fûe_«me
, (Ë
fus
->
num_ªcd
);

8190 
LOG
(
LL_ERROR
, ("FaûedÅÿ°‹ê%†(%s)", 
mp
->
fûe_«me
, 
fus
->
l‚
));

8196 i‡(
	gfus
->
	gÂ
 !
NULL
Ë
f˛o£
(
fus
->
Â
);

8197 
MG_FREE
(
fus
->
l‚
);

8198 
MG_FREE
(
fus
);

8199 
	gmp
->
	gu£r_d©a
 = 
NULL
;

8200 
	gnc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

8205 #i‡
MG_ENABLE_CALLBACK_USERDATA


8206 (Ë
	gu£r_d©a
;

8213 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_hâp_ba£
(

8214 
mg_mgr
 *
mgr
, 
MG_CB
(
mg_evít_h™dÀr_t
 
ev_h™dÀr
, *
u£r_d©a
),

8215 
mg_c⁄√˘_›ts
 
›ts
, c⁄° *
scheme1
, c⁄° *
scheme2
,

8216 c⁄° *
scheme_s¶1
, c⁄° *
scheme_s¶2
, c⁄° *
uæ
,

8217 
mg_°r
 *
∑th
, mg_°∏*
u£r_öfo
, mg_°∏*
ho°
) {

8218 
mg_c⁄√˘i⁄
 *
	gnc
 = 
NULL
;

8219 
	gp‹t_i
 = 0;

8220 
	gu£_s¶
 = 0;

8221 
mg_°r
 
	gscheme
, 
	gquîy
, 
	g‰agmít
;

8222 
	gc⁄n_addr_buf
[2];

8223 *
	gc⁄n_addr
 = 
c⁄n_addr_buf
;

8225 i‡(
mg_∑r£_uri
(
mg_mk_°r
(
uæ
), &
scheme
, 
u£r_öfo
, 
ho°
, &
p‹t_i
, 
∑th
,

8226 &
quîy
, &
‰agmít
) != 0) {

8227 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "cannotÖarse url");

8228 
	gout
;

8232 i‡(
	gquîy
.
	gÀn
 > 0Ë
	g∑th
->À¿+
quîy
.
Àn
 + 1;

8234 i‡(
	gscheme
.
	gÀn
 =0 || 
mg_vcmp
(&
scheme
, 
scheme1
) == 0 ||

8235 (
scheme2
 !
NULL
 && 
mg_vcmp
(&
scheme
, scheme2) == 0)) {

8236 
u£_s¶
 = 0;

8237 i‡(
	gp‹t_i
 =0Ë
p‹t_i
 = 80;

8238 } i‡(
mg_vcmp
(&
scheme
, 
scheme_s¶1
) == 0 ||

8239 (
scheme2
 !
NULL
 && 
mg_vcmp
(&
scheme
, 
scheme_s¶2
) == 0)) {

8240 
u£_s¶
 = 1;

8241 i‡(
	gp‹t_i
 =0Ë
p‹t_i
 = 443;

8243 
	gout
;

8246 
mg_a•rötf
(&
c⁄n_addr
, (
c⁄n_addr_buf
), "tcp://%.*s:%u",

8247 (Ë
ho°
->
Àn
, ho°->
p
, 
p‹t_i
);

8248 i‡(
	gc⁄n_addr
 =
NULL
Ë
out
;

8250 
LOG
(
LL_DEBUG
, ("%†u£_s¶? %d %s", 
uæ
, 
u£_s¶
, 
c⁄n_addr
));

8251 i‡(
	gu£_s¶
) {

8252 #i‡
MG_ENABLE_SSL


8258 i‡(
	g›ts
.
	gs¶_ˇ_˚π
 =
NULL
) {

8259 
›ts
.
s¶_ˇ_˚π
 = "*";

8262 
MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "ssl is disabled");

8263 
	gout
;

8267 i‡((
	gnc
 = 
mg_c⁄√˘_›t
(
mgr
, 
c⁄n_addr
, 
MG_CB
(
ev_h™dÀr
, 
u£r_d©a
),

8268 
›ts
)Ë!
NULL
) {

8269 
mg_£t_¥Ÿocﬁ_hâp_websockë
(
nc
);

8272 
	gout
:

8273 i‡(
c⁄n_addr
 !
NULL
 && c⁄n_add∏!
c⁄n_addr_buf
Ë
MG_FREE
(conn_addr);

8274  
	gnc
;

8277 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_hâp_›t
(

8278 
mg_mgr
 *
mgr
, 
MG_CB
(
mg_evít_h™dÀr_t
 
ev_h™dÀr
, *
u£r_d©a
),

8279 
mg_c⁄√˘_›ts
 
›ts
, c⁄° *
uæ
, c⁄° *
exåa_hódîs
,

8280 c⁄° *
po°_d©a
) {

8281 
mg_°r
 
	gu£r
 = 
MG_NULL_STR
, 
	gnuŒ_°r
 = MG_NULL_STR;

8282 
mg_°r
 
	gho°
 = 
MG_NULL_STR
, 
	g∑th
 = MG_NULL_STR;

8283 
mbuf
 
	gauth
;

8284 
mg_c⁄√˘i⁄
 *
	gnc
 =

8285 
mg_c⁄√˘_hâp_ba£
(
mgr
, 
MG_CB
(
ev_h™dÀr
, 
u£r_d©a
), 
›ts
, "http",

8286 
NULL
, "hâps", NULL, 
uæ
, &
∑th
, &
u£r
, &
ho°
);

8288 i‡(
	gnc
 =
NULL
) {

8289  
NULL
;

8292 
mbuf_öô
(&
auth
, 0);

8293 i‡(
	gu£r
.
	gÀn
 > 0) {

8294 
mg_basic_auth_hódî
(
u£r
, 
nuŒ_°r
, &
auth
);

8297 i‡(
	gpo°_d©a
 =
NULL
Ë
po°_d©a
 = "";

8298 i‡(
	gexåa_hódîs
 =
NULL
Ë
exåa_hódîs
 = "";

8299 i‡(
	g∑th
.
	gÀn
 =0Ë
∑th
 = 
mg_mk_°r
("/");

8300 i‡(
	gho°
.
	gÀn
 =0Ë
ho°
 = 
mg_mk_°r
("");

8302 
mg_¥ötf
(
nc
, "%†%.*†HTTP/1.1\r\nHo°: %.*s\r\nC⁄ã¡-Lígth: %" 
SIZE_T_FMT


8304 (
po°_d©a
[0] ='\0' ? "GET" : "POST"), (Ë
∑th
.
Àn
,Ö©h.
p
,

8305 (Ë(
∑th
.
p
 - 
ho°
.p), ho°.p, 
°æí
(
po°_d©a
), (Ë
auth
.
Àn
,

8306 (
auth
.
buf
 =
NULL
 ? "" :áuth.buf), 
exåa_hódîs
, 
po°_d©a
);

8308 
mbuf_‰ì
(&
auth
);

8309  
	gnc
;

8312 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_hâp
(

8313 
mg_mgr
 *
mgr
, 
MG_CB
(
mg_evít_h™dÀr_t
 
ev_h™dÀr
, *
u£r_d©a
),

8314 c⁄° *
uæ
, c⁄° *
exåa_hódîs
, c⁄° *
po°_d©a
) {

8315 
mg_c⁄√˘_›ts
 
	g›ts
;

8316 
mem£t
(&
›ts
, 0, (opts));

8317  
mg_c⁄√˘_hâp_›t
(
mgr
, 
MG_CB
(
ev_h™dÀr
, 
u£r_d©a
), 
›ts
, 
uæ
,

8318 
exåa_hódîs
, 
po°_d©a
);

8321 
size_t
 
mg_∑r£_mu…ù¨t
(c⁄° *
buf
, size_à
buf_Àn
, *
v¨_«me
,

8322 
size_t
 
v¨_«me_Àn
, *
fûe_«me
,

8323 
size_t
 
fûe_«me_Àn
, c⁄° **
d©a
,

8324 
size_t
 *
d©a_Àn
) {

8325 c⁄° 
	gcd
[] = "Content-Disposition: ";

8326 
size_t
 
	ghl
, 
	gbl
, 
	gn
, 
	gŒ
, 
	gpos
, 
	gcdl
 = (
cd
) - 1;

8327 
	gshl
;

8329 i‡(
	gbuf
 =
NULL
 || 
buf_Àn
 <= 0)  0;

8330 i‡((
	gshl
 = 
mg_hâp_gë_ªque°_Àn
(
buf
, 
buf_Àn
)) <= 0)  0;

8331 
	ghl
 = 
shl
;

8332 i‡(
	gbuf
[0] !'-' || 
buf
[1] != '-' || buf[2] == '\n')  0;

8335 
	gbl
 = 
mg_gë_löe_Àn
(
buf
, 
buf_Àn
);

8338 
	gv¨_«me
[0] = 
fûe_«me
[0] = '\0';

8339 
	gn
 = 
bl
; (
	gŒ
 = 
mg_gë_löe_Àn
(
buf
 + 
n
, 
hl
 -Ç)Ë> 0;Ç +
Œ
) {

8340 i‡(
mg_nˇ£cmp
(
cd
, 
buf
 + 
n
, 
cdl
) == 0) {

8341 
mg_°r
 
hódî
;

8342 
	ghódî
.
	gp
 = 
buf
 + 
n
 + 
cdl
;

8343 
	ghódî
.
	gÀn
 = 
Œ
 - (
cdl
 + 2);

8345 *
	gv¨_«me2
 = 
v¨_«me
;

8346 
mg_hâp_∑r£_hódî2
(&
hódî
, "«me", &
v¨_«me2
, 
v¨_«me_Àn
);

8348 i‡(
	gv¨_«me2
 !
v¨_«me
) {

8349 
MG_FREE
(
v¨_«me2
);

8350 
	gv¨_«me
[0] = '\0';

8354 *
	gfûe_«me2
 = 
fûe_«me
;

8355 
mg_hâp_∑r£_hódî2
(&
hódî
, "fûíame", &
fûe_«me2
, 
fûe_«me_Àn
);

8357 i‡(
	gfûe_«me2
 !
fûe_«me
) {

8358 
MG_FREE
(
fûe_«me2
);

8359 
	gfûe_«me
[0] = '\0';

8366 
	gpos
 = 
hl
;Öo†+ (
	gbl
 - 2Ë< 
	gbuf_Àn
;Öos++) {

8367 i‡(
	gbuf
[
pos
] ='-' && !
°∫cmp
(
buf
, &buf[pos], 
bl
 - 2)) {

8368 i‡(
	gd©a_Àn
 !
NULL
Ë*
d©a_Àn
 = (
pos
 - 2Ë- 
hl
;

8369 i‡(
	gd©a
 !
NULL
Ë*
d©a
 = 
buf
 + 
hl
;

8370  
	gpos
;

8377 
mg_ªgi°î_hâp_ídpoöt_›t
(
mg_c⁄√˘i⁄
 *
nc
,

8378 c⁄° *
uri_∑th
,

8379 
mg_evít_h™dÀr_t
 
h™dÀr
,

8380 
mg_hâp_ídpoöt_›ts
 
›ts
) {

8381 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
NULL
;

8382 
mg_hâp_ídpoöt
 *
	g√w_ï
 = 
NULL
;

8384 i‡(
	gnc
 =
NULL
) ;

8385 
	g√w_ï
 = (
mg_hâp_ídpoöt
 *Ë
MG_CALLOC
(1, (*
√w_ï
));

8386 i‡(
	g√w_ï
 =
NULL
) ;

8388 
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
nc
);

8389 
	g√w_ï
->
	guri_∑âîn
 = 
mg_°rdup
(
mg_mk_°r
(
uri_∑th
));

8390 i‡(
	g›ts
.
	gauth_domaö
 !
NULL
 && 
›ts
.
auth_fûe
 != NULL) {

8391 
√w_ï
->
auth_domaö
 = 
°rdup
(
›ts
.auth_domain);

8392 
	g√w_ï
->
	gauth_fûe
 = 
°rdup
(
›ts
.
auth_fûe
);

8394 
	g√w_ï
->
	gh™dÀr
 = 
h™dÀr
;

8395 #i‡
MG_ENABLE_CALLBACK_USERDATA


8396 
	g√w_ï
->
	gu£r_d©a
 = 
›ts
.
u£r_d©a
;

8398 
	g√w_ï
->
	g√xt
 = 
pd
->
ídpoöts
;

8399 
	gpd
->
	gídpoöts
 = 
√w_ï
;

8402 
mg_hâp_ˇŒ_ídpoöt_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

8403 
hâp_mesßge
 *
hm
) {

8404 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
nc
);

8405 *
	gu£r_d©a
 = 
nc
->
u£r_d©a
;

8407 i‡(
	gev
 =
MG_EV_HTTP_REQUEST


8408 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


8409 || 
ev
 =
MG_EV_HTTP_MULTIPART_REQUEST


8412 
mg_hâp_ídpoöt
 *
ï
 =

8413 
mg_hâp_gë_ídpoöt_h™dÀr
(
nc
->
li°íî
, &
hm
->
uri
);

8414 i‡(
	gï
 !
NULL
) {

8415 #i‡
MG_ENABLE_FILESYSTEM
 && !
MG_DISABLE_HTTP_DIGEST_AUTH


8416 i‡(!
mg_hâp_is_auth‹ized
(
hm
, hm->
uri
, 
ï
->
auth_domaö
,Ép->
auth_fûe
,

8417 
MG_AUTH_FLAG_IS_GLOBAL_PASS_FILE
)) {

8418 
mg_hâp_£nd_dige°_auth_ªque°
(
nc
, 
ï
->
auth_domaö
);

8422 
	gpd
->
	gídpoöt_h™dÀr
 = 
ï
->
h™dÀr
;

8423 #i‡
MG_ENABLE_CALLBACK_USERDATA


8424 
	gu£r_d©a
 = 
ï
->
u£r_d©a
;

8428 
mg_ˇŒ
(
nc
, 
pd
->
ídpoöt_h™dÀr
 ?Öd->ídpoöt_h™dÀ∏:Çc->
h™dÀr
,

8429 
u£r_d©a
, 
ev
, 
hm
);

8432 
mg_ªgi°î_hâp_ídpoöt
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
uri_∑th
,

8433 
MG_CB
(
mg_evít_h™dÀr_t
 
h™dÀr
,

8434 *
u£r_d©a
)) {

8435 
mg_hâp_ídpoöt_›ts
 
	g›ts
;

8436 
mem£t
(&
›ts
, 0, (opts));

8437 #i‡
MG_ENABLE_CALLBACK_USERDATA


8438 
	g›ts
.
	gu£r_d©a
 = 
u£r_d©a
;

8440 
mg_ªgi°î_hâp_ídpoöt_›t
(
nc
, 
uri_∑th
, 
h™dÀr
, 
›ts
);

8444 #ifde‡
MG_MODULE_LINES


8452 #i‚de‡
_WIN32


8453 
	~<sig«l.h
>

8456 #i‡
MG_ENABLE_HTTP
 && 
MG_ENABLE_HTTP_CGI


8458 #i‚de‡
MG_MAX_CGI_ENVIR_VARS


8459 
	#MG_MAX_CGI_ENVIR_VARS
 64

	)

8462 #i‚de‡
MG_ENV_EXPORT_TO_CGI


8463 
	#MG_ENV_EXPORT_TO_CGI
 "MONGOOSE_CGI"

	)

8466 
	#MG_F_HTTP_CGI_PARSE_HEADERS
 
MG_F_USER_1


	)

8478 
	smg_cgi_ív_block
 {

8479 
mg_c⁄√˘i⁄
 *
	gnc
;

8480 
	gbuf
[
MG_CGI_ENVIRONMENT_SIZE
];

8481 c⁄° *
	gv¨s
[
MG_MAX_CGI_ENVIR_VARS
];

8482 
	gÀn
;

8483 
	gnv¨s
;

8486 #ifde‡
_WIN32


8487 
	smg_thªad∑øm
 {

8488 
sock_t
 
	gs
;

8489 
HANDLE
 
	ghPùe
;

8492 
mg_waô_u¡û_ªady
(
sock_t
 
sock
, 
f‹_ªad
) {

8493 
fd_£t
 
	g£t
;

8494 
FD_ZERO
(&
£t
);

8495 
FD_SET
(
sock
, &
£t
);

8496  
£À˘
(
sock
 + 1, 
f‹_ªad
 ? &
£t
 : 0, for_read ? 0 : &set, 0, 0) == 1;

8499 *
mg_push_to_°dö
(*
¨g
) {

8500 
mg_thªad∑øm
 *
	gç
 = (mg_thªad∑øm *Ë
¨g
;

8501 
	gn
, 
	g£¡
, 
	g°›
 = 0;

8502 
DWORD
 
	gk
;

8503 
	gbuf
[
BUFSIZ
];

8505 !
	g°›
 && 
mg_waô_u¡û_ªady
(
ç
->
s
, 1) &&

8506 (
	gn
 = 
ªcv
(
ç
->
s
, 
buf
, (buf), 0)) > 0) {

8507 i‡(
	gn
 =-1 && 
GëLa°Eº‹
(Ë=
WSAEWOULDBLOCK
) ;

8508 
	g£¡
 = 0; !
	g°›
 && síà< 
	gn
; síà+
k
) {

8509 i‡(!
WrôeFûe
(
ç
->
hPùe
, 
buf
 + 
£¡
, 
n
 - sít, &
k
, 0)Ë
°›
 = 1;

8512 
DBG
(("%s", "FORWARED EVERYTHING TO CGI"));

8513 
Clo£H™dÀ
(
ç
->
hPùe
);

8514 
MG_FREE
(
ç
);

8515  
	gNULL
;

8518 *
mg_puŒ_‰om_°dout
(*
¨g
) {

8519 
mg_thªad∑øm
 *
	gç
 = (mg_thªad∑øm *Ë
¨g
;

8520 
	gk
 = 0, 
	g°›
 = 0;

8521 
DWORD
 
	gn
, 
	g£¡
;

8522 
	gbuf
[
BUFSIZ
];

8524 !
	g°›
 && 
RódFûe
(
ç
->
hPùe
, 
buf
, (buf), &
n
, 
NULL
)) {

8525 
	g£¡
 = 0; !
	g°›
 && síà< 
	gn
; síà+
k
) {

8526 i‡(
mg_waô_u¡û_ªady
(
ç
->
s
, 0) &&

8527 (
k
 = 
£nd
(
ç
->
s
, 
buf
 + 
£¡
, 
n
 - sent, 0)) <= 0)

8528 
°›
 = 1;

8531 
DBG
(("%s", "EOF FROM CGI"));

8532 
Clo£H™dÀ
(
ç
->
hPùe
);

8533 
shutdown
(
ç
->
s
, 2);

8534 
˛o£sockë
(
ç
->
s
);

8535 
MG_FREE
(
ç
);

8536  
	gNULL
;

8539 
mg_•awn_°dio_thªad
(
sock_t
 
sock
, 
HANDLE
 
hPùe
,

8540 *(*
func
)(*)) {

8541 
mg_thªad∑øm
 *
	gç
 = (mg_thªad∑øm *Ë
MG_MALLOC
((*
ç
));

8542 i‡(
	gç
 !
NULL
) {

8543 
ç
->
s
 = 
sock
;

8544 
	gç
->
	ghPùe
 = 
hPùe
;

8545 
mg_°¨t_thªad
(
func
, 
ç
);

8549 
mg_abs_∑th
(c⁄° *
utf8_∑th
, *
abs_∑th
, 
size_t
 
Àn
) {

8550 
wch¨_t
 
	gbuf
[
MG_MAX_PATH
], 
	gbuf2
[MG_MAX_PATH];

8551 
to_wch¨
(
utf8_∑th
, 
buf
, 
ARRAY_SIZE
(buf));

8552 
GëFuŒP©hNameW
(
buf
, 
ARRAY_SIZE
(
buf2
), buf2, 
NULL
);

8553 
WideCh¨ToMu…iByã
(
CP_UTF8
, 0, 
buf2
, 
wc¶í
(buf2Ë+ 1, 
abs_∑th
, 
Àn
, 0, 0);

8556 
mg_°¨t_¥o˚ss
(c⁄° *
öãΩ
, c⁄° *
cmd
,

8557 c⁄° *
ív
, c⁄° *
ívp
[],

8558 c⁄° *
dú
, 
sock_t
 
sock
) {

8559 
STARTUPINFOW
 
	gsi
;

8560 
PROCESS_INFORMATION
 
	gpi
;

8561 
HANDLE
 
	ga
[2], 
	gb
[2], 
	gme
 = 
GëCuºítPro˚ss
();

8562 
wch¨_t
 
	gwcmd
[
MG_MAX_PATH
], 
	gfuŒ_dú
[MG_MAX_PATH];

8563 
	gbuf
[
MG_MAX_PATH
], 
	gbuf2
[MG_MAX_PATH], 
	gbuf5
[MG_MAX_PATH],

8564 
	gbuf4
[
MG_MAX_PATH
], 
	gcmdlöe
[MG_MAX_PATH];

8565 
DWORD
 
	gÊags
 = 
DUPLICATE_CLOSE_SOURCE
 | 
DUPLICATE_SAME_ACCESS
;

8566 
FILE
 *
	gÂ
;

8568 
mem£t
(&
si
, 0, (si));

8569 
mem£t
(&
pi
, 0, (pi));

8571 
	gsi
.
	gcb
 = (
si
);

8572 
	gsi
.
	gdwFœgs
 = 
STARTF_USESTDHANDLES
 | 
STARTF_USESHOWWINDOW
;

8573 
	gsi
.
	gwShowWödow
 = 
SW_HIDE
;

8574 
	gsi
.
	ghStdEº‹
 = 
GëStdH™dÀ
(
STD_ERROR_HANDLE
);

8576 
Cª©ePùe
(&
a
[0], &a[1], 
NULL
, 0);

8577 
Cª©ePùe
(&
b
[0], &b[1], 
NULL
, 0);

8578 
Du∂iˇãH™dÀ
(
me
, 
a
[0], me, &
si
.
hStdI≈ut
, 0, 
TRUE
, 
Êags
);

8579 
Du∂iˇãH™dÀ
(
me
, 
b
[1], me, &
si
.
hStdOuçut
, 0, 
TRUE
, 
Êags
);

8581 i‡(
	göãΩ
 =
NULL
 && (
Â
 = 
mg_f›í
(
cmd
, "r")) != NULL) {

8582 
buf
[0] = buf[1] = '\0';

8583 
fgës
(
buf
, (buf), 
Â
);

8584 
	gbuf
[(
buf
) - 1] = '\0';

8585 i‡(
	gbuf
[0] ='#' && 
buf
[1] == '!') {

8586 
öãΩ
 = 
buf
 + 2;

8588 *
	göãΩ
 !'\0' && 
is•a˚
(*(*Ë
öãΩ
)) {

8589 
öãΩ
++;

8592 
f˛o£
(
Â
);

8595 
¢¥ötf
(
buf
, (buf), "%s/%s", 
dú
, 
cmd
);

8596 
mg_abs_∑th
(
buf
, 
buf2
, 
ARRAY_SIZE
(buf2));

8598 
mg_abs_∑th
(
dú
, 
buf5
, 
ARRAY_SIZE
(buf5));

8599 
to_wch¨
(
dú
, 
fuŒ_dú
, 
ARRAY_SIZE
(full_dir));

8601 i‡(
	göãΩ
 !
NULL
) {

8602 
mg_abs_∑th
(
öãΩ
, 
buf4
, 
ARRAY_SIZE
(buf4));

8603 
¢¥ötf
(
cmdlöe
, (cmdlöe), "%†\"%s\"", 
buf4
, 
buf2
);

8605 
¢¥ötf
(
cmdlöe
, (cmdlöe), "\"%s\"", 
buf2
);

8607 
to_wch¨
(
cmdlöe
, 
wcmd
, 
ARRAY_SIZE
(wcmd));

8609 i‡(
Cª©ePro˚ssW
(
NULL
, 
wcmd
, NULL, NULL, 
TRUE
, 
CREATE_NEW_PROCESS_GROUP
,

8610 (*Ë
ív
, 
fuŒ_dú
, &
si
, &
pi
) != 0) {

8611 
mg_•awn_°dio_thªad
(
sock
, 
a
[1], 
mg_push_to_°dö
);

8612 
mg_•awn_°dio_thªad
(
sock
, 
b
[0], 
mg_puŒ_‰om_°dout
);

8614 
Clo£H™dÀ
(
si
.
hStdOuçut
);

8615 
Clo£H™dÀ
(
si
.
hStdI≈ut
);

8617 
Clo£H™dÀ
(
pi
.
hThªad
);

8618 
Clo£H™dÀ
(
pi
.
hPro˚ss
);

8620 
Clo£H™dÀ
(
a
[1]);

8621 
Clo£H™dÀ
(
b
[0]);

8622 
˛o£sockë
(
sock
);

8624 
DBG
(("CGI comm™d: [%ls] -> %p", 
wcmd
, 
pi
.
hPro˚ss
));

8627 (Ë
	gívp
;

8628  (
	gpi
.
	ghPro˚ss
 !
NULL
);

8631 
mg_°¨t_¥o˚ss
(c⁄° *
öãΩ
, c⁄° *
cmd
,

8632 c⁄° *
ív
, c⁄° *
ívp
[],

8633 c⁄° *
dú
, 
sock_t
 
sock
) {

8634 
	gbuf
[500];

8635 
pid_t
 
	gpid
 = 
f‹k
();

8636 (Ë
	gív
;

8638 i‡(
	gpid
 == 0) {

8643 
tmp
 = 
chdú
(
dú
);

8644 (Ë
	gtmp
;

8645 (Ë
dup2
(
sock
, 0);

8646 (Ë
dup2
(
sock
, 1);

8647 
˛o£sockë
(
sock
);

8655 
sig«l
(
SIGCHLD
, 
SIG_DFL
);

8657 i‡(
	göãΩ
 =
NULL
) {

8658 
exe˛e
(
cmd
, cmd, (*Ë0, 
ívp
);

8660 
exe˛e
(
öãΩ
, i¡îp, 
cmd
, (*Ë0, 
ívp
);

8662 
¢¥ötf
(
buf
, (buf),

8665 
öãΩ
 =
NULL
 ? "" : i¡îp, i¡î∞=NULL ? "" : " ", 
cmd
,

8666 
°ªº‹
(
î∫o
));

8667 
£nd
(1, 
buf
, 
°æí
(buf), 0);

8668 
_exô
(
EXIT_FAILURE
);

8671  (
	gpid
 != 0);

8679 *
mg_addív
(
mg_cgi_ív_block
 *
block
, c⁄° *
fmt
, ...) {

8680 
	gn
, 
	g•a˚
;

8681 *
	gadded
 = 
block
->
buf
 + block->
Àn
;

8682 
va_li°
 
	g≠
;

8685 
	g•a˚
 = (
block
->
buf
Ë- (block->
Àn
 + 2);

8686 i‡(
	g•a˚
 > 0) {

8688 
va_°¨t
(
≠
, 
fmt
);

8689 
	gn
 = 
v¢¥ötf
(
added
, (
size_t
Ë
•a˚
, 
fmt
, 
≠
);

8690 
va_íd
(
≠
);

8693 i‡(
	gn
 > 0 &&Ç + 1 < 
	g•a˚
 &&

8694 
	gblock
->
	gnv¨s
 < (Ë
ARRAY_SIZE
(
block
->
v¨s
) - 2) {

8696 
	gblock
->
	gv¨s
[
block
->
nv¨s
++] = 
added
;

8698 
	gblock
->
	gÀn
 +
n
 + 1;

8702  
	gadded
;

8705 
mg_addív2
(
mg_cgi_ív_block
 *
blk
, c⁄° *
«me
) {

8706 c⁄° *
	gs
;

8707 i‡((
	gs
 = 
gëív
(
«me
)Ë!
NULL
Ë
mg_addív
(
blk
, "%s=%s",Çame, 
s
);

8710 
mg_¥ï¨e_cgi_ívú⁄mít
(
mg_c⁄√˘i⁄
 *
nc
,

8711 c⁄° *
¥og
,

8712 c⁄° 
mg_°r
 *
∑th_öfo
,

8713 c⁄° 
hâp_mesßge
 *
hm
,

8714 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

8715 
mg_cgi_ív_block
 *
blk
) {

8716 c⁄° *
	gs
;

8717 
mg_°r
 *
	gh
;

8718 *
	gp
;

8719 
size_t
 
	gi
;

8720 
	gbuf
[100];

8721 
size_t
 
	g∑th_öfo_Àn
 = 
∑th_öfo
 !
NULL
 ?Ö©h_öfo->
Àn
 : 0;

8723 
	gblk
->
	gÀn
 = 
blk
->
nv¨s
 = 0;

8724 
	gblk
->
	gnc
 = 
nc
;

8726 i‡((
	gs
 = 
gëív
("SERVER_NAME")Ë!
NULL
) {

8727 
mg_addív
(
blk
, "SERVER_NAME=%s", 
s
);

8729 
mg_sock_to_°r
(
nc
->
sock
, 
buf
, (buf), 3);

8730 
mg_addív
(
blk
, "SERVER_NAME=%s", 
buf
);

8732 
mg_addív
(
blk
, "SERVER_ROOT=%s", 
›ts
->
documít_roŸ
);

8733 
mg_addív
(
blk
, "DOCUMENT_ROOT=%s", 
›ts
->
documít_roŸ
);

8734 
mg_addív
(
blk
, "SERVER_SOFTWARE=%s/%s", "M⁄goo£", 
MG_VERSION
);

8737 
mg_addív
(
blk
, "%s", "GATEWAY_INTERFACE=CGI/1.1");

8738 
mg_addív
(
blk
, "%s", "SERVER_PROTOCOL=HTTP/1.1");

8739 
mg_addív
(
blk
, "%s", "REDIRECT_STATUS=200");

8741 
mg_addív
(
blk
, "REQUEST_METHOD=%.*s", (Ë
hm
->
mëhod
.
Àn
, hm->mëhod.
p
);

8743 
mg_addív
(
blk
, "REQUEST_URI=%.*s%s%.*s", (Ë
hm
->
uri
.
Àn
, hm->uri.
p
,

8744 
hm
->
quîy_°rög
.
Àn
 == 0 ? "" : "?", () hm->query_string.len,

8745 
hm
->
quîy_°rög
.
p
);

8747 
mg_c⁄n_addr_to_°r
(
nc
, 
buf
, (buf),

8748 
MG_SOCK_STRINGIFY_REMOTE
 | 
MG_SOCK_STRINGIFY_IP
);

8749 
mg_addív
(
blk
, "REMOTE_ADDR=%s", 
buf
);

8750 
mg_c⁄n_addr_to_°r
(
nc
, 
buf
, (buf), 
MG_SOCK_STRINGIFY_PORT
);

8751 
mg_addív
(
blk
, "SERVER_PORT=%s", 
buf
);

8753 
	gs
 = 
hm
->
uri
.
p
 + hm->uri.
Àn
 - 
∑th_öfo_Àn
 - 1;

8754 i‡(*
	gs
 == '/') {

8755 c⁄° *
ba£_«me
 = 
°ºchr
(
¥og
, 
DIRSEP
);

8756 
mg_addív
(
blk
, "SCRIPT_NAME=%.*s/%s", (Ë(
s
 - 
hm
->
uri
.
p
), hm->uri.p,

8757 (
ba£_«me
 !
NULL
 ? ba£_«mê+ 1 : 
¥og
));

8759 
mg_addív
(
blk
, "SCRIPT_NAME=%.*s", (Ë(
s
 - 
hm
->
uri
.
p
 + 1), hm->uri.p);

8761 
mg_addív
(
blk
, "SCRIPT_FILENAME=%s", 
¥og
);

8763 i‡(
	g∑th_öfo
 !
NULL
 && 
∑th_öfo
->
Àn
 > 0) {

8764 
mg_addív
(
blk
, "PATH_INFO=%.*s", (Ë
∑th_öfo
->
Àn
,Ö©h_öfo->
p
);

8766 
mg_addív
(
blk
, "PATH_TRANSLATED=%.*s", (Ë
∑th_öfo
->
Àn
,Ö©h_öfo->
p
);

8769 #i‡
MG_ENABLE_SSL


8770 
mg_addív
(
blk
, "HTTPS=%s", (
nc
->
Êags
 & 
MG_F_SSL
 ? "on" : "off"));

8772 
mg_addív
(
blk
, "HTTPS=off");

8775 i‡((
	gh
 = 
mg_gë_hâp_hódî
((
hâp_mesßge
 *Ë
hm
, "Content-Type")) !=

8776 
NULL
) {

8777 
mg_addív
(
blk
, "CONTENT_TYPE=%.*s", (Ë
h
->
Àn
, h->
p
);

8780 i‡(
	ghm
->
	gquîy_°rög
.
	gÀn
 > 0) {

8781 
mg_addív
(
blk
, "QUERY_STRING=%.*s", (Ë
hm
->
quîy_°rög
.
Àn
,

8782 
hm
->
quîy_°rög
.
p
);

8785 i‡((
	gh
 = 
mg_gë_hâp_hódî
((
hâp_mesßge
 *Ë
hm
, "Content-Length")) !=

8786 
NULL
) {

8787 
mg_addív
(
blk
, "CONTENT_LENGTH=%.*s", (Ë
h
->
Àn
, h->
p
);

8790 
mg_addív2
(
blk
, "PATH");

8791 
mg_addív2
(
blk
, "TMP");

8792 
mg_addív2
(
blk
, "TEMP");

8793 
mg_addív2
(
blk
, "TMPDIR");

8794 
mg_addív2
(
blk
, "PERLLIB");

8795 
mg_addív2
(
blk
, 
MG_ENV_EXPORT_TO_CGI
);

8797 #ifde‡
_WIN32


8798 
mg_addív2
(
blk
, "COMSPEC");

8799 
mg_addív2
(
blk
, "SYSTEMROOT");

8800 
mg_addív2
(
blk
, "SystemDrive");

8801 
mg_addív2
(
blk
, "ProgramFiles");

8802 
mg_addív2
(
blk
, "ProgramFiles(x86)");

8803 
mg_addív2
(
blk
, "CommonProgramFiles(x86)");

8805 
mg_addív2
(
blk
, "LD_LIBRARY_PATH");

8809 
	gi
 = 0; 
	ghm
->
	ghódî_«mes
[
i
].
	gÀn
 > 0; i++) {

8810 
	gp
 = 
mg_addív
(
blk
, "HTTP_%.*s=%.*s", (Ë
hm
->
hódî_«mes
[
i
].
Àn
,

8811 
hm
->
hódî_«mes
[
i
].
p
, (Ëhm->
hódî_vÆues
[i].
Àn
,

8812 
hm
->
hódî_vÆues
[
i
].
p
);

8815 ; *
	gp
 !'=' && *
p
 != '\0';Ö++) {

8816 i‡(*
	gp
 ='-'Ë*
p
 = '_';

8817 *
	gp
 = (Ë
touµî
(*(*Ë
p
);

8821 
	gblk
->
	gv¨s
[
blk
->
nv¨s
++] = 
NULL
;

8822 
	gblk
->
	gbuf
[
blk
->
Àn
++] = '\0';

8825 
mg_cgi_ev_h™dÀr
(
mg_c⁄√˘i⁄
 *
cgi_nc
, 
ev
,

8826 *
ev_d©a
 
MG_UD_ARG
(*
u£r_d©a
)) {

8827 #i‡!
MG_ENABLE_CALLBACK_USERDATA


8828 *
	gu£r_d©a
 = 
cgi_nc
->
u£r_d©a
;

8830 
mg_c⁄√˘i⁄
 *
	gnc
 = (mg_c⁄√˘i⁄ *Ë
u£r_d©a
;

8831 (Ë
	gev_d©a
;

8833 i‡(
	gnc
 =
NULL
) {

8835 
cgi_nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

8839 
	gev
) {

8840 
	gMG_EV_RECV
:

8854 i‡(
nc
->
Êags
 & 
MG_F_HTTP_CGI_PARSE_HEADERS
) {

8855 
mbuf
 *
io
 = &
cgi_nc
->
ªcv_mbuf
;

8856 
	gÀn
 = 
mg_hâp_gë_ªque°_Àn
(
io
->
buf
, io->
Àn
);

8858 i‡(
	gÀn
 == 0) ;

8859 i‡(
	gÀn
 < 0 || 
	gio
->À¿> 
	gMG_MAX_HTTP_REQUEST_SIZE
) {

8860 
	gcgi_nc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

8861 
mg_hâp_£nd_îr‹
(
nc
, 500, "Bad headers");

8863 
hâp_mesßge
 
	ghm
;

8864 
mg_°r
 *
	gh
;

8865 
mg_hâp_∑r£_hódîs
(
io
->
buf
, io->bu‡+ io->
Àn
, io->Àn, &
hm
);

8866 i‡(
mg_gë_hâp_hódî
(&
hm
, "Loˇti⁄"Ë!
NULL
) {

8867 
mg_¥ötf
(
nc
, "%s", "HTTP/1.1 302 Moved\r\n");

8868 } i‡((
	gh
 = 
mg_gë_hâp_hódî
(&
hm
, "Sètus")Ë!
NULL
) {

8869 
mg_¥ötf
(
nc
, "HTTP/1.1 %.*s\r\n", (Ë
h
->
Àn
, h->
p
);

8871 
mg_¥ötf
(
nc
, "%s", "HTTP/1.1 200 OK\r\n");

8874 
	gnc
->
	gÊags
 &~
MG_F_HTTP_CGI_PARSE_HEADERS
;

8876 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_HTTP_CGI_PARSE_HEADERS
)) {

8877 
mg_f‹w¨d
(
cgi_nc
, 
nc
);

8880 
	gMG_EV_CLOSE
:

8881 
DBG
(("%∞CLOSE", 
cgi_nc
));

8882 
mg_hâp_‰ì_¥Ÿo_d©a_cgi
(&
mg_hâp_gë_¥Ÿo_d©a
(
nc
)->
cgi
);

8883 
	gnc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

8888 
MG_INTERNAL
 
mg_h™dÀ_cgi
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
¥og
,

8889 c⁄° 
mg_°r
 *
∑th_öfo
,

8890 c⁄° 
hâp_mesßge
 *
hm
,

8891 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

8892 
mg_cgi_ív_block
 
	gblk
;

8893 
	gdú
[
MG_MAX_PATH
];

8894 c⁄° *
	gp
;

8895 
sock_t
 
	gfds
[2];

8897 
DBG
(("%∞[%s]", 
nc
, 
¥og
));

8898 
mg_¥ï¨e_cgi_ívú⁄mít
(
nc
, 
¥og
, 
∑th_öfo
, 
hm
, 
›ts
, &
blk
);

8904 i‡((
	gp
 = 
°ºchr
(
¥og
, 
DIRSEP
)Ë=
NULL
) {

8905 
¢¥ötf
(
dú
, (dir), "%s", ".");

8907 
¢¥ötf
(
dú
, (dú), "%.*s", (Ë(
p
 - 
¥og
),Örog);

8908 
	g¥og
 = 
p
 + 1;

8911 i‡(!
mg_sockë∑ú
(
fds
, 
SOCK_STREAM
)) {

8912 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

8916 #i‚de‡
_WIN32


8917 
siga˘i⁄
 
	gß
;

8919 
sigem±y£t
(&
ß
.
ß_mask
);

8920 
	gß
.
	gß_h™dÀr
 = 
SIG_IGN
;

8921 
	gß
.
	gß_Êags
 = 0;

8922 
siga˘i⁄
(
SIGCHLD
, &
ß
, 
NULL
);

8925 i‡(
mg_°¨t_¥o˚ss
(
›ts
->
cgi_öãΩªãr
, 
¥og
, 
blk
.
buf
, blk.
v¨s
, 
dú
,

8926 
fds
[1]) != 0) {

8927 
size_t
 
n
 = 
nc
->
ªcv_mbuf
.
Àn
 - (
hm
->
mesßge
.À¿- hm->
body
.len);

8928 
mg_c⁄√˘i⁄
 *
	gcgi_nc
 =

8929 
mg_add_sock
(
nc
->
mgr
, 
fds
[0], 
mg_cgi_ev_h™dÀr
 
MG_UD_ARG
(nc));

8930 
mg_hâp_¥Ÿo_d©a
 *
	gcgi_pd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
nc
);

8931 
	gcgi_pd
->
	gcgi
.
	gcgi_nc
 = 
cgi_nc
;

8932 #i‡!
MG_ENABLE_CALLBACK_USERDATA


8933 
	gcgi_pd
->
	gcgi
.
	gcgi_nc
->
	gu£r_d©a
 = 
nc
;

8935 
	gnc
->
	gÊags
 |
MG_F_HTTP_CGI_PARSE_HEADERS
;

8937 i‡(
	gn
 > 0 &&Ç < 
	gnc
->
	gªcv_mbuf
.
	gÀn
) {

8938 
mg_£nd
(
cgi_pd
->
cgi
.
cgi_nc
, 
hm
->
body
.
p
, 
n
);

8940 
mbuf_ªmove
(&
nc
->
ªcv_mbuf
,Çc->ªcv_mbuf.
Àn
);

8942 
˛o£sockë
(
fds
[0]);

8943 
mg_hâp_£nd_îr‹
(
nc
, 500, "CGI failure");

8946 #i‚de‡
_WIN32


8947 
˛o£sockë
(
fds
[1]);

8951 
MG_INTERNAL
 
mg_hâp_‰ì_¥Ÿo_d©a_cgi
(
mg_hâp_¥Ÿo_d©a_cgi
 *
d
) {

8952 i‡(
	gd
 =
NULL
) ;

8953 i‡(
	gd
->
	gcgi_nc
 !
NULL
) {

8954 
d
->
cgi_nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

8955 
	gd
->
	gcgi_nc
->
	gu£r_d©a
 = 
NULL
;

8957 
mem£t
(
d
, 0, (*d));

8961 #ifde‡
MG_MODULE_LINES


8969 #i‡
MG_ENABLE_HTTP
 && 
MG_ENABLE_HTTP_SSI
 && 
MG_ENABLE_FILESYSTEM


8971 
mg_£nd_ssi_fûe
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

8972 c⁄° *
∑th
, 
FILE
 *
Â
, 
ö˛ude_Àvñ
,

8973 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
);

8975 
mg_£nd_fûe_d©a
(
mg_c⁄√˘i⁄
 *
nc
, 
FILE
 *
Â
) {

8976 
	gbuf
[
BUFSIZ
];

8977 
size_t
 
	gn
;

8978 (
	gn
 = 
mg_‰ód
(
buf
, 1, (buf), 
Â
)) > 0) {

8979 
mg_£nd
(
nc
, 
buf
, 
n
);

8983 
mg_do_ssi_ö˛ude
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

8984 c⁄° *
ssi
, *
èg
, 
ö˛ude_Àvñ
,

8985 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

8986 
	gfûe_«me
[
MG_MAX_PATH
], 
	g∑th
[MG_MAX_PATH], *
	gp
;

8987 
FILE
 *
	gÂ
;

8993 i‡(
ssˇnf
(
èg
, " vútuÆ=\"%[^\"]\"", 
fûe_«me
) == 1) {

8995 
¢¥ötf
(
∑th
, ’©h), "%s/%s", 
›ts
->
documít_roŸ
, 
fûe_«me
);

8996 } i‡(
ssˇnf
(
èg
, "áb•©h=\"%[^\"]\"", 
fûe_«me
) == 1) {

9001 
¢¥ötf
(
∑th
, ’©h), "%s", 
fûe_«me
);

9002 } i‡(
ssˇnf
(
èg
, " fûe=\"%[^\"]\"", 
fûe_«me
) == 1 ||

9003 
ssˇnf
(
èg
, " \"%[^\"]\"", 
fûe_«me
) == 1) {

9005 
¢¥ötf
(
∑th
, ’©h), "%s", 
ssi
);

9006 i‡((
	gp
 = 
°ºchr
(
∑th
, 
DIRSEP
)Ë!
NULL
) {

9007 
p
[1] = '\0';

9009 
¢¥ötf
(
∑th
 + 
°æí
’©h), ’©hË- såÀn’©h), "%s", 
fûe_«me
);

9011 
mg_¥ötf
(
nc
, "Bad SSI #ö˛ude: [%s]", 
èg
);

9015 i‡((
	gÂ
 = 
mg_f›í
(
∑th
, "rb")Ë=
NULL
) {

9016 
mg_¥ötf
(
nc
, "SSI in˛udêîr‹: mg_f›í(%s): %s", 
∑th
,

9017 
°ªº‹
(
mg_gë_î∫o
()));

9019 
mg_£t_˛o£_⁄_exec
((
sock_t
Ë
fûío
(
Â
));

9020 i‡(
mg_m©ch_¥efix
(
›ts
->
ssi_∑âîn
, 
°æí
(›ts->ssi_∑âîn), 
∑th
) >

9022 
mg_£nd_ssi_fûe
(
nc
, 
hm
, 
∑th
, 
Â
, 
ö˛ude_Àvñ
 + 1, 
›ts
);

9024 
mg_£nd_fûe_d©a
(
nc
, 
Â
);

9026 
f˛o£
(
Â
);

9030 #i‡
MG_ENABLE_HTTP_SSI_EXEC


9031 
do_ssi_exec
(
mg_c⁄√˘i⁄
 *
nc
, *
èg
) {

9032 
	gcmd
[
BUFSIZ
];

9033 
FILE
 *
	gÂ
;

9035 i‡(
ssˇnf
(
èg
, " \"%[^\"]\"", 
cmd
) != 1) {

9036 
mg_¥ötf
(
nc
, "Bad SSI #exec: [%s]", 
èg
);

9037 } i‡((
	gÂ
 = 
p›í
(
cmd
, "r")Ë=
NULL
) {

9038 
mg_¥ötf
(
nc
, "C™nŸ SSI #exec: [%s]: %s", 
cmd
, 
°ªº‹
(
mg_gë_î∫o
()));

9040 
mg_£nd_fûe_d©a
(
nc
, 
Â
);

9041 
p˛o£
(
Â
);

9050 
mg_£nd_ssi_fûe
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

9051 c⁄° *
∑th
, 
FILE
 *
Â
, 
ö˛ude_Àvñ
,

9052 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

9053 c⁄° 
mg_°r
 
	gbèg
 = 
MG_MK_STR
("<!--#");

9054 c⁄° 
mg_°r
 
	gd_ö˛ude
 = 
MG_MK_STR
("include");

9055 c⁄° 
mg_°r
 
	gd_ˇŒ
 = 
MG_MK_STR
("call");

9056 #i‡
MG_ENABLE_HTTP_SSI_EXEC


9057 c⁄° 
mg_°r
 
	gd_exec
 = 
MG_MK_STR
("exec");

9059 
	gbuf
[
BUFSIZ
], *
	gp
 = 
buf
 + 
bèg
.
Àn
;

9060 
	gch
, 
	gÀn
, 
	gö_ssi_èg
;

9062 i‡(
	gö˛ude_Àvñ
 > 10) {

9063 
mg_¥ötf
(
nc
, "SSI #ö˛udêÀvñ i†toÿdì∞(%s)", 
∑th
);

9067 
	gö_ssi_èg
 = 
Àn
 = 0;

9068 (
	gch
 = 
fgëc
(
Â
)Ë!
EOF
) {

9069 i‡(
ö_ssi_èg
 && 
ch
 ='>' && 
buf
[
Àn
 - 1] == '-' && buf[len - 2] == '-') {

9070 
size_t
 
i
 = 
Àn
 - 2;

9071 
	gö_ssi_èg
 = 0;

9074 
	gbuf
[
i
--] = '\0';

9075 
	gi
 > 0 && 
	gbuf
[
i
] == ' ') {

9076 
buf
[
i
--] = '\0';

9080 i‡(
°∫cmp
(
p
, 
d_ö˛ude
.p, d_ö˛ude.
Àn
) == 0) {

9081 
mg_do_ssi_ö˛ude
(
nc
, 
hm
, 
∑th
, 
p
 + 
d_ö˛ude
.
Àn
 + 1, 
ö˛ude_Àvñ
,

9082 
›ts
);

9083 } i‡(
°∫cmp
(
p
, 
d_ˇŒ
.p, d_ˇŒ.
Àn
) == 0) {

9084 
mg_ssi_ˇŒ_˘x
 
c˘x
;

9085 
mem£t
(&
c˘x
, 0, (cctx));

9086 
	gc˘x
.
	gªq
 = 
hm
;

9087 
	gc˘x
.
	gfûe
 = 
mg_mk_°r
(
∑th
);

9088 
	gc˘x
.
	g¨g
 = 
mg_mk_°r
(
p
 + 
d_ˇŒ
.
Àn
 + 1);

9089 
mg_ˇŒ
(
nc
, 
NULL
,Çc->
u£r_d©a
, 
MG_EV_SSI_CALL
,

9090 (*Ë
c˘x
.
¨g
.
p
);

9091 
mg_ˇŒ
(
nc
, 
NULL
,Çc->
u£r_d©a
, 
MG_EV_SSI_CALL_CTX
, &
c˘x
);

9092 #i‡
MG_ENABLE_HTTP_SSI_EXEC


9093 } i‡(
°∫cmp
(
p
, 
d_exec
.p, d_exec.
Àn
) == 0) {

9094 
do_ssi_exec
(
nc
, 
p
 + 
d_exec
.
Àn
 + 1);

9099 
	gÀn
 = 0;

9100 } i‡(
	gch
 == '<') {

9101 
ö_ssi_èg
 = 1;

9102 i‡(
	gÀn
 > 0) {

9103 
mg_£nd
(
nc
, 
buf
, (
size_t
Ë
Àn
);

9105 
	gÀn
 = 0;

9106 
	gbuf
[
Àn
++] = 
ch
 & 0xff;

9107 } i‡(
	gö_ssi_èg
) {

9108 i‡(
	gÀn
 =(Ë
bèg
.
Àn
 && 
°∫cmp
(
buf
, bèg.
p
, btag.len) != 0) {

9110 
ö_ssi_èg
 = 0;

9111 } i‡(
	gÀn
 =(Ë(
buf
) - 2) {

9112 
mg_¥ötf
(
nc
, "%s: SSIÅag i†toÿœrge", 
∑th
);

9113 
	gÀn
 = 0;

9115 
	gbuf
[
Àn
++] = 
ch
 & 0xff;

9117 
	gbuf
[
Àn
++] = 
ch
 & 0xff;

9118 i‡(
	gÀn
 =(Ë(
buf
)) {

9119 
mg_£nd
(
nc
, 
buf
, (
size_t
Ë
Àn
);

9120 
	gÀn
 = 0;

9126 i‡(
	gÀn
 > 0) {

9127 
mg_£nd
(
nc
, 
buf
, (
size_t
Ë
Àn
);

9131 
MG_INTERNAL
 
mg_h™dÀ_ssi_ªque°
(
mg_c⁄√˘i⁄
 *
nc
,

9132 
hâp_mesßge
 *
hm
,

9133 c⁄° *
∑th
,

9134 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

9135 
FILE
 *
	gÂ
;

9136 
mg_°r
 
	gmime_ty≥
;

9137 
DBG
(("%∞%s", 
nc
, 
∑th
));

9139 i‡((
	gÂ
 = 
mg_f›í
(
∑th
, "rb")Ë=
NULL
) {

9140 
mg_hâp_£nd_îr‹
(
nc
, 404, 
NULL
);

9142 
mg_£t_˛o£_⁄_exec
((
sock_t
Ë
fûío
(
Â
));

9144 
	gmime_ty≥
 = 
mg_gë_mime_ty≥
(
∑th
, "ãxt/∂aö", 
›ts
);

9145 
mg_£nd_ª•⁄£_löe
(
nc
, 200, 
›ts
->
exåa_hódîs
);

9146 
mg_¥ötf
(
nc
,

9149 (Ë
mime_ty≥
.
Àn
, mime_ty≥.
p
);

9150 
mg_£nd_ssi_fûe
(
nc
, 
hm
, 
∑th
, 
Â
, 0, 
›ts
);

9151 
f˛o£
(
Â
);

9152 
	gnc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

9157 #ifde‡
MG_MODULE_LINES


9165 #i‡
MG_ENABLE_HTTP
 && 
MG_ENABLE_HTTP_WEBDAV


9167 
MG_INTERNAL
 
mg_is_dav_ªque°
(c⁄° 
mg_°r
 *
s
) {

9168 c⁄° *
	gmëhods
[] = {

9174 #i‡
MG_ENABLE_FAKE_DAVLOCK


9180 
size_t
 
	gi
;

9182 
	gi
 = 0; i < 
ARRAY_SIZE
(
mëhods
); i++) {

9183 i‡(
mg_vcmp
(
s
, 
mëhods
[
i
]) == 0) {

9191 
mg_mkdú
(c⁄° *
∑th
, 
uöt32_t
 
mode
) {

9192 #i‚de‡
_WIN32


9193  
mkdú
(
∑th
, 
mode
);

9195 (Ë
	gmode
;

9196  
_mkdú
(
∑th
);

9200 
mg_¥öt_¥›s
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
«me
,

9201 
cs_°©_t
 *
°p
) {

9202 
	gmtime
[64];

9203 
time_t
 
	gt
 = 
°p
->
°_mtime
;

9204 
mg_°r
 
	g«me_esc
 = 
mg_uæ_ícode
(
mg_mk_°r
(
«me
));

9205 
mg_gmt_time_°rög
(
mtime
, (mtime), &
t
);

9206 
mg_¥ötf
(
nc
,

9212 "<d:gëc⁄ã¡Àngth>%" 
INT64_FMT


9219 
«me_esc
.
p
, 
S_ISDIR
(
°p
->
°_mode
) ? "<d:collection/>" : "",

9220 (
öt64_t
Ë
°p
->
°_size
, 
mtime
);

9221 
‰ì
((*Ë
«me_esc
.
p
);

9224 
MG_INTERNAL
 
mg_h™dÀ_¥›föd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

9225 
cs_°©_t
 *
°p
, 
hâp_mesßge
 *
hm
,

9226 
mg_£rve_hâp_›ts
 *
›ts
) {

9227 c⁄° 
	ghódî
[] =

9233 c⁄° 
	gfoŸî
[] = "</d:multistatus>\n";

9234 c⁄° 
mg_°r
 *
	gdïth
 = 
mg_gë_hâp_hódî
(
hm
, "Depth");

9237 i‡(
S_ISDIR
(
°p
->
°_mode
) &&

9238 
°rcmp
(
›ts
->
íabÀ_dúe˘‹y_li°ög
, "yes") != 0) {

9239 
mg_¥ötf
(
nc
, "%s", "HTTP/1.1 403 Directory Listing Denied\r\n\r\n");

9241 
	guri
[
MG_MAX_PATH
];

9242 
mg_£nd
(
nc
, 
hódî
, (header) - 1);

9243 
¢¥ötf
(
uri
, (uri), "%.*s", (Ë
hm
->uri.
Àn
, hm->uri.
p
);

9244 
mg_¥öt_¥›s
(
nc
, 
uri
, 
°p
);

9245 i‡(
S_ISDIR
(
°p
->
°_mode
Ë&& (
	gdïth
 =
NULL
 || 
mg_vcmp
(
dïth
, "0") != 0)) {

9246 
mg_sˇn_dúe˘‹y
(
nc
, 
∑th
, 
›ts
, 
mg_¥öt_¥›s
);

9248 
mg_£nd
(
nc
, 
foŸî
, (footer) - 1);

9249 
	gnc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

9253 #i‡
MG_ENABLE_FAKE_DAVLOCK


9265 
MG_INTERNAL
 
mg_h™dÀ_lock
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
) {

9266 c⁄° *
	gª∂y
 =

9282 
mg_¥ötf
(
nc
, 
ª∂y
, 
∑th
, (Ë
mg_time
());

9283 
	gnc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

9287 
MG_INTERNAL
 
mg_h™dÀ_mkcﬁ
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

9288 
hâp_mesßge
 *
hm
) {

9289 
	g°©us_code
 = 500;

9290 i‡(
	ghm
->
	gbody
.
	gÀn
 !(
size_t
Ë~0 && 
hm
->
body
.
Àn
 > 0) {

9291 
°©us_code
 = 415;

9292 } i‡(!
mg_mkdú
(
∑th
, 0755)) {

9293 
	g°©us_code
 = 201;

9294 } i‡(
	gî∫o
 =
EEXIST
) {

9295 
°©us_code
 = 405;

9296 } i‡(
	gî∫o
 =
EACCES
) {

9297 
°©us_code
 = 403;

9298 } i‡(
	gî∫o
 =
ENOENT
) {

9299 
°©us_code
 = 409;

9301 
	g°©us_code
 = 500;

9303 
mg_hâp_£nd_îr‹
(
nc
, 
°©us_code
, 
NULL
);

9306 
mg_ªmove_dúe˘‹y
(c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

9307 c⁄° *
dú
) {

9308 
	g∑th
[
MG_MAX_PATH
];

9309 
dúít
 *
	gdp
;

9310 
cs_°©_t
 
	g°
;

9311 
DIR
 *
	gdúp
;

9313 i‡((
	gdúp
 = 
›ídú
(
dú
)Ë=
NULL
)  0;

9315 (
	gdp
 = 
ªaddú
(
dúp
)Ë!
NULL
) {

9316 i‡(
mg_is_fûe_hiddí
((c⁄° *Ë
dp
->
d_«me
, 
›ts
, 1)) {

9319 
¢¥ötf
(
∑th
, ’©h), "%s%c%s", 
dú
, '/', 
dp
->
d_«me
);

9320 
mg_°©
(
∑th
, &
°
);

9321 i‡(
S_ISDIR
(
°
.
°_mode
)) {

9322 
mg_ªmove_dúe˘‹y
(
›ts
, 
∑th
);

9324 
ªmove
(
∑th
);

9327 
˛o£dú
(
dúp
);

9328 
rmdú
(
dú
);

9333 
MG_INTERNAL
 
mg_h™dÀ_move
(
mg_c⁄√˘i⁄
 *
c
,

9334 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

9335 c⁄° *
∑th
, 
hâp_mesßge
 *
hm
) {

9336 c⁄° 
mg_°r
 *
	gde°
 = 
mg_gë_hâp_hódî
(
hm
, "Destination");

9337 i‡(
	gde°
 =
NULL
) {

9338 
mg_hâp_£nd_îr‹
(
c
, 411, 
NULL
);

9340 c⁄° *
	gp
 = (*Ë
memchr
(
de°
->
p
, '/', de°->
Àn
);

9341 i‡(
	gp
 !
NULL
 && 
p
[1] == '/' &&

9342 (
p
 = (*Ë
memchr
’ + 2, '/', 
de°
->∞+ de°->
Àn
 -Ö)Ë!
NULL
) {

9343 
buf
[
MG_MAX_PATH
];

9344 
¢¥ötf
(
buf
, (buf), "%s%.*s", 
›ts
->
dav_documít_roŸ
,

9345 (Ë(
de°
->
p
 + de°->
Àn
 -Ö),Ö);

9346 i‡(
ª«me
(
∑th
, 
buf
) == 0) {

9347 
mg_hâp_£nd_îr‹
(
c
, 200, 
NULL
);

9349 
mg_hâp_£nd_îr‹
(
c
, 418, 
NULL
);

9352 
mg_hâp_£nd_îr‹
(
c
, 500, 
NULL
);

9357 
MG_INTERNAL
 
mg_h™dÀ_dñëe
(
mg_c⁄√˘i⁄
 *
nc
,

9358 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

9359 c⁄° *
∑th
) {

9360 
cs_°©_t
 
	g°
;

9361 i‡(
mg_°©
(
∑th
, &
°
) != 0) {

9362 
mg_hâp_£nd_îr‹
(
nc
, 404, 
NULL
);

9363 } i‡(
S_ISDIR
(
°
.
°_mode
)) {

9364 
mg_ªmove_dúe˘‹y
(
›ts
, 
∑th
);

9365 
mg_hâp_£nd_îr‹
(
nc
, 204, 
NULL
);

9366 } i‡(
ªmove
(
∑th
) == 0) {

9367 
mg_hâp_£nd_îr‹
(
nc
, 204, 
NULL
);

9369 
mg_hâp_£nd_îr‹
(
nc
, 423, 
NULL
);

9374 
mg_¸óã_ôîmedüã_dúe˘‹õs
(c⁄° *
∑th
) {

9375 c⁄° *
	gs
;

9378 
	gs
 = 
∑th
 + 1; *s != '\0'; s++) {

9379 i‡(*
	gs
 == '/') {

9380 
buf
[
MG_MAX_PATH
];

9381 
cs_°©_t
 
	g°
;

9382 
¢¥ötf
(
buf
, (buf), "%.*s", (Ë(
s
 - 
∑th
),Öath);

9383 
	gbuf
[(
buf
) - 1] = '\0';

9384 i‡(
mg_°©
(
buf
, &
°
Ë!0 && 
mg_mkdú
(buf, 0755) != 0) {

9393 
MG_INTERNAL
 
mg_h™dÀ_put
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

9394 
hâp_mesßge
 *
hm
) {

9395 
mg_hâp_¥Ÿo_d©a
 *
	gpd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
nc
);

9396 
cs_°©_t
 
	g°
;

9397 c⁄° 
mg_°r
 *
	g˛_hdr
 = 
mg_gë_hâp_hódî
(
hm
, "Content-Length");

9398 
	grc
, 
	g°©us_code
 = 
mg_°©
(
∑th
, &
°
) == 0 ? 200 : 201;

9400 
mg_hâp_‰ì_¥Ÿo_d©a_fûe
(&
pd
->
fûe
);

9401 i‡((
	grc
 = 
mg_¸óã_ôîmedüã_dúe˘‹õs
(
∑th
)) == 0) {

9402 
mg_¥ötf
(
nc
, "HTTP/1.1 %d OK\r\nC⁄ã¡-Lígth: 0\r\n\r\n", 
°©us_code
);

9403 } i‡(
	grc
 == -1) {

9404 
mg_hâp_£nd_îr‹
(
nc
, 500, 
NULL
);

9405 } i‡(
	g˛_hdr
 =
NULL
) {

9406 
mg_hâp_£nd_îr‹
(
nc
, 411, 
NULL
);

9407 } i‡((
	gpd
->
	gfûe
.
	gÂ
 = 
mg_f›í
(
∑th
, "w+b")Ë=
NULL
) {

9408 
mg_hâp_£nd_îr‹
(
nc
, 500, 
NULL
);

9410 c⁄° 
mg_°r
 *
	gønge_hdr
 = 
mg_gë_hâp_hódî
(
hm
, "Content-Range");

9411 
öt64_t
 
	gr1
 = 0, 
	gr2
 = 0;

9412 
	gpd
->
	gfûe
.
	gty≥
 = 
DATA_PUT
;

9413 
mg_£t_˛o£_⁄_exec
((
sock_t
Ë
fûío
(
pd
->
fûe
.
Â
));

9414 
	gpd
->
	gfûe
.
	g˛
 = 
to64
(
˛_hdr
->
p
);

9415 i‡(
	gønge_hdr
 !
NULL
 &&

9416 
mg_hâp_∑r£_ønge_hódî
(
ønge_hdr
, &
r1
, &
r2
) > 0) {

9417 
	g°©us_code
 = 206;

9418 
f£eko
(
pd
->
fûe
.
Â
, 
r1
, 
SEEK_SET
);

9419 
	gpd
->
	gfûe
.
	g˛
 = 
r2
 > 
r1
 ?Ñ2 -Ñ1 + 1 : 
pd
->
fûe
.
˛
 -Ñ1;

9421 
mg_¥ötf
(
nc
, "HTTP/1.1 %d OK\r\nC⁄ã¡-Lígth: 0\r\n\r\n", 
°©us_code
);

9423 
mbuf_ªmove
(&
nc
->
ªcv_mbuf
, 
hm
->
mesßge
.
Àn
 - hm->
body
.len);

9424 
mg_hâp_å™s„r_fûe_d©a
(
nc
);

9429 #ifde‡
MG_MODULE_LINES


9437 #i‡
MG_ENABLE_HTTP
 && 
MG_ENABLE_HTTP_WEBSOCKET


9441 #i‚de‡
MG_WEBSOCKET_PING_INTERVAL_SECONDS


9442 
	#MG_WEBSOCKET_PING_INTERVAL_SECONDS
 5

	)

9445 
	#FLAGS_MASK_FIN
 (1 << 7)

	)

9446 
	#FLAGS_MASK_OP
 0x0f

	)

9448 
mg_is_ws_‰agmít
(
Êags
) {

9449  (
	gÊags
 & 
	gFLAGS_MASK_FIN
) == 0 ||

9450 (
Êags
 & 
FLAGS_MASK_OP
Ë=
WEBSOCKET_OP_CONTINUE
;

9453 
mg_is_ws_fú°_‰agmít
(
Êags
) {

9454  (
	gÊags
 & 
	gFLAGS_MASK_FIN
) == 0 &&

9455 (
Êags
 & 
FLAGS_MASK_OP
Ë!
WEBSOCKET_OP_CONTINUE
;

9458 
mg_is_ws_c⁄åﬁ_‰ame
(
Êags
) {

9459 
	g›
 = (
Êags
 & 
FLAGS_MASK_OP
);

9460  
	g›
 =
WEBSOCKET_OP_CLOSE
 || 
›
 =
WEBSOCKET_OP_PING
 ||

9461 
›
 =
WEBSOCKET_OP_PONG
;

9464 
mg_h™dÀ_öcomög_websockë_‰ame
(
mg_c⁄√˘i⁄
 *
nc
,

9465 
websockë_mesßge
 *
wsm
) {

9466 i‡(
	gwsm
->
	gÊags
 & 0x8) {

9467 
mg_ˇŒ
(
nc
,Çc->
h™dÀr
,Çc->
u£r_d©a
, 
MG_EV_WEBSOCKET_CONTROL_FRAME
, 
wsm
);

9469 
mg_ˇŒ
(
nc
,Çc->
h™dÀr
,Çc->
u£r_d©a
, 
MG_EV_WEBSOCKET_FRAME
, 
wsm
);

9473 
mg_ws_¥Ÿo_d©a
 *
mg_ws_gë_¥Ÿo_d©a
(
mg_c⁄√˘i⁄
 *
nc
) {

9474 
mg_hâp_¥Ÿo_d©a
 *
	ghtd
 = 
mg_hâp_gë_¥Ÿo_d©a
(
nc
);

9475  (
	ghtd
 !
NULL
 ? &
htd
->
ws_d©a
 : NULL);

9482 
mg_ws_˛o£
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
d©a
,

9483 
size_t
 
Àn
) {

9484 i‡((Ë
	gÀn
 == ~0) {

9485 
Àn
 = 
°æí
((c⁄° *Ë
d©a
);

9487 
mg_£nd_websockë_‰ame
(
nc
, 
WEBSOCKET_OP_CLOSE
, 
d©a
, 
Àn
);

9488 
	gnc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

9491 
mg_dñivî_websockë_d©a
(
mg_c⁄√˘i⁄
 *
nc
) {

9493 
uöt64_t
 
	gi
, 
	gd©a_Àn
 = 0, 
	g‰ame_Àn
 = 0, 
	g√w_d©a_Àn
 = 
nc
->
ªcv_mbuf
.
Àn
,

9494 
	gÀn
, 
	gmask_Àn
 = 0, 
	ghódî_Àn
 = 0;

9495 
mg_ws_¥Ÿo_d©a
 *
	gwsd
 = 
mg_ws_gë_¥Ÿo_d©a
(
nc
);

9496 *
	g√w_d©a
 = (*Ë
nc
->
ªcv_mbuf
.
buf
,

9497 *
	ge
 = (*Ë
nc
->
ªcv_mbuf
.
buf
 +Çc->ªcv_mbuf.
Àn
;

9498 
uöt8_t
 
	gÊags
;

9499 
	gok
, 
	gªass
;

9501 i‡(
	gwsd
->
	gªass_Àn
 > 0) {

9512 
size_t
 
	gexi°ög_Àn
 = 
wsd
->
ªass_Àn
;

9513 
as£π
(
√w_d©a_Àn
 >
exi°ög_Àn
);

9515 
	g√w_d©a
 +
exi°ög_Àn
;

9516 
	g√w_d©a_Àn
 -
exi°ög_Àn
;

9519 
	gÊags
 = 
√w_d©a
[0];

9521 
	gªass
 = 
√w_d©a_Àn
 > 0 && 
mg_is_ws_‰agmít
(
Êags
) &&

9522 !(
nc
->
Êags
 & 
MG_F_WEBSOCKET_NO_DEFRAG
);

9524 i‡(
	gªass
 && 
mg_is_ws_c⁄åﬁ_‰ame
(
Êags
)) {

9529 
mg_ws_˛o£
(
nc
, "fragmented control framesáre illegal", ~0);

9531 } i‡(
	g√w_d©a_Àn
 > 0 && !
	gªass
 && !
mg_is_ws_c⁄åﬁ_‰ame
(
Êags
) &&

9532 
	gwsd
->
	gªass_Àn
 > 0) {

9537 
mg_ws_˛o£
(
nc
, "non-continuation inÅhe middle ofá fragmented message",

9542 i‡(
	g√w_d©a_Àn
 >= 2) {

9543 
Àn
 = 
√w_d©a
[1] & 0x7f;

9544 
	gmask_Àn
 = 
√w_d©a
[1] & 
FLAGS_MASK_FIN
 ? 4 : 0;

9545 i‡(
	gÀn
 < 126 && 
	g√w_d©a_Àn
 >
mask_Àn
) {

9546 
d©a_Àn
 = 
Àn
;

9547 
	ghódî_Àn
 = 2 + 
mask_Àn
;

9548 } i‡(
	gÀn
 =126 && 
√w_d©a_Àn
 >4 + 
mask_Àn
) {

9549 
hódî_Àn
 = 4 + 
mask_Àn
;

9550 
	gd©a_Àn
 = 
¡ohs
(*(
uöt16_t
 *Ë&
√w_d©a
[2]);

9551 } i‡(
	g√w_d©a_Àn
 >10 + 
mask_Àn
) {

9552 
hódî_Àn
 = 10 + 
mask_Àn
;

9553 
	gd©a_Àn
 = (((
uöt64_t
Ë
¡ohl
(*(
uöt32_t
 *Ë&
√w_d©a
[2])) << 32) +

9554 
¡ohl
(*(
uöt32_t
 *Ë&
√w_d©a
[6]);

9558 
	g‰ame_Àn
 = 
hódî_Àn
 + 
d©a_Àn
;

9559 
	gok
 = (
‰ame_Àn
 > 0 && føme_À¿<
√w_d©a_Àn
);

9562 i‡(
	g‰ame_Àn
 < 
	ghódî_Àn
 || føme_À¿< 
	gd©a_Àn
) {

9563 
	gok
 = 0;

9564 
mg_ws_˛o£
(
nc
, "overflowed message", ~0);

9567 i‡(
	gok
) {

9568 
size_t
 
	g˛ónup_Àn
 = 0;

9569 
websockë_mesßge
 
	gwsm
;

9571 
	gwsm
.
	gsize
 = (
size_t
Ë
d©a_Àn
;

9572 
	gwsm
.
	gd©a
 = 
√w_d©a
 + 
hódî_Àn
;

9573 
	gwsm
.
	gÊags
 = 
Êags
;

9576 i‡(
	gmask_Àn
 > 0) {

9577 
	gi
 = 0; i < 
	gd©a_Àn
; i++) {

9578 
	g√w_d©a
[
i
 + 
hódî_Àn
] ^(
√w_d©a
 + hódî_À¿- 
mask_Àn
)[i % 4];

9582 i‡(
	gªass
) {

9585 i‡(
mg_is_ws_fú°_‰agmít
(
Êags
)) {

9590 
	g√w_d©a
 += 1;

9591 
	gwsd
->
	gªass_Àn
 = 1 ;

9595 
memmove
(
√w_d©a
, 
wsm
.
d©a
, 
e
 - wsm.data);

9596 
	gwsd
->
	gªass_Àn
 +
wsm
.
size
;

9597 
	gnc
->
	gªcv_mbuf
.
	gÀn
 -
wsm
.
d©a
 - 
√w_d©a
;

9599 i‡(
	gÊags
 & 
	gFLAGS_MASK_FIN
) {

9601 
	gwsm
.
	gÊags
 = 
FLAGS_MASK_FIN
 | 
nc
->
ªcv_mbuf
.
buf
[0];

9602 
	gwsm
.
	gd©a
 = (*Ë
nc
->
ªcv_mbuf
.
buf
 + 1 ;

9603 
	gwsm
.
	gsize
 = 
wsd
->
ªass_Àn
 - 1 ;

9604 
	g˛ónup_Àn
 = 
wsd
->
ªass_Àn
;

9605 
	gwsd
->
	gªass_Àn
 = 0;

9608 
mg_h™dÀ_öcomög_websockë_‰ame
(
nc
, &
wsm
);

9609 
mbuf_ªmove
(&
nc
->
ªcv_mbuf
, 
˛ónup_Àn
);

9617 
	g˛ónup_Àn
 = (
size_t
Ë
‰ame_Àn
;

9620 
	gÊags
 & 
	gFLAGS_MASK_OP
) {

9621 
	gWEBSOCKET_OP_PING
:

9622 
mg_£nd_websockë_‰ame
(
nc
, 
WEBSOCKET_OP_PONG
, 
wsm
.
d©a
, wsm.
size
);

9625 
	gWEBSOCKET_OP_CLOSE
:

9626 
mg_ws_˛o£
(
nc
, 
wsm
.
d©a
, wsm.
size
);

9631 
mg_h™dÀ_öcomög_websockë_‰ame
(
nc
, &
wsm
);

9634 
memmove
(
nc
->
ªcv_mbuf
.
buf
 + 
wsd
->
ªass_Àn
,

9635 
nc
->
ªcv_mbuf
.
buf
 + 
wsd
->
ªass_Àn
 + 
˛ónup_Àn
,

9636 
nc
->
ªcv_mbuf
.
Àn
 - 
wsd
->
ªass_Àn
 - 
˛ónup_Àn
);

9637 
	gnc
->
	gªcv_mbuf
.
	gÀn
 -
˛ónup_Àn
;

9641  
	gok
;

9644 
	sws_mask_˘x
 {

9645 
size_t
 
	gpos
;

9646 
uöt32_t
 
	gmask
;

9649 
uöt32_t
 
mg_ws_øndom_mask
() {

9650 
uöt32_t
 
	gmask
;

9665 #i‡
MG_DISABLE_WS_RANDOM_MASK


9666 
	gmask
 = 0xefbeadde;

9669 
mask
 = (
uöt32_t
Ë
ønd
();

9671 
mask
 = (
uöt32_t
Ë
ønd
() << 16 | (uint32_t)Ñand();

9674  
	gmask
;

9677 
mg_£nd_ws_hódî
(
mg_c⁄√˘i⁄
 *
nc
, 
›
, 
size_t
 
Àn
,

9678 
ws_mask_˘x
 *
˘x
) {

9679 
	ghódî_Àn
;

9680 
	ghódî
[10];

9682 
	ghódî
[0] =

9683 (
›
 & 
WEBSOCKET_DONT_FIN
 ? 0x0 : 
FLAGS_MASK_FIN
Ë| (› & 
FLAGS_MASK_OP
);

9684 i‡(
	gÀn
 < 126) {

9685 
	ghódî
[1] = (Ë
Àn
;

9686 
	ghódî_Àn
 = 2;

9687 } i‡(
	gÀn
 < 65535) {

9688 
uöt16_t
 
	gtmp
 = 
ht⁄s
((uöt16_tË
Àn
);

9689 
	ghódî
[1] = 126;

9690 
mem˝y
(&
hódî
[2], &
tmp
, (tmp));

9691 
	ghódî_Àn
 = 4;

9693 
uöt32_t
 
	gtmp
;

9694 
	ghódî
[1] = 127;

9695 
	gtmp
 = 
ht⁄l
((
uöt32_t
)((
uöt64_t
Ë
Àn
 >> 32));

9696 
mem˝y
(&
hódî
[2], &
tmp
, (tmp));

9697 
	gtmp
 = 
ht⁄l
((
uöt32_t
)(
Àn
 & 0xffffffff));

9698 
mem˝y
(&
hódî
[6], &
tmp
, (tmp));

9699 
	ghódî_Àn
 = 10;

9703 i‡(
	gnc
->
	gli°íî
 =
NULL
) {

9704 
hódî
[1] |= 1 << 7;

9705 
mg_£nd
(
nc
, 
hódî
, 
hódî_Àn
);

9706 
	g˘x
->
	gmask
 = 
mg_ws_øndom_mask
();

9707 
mg_£nd
(
nc
, &
˘x
->
mask
, (ctx->mask));

9708 
	g˘x
->
	gpos
 = 
nc
->
£nd_mbuf
.
Àn
;

9710 
mg_£nd
(
nc
, 
hódî
, 
hódî_Àn
);

9711 
	g˘x
->
	gpos
 = 0;

9715 
mg_ws_mask_‰ame
(
mbuf
 *mbuf, 
ws_mask_˘x
 *
˘x
) {

9716 
size_t
 
	gi
;

9717 i‡(
	g˘x
->
	gpos
 == 0) ;

9718 
	gi
 = 0; i < (
	gmbuf
->
	gÀn
 - 
	g˘x
->
	gpos
); i++) {

9719 
	gmbuf
->
	gbuf
[
˘x
->
pos
 + 
i
] ^((*Ë&˘x->
mask
)[i % 4];

9723 
mg_£nd_websockë_‰ame
(
mg_c⁄√˘i⁄
 *
nc
, 
›
, c⁄° *
d©a
,

9724 
size_t
 
Àn
) {

9725 
ws_mask_˘x
 
	g˘x
;

9726 
DBG
(("%∞%d %d", 
nc
, 
›
, (Ë
Àn
));

9727 
mg_£nd_ws_hódî
(
nc
, 
›
, 
Àn
, &
˘x
);

9728 
mg_£nd
(
nc
, 
d©a
, 
Àn
);

9730 
mg_ws_mask_‰ame
(&
nc
->
£nd_mbuf
, &
˘x
);

9732 i‡(
	g›
 =
WEBSOCKET_OP_CLOSE
) {

9733 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

9737 
mg_£nd_websockë_‰amev
(
mg_c⁄√˘i⁄
 *
nc
, 
›
,

9738 c⁄° 
mg_°r
 *
°rv
, 
°rv˙t
) {

9739 
ws_mask_˘x
 
	g˘x
;

9740 
	gi
;

9741 
	gÀn
 = 0;

9742 
	gi
 = 0; i < 
	g°rv˙t
; i++) {

9743 
	gÀn
 +
°rv
[
i
].
Àn
;

9746 
mg_£nd_ws_hódî
(
nc
, 
›
, 
Àn
, &
˘x
);

9748 
	gi
 = 0; i < 
	g°rv˙t
; i++) {

9749 
mg_£nd
(
nc
, 
°rv
[
i
].
p
, såv[i].
Àn
);

9752 
mg_ws_mask_‰ame
(&
nc
->
£nd_mbuf
, &
˘x
);

9754 i‡(
	g›
 =
WEBSOCKET_OP_CLOSE
) {

9755 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

9759 
mg_¥ötf_websockë_‰ame
(
mg_c⁄√˘i⁄
 *
nc
, 
›
,

9760 c⁄° *
fmt
, ...) {

9761 
	gmem
[
MG_VPRINTF_BUFFER_SIZE
], *
	gbuf
 = 
mem
;

9762 
va_li°
 
	g≠
;

9763 
	gÀn
;

9765 
va_°¨t
(
≠
, 
fmt
);

9766 i‡((
	gÀn
 = 
mg_av¥ötf
(&
buf
, (
mem
), 
fmt
, 
≠
)) > 0) {

9767 
mg_£nd_websockë_‰ame
(
nc
, 
›
, 
buf
, 
Àn
);

9769 
va_íd
(
≠
);

9771 i‡(
	gbuf
 !
mem
 && 
buf
 !
NULL
) {

9772 
MG_FREE
(
buf
);

9776 
MG_INTERNAL
 
mg_ws_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

9777 *
ev_d©a
 
MG_UD_ARG
(*
u£r_d©a
)) {

9778 
mg_ˇŒ
(
nc
,Çc->
h™dÀr
,Çc->
u£r_d©a
, 
ev
, 
ev_d©a
);

9780 
	gev
) {

9781 
	gMG_EV_RECV
:

9783 } 
mg_dñivî_websockë_d©a
(
nc
));

9785 
	gMG_EV_POLL
:

9788 
time_t
 
now
 = *—ime_à*Ë
ev_d©a
;

9789 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_IS_WEBSOCKET
 &&

9790 
	gnow
 > 
	gnc
->
	gœ°_io_time
 + 
	gMG_WEBSOCKET_PING_INTERVAL_SECONDS
) {

9791 
mg_£nd_websockë_‰ame
(
nc
, 
WEBSOCKET_OP_PING
, "", 0);

9798 #i‡
MG_ENABLE_CALLBACK_USERDATA


9799 (Ë
	gu£r_d©a
;

9803 #i‚de‡
MG_EXT_SHA1


9804 
mg_hash_sha1_v
(
size_t
 
num_msgs
, c⁄° 
uöt8_t
 *
msgs
[],

9805 c⁄° 
size_t
 *
msg_Àns
, 
uöt8_t
 *
dige°
) {

9806 
size_t
 
	gi
;

9807 
cs_sha1_˘x
 
	gsha_˘x
;

9808 
cs_sha1_öô
(&
sha_˘x
);

9809 
	gi
 = 0; i < 
	gnum_msgs
; i++) {

9810 
cs_sha1_upd©e
(&
sha_˘x
, 
msgs
[
i
], 
msg_Àns
[i]);

9812 
cs_sha1_föÆ
(
dige°
, &
sha_˘x
);

9815 
mg_hash_sha1_v
(
size_t
 
num_msgs
, c⁄° 
uöt8_t
 *
msgs
[],

9816 c⁄° 
size_t
 *
msg_Àns
, 
uöt8_t
 *
dige°
);

9819 
MG_INTERNAL
 
mg_ws_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
,

9820 c⁄° 
mg_°r
 *
key
,

9821 
hâp_mesßge
 *
hm
) {

9822 c⁄° *
	gmagic
 = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";

9823 c⁄° 
uöt8_t
 *
	gmsgs
[2] = {(c⁄° uöt8_à*Ë
key
->
p
, (c⁄° uöt8_à*Ë
magic
};

9824 c⁄° 
size_t
 
	gmsg_Àns
[2] = {
key
->
Àn
, 36};

9825 
	gsha
[20];

9826 
	gb64_sha
[30];

9827 
mg_°r
 *
	gs
;

9829 
mg_hash_sha1_v
(2, 
msgs
, 
msg_Àns
, 
sha
);

9830 
mg_ba£64_ícode
(
sha
, (sha), 
b64_sha
);

9831 
mg_¥ötf
(
nc
, "%s",

9836 
	gs
 = 
mg_gë_hâp_hódî
(
hm
, "Sec-WebSocket-Protocol");

9837 i‡(
	gs
 !
NULL
) {

9838 
mg_¥ötf
(
nc
, "Sec-WebSockë-PrŸocﬁ: %.*s\r\n", (Ë
s
->
Àn
, s->
p
);

9840 
mg_¥ötf
(
nc
, "Sec-WebSockë-Ac˚±: %s%s", 
b64_sha
, "\r\n\r\n");

9842 
DBG
(("%∞%.*†%s", 
nc
, (Ë
key
->
Àn
, key->
p
, 
b64_sha
));

9845 
mg_£nd_websockë_h™dshake2
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

9846 c⁄° *
ho°
, c⁄° *
¥Ÿocﬁ
,

9847 c⁄° *
exåa_hódîs
) {

9848 
mg_£nd_websockë_h™dshake3
(
nc
, 
∑th
, 
ho°
, 
¥Ÿocﬁ
, 
exåa_hódîs
, 
NULL
,

9849 
NULL
);

9852 
mg_£nd_websockë_h™dshake3
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

9853 c⁄° *
ho°
, c⁄° *
¥Ÿocﬁ
,

9854 c⁄° *
exåa_hódîs
, c⁄° *
u£r
,

9855 c⁄° *
∑ss
) {

9856 
mg_£nd_websockë_h™dshake3v
(
nc
, 
mg_mk_°r
(
∑th
), mg_mk_°r(
ho°
),

9857 
mg_mk_°r
(
¥Ÿocﬁ
), mg_mk_°r(
exåa_hódîs
),

9858 
mg_mk_°r
(
u£r
), mg_mk_°r(
∑ss
));

9861 
mg_£nd_websockë_h™dshake3v
(
mg_c⁄√˘i⁄
 *
nc
,

9862 c⁄° 
mg_°r
 
∑th
,

9863 c⁄° 
mg_°r
 
ho°
,

9864 c⁄° 
mg_°r
 
¥Ÿocﬁ
,

9865 c⁄° 
mg_°r
 
exåa_hódîs
,

9866 c⁄° 
mg_°r
 
u£r
,

9867 c⁄° 
mg_°r
 
∑ss
) {

9868 
mbuf
 
	gauth
;

9869 
	gkey
[25];

9870 
uöt32_t
 
	gn⁄˚
[4];

9871 
	gn⁄˚
[0] = 
mg_ws_øndom_mask
();

9872 
	gn⁄˚
[1] = 
mg_ws_øndom_mask
();

9873 
	gn⁄˚
[2] = 
mg_ws_øndom_mask
();

9874 
	gn⁄˚
[3] = 
mg_ws_øndom_mask
();

9875 
mg_ba£64_ícode
((*Ë&
n⁄˚
, “⁄˚), 
key
);

9877 
mbuf_öô
(&
auth
, 0);

9878 i‡(
	gu£r
.
	gÀn
 > 0) {

9879 
mg_basic_auth_hódî
(
u£r
, 
∑ss
, &
auth
);

9888 
mg_¥ötf
(
nc
,

9895 (Ë
∑th
.
Àn
,Ö©h.
p
, (Ë
auth
.len,

9896 (
auth
.
buf
 =
NULL
 ? "" :áuth.buf), 
key
);

9899 i‡(
	gho°
.
	gÀn
 > 0) {

9900 
	gho°_Àn
 = (Ë(
∑th
.
p
 - 
ho°
.p);

9901 
mg_¥ötf
(
nc
, "Ho°: %.*s\r\n", 
ho°_Àn
, 
ho°
.
p
);

9903 i‡(
	g¥Ÿocﬁ
.
	gÀn
 > 0) {

9904 
mg_¥ötf
(
nc
, "Sec-WebSockë-PrŸocﬁ: %.*s\r\n", (Ë
¥Ÿocﬁ
.
Àn
,

9905 
¥Ÿocﬁ
.
p
);

9907 i‡(
	gexåa_hódîs
.
	gÀn
 > 0) {

9908 
mg_¥ötf
(
nc
, "%.*s", (Ë
exåa_hódîs
.
Àn
,Éxåa_hódîs.
p
);

9910 
mg_¥ötf
(
nc
, "\r\n");

9912 
mbuf_‰ì
(&
auth
);

9915 
mg_£nd_websockë_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

9916 c⁄° *
exåa_hódîs
) {

9917 
mg_°r
 
	gnuŒ_°r
 = 
MG_NULL_STR
;

9918 
mg_£nd_websockë_h™dshake3v
(

9919 
nc
, 
mg_mk_°r
(
∑th
), 
nuŒ_°r
 ,Çull_str ,

9920 
mg_mk_°r
(
exåa_hódîs
), 
nuŒ_°r
 ,Çull_str );

9923 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_ws_›t
(

9924 
mg_mgr
 *
mgr
, 
MG_CB
(
mg_evít_h™dÀr_t
 
ev_h™dÀr
, *
u£r_d©a
),

9925 
mg_c⁄√˘_›ts
 
›ts
, c⁄° *
uæ
, c⁄° *
¥Ÿocﬁ
,

9926 c⁄° *
exåa_hódîs
) {

9927 
mg_°r
 
	gnuŒ_°r
 = 
MG_NULL_STR
;

9928 
mg_°r
 
	gho°
 = 
MG_NULL_STR
, 
	g∑th
 = MG_NULL_STR, 
	gu£r_öfo
 = MG_NULL_STR;

9929 
mg_c⁄√˘i⁄
 *
	gnc
 =

9930 
mg_c⁄√˘_hâp_ba£
(
mgr
, 
MG_CB
(
ev_h™dÀr
, 
u£r_d©a
), 
›ts
, "http",

9931 "ws", "hâps", "wss", 
uæ
, &
∑th
, &
u£r_öfo
, &
ho°
);

9932 i‡(
	gnc
 !
NULL
) {

9933 
mg_£nd_websockë_h™dshake3v
(
nc
, 
∑th
, 
ho°
, 
mg_mk_°r
(
¥Ÿocﬁ
),

9934 
mg_mk_°r
(
exåa_hódîs
), 
u£r_öfo
,

9935 
nuŒ_°r
);

9937  
	gnc
;

9940 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_ws
(

9941 
mg_mgr
 *
mgr
, 
MG_CB
(
mg_evít_h™dÀr_t
 
ev_h™dÀr
, *
u£r_d©a
),

9942 c⁄° *
uæ
, c⁄° *
¥Ÿocﬁ
, c⁄° *
exåa_hódîs
) {

9943 
mg_c⁄√˘_›ts
 
	g›ts
;

9944 
mem£t
(&
›ts
, 0, (opts));

9945  
mg_c⁄√˘_ws_›t
(
mgr
, 
MG_CB
(
ev_h™dÀr
, 
u£r_d©a
), 
›ts
, 
uæ
,

9946 
¥Ÿocﬁ
, 
exåa_hódîs
);

9949 #ifde‡
MG_MODULE_LINES


9962 #i‚de‡
MAX


9963 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

9966 c⁄° *
mg_skù
(c⁄° *
s
, c⁄° *
íd
, c⁄° *
dñims
,

9967 
mg_°r
 *
v
) {

9968 
	gv
->
	gp
 = 
s
;

9969 
	gs
 < 
	gíd
 && 
°rchr
(
dñims
, *(*Ë
s
Ë=
NULL
) s++;

9970 
	gv
->
	gÀn
 = 
s
 - 
v
->
p
;

9971 
	gs
 < 
	gíd
 && 
°rchr
(
dñims
, *(*Ë
s
Ë!
NULL
) s++;

9972  
	gs
;

9975 #i‡
MG_ENABLE_FILESYSTEM
 && !
deföed
(
MG_USER_FILE_FUNCTIONS
)

9976 
mg_°©
(c⁄° *
∑th
, 
cs_°©_t
 *
°
) {

9977 #ifde‡
_WIN32


9978 
wch¨_t
 
	gw∑th
[
MG_MAX_PATH
];

9979 
to_wch¨
(
∑th
, 
w∑th
, 
ARRAY_SIZE
(wpath));

9980 
DBG
(("[%ls] -> %d", 
w∑th
, 
_w°©i64
(w∑th, 
°
)));

9981  
_w°©i64
(
w∑th
, 
°
);

9983  
°©
(
∑th
, 
°
);

9987 
FILE
 *
mg_f›í
(c⁄° *
∑th
, c⁄° *
mode
) {

9988 #ifde‡
_WIN32


9989 
wch¨_t
 
	gw∑th
[
MG_MAX_PATH
], 
	gwmode
[10];

9990 
to_wch¨
(
∑th
, 
w∑th
, 
ARRAY_SIZE
(wpath));

9991 
to_wch¨
(
mode
, 
wmode
, 
ARRAY_SIZE
(wmode));

9992  
_wf›í
(
w∑th
, 
wmode
);

9994  
f›í
(
∑th
, 
mode
);

9998 
mg_›í
(c⁄° *
∑th
, 
Êag
, 
mode
) {

9999 #i‡
deföed
(
_WIN32
Ë&& !deföed(
WINCE
)

10000 
wch¨_t
 
	gw∑th
[
MG_MAX_PATH
];

10001 
to_wch¨
(
∑th
, 
w∑th
, 
ARRAY_SIZE
(wpath));

10002  
_w›í
(
w∑th
, 
Êag
, 
mode
);

10004  
›í
(
∑th
, 
Êag
, 
mode
);

10008 
size_t
 
mg_‰ód
(*
±r
, size_à
size
, size_à
cou¡
, 
FILE
 *
f
) {

10009  
‰ód
(
±r
, 
size
, 
cou¡
, 
f
);

10012 
size_t
 
mg_fwrôe
(c⁄° *
±r
, size_à
size
, size_à
cou¡
, 
FILE
 *
f
) {

10013  
fwrôe
(
±r
, 
size
, 
cou¡
, 
f
);

10017 
mg_ba£64_ícode
(c⁄° *
§c
, 
§c_Àn
, *
d°
) {

10018 
cs_ba£64_ícode
(
§c
, 
§c_Àn
, 
d°
);

10021 
mg_ba£64_decode
(c⁄° *
s
, 
Àn
, *
d°
) {

10022  
cs_ba£64_decode
(
s
, 
Àn
, 
d°
, 
NULL
);

10025 #i‡
MG_ENABLE_THREADS


10026 *
mg_°¨t_thªad
(*(*
f
)(*), *
p
) {

10027 #ifde‡
WINCE


10028  (*Ë
Cª©eThªad
(
NULL
, 0, (
LPTHREAD_START_ROUTINE
Ë
f
, 
p
, 0, NULL);

10029 #ñi‡
deföed
(
_WIN32
)

10030  (*Ë
_begöthªad
(((
__cde˛
 *Ë(*ËË
f
, 0, 
p
);

10032 
±hªad_t
 
	gthªad_id
 = (pthread_t) 0;

10033 
±hªad_©å_t
 
	g©å
;

10035 (Ë
±hªad_©å_öô
(&
©å
);

10036 (Ë
±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_DETACHED
);

10038 #i‡
deföed
(
MG_STACK_SIZE
) && MG_STACK_SIZE > 1

10039 (Ë
±hªad_©å_£t°acksize
(&
©å
, 
MG_STACK_SIZE
);

10042 
±hªad_¸óã
(&
thªad_id
, &
©å
, 
f
, 
p
);

10043 
±hªad_©å_de°roy
(&
©å
);

10045  (*Ë
	gthªad_id
;

10051 
mg_£t_˛o£_⁄_exec
(
sock_t
 
sock
) {

10052 #i‡
deföed
(
_WIN32
Ë&& !deföed(
WINCE
)

10053 (Ë
SëH™dÀInf‹m©i⁄
((
HANDLE
Ë
sock
, 
HANDLE_FLAG_INHERIT
, 0);

10054 #ñi‡
deföed
(
__unix__
)

10055 
f˙é
(
sock
, 
F_SETFD
, 
FD_CLOEXEC
);

10057 (Ë
	gsock
;

10061 
mg_sock_addr_to_°r
(c⁄° 
sockë_addªss
 *
ß
, *
buf
, 
size_t
 
Àn
,

10062 
Êags
) {

10063 
	gis_v6
;

10064 i‡(
	gbuf
 =
NULL
 || 
Àn
 <= 0)  0;

10065 
mem£t
(
buf
, 0, 
Àn
);

10066 #i‡
MG_ENABLE_IPV6


10067 
	gis_v6
 = 
ß
->ß.
ß_Ámûy
 =
AF_INET6
;

10069 
	gis_v6
 = 0;

10071 i‡(
	gÊags
 & 
	gMG_SOCK_STRINGIFY_IP
) {

10072 #i‡
MG_ENABLE_IPV6


10073 c⁄° *
	gaddr
 = 
NULL
;

10074 *
	g°¨t
 = 
buf
;

10075 
sockÀn_t
 
	gˇ∑côy
 = 
Àn
;

10076 i‡(!
	gis_v6
) {

10077 
	gaddr
 = &
ß
->
sö
.
sö_addr
;

10079 
	gaddr
 = (*Ë&
ß
->
sö6
.
sö6_addr
;

10080 i‡(
	gÊags
 & 
	gMG_SOCK_STRINGIFY_PORT
) {

10081 *
	gbuf
 = '[';

10082 
	g°¨t
++;

10083 
	gˇ∑côy
--;

10086 i‡(
öë_¡›
(
ß
->ß.
ß_Ámûy
, 
addr
, 
°¨t
, 
ˇ∑côy
Ë=
NULL
) {

10087 
˛ónup
;

10089 #ñi‡
deföed
(
_WIN32
Ë|| 
MG_LWIP
 || (
MG_NET_IF
 =
MG_NET_IF_PIC32
)

10091 *
	gaddr_°r
 = 
öë_¡ﬂ
(
ß
->
sö
.
sö_addr
);

10092 i‡(
	gaddr_°r
 !
NULL
) {

10093 
°∫˝y
(
buf
, 
öë_¡ﬂ
(
ß
->
sö
.
sö_addr
), 
Àn
 - 1);

10095 
	g˛ónup
;

10098 i‡(
öë_¡›
(
AF_INET
, (*Ë&
ß
->
sö
.
sö_addr
, 
buf
, 
Àn
 - 1Ë=
NULL
) {

10099 
˛ónup
;

10103 i‡(
	gÊags
 & 
	gMG_SOCK_STRINGIFY_PORT
) {

10104 
	gp‹t
 = 
¡ohs
(
ß
->
sö
.
sö_p‹t
);

10105 i‡(
	gÊags
 & 
	gMG_SOCK_STRINGIFY_IP
) {

10106 
	gbuf_Àn
 = 
°æí
(
buf
);

10107 
¢¥ötf
(
buf
 + 
buf_Àn
, 
Àn
 - (buf_À¿+ 1), "%s:%d", (
is_v6
 ? "]" : ""),

10108 
p‹t
);

10110 
¢¥ötf
(
buf
, 
Àn
, "%d", 
p‹t
);

10114  
°æí
(
buf
);

10116 
	g˛ónup
:

10117 *
buf
 = '\0';

10121 
mg_c⁄n_addr_to_°r
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
size_t
 
Àn
,

10122 
Êags
) {

10123 
sockë_addªss
 
	gß
;

10124 
mem£t
(&
ß
, 0, (sa));

10125 
mg_if_gë_c⁄n_addr
(
nc
, 
Êags
 & 
MG_SOCK_STRINGIFY_REMOTE
, &
ß
);

10126  
mg_sock_addr_to_°r
(&
ß
, 
buf
, 
Àn
, 
Êags
);

10129 #i‡
MG_ENABLE_HEXDUMP


10130 
mg_hexdump_n
(c⁄° *
buf
, 
Àn
, *
d°
, 
d°_Àn
,

10131 
off£t
) {

10132 c⁄° *
	gp
 = (c⁄° *Ë
buf
;

10133 
	gascii
[17] = "";

10134 
	gi
, 
	gidx
, 
	gn
 = 0;

10136 
	gi
 = 0; i < 
	gÀn
; i++) {

10137 
	gidx
 = 
i
 % 16;

10138 i‡(
	gidx
 == 0) {

10139 i‡(
i
 > 0Ë
n
 +
¢¥ötf
(
d°
 +Ç, 
MAX
(
d°_Àn
 -Ç, 0), " %s\n", 
ascii
);

10140 
	gn
 +
¢¥ötf
(
d°
 + 
n
, 
MAX
(
d°_Àn
 -Ç, 0), "%04x ", 
i
 + 
off£t
);

10142 i‡(
	gd°_Àn
 - 
	gn
 < 0) {

10143  
	gn
;

10145 
	gn
 +
¢¥ötf
(
d°
 + 
n
, 
MAX
(
d°_Àn
 -Ç, 0), " %02x", 
p
[
i
]);

10146 
	gascii
[
idx
] = 
p
[
i
] < 0x20 ||Ö[i] > 0x7e ? '.' :Ö[i];

10147 
	gascii
[
idx
 + 1] = '\0';

10150 
	gi
++ % 16Ë
	gn
 +
¢¥ötf
(
d°
 + 
n
, 
MAX
(
d°_Àn
 -Ç, 0), "%s", " ");

10151 
	gn
 +
¢¥ötf
(
d°
 + 
n
, 
MAX
(
d°_Àn
 -Ç, 0), " %s\n", 
ascii
);

10153  
	gn
;

10156 
mg_hexdump
(c⁄° *
buf
, 
Àn
, *
d°
, 
d°_Àn
) {

10157  
mg_hexdump_n
(
buf
, 
Àn
, 
d°
, 
d°_Àn
, 0);

10160 
mg_hexdumpf
(
FILE
 *
Â
, c⁄° *
buf
, 
Àn
) {

10161 
	gtmp
[80];

10162 
	goff£t
 = 0, 
	gn
;

10163 
	gÀn
 > 0) {

10164 
	gn
 = (
Àn
 < 16 ?Üen : 16);

10165 
mg_hexdump_n
(((c⁄° *Ë
buf
Ë+ 
off£t
, 
n
, 
tmp
, (tmp), offset);

10166 
Âuts
(
tmp
, 
Â
);

10167 
	goff£t
 +
n
;

10168 
	gÀn
 -
n
;

10172 
mg_hexdump_c⁄√˘i⁄
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

10173 c⁄° *
buf
, 
num_byãs
, 
ev
) {

10174 
FILE
 *
	gÂ
 = 
NULL
;

10175 
	g§c
[60], 
	gd°
[60];

10176 c⁄° *
	gèg
 = 
NULL
;

10177 
	gev
) {

10178 
	gMG_EV_RECV
:

10179 
èg
 = "<-";

10181 
	gMG_EV_SEND
:

10182 
èg
 = "->";

10184 
	gMG_EV_ACCEPT
:

10185 
èg
 = "<A";

10187 
	gMG_EV_CONNECT
:

10188 
èg
 = "C>";

10190 
	gMG_EV_CLOSE
:

10191 
èg
 = "XX";

10194 i‡(
	gèg
 =
NULL
) ;

10196 i‡(
°rcmp
(
∑th
, "-") == 0) {

10197 
Â
 = 
°dout
;

10198 } i‡(
°rcmp
(
∑th
, "--") == 0) {

10199 
Â
 = 
°dîr
;

10200 #i‡
MG_ENABLE_FILESYSTEM


10202 
	gÂ
 = 
mg_f›í
(
∑th
, "a");

10205 i‡(
	gÂ
 =
NULL
) ;

10207 
mg_c⁄n_addr_to_°r
(
nc
, 
§c
, (src),

10208 
MG_SOCK_STRINGIFY_IP
 | 
MG_SOCK_STRINGIFY_PORT
);

10209 
mg_c⁄n_addr_to_°r
(
nc
, 
d°
, (d°), 
MG_SOCK_STRINGIFY_IP
 |

10210 
MG_SOCK_STRINGIFY_PORT
 |

10211 
MG_SOCK_STRINGIFY_REMOTE
);

10212 
Ârötf
(
Â
, "%lu %∞%†%†%†%d\n", (Ë
mg_time
(), (*Ë
nc
,

10213 
§c
, 
èg
, 
d°
, (Ë
num_byãs
);

10214 i‡(
	gnum_byãs
 > 0) {

10215 
mg_hexdumpf
(
Â
, 
buf
, 
num_byãs
);

10217 i‡(
	gÂ
 !
°dout
 && 
Â
 !
°dîr
Ë
f˛o£
(fp);

10221 
mg_is_big_ídün
() {

10222 c⁄° 
	gn
 = 1;

10224  ((*Ë&
	gn
)[0] == 0;

10227 
DO_NOT_WARN_UNUSED
 
MG_INTERNAL
 
mg_gë_î∫o
() {

10228 #i‚de‡
WINCE


10229  
	gî∫o
;

10232  
GëLa°Eº‹
();

10236 
mg_mbuf_≠≥nd_ba£64_putc
(
ch
, *
u£r_d©a
) {

10237 
mbuf
 *
	gmbuf
 = (mbu‡*Ë
u£r_d©a
;

10238 
mbuf_≠≥nd
(
mbuf
, &
ch
, (ch));

10241 
mg_mbuf_≠≥nd_ba£64
(
mbuf
 *mbuf, c⁄° *
d©a
, 
size_t
 
Àn
) {

10242 
cs_ba£64_˘x
 
	g˘x
;

10243 
cs_ba£64_öô
(&
˘x
, 
mg_mbuf_≠≥nd_ba£64_putc
, 
mbuf
);

10244 
cs_ba£64_upd©e
(&
˘x
, (c⁄° *Ë
d©a
, 
Àn
);

10245 
cs_ba£64_föish
(&
˘x
);

10248 
mg_basic_auth_hódî
(c⁄° 
mg_°r
 
u£r
, c⁄° mg_°∏
∑ss
,

10249 
mbuf
 *
buf
) {

10250 c⁄° *
	ghódî_¥efix
 = "Authorization: Basic ";

10251 c⁄° *
	ghódî_suffix
 = "\r\n";

10253 
cs_ba£64_˘x
 
	g˘x
;

10254 
cs_ba£64_öô
(&
˘x
, 
mg_mbuf_≠≥nd_ba£64_putc
, 
buf
);

10256 
mbuf_≠≥nd
(
buf
, 
hódî_¥efix
, 
°æí
(header_prefix));

10258 
cs_ba£64_upd©e
(&
˘x
, 
u£r
.
p
, u£r.
Àn
);

10259 i‡(
	g∑ss
.
	gÀn
 > 0) {

10260 
cs_ba£64_upd©e
(&
˘x
, ":", 1);

10261 
cs_ba£64_upd©e
(&
˘x
, 
∑ss
.
p
,Öass.
Àn
);

10263 
cs_ba£64_föish
(&
˘x
);

10264 
mbuf_≠≥nd
(
buf
, 
hódî_suffix
, 
°æí
(header_suffix));

10267 
mg_°r
 
mg_uæ_ícode
(c⁄° mg_°∏
§c
) {

10268 c⁄° *
	gd⁄t_esˇ≥
 = "._-$,;~()/";

10269 c⁄° *
	ghex
 = "0123456789abcdef";

10270 
size_t
 
	gi
 = 0;

10271 
mbuf
 
	gmb
;

10272 
mbuf_öô
(&
mb
, 
§c
.
Àn
);

10274 
	gi
 = 0; i < 
	g§c
.
	gÀn
; i++) {

10275 c⁄° 
	gc
 = *((c⁄° *Ë
§c
.
p
 + 
i
);

10276 i‡(
iß um
(
c
Ë|| 
°rchr
(
d⁄t_esˇ≥
, cË!
NULL
) {

10277 
mbuf_≠≥nd
(&
mb
, &
c
, 1);

10279 
mbuf_≠≥nd
(&
mb
, "%", 1);

10280 
mbuf_≠≥nd
(&
mb
, &
hex
[
c
 >> 4], 1);

10281 
mbuf_≠≥nd
(&
mb
, &
hex
[
c
 & 15], 1);

10284 
mbuf_≠≥nd
(&
mb
, "", 1);

10285 
mbuf_åim
(&
mb
);

10286  
mg_mk_°r_n
(
mb
.
buf
, mb.
Àn
 - 1);

10288 #ifde‡
MG_MODULE_LINES


10296 #i‡
MG_ENABLE_MQTT


10298 
	~<°rög.h
>

10303 
uöt16_t
 
gëu16
(c⁄° *
p
) {

10304 c⁄° 
uöt8_t
 *
	gup
 = (c⁄° uöt8_à*Ë
p
;

10305  (
	gup
[0] << 8) + up[1];

10308 c⁄° *
sˇ¡o
(c⁄° *
p
, 
mg_°r
 *
s
) {

10309 
	gs
->
	gÀn
 = 
gëu16
(
p
);

10310 
	gs
->
	gp
 = 
p
 + 2;

10311  
	gs
->
	gp
 + s->
	gÀn
;

10314 
MG_INTERNAL
 
∑r£_mqâ
(
mbuf
 *
io
, 
mg_mqâ_mesßge
 *
mm
) {

10315 
uöt8_t
 
	ghódî
;

10316 
size_t
 
	gÀn
 = 0, 
	gÀn_Àn
 = 0;

10317 c⁄° *
	gp
, *
	gíd
;

10318 
	glc
 = 0;

10319 
	gcmd
;

10321 i‡(
	gio
->
	gÀn
 < 2Ë 
	gMG_MQTT_ERROR_INCOMPLETE_MSG
;

10322 
	ghódî
 = 
io
->
buf
[0];

10323 
	gcmd
 = 
hódî
 >> 4;

10326 
	gÀn
 = 
Àn_Àn
 = 0;

10327 
	gp
 = 
io
->
buf
 + 1;

10328 (
	gsize_t
)(
	gp
 - 
	gio
->
	gbuf
Ë< io->
	gÀn
) {

10329 
	glc
 = *((c⁄° *Ë
p
++);

10330 
	gÀn
 +(
lc
 & 0x7fË<< 7 * 
Àn_Àn
;

10331 
	gÀn_Àn
++;

10332 i‡(!(
	glc
 & 0x80)) ;

10333 i‡(
	gÀn_Àn
 > 4Ë 
	gMG_MQTT_ERROR_MALFORMED_MSG
;

10336 
	gíd
 = 
p
 + 
Àn
;

10337 i‡(
	glc
 & 0x80 || 
	gÀn
 > (
	gio
->À¿- (
	gp
 - io->
	gbuf
))) {

10338  
	gMG_MQTT_ERROR_INCOMPLETE_MSG
;

10341 
	gmm
->
	gcmd
 = 
cmd
;

10342 
	gmm
->
	gqos
 = 
MG_MQTT_GET_QOS
(
hódî
);

10344 
	gcmd
) {

10345 
	gMG_MQTT_CMD_CONNECT
: {

10346 
p
 = 
sˇ¡o
’, &
mm
->
¥Ÿocﬁ_«me
);

10347 i‡(
	gp
 > 
	gíd
 - 4Ë 
	gMG_MQTT_ERROR_MALFORMED_MSG
;

10348 
	gmm
->
	g¥Ÿocﬁ_vîsi⁄
 = *(
uöt8_t
 *Ë
p
++;

10349 
	gmm
->
	gc⁄√˘_Êags
 = *(
uöt8_t
 *Ë
p
++;

10350 
	gmm
->
	gkìp_Æive_timî
 = 
gëu16
(
p
);

10351 
	gp
 += 2;

10352 i‡(
	gp
 >
íd
Ë 
MG_MQTT_ERROR_MALFORMED_MSG
;

10353 
	gp
 = 
sˇ¡o
(
p
, &
mm
->
˛õ¡_id
);

10354 i‡(
	gp
 > 
	gíd
Ë 
	gMG_MQTT_ERROR_MALFORMED_MSG
;

10355 i‡(
	gmm
->
	gc⁄√˘_Êags
 & 
	gMG_MQTT_HAS_WILL
) {

10356 i‡(
	gp
 >
íd
Ë 
MG_MQTT_ERROR_MALFORMED_MSG
;

10357 
	gp
 = 
sˇ¡o
(
p
, &
mm
->
wûl_t›ic
);

10359 i‡(
	gmm
->
	gc⁄√˘_Êags
 & 
	gMG_MQTT_HAS_WILL
) {

10360 i‡(
	gp
 >
íd
Ë 
MG_MQTT_ERROR_MALFORMED_MSG
;

10361 
	gp
 = 
sˇ¡o
(
p
, &
mm
->
wûl_mesßge
);

10363 i‡(
	gmm
->
	gc⁄√˘_Êags
 & 
	gMG_MQTT_HAS_USER_NAME
) {

10364 i‡(
	gp
 >
íd
Ë 
MG_MQTT_ERROR_MALFORMED_MSG
;

10365 
	gp
 = 
sˇ¡o
(
p
, &
mm
->
u£r_«me
);

10367 i‡(
	gmm
->
	gc⁄√˘_Êags
 & 
	gMG_MQTT_HAS_PASSWORD
) {

10368 i‡(
	gp
 >
íd
Ë 
MG_MQTT_ERROR_MALFORMED_MSG
;

10369 
	gp
 = 
sˇ¡o
(
p
, &
mm
->
∑ssw‹d
);

10371 i‡(
	gp
 !
íd
Ë 
MG_MQTT_ERROR_MALFORMED_MSG
;

10373 
LOG
(
LL_DEBUG
,

10376 (Ë
Àn
, (Ë
mm
->
c⁄√˘_Êags
, (Ëmm->
kìp_Æive_timî
,

10377 (Ë
mm
->
¥Ÿocﬁ_«me
.
Àn
, mm->¥Ÿocﬁ_«me.
p
,

10378 (Ë
mm
->
˛õ¡_id
.
Àn
, mm->˛õ¡_id.
p
, (Ëmm->
wûl_t›ic
.len,

10379 
mm
->
wûl_t›ic
.
p
, (Ëmm->
wûl_mesßge
.
Àn
, mm->will_message.p,

10380 (Ë
mm
->
u£r_«me
.
Àn
, mm->u£r_«me.
p
, (Ëmm->
∑ssw‹d
.len,

10381 
mm
->
∑ssw‹d
.
p
));

10384 
	gMG_MQTT_CMD_CONNACK
:

10385 i‡(
íd
 - 
p
 < 2Ë 
MG_MQTT_ERROR_MALFORMED_MSG
;

10386 
	gmm
->
	gc⁄«ck_ªt_code
 = 
p
[1];

10388 
	gMG_MQTT_CMD_PUBACK
:

10389 
MG_MQTT_CMD_PUBREC
:

10390 
MG_MQTT_CMD_PUBREL
:

10391 
MG_MQTT_CMD_PUBCOMP
:

10392 
MG_MQTT_CMD_SUBACK
:

10393 
mm
->
mesßge_id
 = 
gëu16
(
p
);

10395 
	gMG_MQTT_CMD_PUBLISH
: {

10396 
p
 = 
sˇ¡o
’, &
mm
->
t›ic
);

10397 i‡(
	gp
 > 
	gíd
Ë 
	gMG_MQTT_ERROR_MALFORMED_MSG
;

10398 i‡(
	gmm
->
	gqos
 > 0) {

10399 i‡(
	gíd
 - 
	gp
 < 2Ë 
	gMG_MQTT_ERROR_MALFORMED_MSG
;

10400 
	gmm
->
	gmesßge_id
 = 
gëu16
(
p
);

10401 
	gp
 += 2;

10403 
	gmm
->
	g∑ylﬂd
.
	gp
 = 
p
;

10404 
	gmm
->
	g∑ylﬂd
.
	gÀn
 = 
íd
 - 
p
;

10407 
	gMG_MQTT_CMD_SUBSCRIBE
:

10408 i‡(
íd
 - 
p
 < 2Ë 
MG_MQTT_ERROR_MALFORMED_MSG
;

10409 
	gmm
->
	gmesßge_id
 = 
gëu16
(
p
);

10410 
	gp
 += 2;

10415 
	gmm
->
	g∑ylﬂd
.
	gp
 = 
p
;

10416 
	gmm
->
	g∑ylﬂd
.
	gÀn
 = 
íd
 - 
p
;

10423 
	gmm
->
	gÀn
 = 
íd
 - 
io
->
buf
;

10424  
	gmm
->
	gÀn
;

10427 
mqâ_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

10428 *
ev_d©a
 
MG_UD_ARG
(*
u£r_d©a
)) {

10429 
mbuf
 *
	gio
 = &
nc
->
ªcv_mbuf
;

10430 
mg_mqâ_mesßge
 
	gmm
;

10431 
mem£t
(&
mm
, 0, (mm));

10433 
	gnc
->
h™dÀr
(
nc
, 
ev
, 
ev_d©a
 
MG_UD_ARG
(
u£r_d©a
));

10435 
	gev
) {

10436 
	gMG_EV_ACCEPT
:

10437 i‡(
nc
->
¥Ÿo_d©a
 =
NULL
Ë
mg_£t_¥Ÿocﬁ_mqâ
(nc);

10439 
	gMG_EV_RECV
: {

10442 
Àn
 = 
∑r£_mqâ
(
io
, &
mm
);

10443 i‡(
	gÀn
 < 0) {

10444 i‡(
	gÀn
 =
MG_MQTT_ERROR_MALFORMED_MSG
) {

10446 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

10447 } i‡(
	gÀn
 =
MG_MQTT_ERROR_INCOMPLETE_MSG
) {

10450 i‡(
nc
->
ªcv_mbuf_limô
 > 0 &&

10451 
nc
->
ªcv_mbuf
.
Àn
 >nc->
ªcv_mbuf_limô
) {

10452 
LOG
(
LL_ERROR
, ("%pÑecv buffer (%lu bytes)ÉxceedsÅheÜimit "

10454 
nc
, (Ënc->
ªcv_mbuf
.
Àn
,

10455 (Ë
nc
->
ªcv_mbuf_limô
));

10456 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

10460 
LOG
(
LL_ERROR
, ("%∞övÆidÜí: %d, closög", 
nc
, 
Àn
));

10461 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

10466 
	gnc
->
h™dÀr
(
nc
, 
MG_MQTT_EVENT_BASE
 + 
mm
.
cmd
, &mm 
MG_UD_ARG
(
u£r_d©a
));

10467 
mbuf_ªmove
(
io
, 
Àn
);

10471 
	gMG_EV_POLL
: {

10472 
mg_mqâ_¥Ÿo_d©a
 *
pd
 =

10473 (
mg_mqâ_¥Ÿo_d©a
 *Ë
nc
->
¥Ÿo_d©a
;

10474 
	gnow
 = 
mg_time
();

10475 i‡(
	gpd
->
	gkìp_Æive
 > 0 &&Öd->
	gœ°_c⁄åﬁ_time
 > 0 &&

10476 (
	gnow
 - 
	gpd
->
	gœ°_c⁄åﬁ_time
Ë>Öd->
	gkìp_Æive
) {

10477 
LOG
(
LL_DEBUG
, ("Send PINGREQ"));

10478 
mg_mqâ_pög
(
nc
);

10485 
mg_mqâ_¥Ÿo_d©a_de°ru˘‹
(*
¥Ÿo_d©a
) {

10486 
MG_FREE
(
¥Ÿo_d©a
);

10489 
mg_mqâ_m©ch_t›ic_ex¥essi⁄
(
mg_°r
 
exp
, mg_°∏
t›ic
) {

10491 i‡(
memchr
(
exp
.
p
, '#',Éxp.
Àn
)) {

10493 
	gexp
.
	gÀn
 -= 1;

10498 i‡(
	gt›ic
.
	gÀn
 <
exp
.
Àn
) {

10503 
	gt›ic
.
	gÀn
 = 
exp
.
Àn
;

10505 i‡(
	gt›ic
.
	gÀn
 !
exp
.
Àn
) {

10508  
°∫cmp
(
t›ic
.
p
, 
exp
.p,Éxp.
Àn
) == 0;

10511 
mg_mqâ_vm©ch_t›ic_ex¥essi⁄
(c⁄° *
exp
, 
mg_°r
 
t›ic
) {

10512  
mg_mqâ_m©ch_t›ic_ex¥essi⁄
(
mg_mk_°r
(
exp
), 
t›ic
);

10515 
mg_£t_¥Ÿocﬁ_mqâ
(
mg_c⁄√˘i⁄
 *
nc
) {

10516 
	gnc
->
	g¥Ÿo_h™dÀr
 = 
mqâ_h™dÀr
;

10517 
	gnc
->
	g¥Ÿo_d©a
 = 
MG_CALLOC
(1, (
mg_mqâ_¥Ÿo_d©a
));

10518 
	gnc
->
	g¥Ÿo_d©a_de°ru˘‹
 = 
mg_mqâ_¥Ÿo_d©a_de°ru˘‹
;

10521 
mg_mqâ_¥ïíd_hódî
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt8_t
 
cmd
,

10522 
uöt8_t
 
Êags
, 
size_t
 
Àn
) {

10523 
mg_mqâ_¥Ÿo_d©a
 *
	gpd
 = (mg_mqâ_¥Ÿo_d©®*Ë
nc
->
¥Ÿo_d©a
;

10524 
size_t
 
	goff
 = 
nc
->
£nd_mbuf
.
Àn
 -Üen;

10525 
uöt8_t
 
	ghódî
 = 
cmd
 << 4 | (uöt8_tË
Êags
;

10527 
uöt8_t
 
	gbuf
[1 + (
size_t
)];

10528 
uöt8_t
 *
	gvÀn
 = &
buf
[1];

10530 
as£π
(
nc
->
£nd_mbuf
.
Àn
 >=Üen);

10532 
	gbuf
[0] = 
hódî
;

10536 *
	gvÀn
 = 
Àn
 % 0x80;

10537 
	gÀn
 /= 0x80;

10538 i‡(
	gÀn
 > 0Ë*
	gvÀn
 |= 0x80;

10539 
	gvÀn
++;

10540 } 
	gÀn
 > 0);

10542 
mbuf_ö£π
(&
nc
->
£nd_mbuf
, 
off
, 
buf
, 
vÀn
 - buf);

10543 
	gpd
->
	gœ°_c⁄åﬁ_time
 = 
mg_time
();

10546 
mg_£nd_mqâ_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˛õ¡_id
) {

10547 
mg_£nd_mqâ_h™dshake_›ts
 
	g›ts
;

10548 
mg_£nd_mqâ_h™dshake_›t
(
nc
, 
˛õ¡_id
, 
›ts
);

10551 
mg_£nd_mqâ_h™dshake_›t
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˛õ¡_id
,

10552 
mg_£nd_mqâ_h™dshake_›ts
 
›ts
) {

10553 
uöt16_t
 
	ghÀn
, 
	g∆í
, 
	gªm_Àn
 = 0;

10554 
mg_mqâ_¥Ÿo_d©a
 *
	gpd
 = (mg_mqâ_¥Ÿo_d©®*Ë
nc
->
¥Ÿo_d©a
;

10556 
mg_£nd
(
nc
, "\00\04MQTT\04", 7);

10557 
	gªm_Àn
 += 7;

10559 i‡(
	g›ts
.
	gu£r_«me
 !
NULL
) {

10560 
›ts
.
Êags
 |
MG_MQTT_HAS_USER_NAME
;

10562 i‡(
	g›ts
.
	g∑ssw‹d
 !
NULL
) {

10563 
›ts
.
Êags
 |
MG_MQTT_HAS_PASSWORD
;

10565 i‡(
	g›ts
.
	gwûl_t›ic
 !
NULL
 && 
›ts
.
wûl_mesßge
 != NULL) {

10566 
›ts
.
Êags
 |
MG_MQTT_HAS_WILL
;

10568 i‡(
	g›ts
.
	gkìp_Æive
 == 0) {

10569 
›ts
.
kìp_Æive
 = 60;

10572 
mg_£nd
(
nc
, &
›ts
.
Êags
, 1);

10573 
	gªm_Àn
 += 1;

10575 
	g∆í
 = 
ht⁄s
(
›ts
.
kìp_Æive
);

10576 
mg_£nd
(
nc
, &
∆í
, 2);

10577 
	gªm_Àn
 += 2;

10579 
	ghÀn
 = 
°æí
(
˛õ¡_id
);

10580 
	g∆í
 = 
ht⁄s
((
uöt16_t
Ë
hÀn
);

10581 
mg_£nd
(
nc
, &
∆í
, 2);

10582 
mg_£nd
(
nc
, 
˛õ¡_id
, 
hÀn
);

10583 
	gªm_Àn
 +2 + 
hÀn
;

10585 i‡(
	g›ts
.
	gÊags
 & 
	gMG_MQTT_HAS_WILL
) {

10586 
	ghÀn
 = 
°æí
(
›ts
.
wûl_t›ic
);

10587 
	g∆í
 = 
ht⁄s
((
uöt16_t
Ë
hÀn
);

10588 
mg_£nd
(
nc
, &
∆í
, 2);

10589 
mg_£nd
(
nc
, 
›ts
.
wûl_t›ic
, 
hÀn
);

10590 
	gªm_Àn
 +2 + 
hÀn
;

10592 
	ghÀn
 = 
°æí
(
›ts
.
wûl_mesßge
);

10593 
	g∆í
 = 
ht⁄s
((
uöt16_t
Ë
hÀn
);

10594 
mg_£nd
(
nc
, &
∆í
, 2);

10595 
mg_£nd
(
nc
, 
›ts
.
wûl_mesßge
, 
hÀn
);

10596 
	gªm_Àn
 +2 + 
hÀn
;

10599 i‡(
	g›ts
.
	gÊags
 & 
	gMG_MQTT_HAS_USER_NAME
) {

10600 
	ghÀn
 = 
°æí
(
›ts
.
u£r_«me
);

10601 
	g∆í
 = 
ht⁄s
((
uöt16_t
Ë
hÀn
);

10602 
mg_£nd
(
nc
, &
∆í
, 2);

10603 
mg_£nd
(
nc
, 
›ts
.
u£r_«me
, 
hÀn
);

10604 
	gªm_Àn
 +2 + 
hÀn
;

10606 i‡(
	g›ts
.
	gÊags
 & 
	gMG_MQTT_HAS_PASSWORD
) {

10607 
	ghÀn
 = 
°æí
(
›ts
.
∑ssw‹d
);

10608 
	g∆í
 = 
ht⁄s
((
uöt16_t
Ë
hÀn
);

10609 
mg_£nd
(
nc
, &
∆í
, 2);

10610 
mg_£nd
(
nc
, 
›ts
.
∑ssw‹d
, 
hÀn
);

10611 
	gªm_Àn
 +2 + 
hÀn
;

10614 
mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_CONNECT
, 0, 
ªm_Àn
);

10616 i‡(
	gpd
 !
NULL
) {

10617 
pd
->
kìp_Æive
 = 
›ts
.keep_alive;

10621 
mg_mqâ_publish
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
t›ic
,

10622 
uöt16_t
 
mesßge_id
, 
Êags
, c⁄° *
d©a
,

10623 
size_t
 
Àn
) {

10624 
size_t
 
	gﬁd_Àn
 = 
nc
->
£nd_mbuf
.
Àn
;

10626 
uöt16_t
 
	gt›ic_Àn
 = 
ht⁄s
((uöt16_tË
°æí
(
t›ic
));

10627 
uöt16_t
 
	gmesßge_id_√t
 = 
ht⁄s
(
mesßge_id
);

10629 
mg_£nd
(
nc
, &
t›ic_Àn
, 2);

10630 
mg_£nd
(
nc
, 
t›ic
, 
°æí
(topic));

10631 i‡(
MG_MQTT_GET_QOS
(
Êags
) > 0) {

10632 
mg_£nd
(
nc
, &
mesßge_id_√t
, 2);

10634 
mg_£nd
(
nc
, 
d©a
, 
Àn
);

10636 
mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_PUBLISH
, 
Êags
,

10637 
nc
->
£nd_mbuf
.
Àn
 - 
ﬁd_Àn
);

10640 
mg_mqâ_subs¸ibe
(
mg_c⁄√˘i⁄
 *
nc
,

10641 c⁄° 
mg_mqâ_t›ic_ex¥essi⁄
 *
t›ics
,

10642 
size_t
 
t›ics_Àn
, 
uöt16_t
 
mesßge_id
) {

10643 
size_t
 
	gﬁd_Àn
 = 
nc
->
£nd_mbuf
.
Àn
;

10645 
uöt16_t
 
	gmesßge_id_n
 = 
ht⁄s
(
mesßge_id
);

10646 
size_t
 
	gi
;

10648 
mg_£nd
(
nc
, (*Ë&
mesßge_id_n
, 2);

10649 
	gi
 = 0; i < 
	gt›ics_Àn
; i++) {

10650 
uöt16_t
 
	gt›ic_Àn_n
 = 
ht⁄s
((uöt16_tË
°æí
(
t›ics
[
i
].
t›ic
));

10651 
mg_£nd
(
nc
, &
t›ic_Àn_n
, 2);

10652 
mg_£nd
(
nc
, 
t›ics
[
i
].
t›ic
, 
°æí
(topics[i].topic));

10653 
mg_£nd
(
nc
, &
t›ics
[
i
].
qos
, 1);

10656 
mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_SUBSCRIBE
, 
MG_MQTT_QOS
(1),

10657 
nc
->
£nd_mbuf
.
Àn
 - 
ﬁd_Àn
);

10660 
mg_mqâ_√xt_subs¸ibe_t›ic
(
mg_mqâ_mesßge
 *
msg
,

10661 
mg_°r
 *
t›ic
, 
uöt8_t
 *
qos
, 
pos
) {

10662 *
	gbuf
 = (*Ë
msg
->
∑ylﬂd
.
p
 + 
pos
;

10663 
	g√w_pos
;

10665 i‡((
	gsize_t
Ë
	gpos
 >
msg
->
∑ylﬂd
.
Àn
)  -1;

10667 
	gt›ic
->
	gÀn
 = 
buf
[0] << 8 | buf[1];

10668 
	gt›ic
->
	gp
 = (*Ë
buf
 + 2;

10669 
	g√w_pos
 = 
pos
 + 2 + 
t›ic
->
Àn
 + 1;

10670 i‡((
	gsize_t
Ë
	g√w_pos
 > 
	gmsg
->
	g∑ylﬂd
.
	gÀn
)  -1;

10671 *
	gqos
 = 
buf
[2 + 
t›ic
->
Àn
];

10672  
	g√w_pos
;

10675 
mg_mqâ_unsubs¸ibe
(
mg_c⁄√˘i⁄
 *
nc
, **
t›ics
,

10676 
size_t
 
t›ics_Àn
, 
uöt16_t
 
mesßge_id
) {

10677 
size_t
 
	gﬁd_Àn
 = 
nc
->
£nd_mbuf
.
Àn
;

10679 
uöt16_t
 
	gmesßge_id_n
 = 
ht⁄s
(
mesßge_id
);

10680 
size_t
 
	gi
;

10682 
mg_£nd
(
nc
, (*Ë&
mesßge_id_n
, 2);

10683 
	gi
 = 0; i < 
	gt›ics_Àn
; i++) {

10684 
uöt16_t
 
	gt›ic_Àn_n
 = 
ht⁄s
((uöt16_tË
°æí
(
t›ics
[
i
]));

10685 
mg_£nd
(
nc
, &
t›ic_Àn_n
, 2);

10686 
mg_£nd
(
nc
, 
t›ics
[
i
], 
°æí
(topics[i]));

10689 
mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_UNSUBSCRIBE
, 
MG_MQTT_QOS
(1),

10690 
nc
->
£nd_mbuf
.
Àn
 - 
ﬁd_Àn
);

10693 
mg_mqâ_c⁄«ck
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt8_t
 
ªtu∫_code
) {

10694 
uöt8_t
 
	gunu£d
 = 0;

10695 
mg_£nd
(
nc
, &
unu£d
, 1);

10696 
mg_£nd
(
nc
, &
ªtu∫_code
, 1);

10697 
mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_CONNACK
, 0, 2);

10705 
mg_£nd_mqâ_sh‹t_comm™d
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt8_t
 
cmd
,

10706 
uöt16_t
 
mesßge_id
) {

10707 
uöt16_t
 
	gmesßge_id_√t
 = 
ht⁄s
(
mesßge_id
);

10708 
uöt8_t
 
	gÊags
 = (
cmd
 =
MG_MQTT_CMD_PUBREL
 ? 2 : 0);

10709 
mg_£nd
(
nc
, &
mesßge_id_√t
, 2);

10710 
mg_mqâ_¥ïíd_hódî
(
nc
, 
cmd
, 
Êags
, 2 );

10713 
mg_mqâ_puback
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
) {

10714 
mg_£nd_mqâ_sh‹t_comm™d
(
nc
, 
MG_MQTT_CMD_PUBACK
, 
mesßge_id
);

10717 
mg_mqâ_pubªc
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
) {

10718 
mg_£nd_mqâ_sh‹t_comm™d
(
nc
, 
MG_MQTT_CMD_PUBREC
, 
mesßge_id
);

10721 
mg_mqâ_pubªl
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
) {

10722 
mg_£nd_mqâ_sh‹t_comm™d
(
nc
, 
MG_MQTT_CMD_PUBREL
, 
mesßge_id
);

10725 
mg_mqâ_pubcomp
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
) {

10726 
mg_£nd_mqâ_sh‹t_comm™d
(
nc
, 
MG_MQTT_CMD_PUBCOMP
, 
mesßge_id
);

10729 
mg_mqâ_suback
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt8_t
 *
qoss
, 
size_t
 
qoss_Àn
,

10730 
uöt16_t
 
mesßge_id
) {

10731 
size_t
 
	gi
;

10732 
uöt16_t
 
	gmesßge_id_√t
 = 
ht⁄s
(
mesßge_id
);

10733 
mg_£nd
(
nc
, &
mesßge_id_√t
, 2);

10734 
	gi
 = 0; i < 
	gqoss_Àn
; i++) {

10735 
mg_£nd
(
nc
, &
qoss
[
i
], 1);

10737 
mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_SUBACK
, 
MG_MQTT_QOS
(1), 2 + 
qoss_Àn
);

10740 
mg_mqâ_unsuback
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
) {

10741 
mg_£nd_mqâ_sh‹t_comm™d
(
nc
, 
MG_MQTT_CMD_UNSUBACK
, 
mesßge_id
);

10744 
mg_mqâ_pög
(
mg_c⁄√˘i⁄
 *
nc
) {

10745 
mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_PINGREQ
, 0, 0);

10748 
mg_mqâ_p⁄g
(
mg_c⁄√˘i⁄
 *
nc
) {

10749 
mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_PINGRESP
, 0, 0);

10752 
mg_mqâ_disc⁄√˘
(
mg_c⁄√˘i⁄
 *
nc
) {

10753 
mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_DISCONNECT
, 0, 0);

10757 #ifde‡
MG_MODULE_LINES


10768 #i‡
MG_ENABLE_MQTT_BROKER


10770 
mg_mqâ_£ssi⁄_öô
(
mg_mqâ_brokî
 *
brk
,

10771 
mg_mqâ_£ssi⁄
 *
s
,

10772 
mg_c⁄√˘i⁄
 *
nc
) {

10773 
	gs
->
	gbrk
 = 
brk
;

10774 
	gs
->
	gsubs¸ùti⁄s
 = 
NULL
;

10775 
	gs
->
	gnum_subs¸ùti⁄s
 = 0;

10776 
	gs
->
	gnc
 = 
nc
;

10779 
mg_mqâ_add_£ssi⁄
(
mg_mqâ_£ssi⁄
 *
s
) {

10780 
LIST_INSERT_HEAD
(&
s
->
brk
->
£ssi⁄s
, s, 
lök
);

10783 
mg_mqâ_ªmove_£ssi⁄
(
mg_mqâ_£ssi⁄
 *
s
) {

10784 
LIST_REMOVE
(
s
, 
lök
);

10787 
mg_mqâ_de°roy_£ssi⁄
(
mg_mqâ_£ssi⁄
 *
s
) {

10788 
size_t
 
	gi
;

10789 
	gi
 = 0; i < 
	gs
->
	gnum_subs¸ùti⁄s
; i++) {

10790 
MG_FREE
((*Ë
s
->
subs¸ùti⁄s
[
i
].
t›ic
);

10792 
MG_FREE
(
s
->
subs¸ùti⁄s
);

10793 
MG_FREE
(
s
);

10796 
mg_mqâ_˛o£_£ssi⁄
(
mg_mqâ_£ssi⁄
 *
s
) {

10797 
mg_mqâ_ªmove_£ssi⁄
(
s
);

10798 
mg_mqâ_de°roy_£ssi⁄
(
s
);

10801 
mg_mqâ_brokî_öô
(
mg_mqâ_brokî
 *
brk
, *
u£r_d©a
) {

10802 
LIST_INIT
(&
brk
->
£ssi⁄s
);

10803 
	gbrk
->
	gu£r_d©a
 = 
u£r_d©a
;

10806 
mg_mqâ_brokî_h™dÀ_c⁄√˘
(
mg_mqâ_brokî
 *
brk
,

10807 
mg_c⁄√˘i⁄
 *
nc
) {

10808 
mg_mqâ_£ssi⁄
 *
	gs
 =

10809 (
mg_mqâ_£ssi⁄
 *Ë
MG_CALLOC
(1,  *
s
);

10810 i‡(
	gs
 =
NULL
) {

10812 
mg_mqâ_c⁄«ck
(
nc
, 
MG_EV_MQTT_CONNACK_SERVER_UNAVAILABLE
);

10819 
mg_mqâ_£ssi⁄_öô
(
brk
, 
s
, 
nc
);

10820 
	gnc
->
	g¥iv_2
 = 
s
;

10821 
mg_mqâ_add_£ssi⁄
(
s
);

10823 
mg_mqâ_c⁄«ck
(
nc
, 
MG_EV_MQTT_CONNACK_ACCEPTED
);

10826 
mg_mqâ_brokî_h™dÀ_subs¸ibe
(
mg_c⁄√˘i⁄
 *
nc
,

10827 
mg_mqâ_mesßge
 *
msg
) {

10828 
mg_mqâ_£ssi⁄
 *
	gss
 = (mg_mqâ_£ssi⁄ *Ë
nc
->
¥iv_2
;

10829 
uöt8_t
 
	gqoss
[
MG_MQTT_MAX_SESSION_SUBSCRIPTIONS
];

10830 
size_t
 
	gnum_subs
 = 0;

10831 
mg_°r
 
	gt›ic
;

10832 
uöt8_t
 
	gqos
;

10833 
	gpos
;

10834 
mg_mqâ_t›ic_ex¥essi⁄
 *
	gã
;

10836 
	gpos
 = 0;

10837 (
	gpos
 = 
mg_mqâ_√xt_subs¸ibe_t›ic
(
msg
, &
t›ic
, &
qos
, 
pos
)) != -1;) {

10838 i‡(
	gnum_subs
 >(
MG_MQTT_MAX_SESSION_SUBSCRIPTIONS
) ||

10839 (
ss
->
num_subs¸ùti⁄s
 + 
num_subs
 >=

10840 
MG_MQTT_MAX_SESSION_SUBSCRIPTIONS
)) {

10841 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

10844 
	gqoss
[
num_subs
++] = 
qos
;

10847 i‡(
	gnum_subs
 > 0) {

10848 
	gã
 = (
mg_mqâ_t›ic_ex¥essi⁄
 *Ë
MG_REALLOC
(

10849 
ss
->
subs¸ùti⁄s
,

10850 (*
ss
->
subs¸ùti⁄s
Ë* (ss->
num_subs¸ùti⁄s
 + 
num_subs
));

10851 i‡(
	gã
 =
NULL
) {

10852 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

10855 
	gss
->
	gsubs¸ùti⁄s
 = 
ã
;

10856 
	gpos
 = 0;

10857 
	gpos
 < (Ë
	gmsg
->
	g∑ylﬂd
.
	gÀn
 &&

10858 (
	gpos
 = 
mg_mqâ_√xt_subs¸ibe_t›ic
(
msg
, &
t›ic
, &
qos
, 
pos
)) != -1;

10859 
	gss
->
	gnum_subs¸ùti⁄s
++) {

10860 
	gã
 = &
ss
->
subs¸ùti⁄s
[ss->
num_subs¸ùti⁄s
];

10861 
	gã
->
	gt›ic
 = (*Ë
MG_MALLOC
(
t›ic
.
Àn
 + 1);

10862 
	gã
->
	gqos
 = 
qos
;

10863 
mem˝y
((*Ë
ã
->
t›ic
,Å›ic.
p
,Å›ic.
Àn
);

10864 ((*Ë
	gã
->
	gt›ic
)[
t›ic
.
Àn
] = '\0';

10868 i‡(
	gpos
 =(Ë
msg
->
∑ylﬂd
.
Àn
) {

10869 
mg_mqâ_suback
(
nc
, 
qoss
, 
num_subs
, 
msg
->
mesßge_id
);

10872 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

10876 
mg_mqâ_brokî_h™dÀ_publish
(
mg_mqâ_brokî
 *
brk
,

10877 
mg_mqâ_mesßge
 *
msg
) {

10878 
mg_mqâ_£ssi⁄
 *
	gs
;

10879 
size_t
 
	gi
;

10881 
	gs
 = 
mg_mqâ_√xt
(
brk
, 
NULL
); s !NULL; s = mg_mqâ_√xt(brk, 
s
)) {

10882 
	gi
 = 0; i < 
	gs
->
	gnum_subs¸ùti⁄s
; i++) {

10883 i‡(
mg_mqâ_vm©ch_t›ic_ex¥essi⁄
(
s
->
subs¸ùti⁄s
[
i
].
t›ic
,

10884 
msg
->
t›ic
)) {

10885 
	gbuf
[100], *
	gp
 = 
buf
;

10886 
mg_a•rötf
(&
p
, (
buf
), "%.*s", (Ë
msg
->
t›ic
.
Àn
,

10887 
msg
->
t›ic
.
p
);

10888 i‡(
	gp
 =
NULL
) {

10891 
mg_mqâ_publish
(
s
->
nc
, 
p
, 0, 0, 
msg
->
∑ylﬂd
.p, msg->∑ylﬂd.
Àn
);

10892 i‡(
	gp
 !
buf
) {

10893 
MG_FREE
(
p
);

10901 
mg_mqâ_brokî
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
d©a
) {

10902 
mg_mqâ_mesßge
 *
	gmsg
 = (mg_mqâ_mesßgê*Ë
d©a
;

10903 
mg_mqâ_brokî
 *
	gbrk
;

10905 i‡(
	gnc
->
	gli°íî
) {

10906 
	gbrk
 = (
mg_mqâ_brokî
 *Ë
nc
->
li°íî
->
¥iv_2
;

10908 
	gbrk
 = (
mg_mqâ_brokî
 *Ë
nc
->
¥iv_2
;

10911 
	gev
) {

10912 
	gMG_EV_ACCEPT
:

10913 i‡(
nc
->
¥Ÿo_d©a
 =
NULL
Ë
mg_£t_¥Ÿocﬁ_mqâ
(nc);

10914 
	gnc
->
	g¥iv_2
 = 
NULL
;

10916 
	gMG_EV_MQTT_CONNECT
:

10917 i‡(
nc
->
¥iv_2
 =
NULL
) {

10918 
mg_mqâ_brokî_h™dÀ_c⁄√˘
(
brk
, 
nc
);

10921 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

10924 
	gMG_EV_MQTT_SUBSCRIBE
:

10925 i‡(
nc
->
¥iv_2
 !
NULL
) {

10926 
mg_mqâ_brokî_h™dÀ_subs¸ibe
(
nc
, 
msg
);

10929 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

10932 
	gMG_EV_MQTT_PUBLISH
:

10933 i‡(
nc
->
¥iv_2
 !
NULL
) {

10934 
mg_mqâ_brokî_h™dÀ_publish
(
brk
, 
msg
);

10937 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

10940 
	gMG_EV_CLOSE
:

10941 i‡(
nc
->
li°íî
 &&Çc->
¥iv_2
 !
NULL
) {

10942 
mg_mqâ_˛o£_£ssi⁄
((
mg_mqâ_£ssi⁄
 *Ë
nc
->
¥iv_2
);

10948 
mg_mqâ_£ssi⁄
 *
mg_mqâ_√xt
(
mg_mqâ_brokî
 *
brk
,

10949 
mg_mqâ_£ssi⁄
 *
s
) {

10950  
	gs
 =
NULL
 ? 
LIST_FIRST
(&
brk
->
£ssi⁄s
Ë: 
LIST_NEXT
(
s
, 
lök
);

10954 #ifde‡
MG_MODULE_LINES


10962 #i‡
MG_ENABLE_DNS


10967 
	gmg_dns_tid
 = 0xa0;

10969 
	smg_dns_hódî
 {

10970 
uöt16_t
 
	gå™ß˘i⁄_id
;

10971 
uöt16_t
 
	gÊags
;

10972 
uöt16_t
 
	gnum_que°i⁄s
;

10973 
uöt16_t
 
	gnum_™swîs
;

10974 
uöt16_t
 
	gnum_auth‹ôy_¥s
;

10975 
uöt16_t
 
	gnum_Ÿhî_¥s
;

10978 
mg_dns_ªsour˚_ªc‹d
 *
mg_dns_√xt_ªc‹d
(

10979 
mg_dns_mesßge
 *
msg
, 
quîy
,

10980 
mg_dns_ªsour˚_ªc‹d
 *
¥ev
) {

10981 
mg_dns_ªsour˚_ªc‹d
 *
	gº
;

10983 
	gº
 = (
¥ev
 =
NULL
 ? 
msg
->
™swîs
 :Örev + 1);

10984 
	gº
 - 
	gmsg
->
	g™swîs
 < msg->
	gnum_™swîs
;Ñr++) {

10985 i‡(
	gº
->
	gπy≥
 =
quîy
) {

10986  
º
;

10989  
	gNULL
;

10992 
mg_dns_∑r£_ªc‹d_d©a
(
mg_dns_mesßge
 *
msg
,

10993 
mg_dns_ªsour˚_ªc‹d
 *
º
, *
d©a
,

10994 
size_t
 
d©a_Àn
) {

10995 
	gº
->
	gπy≥
) {

10996 
	gMG_DNS_A_RECORD
:

10997 i‡(
d©a_Àn
 < (
ö_addr
)) {

11000 i‡(
	gº
->
	grd©a
.
	gp
 + 
	gd©a_Àn
 > 
	gmsg
->
	gpkt
.∞+ msg->pkt.
	gÀn
) {

11003 
mem˝y
(
d©a
, 
º
->
rd©a
.
p
, 
d©a_Àn
);

11005 #i‡
MG_ENABLE_IPV6


11006 
	gMG_DNS_AAAA_RECORD
:

11007 i‡(
d©a_Àn
 < (
ö6_addr
)) {

11010 
mem˝y
(
d©a
, 
º
->
rd©a
.
p
, 
d©a_Àn
);

11013 
	gMG_DNS_CNAME_RECORD
:

11014 
mg_dns_uncom¥ess_«me
(
msg
, &
º
->
rd©a
, (*Ë
d©a
, 
d©a_Àn
);

11021 
mg_dns_ö£π_hódî
(
mbuf
 *
io
, 
size_t
 
pos
,

11022 
mg_dns_mesßge
 *
msg
) {

11023 
mg_dns_hódî
 
	ghódî
;

11025 
mem£t
(&
hódî
, 0, (header));

11026 
	ghódî
.
	gå™ß˘i⁄_id
 = 
msg
->
å™ß˘i⁄_id
;

11027 
	ghódî
.
	gÊags
 = 
ht⁄s
(
msg
->
Êags
);

11028 
	ghódî
.
	gnum_que°i⁄s
 = 
ht⁄s
(
msg
->
num_que°i⁄s
);

11029 
	ghódî
.
	gnum_™swîs
 = 
ht⁄s
(
msg
->
num_™swîs
);

11031  
mbuf_ö£π
(
io
, 
pos
, &
hódî
, (header));

11034 
mg_dns_c›y_que°i⁄s
(
mbuf
 *
io
, 
mg_dns_mesßge
 *
msg
) {

11035 *
	gbegö
, *
	gíd
;

11036 
mg_dns_ªsour˚_ªc‹d
 *
	gœ°_q
;

11037 i‡(
	gmsg
->
	gnum_que°i⁄s
 <= 0)  0;

11038 
	gbegö
 = (*Ë
msg
->
pkt
.
p
 + (
mg_dns_hódî
);

11039 
	gœ°_q
 = &
msg
->
que°i⁄s
[msg->
num_que°i⁄s
 - 1];

11040 
	gíd
 = (*Ë
œ°_q
->
«me
.
p
 +Üa°_q->«me.
Àn
 + 4;

11041  
mbuf_≠≥nd
(
io
, 
begö
, 
íd
 - begin);

11044 
mg_dns_ícode_«me
(
mbuf
 *
io
, c⁄° *
«me
, 
size_t
 
Àn
) {

11045 c⁄° *
	gs
;

11046 
	gn
;

11047 
size_t
 
	gpos
 = 
io
->
Àn
;

11050 i‡((
	gs
 = 
°rchr
(
«me
, '.')Ë=
NULL
) {

11051 
s
 = 
«me
 + 
Àn
;

11054 i‡(
	gs
 - 
	g«me
 > 127) {

11057 
	gn
 = 
s
 - 
«me
;

11058 
mbuf_≠≥nd
(
io
, &
n
, 1);

11059 
mbuf_≠≥nd
(
io
, 
«me
, 
n
);

11061 i‡(*
	gs
 == '.') {

11062 
n
++;

11065 
	g«me
 +
n
;

11066 
	gÀn
 -
n
;

11067 } *
	gs
 != '\0');

11068 
mbuf_≠≥nd
(
io
, "\0", 1);

11070  
	gio
->
	gÀn
 - 
	gpos
;

11073 
mg_dns_ícode_ªc‹d
(
mbuf
 *
io
, 
mg_dns_ªsour˚_ªc‹d
 *
º
,

11074 c⁄° *
«me
, 
size_t
 
∆í
, c⁄° *
rd©a
,

11075 
size_t
 
æí
) {

11076 
size_t
 
	gpos
 = 
io
->
Àn
;

11077 
uöt16_t
 
	gu16
;

11078 
uöt32_t
 
	gu32
;

11080 i‡(
	gº
->
	gköd
 =
MG_DNS_INVALID_RECORD
) {

11084 i‡(
mg_dns_ícode_«me
(
io
, 
«me
, 
∆í
) == -1) {

11088 
	gu16
 = 
ht⁄s
(
º
->
πy≥
);

11089 
mbuf_≠≥nd
(
io
, &
u16
, 2);

11090 
	gu16
 = 
ht⁄s
(
º
->
r˛ass
);

11091 
mbuf_≠≥nd
(
io
, &
u16
, 2);

11093 i‡(
	gº
->
	gköd
 =
MG_DNS_ANSWER
) {

11094 
u32
 = 
ht⁄l
(
º
->
âl
);

11095 
mbuf_≠≥nd
(
io
, &
u32
, 4);

11097 i‡(
	gº
->
	gπy≥
 =
MG_DNS_CNAME_RECORD
) {

11098 
˛í
;

11100 
size_t
 
	goff
 = 
io
->
Àn
;

11101 
mbuf_≠≥nd
(
io
, &
u16
, 2);

11102 i‡((
	g˛í
 = 
mg_dns_ícode_«me
(
io
, (c⁄° *Ë
rd©a
, 
æí
)) == -1) {

11105 
	gu16
 = 
˛í
;

11106 
	gio
->
	gbuf
[
off
] = 
u16
 >> 8;

11107 
	gio
->
	gbuf
[
off
 + 1] = 
u16
 & 0xff;

11109 
	gu16
 = 
ht⁄s
((
uöt16_t
Ë
æí
);

11110 
mbuf_≠≥nd
(
io
, &
u16
, 2);

11111 
mbuf_≠≥nd
(
io
, 
rd©a
, 
æí
);

11115  
	gio
->
	gÀn
 - 
	gpos
;

11118 
mg_£nd_dns_quîy
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
«me
,

11119 
quîy_ty≥
) {

11120 
mg_dns_mesßge
 *
	gmsg
 =

11121 (
mg_dns_mesßge
 *Ë
MG_CALLOC
(1, (*
msg
));

11122 
mbuf
 
	gpkt
;

11123 
mg_dns_ªsour˚_ªc‹d
 *
	gº
 = &
msg
->
que°i⁄s
[0];

11125 
DBG
(("%†%d", 
«me
, 
quîy_ty≥
));

11127 
mbuf_öô
(&
pkt
, 64 );

11129 
	gmsg
->
	gå™ß˘i⁄_id
 = ++
mg_dns_tid
;

11130 
	gmsg
->
	gÊags
 = 0x100;

11131 
	gmsg
->
	gnum_que°i⁄s
 = 1;

11133 
mg_dns_ö£π_hódî
(&
pkt
, 0, 
msg
);

11135 
	gº
->
	gπy≥
 = 
quîy_ty≥
;

11136 
	gº
->
	gr˛ass
 = 1;

11137 
	gº
->
	gköd
 = 
MG_DNS_QUESTION
;

11139 i‡(
mg_dns_ícode_ªc‹d
(&
pkt
, 
º
, 
«me
, 
°æí
“ame), 
NULL
, 0) == -1) {

11141 
˛ónup
;

11145 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
)) {

11146 
uöt16_t
 
	gÀn
 = 
ht⁄s
((uöt16_tË
pkt
.
Àn
);

11147 
mbuf_ö£π
(&
pkt
, 0, &
Àn
, 2);

11150 
mg_£nd
(
nc
, 
pkt
.
buf
,Ökt.
Àn
);

11151 
mbuf_‰ì
(&
pkt
);

11153 
	g˛ónup
:

11154 
MG_FREE
(
msg
);

11157 *
mg_∑r£_dns_ªsour˚_ªc‹d
(

11158 *
d©a
, *
íd
, 
mg_dns_ªsour˚_ªc‹d
 *
º
,

11159 
ª∂y
) {

11160 *
	g«me
 = 
d©a
;

11161 
	gchunk_Àn
, 
	gd©a_Àn
;

11163 
	gd©a
 < 
	gíd
 && (
	gchunk_Àn
 = *
d©a
)) {

11164 i‡(((*Ë
d©a
)[0] & 0xc0) {

11165 
d©a
 += 1;

11168 
	gd©a
 +
chunk_Àn
 + 1;

11171 i‡(
	gd©a
 > 
	gíd
 - 5) {

11172  
	gNULL
;

11175 
	gº
->
	g«me
.
	gp
 = (*Ë
«me
;

11176 
	gº
->
	g«me
.
	gÀn
 = 
d©a
 - 
«me
 + 1;

11177 
	gd©a
++;

11179 
	gº
->
	gπy≥
 = 
d©a
[0] << 8 | data[1];

11180 
	gd©a
 += 2;

11182 
	gº
->
	gr˛ass
 = 
d©a
[0] << 8 | data[1];

11183 
	gd©a
 += 2;

11185 
	gº
->
	gköd
 = 
ª∂y
 ? 
MG_DNS_ANSWER
 : 
MG_DNS_QUESTION
;

11186 i‡(
	gª∂y
) {

11187 i‡(
	gd©a
 >
íd
 - 6) {

11188  
NULL
;

11191 
	gº
->
	gâl
 = (
uöt32_t
Ë
d©a
[0] << 24 | (uint32_t) data[1] << 16 |

11192 
d©a
[2] << 8 | data[3];

11193 
	gd©a
 += 4;

11195 
	gd©a_Àn
 = *
d©a
 << 8 | *(data + 1);

11196 
	gd©a
 += 2;

11198 
	gº
->
	grd©a
.
	gp
 = (*Ë
d©a
;

11199 
	gº
->
	grd©a
.
	gÀn
 = 
d©a_Àn
;

11200 
	gd©a
 +
d©a_Àn
;

11202  
	gd©a
;

11205 
mg_∑r£_dns
(c⁄° *
buf
, 
Àn
, 
mg_dns_mesßge
 *
msg
) {

11206 
mg_dns_hódî
 *
	ghódî
 = (mg_dns_hódî *Ë
buf
;

11207 *
	gd©a
 = (*Ë
buf
 + (*
hódî
);

11208 *
	gíd
 = (*Ë
buf
 + 
Àn
;

11209 
	gi
;

11211 
mem£t
(
msg
, 0, (*msg));

11212 
	gmsg
->
	gpkt
.
	gp
 = 
buf
;

11213 
	gmsg
->
	gpkt
.
	gÀn
 = 
Àn
;

11215 i‡(
	gÀn
 < (Ë(*
	ghódî
))  -1;

11217 
	gmsg
->
	gå™ß˘i⁄_id
 = 
hódî
->
å™ß˘i⁄_id
;

11218 
	gmsg
->
	gÊags
 = 
¡ohs
(
hódî
->
Êags
);

11219 
	gmsg
->
	gnum_que°i⁄s
 = 
¡ohs
(
hódî
->
num_que°i⁄s
);

11220 i‡(
	gmsg
->
	gnum_que°i⁄s
 > (Ë
ARRAY_SIZE
(
msg
->
que°i⁄s
)) {

11221 
	gmsg
->
	gnum_que°i⁄s
 = (Ë
ARRAY_SIZE
(
msg
->
que°i⁄s
);

11223 
	gmsg
->
	gnum_™swîs
 = 
¡ohs
(
hódî
->
num_™swîs
);

11224 i‡(
	gmsg
->
	gnum_™swîs
 > (Ë
ARRAY_SIZE
(
msg
->
™swîs
)) {

11225 
	gmsg
->
	gnum_™swîs
 = (Ë
ARRAY_SIZE
(
msg
->
™swîs
);

11228 
	gi
 = 0; i < 
	gmsg
->
	gnum_que°i⁄s
; i++) {

11229 
	gd©a
 = 
mg_∑r£_dns_ªsour˚_ªc‹d
(
d©a
, 
íd
, &
msg
->
que°i⁄s
[
i
], 0);

11230 i‡(
	gd©a
 =
NULL
)  -1;

11233 
	gi
 = 0; i < 
	gmsg
->
	gnum_™swîs
; i++) {

11234 
	gd©a
 = 
mg_∑r£_dns_ªsour˚_ªc‹d
(
d©a
, 
íd
, &
msg
->
™swîs
[
i
], 1);

11235 i‡(
	gd©a
 =
NULL
)  -1;

11241 
size_t
 
mg_dns_uncom¥ess_«me
(
mg_dns_mesßge
 *
msg
, 
mg_°r
 *
«me
,

11242 *
d°
, 
d°_Àn
) {

11243 
	gchunk_Àn
, 
	gnum_±rs
 = 0;

11244 *
	gﬁd_d°
 = 
d°
;

11245 c⁄° *
	gd©a
 = (*Ë
«me
->
p
;

11246 c⁄° *
	gíd
 = (*Ë
msg
->
pkt
.
p
 + msg->pkt.
Àn
;

11248 i‡(
	gd©a
 >
íd
) {

11252 (
	gchunk_Àn
 = *
d©a
++)) {

11253 
Àeway
 = 
d°_Àn
 - (
d°
 - 
ﬁd_d°
);

11254 i‡(
	gd©a
 >
íd
) {

11258 i‡((
	gchunk_Àn
 & 0xc0) == 0xc0) {

11259 
uöt16_t
 
off
 = (
d©a
[-1] & (~0xc0)) << 8 | data[0];

11260 i‡(
	goff
 >
msg
->
pkt
.
Àn
) {

11264 i‡(++
	gnum_±rs
 > 15) {

11267 
	gd©a
 = (*Ë
msg
->
pkt
.
p
 + 
off
;

11270 i‡(
	gchunk_Àn
 > 63) {

11273 i‡(
	gchunk_Àn
 > 
	gÀeway
) {

11274 
	gchunk_Àn
 = 
Àeway
;

11277 i‡(
	gd©a
 + 
	gchunk_Àn
 >
íd
) {

11281 
mem˝y
(
d°
, 
d©a
, 
chunk_Àn
);

11282 
	gd©a
 +
chunk_Àn
;

11283 
	gd°
 +
chunk_Àn
;

11284 
	gÀeway
 -
chunk_Àn
;

11285 i‡(
	gÀeway
 == 0) {

11286  
d°
 - 
ﬁd_d°
;

11288 *
	gd°
++ = '.';

11291 i‡(
	gd°
 !
ﬁd_d°
) {

11292 *--
d°
 = 0;

11294  
	gd°
 - 
	gﬁd_d°
;

11297 
dns_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

11298 *
ev_d©a
 
MG_UD_ARG
(*
u£r_d©a
)) {

11299 
mbuf
 *
	gio
 = &
nc
->
ªcv_mbuf
;

11300 
mg_dns_mesßge
 
	gmsg
;

11303 
	gnc
->
h™dÀr
(
nc
, 
ev
, 
ev_d©a
 
MG_UD_ARG
(
u£r_d©a
));

11305 
	gev
) {

11306 
	gMG_EV_RECV
:

11307 i‡(!(
nc
->
Êags
 & 
MG_F_UDP
)) {

11308 
mbuf_ªmove
(&
nc
->
ªcv_mbuf
, 2);

11310 i‡(
mg_∑r£_dns
(
nc
->
ªcv_mbuf
.
buf
,Çc->ªcv_mbuf.
Àn
, &
msg
) == -1) {

11312 
mem£t
(&
msg
, 0, (msg));

11313 
	gmsg
.
	gÊags
 = 0x8081;

11314 
mg_dns_ö£π_hódî
(
io
, 0, &
msg
);

11315 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
)) {

11316 
uöt16_t
 
	gÀn
 = 
ht⁄s
((uöt16_tË
io
->
Àn
);

11317 
mbuf_ö£π
(
io
, 0, &
Àn
, 2);

11319 
mg_£nd
(
nc
, 
io
->
buf
, io->
Àn
);

11322 
	gnc
->
h™dÀr
(
nc
, 
MG_DNS_MESSAGE
, &
msg
 
MG_UD_ARG
(
u£r_d©a
));

11324 
mbuf_ªmove
(
io
, io->
Àn
);

11329 
mg_£t_¥Ÿocﬁ_dns
(
mg_c⁄√˘i⁄
 *
nc
) {

11330 
	gnc
->
	g¥Ÿo_h™dÀr
 = 
dns_h™dÀr
;

11334 #ifde‡
MG_MODULE_LINES


11342 #i‡
MG_ENABLE_DNS_SERVER


11347 
mg_dns_ª∂y
 
mg_dns_¸óã_ª∂y
(
mbuf
 *
io
,

11348 
mg_dns_mesßge
 *
msg
) {

11349 
mg_dns_ª∂y
 
	gªp
;

11350 
	gªp
.
	gmsg
 = 
msg
;

11351 
	gªp
.
	gio
 = 
io
;

11352 
	gªp
.
	g°¨t
 = 
io
->
Àn
;

11355 
	gmsg
->
	gÊags
 |= 0x8080;

11356 
mg_dns_c›y_que°i⁄s
(
io
, 
msg
);

11358 
	gmsg
->
	gnum_™swîs
 = 0;

11359  
	gªp
;

11362 
mg_dns_£nd_ª∂y
(
mg_c⁄√˘i⁄
 *
nc
, 
mg_dns_ª∂y
 *
r
) {

11363 
size_t
 
	g£¡
 = 
r
->
io
->
Àn
 -Ñ->
°¨t
;

11364 
mg_dns_ö£π_hódî
(
r
->
io
,Ñ->
°¨t
,Ñ->
msg
);

11365 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
)) {

11366 
uöt16_t
 
	gÀn
 = 
ht⁄s
((uöt16_tË
£¡
);

11367 
mbuf_ö£π
(
r
->
io
,Ñ->
°¨t
, &
Àn
, 2);

11370 i‡(&
	gnc
->
	g£nd_mbuf
 !
r
->
io
) {

11371 
mg_£nd
(
nc
, 
r
->
io
->
buf
 +Ñ->
°¨t
,Ñ->io->
Àn
 -Ñ->start);

11372 
	gr
->
	gio
->
	gÀn
 = 
r
->
°¨t
;

11376 
mg_dns_ª∂y_ªc‹d
(
mg_dns_ª∂y
 *
ª∂y
,

11377 
mg_dns_ªsour˚_ªc‹d
 *
que°i⁄
,

11378 c⁄° *
«me
, 
πy≥
, 
âl
, c⁄° *
rd©a
,

11379 
size_t
 
rd©a_Àn
) {

11380 
mg_dns_mesßge
 *
	gmsg
 = (mg_dns_mesßgê*Ë
ª∂y
->
msg
;

11381 
	g∫ame
[512];

11382 
mg_dns_ªsour˚_ªc‹d
 *
	g™s
 = &
msg
->
™swîs
[msg->
num_™swîs
];

11383 i‡(
	gmsg
->
	gnum_™swîs
 >
MG_MAX_DNS_ANSWERS
) {

11387 i‡(
	g«me
 =
NULL
) {

11388 
«me
 = 
∫ame
;

11389 
	g∫ame
[511] = 0;

11390 
mg_dns_uncom¥ess_«me
(
msg
, &
que°i⁄
->
«me
, 
∫ame
, (rname) - 1);

11393 *
	g™s
 = *
que°i⁄
;

11394 
	g™s
->
	gköd
 = 
MG_DNS_ANSWER
;

11395 
	g™s
->
	gπy≥
 = 
πy≥
;

11396 
	g™s
->
	gâl
 = 
âl
;

11398 i‡(
mg_dns_ícode_ªc‹d
(
ª∂y
->
io
, 
™s
, 
«me
, 
°æí
“ame), 
rd©a
,

11399 
rd©a_Àn
) == -1) {

11403 
	gmsg
->
	gnum_™swîs
++;

11408 #ifde‡
MG_MODULE_LINES


11416 #i‡
MG_ENABLE_ASYNC_RESOLVER


11421 #i‚de‡
MG_DEFAULT_NAMESERVER


11422 
	#MG_DEFAULT_NAMESERVER
 "8.8.8.8"

	)

11425 
	smg_ªsﬁve_async_ªque°
 {

11426 
	g«me
[1024];

11427 
	gquîy
;

11428 
mg_ªsﬁve_ˇŒback_t
 
	gˇŒback
;

11429 *
	gd©a
;

11430 
time_t
 
	gtimeout
;

11431 
	gmax_ªåõs
;

11432 
mg_ªsﬁve_îr
 
	gîr
;

11435 
time_t
 
	gœ°_time
;

11436 
	gªåõs
;

11444 
mg_gë_ù_addªss_of_«me£rvî
(*
«me
, 
size_t
 
«me_Àn
) {

11445 
	gªt
 = -1;

11447 #ifde‡
_WIN32


11448 
	gi
;

11449 
LONG
 
	gîr
;

11450 
HKEY
 
	ghKey
, 
	ghSub
;

11451 
wch¨_t
 
	gsubkey
[512], 
	gvÆue
[128],

11452 *
	gkey
 = 
L
"SYSTEM\\ControlSet001\\Services\\Tcpip\\Parameters\\Interfaces";

11454 i‡((
	gîr
 = 
RegO≥nKeyExW
(
HKEY_LOCAL_MACHINE
, 
key
, 0, 
KEY_READ
, &
hKey
)) !=

11455 
ERROR_SUCCESS
) {

11456 
Ârötf
(
°dîr
, "ˇ¬Ÿ o≥¿ªg key %S: %ld\n", 
key
, 
îr
);

11457 
	gªt
 = -1;

11459 
	gªt
 = -1, 
	gi
 = 0; 1; i++) {

11460 
DWORD
 
	gsubkey_size
 = (
subkey
), 
	gty≥
, 
	gÀn
 = (
vÆue
);

11461 i‡(
RegEnumKeyExW
(
hKey
, 
i
, 
subkey
, &
subkey_size
, 
NULL
, NULL, NULL,

11462 
NULL
Ë!
ERROR_SUCCESS
) {

11465 i‡(
RegO≥nKeyExW
(
hKey
, 
subkey
, 0, 
KEY_READ
, &
hSub
Ë=
ERROR_SUCCESS
 &&

11466 ((
RegQuîyVÆueExW
(
hSub
, 
L
"NameSîvî", 0, &
ty≥
, (*Ë
vÆue
,

11467 &
Àn
Ë=
ERROR_SUCCESS
 &&

11468 
vÆue
[0] != '\0') ||

11469 (
RegQuîyVÆueExW
(
hSub
, 
L
"Dh˝NameSîvî", 0, &
ty≥
, (*Ë
vÆue
,

11470 &
Àn
Ë=
ERROR_SUCCESS
 &&

11471 
vÆue
[0] != '\0'))) {

11479 
wch¨_t
 *
comma
 = 
wcschr
(
vÆue
, ',');

11480 i‡(
	gcomma
 !
NULL
) {

11481 *
comma
 = '\0';

11484 
¢¥ötf
(
«me
, 
«me_Àn
, "%S", 
vÆue
);

11485 
	gªt
 = 0;

11486 
RegClo£Key
(
hSub
);

11490 
RegClo£Key
(
hKey
);

11492 #ñi‡
MG_ENABLE_FILESYSTEM
 && 
deföed
(
MG_RESOLV_CONF_FILE_NAME
)

11493 
FILE
 *
	gÂ
;

11494 
	glöe
[512];

11496 i‡((
	gÂ
 = 
mg_f›í
(
MG_RESOLV_CONF_FILE_NAME
, "r")Ë=
NULL
) {

11497 
ªt
 = -1;

11500 
	gªt
 = -1; 
fgës
(
löe
, ÷öe), 
Â
Ë!
NULL
;) {

11501 
	ga
, 
	gb
, 
	gc
, 
	gd
;

11502 i‡(
ssˇnf
(
löe
, "«me£rvî %u.%u.%u.%u", &
a
, &
b
, &
c
, &
d
) == 4) {

11503 
¢¥ötf
(
«me
, 
«me_Àn
, "%u.%u.%u.%u", 
a
, 
b
, 
c
, 
d
);

11504 
	gªt
 = 0;

11508 (Ë
f˛o£
(
Â
);

11511 
¢¥ötf
(
«me
, 
«me_Àn
, "%s", 
MG_DEFAULT_NAMESERVER
);

11514  
	gªt
;

11517 
mg_ªsﬁve_‰om_ho°s_fûe
(c⁄° *
«me
, 
sockë_addªss
 *
uß
) {

11518 #i‡
MG_ENABLE_FILESYSTEM
 && 
deföed
(
MG_HOSTS_FILE_NAME
)

11520 
FILE
 *
	gÂ
;

11521 
	glöe
[1024];

11522 *
	gp
;

11523 
	gÆüs
[256];

11524 
	ga
, 
	gb
, 
	gc
, 
	gd
;

11525 
	gÀn
 = 0;

11527 i‡((
	gÂ
 = 
mg_f›í
(
MG_HOSTS_FILE_NAME
, "r")Ë=
NULL
) {

11531 ; 
fgës
(
löe
, ÷öe), 
Â
Ë!
NULL
;) {

11532 i‡(
	glöe
[0] == '#') ;

11534 i‡(
ssˇnf
(
löe
, "%u.%u.%u.%u%n", &
a
, &
b
, &
c
, &
d
, &
Àn
) == 0) {

11538 
	gp
 = 
löe
 + 
Àn
; 
ssˇnf
(
p
, "%s%n", 
Æüs
, &len) == 1;Ö +=Üen) {

11539 i‡(
°rcmp
(
Æüs
, 
«me
) == 0) {

11540 
uß
->
sö
.
sö_addr
.
s_addr
 = 
ht⁄l
(
a
 << 24 | 
b
 << 16 | 
c
 << 8 | 
d
);

11541 
f˛o£
(
Â
);

11547 
f˛o£
(
Â
);

11549 (Ë
	g«me
;

11550 (Ë
	guß
;

11556 
mg_ªsﬁve_async_eh
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

11557 *
d©a
 
MG_UD_ARG
(*
u£r_d©a
)) {

11558 
time_t
 
	gnow
 = (time_tË
mg_time
();

11559 
mg_ªsﬁve_async_ªque°
 *
	gªq
;

11560 
mg_dns_mesßge
 *
	gmsg
;

11561 
	gfú°
 = 0;

11562 #i‡!
MG_ENABLE_CALLBACK_USERDATA


11563 *
	gu£r_d©a
 = 
nc
->
u£r_d©a
;

11566 i‡(
	gev
 !
MG_EV_POLL
Ë
DBG
(("ev=%d u£r_d©a=%p", 
ev
, 
u£r_d©a
));

11568 
	gªq
 = (
mg_ªsﬁve_async_ªque°
 *Ë
u£r_d©a
;

11570 i‡(
	gªq
 =
NULL
) {

11574 
	gev
) {

11575 
	gMG_EV_CONNECT
:

11577 
fú°
 = 1;

11579 
	gMG_EV_POLL
:

11580 i‡(
ªq
->
ªåõs
 >Ñeq->
max_ªåõs
) {

11581 
ªq
->
îr
 = 
MG_RESOLVE_EXCEEDED_RETRY_COUNT
;

11582 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

11585 i‡(
	gfú°
 || 
	gnow
 - 
	gªq
->
	gœ°_time
 >
ªq
->
timeout
) {

11586 
mg_£nd_dns_quîy
(
nc
, 
ªq
->
«me
,Ñeq->
quîy
);

11587 
	gªq
->
	gœ°_time
 = 
now
;

11588 
	gªq
->
	gªåõs
++;

11591 
	gMG_EV_RECV
:

11592 
msg
 = (
mg_dns_mesßge
 *Ë
MG_MALLOC
((*msg));

11593 i‡(
mg_∑r£_dns
(
nc
->
ªcv_mbuf
.
buf
, *(*Ë
d©a
, 
msg
) == 0 &&

11594 
msg
->
num_™swîs
 > 0) {

11595 
ªq
->
ˇŒback
(
msg
,Ñeq->
d©a
, 
MG_RESOLVE_OK
);

11596 
	gnc
->
	gu£r_d©a
 = 
NULL
;

11597 
MG_FREE
(
ªq
);

11599 
	gªq
->
	gîr
 = 
MG_RESOLVE_NO_ANSWERS
;

11601 
MG_FREE
(
msg
);

11602 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

11604 
	gMG_EV_SEND
:

11609 
nc
->
Êags
 &~
MG_F_CLOSE_IMMEDIATELY
;

11610 
mbuf_ªmove
(&
nc
->
£nd_mbuf
,Çc->£nd_mbuf.
Àn
);

11612 
	gMG_EV_TIMER
:

11613 
ªq
->
îr
 = 
MG_RESOLVE_TIMEOUT
;

11614 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

11616 
	gMG_EV_CLOSE
:

11618 i‡(
ªq
 !
NULL
) {

11619 
addr
[32];

11620 
mg_sock_addr_to_°r
(&
nc
->
ß
, 
addr
, ◊ddr), 
MG_SOCK_STRINGIFY_IP
);

11621 #ifde‡
MG_LOG_DNS_FAILURES


11622 
LOG
(
LL_ERROR
, ("FaûedÅÿªsﬁvê'%s', sîvî %s", 
ªq
->
«me
, 
addr
));

11624 
	gªq
->
ˇŒback
(
NULL
, 
ªq
->
d©a
,Ñeq->
îr
);

11625 
	gnc
->
	gu£r_d©a
 = 
NULL
;

11626 
MG_FREE
(
ªq
);

11632 
mg_ªsﬁve_async
(
mg_mgr
 *
mgr
, c⁄° *
«me
, 
quîy
,

11633 
mg_ªsﬁve_ˇŒback_t
 
cb
, *
d©a
) {

11634 
mg_ªsﬁve_async_›ts
 
	g›ts
;

11635 
mem£t
(&
›ts
, 0, (opts));

11636  
mg_ªsﬁve_async_›t
(
mgr
, 
«me
, 
quîy
, 
cb
, 
d©a
, 
›ts
);

11639 
mg_ªsﬁve_async_›t
(
mg_mgr
 *
mgr
, c⁄° *
«me
, 
quîy
,

11640 
mg_ªsﬁve_ˇŒback_t
 
cb
, *
d©a
,

11641 
mg_ªsﬁve_async_›ts
 
›ts
) {

11642 
mg_ªsﬁve_async_ªque°
 *
	gªq
;

11643 
mg_c⁄√˘i⁄
 *
	gdns_nc
;

11644 c⁄° *
	g«me£rvî
 = 
›ts
.
«me£rvî
;

11645 
	gdns_£rvî_buff
[17], 
	g«me£rvî_uæ
[26];

11647 i‡(
	g«me£rvî
 =
NULL
) {

11648 
«me£rvî
 = 
mgr
->nameserver;

11651 
DBG
(("%†%d %p", 
«me
, 
quîy
, 
›ts
.
dns_c⁄n
));

11654 
	gªq
 = (
mg_ªsﬁve_async_ªque°
 *Ë
MG_CALLOC
(1, (*
ªq
));

11655 i‡(
	gªq
 =
NULL
) {

11659 
°∫˝y
(
ªq
->
«me
,Çame, (req->name));

11660 
	gªq
->
	g«me
[(
ªq
->
«me
) - 1] = '\0';

11662 
	gªq
->
	gquîy
 = 
quîy
;

11663 
	gªq
->
	gˇŒback
 = 
cb
;

11664 
	gªq
->
	gd©a
 = 
d©a
;

11666 
	gªq
->
	gmax_ªåõs
 = 
›ts
.
max_ªåõs
 ? opts.max_retries : 2;

11667 
	gªq
->
	gtimeout
 = 
›ts
.
timeout
 ? opts.timeout : 5;

11670 i‡(
	g«me£rvî
 =
NULL
) {

11671 i‡(
mg_gë_ù_addªss_of_«me£rvî
(
dns_£rvî_buff
,

11672 (
dns_£rvî_buff
)) != -1) {

11673 
«me£rvî
 = 
dns_£rvî_buff
;

11675 
	g«me£rvî
 = 
MG_DEFAULT_NAMESERVER
;

11679 
¢¥ötf
(
«me£rvî_uæ
, “ame£rvî_uæ), "udp://%s:53", 
«me£rvî
);

11681 
	gdns_nc
 = 
mg_c⁄√˘
(
mgr
, 
«me£rvî_uæ
, 
MG_CB
(
mg_ªsﬁve_async_eh
, 
NULL
));

11682 i‡(
	gdns_nc
 =
NULL
) {

11683 
MG_FREE
(
ªq
);

11686 
	gdns_nc
->
	gu£r_d©a
 = 
ªq
;

11687 i‡(
	g›ts
.
	gdns_c⁄n
 !
NULL
) {

11688 *
›ts
.
dns_c⁄n
 = 
dns_nc
;

11694 
mg_£t_«me£rvî
(
mg_mgr
 *
mgr
, c⁄° *
«me£rvî
) {

11695 
MG_FREE
((*Ë
mgr
->
«me£rvî
);

11696 
	gmgr
->
	g«me£rvî
 = 
NULL
;

11697 i‡(
	g«me£rvî
 !
NULL
) {

11698 
mgr
->
«me£rvî
 = 
°rdup
(nameserver);

11703 #ifde‡
MG_MODULE_LINES


11726 #i‡
MG_ENABLE_COAP


11728 
mg_cﬂp_‰ì_›ti⁄s
(
mg_cﬂp_mesßge
 *
cm
) {

11729 
	gcm
->
	g›ti⁄s
 !
NULL
) {

11730 
mg_cﬂp_›ti⁄
 *
√xt
 = 
cm
->
›ti⁄s
->next;

11731 
MG_FREE
(
cm
->
›ti⁄s
);

11732 
	gcm
->
	g›ti⁄s
 = 
√xt
;

11736 
mg_cﬂp_›ti⁄
 *
mg_cﬂp_add_›ti⁄
(
mg_cﬂp_mesßge
 *
cm
,

11737 
uöt32_t
 
numbî
, *
vÆue
,

11738 
size_t
 
Àn
) {

11739 
mg_cﬂp_›ti⁄
 *
	g√w_›ti⁄
 =

11740 (
mg_cﬂp_›ti⁄
 *Ë
MG_CALLOC
(1, (*
√w_›ti⁄
));

11742 
	g√w_›ti⁄
->
	gnumbî
 = 
numbî
;

11743 
	g√w_›ti⁄
->
	gvÆue
.
	gp
 = 
vÆue
;

11744 
	g√w_›ti⁄
->
	gvÆue
.
	gÀn
 = 
Àn
;

11746 i‡(
	gcm
->
	g›ti⁄s
 =
NULL
) {

11747 
cm
->
›ti⁄s
 = cm->
›tiomg_èû
 = 
√w_›ti⁄
;

11754 i‡(
	gcm
->
	g›tiomg_èû
->
	gnumbî
 <
√w_›ti⁄
->
numbî
) {

11756 
cm
->
›tiomg_èû
 = cm->›tiomg_èû->
√xt
 = 
√w_›ti⁄
;

11759 
mg_cﬂp_›ti⁄
 *
	gcuºít_›t
 = 
cm
->
›ti⁄s
;

11760 
mg_cﬂp_›ti⁄
 *
	g¥ev_›t
 = 0;

11762 
	gcuºít_›t
 !
NULL
) {

11763 i‡(
cuºít_›t
->
numbî
 > 
√w_›ti⁄
->number) {

11766 
	g¥ev_›t
 = 
cuºít_›t
;

11767 
	gcuºít_›t
 = 
cuºít_›t
->
√xt
;

11770 i‡(
	g¥ev_›t
 !
NULL
) {

11771 
¥ev_›t
->
√xt
 = 
√w_›ti⁄
;

11772 
	g√w_›ti⁄
->
	g√xt
 = 
cuºít_›t
;

11775 
	g√w_›ti⁄
->
	g√xt
 = 
cm
->
›ti⁄s
;

11776 
	gcm
->
	g›ti⁄s
 = 
√w_›ti⁄
;

11781  
	g√w_›ti⁄
;

11789 *
cﬂp_∑r£_hódî
(*
±r
, 
mbuf
 *
io
,

11790 
mg_cﬂp_mesßge
 *
cm
) {

11791 i‡(
	gio
->
	gÀn
 < (
	guöt32_t
)) {

11792 
	gcm
->
	gÊags
 |
MG_COAP_NOT_ENOUGH_DATA
;

11793  
	gNULL
;

11802 i‡(((
	guöt8_t
Ë*
	g±r
 >> 6) != 1) {

11803 
cm
->
Êags
 |
MG_COAP_IGNORE
;

11804  
	gNULL
;

11812 
	gcm
->
	gmsg_ty≥
 = ((
uöt8_t
Ë*
±r
 & 0x30) >> 4;

11813 
	gcm
->
	gÊags
 |
MG_COAP_MSG_TYPE_FIELD
;

11821 
	gcm
->
	gtokí
.
	gÀn
 = *
±r
 & 0x0F;

11822 i‡(
	gcm
->
	gtokí
.
	gÀn
 > 8) {

11823 
	gcm
->
	gÊags
 |
MG_COAP_FORMAT_ERROR
;

11824  
	gNULL
;

11827 
	g±r
++;

11833 
	gcm
->
	gcode_˛ass
 = (
uöt8_t
Ë*
±r
 >> 5;

11834 
	gcm
->
	gcode_dëaû
 = *
±r
 & 0x1F;

11835 
	gcm
->
	gÊags
 |(
MG_COAP_CODE_CLASS_FIELD
 | 
MG_COAP_CODE_DETAIL_FIELD
);

11837 
	g±r
++;

11840 
	gcm
->
	gmsg_id
 = (
uöt8_t
Ë*
±r
 << 8 | (uint8_t) * (ptr + 1);

11841 
	gcm
->
	gÊags
 |
MG_COAP_MSG_ID_FIELD
;

11843 
	g±r
 += 2;

11845  
	g±r
;

11853 *
cﬂp_gë_tokí
(*
±r
, 
mbuf
 *
io
,

11854 
mg_cﬂp_mesßge
 *
cm
) {

11855 i‡(
	gcm
->
	gtokí
.
	gÀn
 != 0) {

11856 i‡(
±r
 + 
cm
->
tokí
.
Àn
 > 
io
->
buf
 + io->len) {

11857 
cm
->
Êags
 |
MG_COAP_NOT_ENOUGH_DATA
;

11858  
	gNULL
;

11860 
	gcm
->
	gtokí
.
	gp
 = 
±r
;

11861 
	g±r
 +
cm
->
tokí
.
Àn
;

11862 
	gcm
->
	gÊags
 |
MG_COAP_TOKEN_FIELD
;

11866  
	g±r
;

11874 
cﬂp_gë_ext_›t
(*
±r
, 
mbuf
 *
io
, 
uöt16_t
 *
›t_öfo
) {

11875 
	gªt
 = 0;

11877 i‡(*
	g›t_öfo
 == 13) {

11882 i‡(
±r
 < 
io
->
buf
 + io->
Àn
) {

11883 *
›t_öfo
 = (
uöt8_t
Ë*
±r
 + 13;

11884 
	gªt
 = (
uöt8_t
);

11886 
	gªt
 = -1;

11888 } i‡(*
	g›t_öfo
 == 14) {

11893 i‡(
±r
 + (
uöt8_t
Ë< 
io
->
buf
 + io->
Àn
) {

11894 *
›t_öfo
 = ((
uöt8_t
Ë*
±r
 << 8 | (uint8_t) * (ptr + 1)) + 269;

11895 
	gªt
 = (
uöt16_t
);

11897 
	gªt
 = -1;

11901  
	gªt
;

11920 *
cﬂp_gë_›ti⁄s
(*
±r
, 
mbuf
 *
io
,

11921 
mg_cﬂp_mesßge
 *
cm
) {

11922 
uöt16_t
 
	g¥ev_›t
 = 0;

11924 i‡(
	g±r
 =
io
->
buf
 + io->
Àn
) {

11926  
NULL
;

11930 
	g±r
 < 
	gio
->
	gbuf
 + io->
	gÀn
 && (
	guöt8_t
) *ptr != 0xFF) {

11931 
uöt16_t
 
›ti⁄_dñè
, 
›ti⁄_Ànght
;

11932 
	g›töfo_Àn
;

11935 
	g›ti⁄_dñè
 = ((
uöt8_t
Ë*
±r
 & 0xF0) >> 4;

11937 
	g›ti⁄_Ànght
 = *
±r
 & 0x0F;

11939 i‡(
	g›ti⁄_dñè
 =15 || 
›ti⁄_Ànght
 == 15) {

11944 
cm
->
Êags
 |
MG_COAP_FORMAT_ERROR
;

11948 
	g±r
++;

11951 
	g›töfo_Àn
 = 
cﬂp_gë_ext_›t
(
±r
, 
io
, &
›ti⁄_dñè
);

11952 i‡(
	g›töfo_Àn
 == -1) {

11953 
cm
->
Êags
 |
MG_COAP_NOT_ENOUGH_DATA
;

11957 
	g±r
 +
›töfo_Àn
;

11960 
	g›töfo_Àn
 = 
cﬂp_gë_ext_›t
(
±r
, 
io
, &
›ti⁄_Ànght
);

11961 i‡(
	g›töfo_Àn
 == -1) {

11962 
cm
->
Êags
 |
MG_COAP_NOT_ENOUGH_DATA
;

11966 
	g±r
 +
›töfo_Àn
;

11973 
	g›ti⁄_dñè
 +
¥ev_›t
;

11975 
mg_cﬂp_add_›ti⁄
(
cm
, 
›ti⁄_dñè
, 
±r
, 
›ti⁄_Ànght
);

11977 
	g¥ev_›t
 = 
›ti⁄_dñè
;

11979 i‡(
	g±r
 + 
	g›ti⁄_Ànght
 > 
	gio
->
	gbuf
 + io->
	gÀn
) {

11980 
	gcm
->
	gÊags
 |
MG_COAP_NOT_ENOUGH_DATA
;

11984 
	g±r
 +
›ti⁄_Ànght
;

11987 i‡((
	gcm
->
	gÊags
 & 
	gMG_COAP_ERROR
) != 0) {

11988 
mg_cﬂp_‰ì_›ti⁄s
(
cm
);

11989  
	gNULL
;

11992 
	gcm
->
	gÊags
 |
MG_COAP_OPTIOMG_FIELD
;

11994 i‡(
	g±r
 =
io
->
buf
 + io->
Àn
) {

11996  
NULL
;

11999 
	g±r
++;

12001  
	g±r
;

12004 
uöt32_t
 
mg_cﬂp_∑r£
(
mbuf
 *
io
, 
mg_cﬂp_mesßge
 *
cm
) {

12005 *
	g±r
;

12007 
mem£t
(
cm
, 0, (*cm));

12009 i‡((
	g±r
 = 
cﬂp_∑r£_hódî
(
io
->
buf
, io, 
cm
)Ë=
NULL
) {

12010  
cm
->
Êags
;

12013 i‡((
	g±r
 = 
cﬂp_gë_tokí
(
±r
, 
io
, 
cm
)Ë=
NULL
) {

12014  
cm
->
Êags
;

12017 i‡((
	g±r
 = 
cﬂp_gë_›ti⁄s
(
±r
, 
io
, 
cm
)Ë=
NULL
) {

12018  
cm
->
Êags
;

12022 
	gcm
->
	g∑ylﬂd
.
	gÀn
 = 
io
->
Àn
 - (
±r
 - io->
buf
);

12023 i‡(
	gcm
->
	g∑ylﬂd
.
	gÀn
 != 0) {

12024 
cm
->
∑ylﬂd
.
p
 = 
±r
;

12025 
	gcm
->
	gÊags
 |
MG_COAP_PAYLOAD_FIELD
;

12028  
	gcm
->
	gÊags
;

12036 
size_t
 
cﬂp_gë_ext_›t_size
(
uöt32_t
 
vÆue
) {

12037 
	gªt
 = 0;

12039 i‡(
	gvÆue
 >13 && 
vÆue
 <= 0xFF + 13) {

12040 
ªt
 = (
uöt8_t
);

12041 } i‡(
	gvÆue
 > 0xFF + 13 && value <= 0xFFFF + 269) {

12042 
ªt
 = (
uöt16_t
);

12045  
	gªt
;

12053 
cﬂp_•lô_›t
(
uöt32_t
 
vÆue
, 
uöt8_t
 *
ba£
, 
uöt16_t
 *
ext
) {

12054 
	gªt
 = 0;

12056 i‡(
	gvÆue
 < 13) {

12057 *
	gba£
 = 
vÆue
;

12058 } i‡(
	gvÆue
 >13 && 
vÆue
 <= 0xFF + 13) {

12059 *
ba£
 = 13;

12060 *
	gext
 = 
vÆue
 - 13;

12061 
	gªt
 = (
uöt8_t
);

12062 } i‡(
	gvÆue
 > 0xFF + 13 && value <= 0xFFFF + 269) {

12063 *
ba£
 = 14;

12064 *
	gext
 = 
vÆue
 - 269;

12065 
	gªt
 = (
uöt16_t
);

12068  
	gªt
;

12076 *
cﬂp_add_uöt16
(*
±r
, 
uöt16_t
 
vÆ
) {

12077 *
	g±r
 = 
vÆ
 >> 8;

12078 
	g±r
++;

12079 *
	g±r
 = 
vÆ
 & 0x00FF;

12080 
	g±r
++;

12081  
	g±r
;

12089 *
cﬂp_add_›t_öfo
(*
±r
, 
uöt16_t
 
vÆ
, 
size_t
 
Àn
) {

12090 i‡(
	gÀn
 =(
uöt8_t
)) {

12091 *
±r
 = (Ë
vÆ
;

12092 
	g±r
++;

12093 } i‡(
	gÀn
 =(
uöt16_t
)) {

12094 
±r
 = 
cﬂp_add_uöt16
’å, 
vÆ
);

12097  
	g±r
;

12105 
uöt32_t
 
cﬂp_ˇlcuœã_∑ckë_size
(
mg_cﬂp_mesßge
 *
cm
,

12106 
size_t
 *
Àn
) {

12107 
mg_cﬂp_›ti⁄
 *
	g›t
;

12108 
uöt32_t
 
	g¥ev_›t_numbî
;

12110 *
	gÀn
 = 4;

12111 i‡(
	gcm
->
	gmsg_ty≥
 > 
	gMG_COAP_MSG_MAX
) {

12112  
	gMG_COAP_ERROR
 | 
	gMG_COAP_MSG_TYPE_FIELD
;

12114 i‡(
	gcm
->
	gtokí
.
	gÀn
 > 8) {

12115  
	gMG_COAP_ERROR
 | 
	gMG_COAP_TOKEN_FIELD
;

12117 i‡(
	gcm
->
	gcode_˛ass
 > 7) {

12118  
	gMG_COAP_ERROR
 | 
	gMG_COAP_CODE_CLASS_FIELD
;

12120 i‡(
	gcm
->
	gcode_dëaû
 > 31) {

12121  
	gMG_COAP_ERROR
 | 
	gMG_COAP_CODE_DETAIL_FIELD
;

12124 *
	gÀn
 +
cm
->
tokí
.
Àn
;

12125 i‡(
	gcm
->
	g∑ylﬂd
.
	gÀn
 != 0) {

12126 *
Àn
 +
cm
->
∑ylﬂd
.len + 1;

12129 
	g›t
 = 
cm
->
›ti⁄s
;

12130 
	g¥ev_›t_numbî
 = 0;

12131 
	g›t
 !
NULL
) {

12132 *
Àn
 += 1;

12133 *
	gÀn
 +
cﬂp_gë_ext_›t_size
(
›t
->
numbî
 - 
¥ev_›t_numbî
);

12134 *
	gÀn
 +
cﬂp_gë_ext_›t_size
((
uöt32_t
Ë
›t
->
vÆue
.
Àn
);

12141 i‡((
	g›t
->
	g√xt
 !
NULL
 && 
›t
->
numbî
 > o±->
√xt
->number) ||

12142 
›t
->
vÆue
.
Àn
 > 0xFFFF + 269 ||

12143 
›t
->
numbî
 - 
¥ev_›t_numbî
 > 0xFFFF + 269) {

12144  
MG_COAP_ERROR
 | 
MG_COAP_OPTIOMG_FIELD
;

12146 *
	gÀn
 +
›t
->
vÆue
.
Àn
;

12147 
	g¥ev_›t_numbî
 = 
›t
->
numbî
;

12148 
	g›t
 = 
›t
->
√xt
;

12154 
uöt32_t
 
mg_cﬂp_compo£
(
mg_cﬂp_mesßge
 *
cm
, 
mbuf
 *
io
) {

12155 
mg_cﬂp_›ti⁄
 *
	g›t
;

12156 
uöt32_t
 
	gªs
, 
	g¥ev_›t_numbî
;

12157 
size_t
 
	g¥ev_io_Àn
, 
	g∑ckë_size
;

12158 *
	g±r
;

12160 
	gªs
 = 
cﬂp_ˇlcuœã_∑ckë_size
(
cm
, &
∑ckë_size
);

12161 i‡(
	gªs
 != 0) {

12162  
ªs
;

12166 
	g¥ev_io_Àn
 = 
io
->
Àn
;

12167 i‡(
mbuf_≠≥nd
(
io
, 
NULL
, 
∑ckë_size
Ë=0Ë 
MG_COAP_ERROR
;

12168 
	g±r
 = 
io
->
buf
 + 
¥ev_io_Àn
;

12176 *
	g±r
 = (1 << 6Ë| (
cm
->
msg_ty≥
 << 4Ë| (
uöt8_t
)(cm->
tokí
.
Àn
);

12177 
	g±r
++;

12180 *
	g±r
 = (
cm
->
code_˛ass
 << 5Ë| (cm->
code_dëaû
);

12181 
	g±r
++;

12183 
	g±r
 = 
cﬂp_add_uöt16
(
±r
, 
cm
->
msg_id
);

12185 i‡(
	gcm
->
	gtokí
.
	gÀn
 != 0) {

12186 
mem˝y
(
±r
, 
cm
->
tokí
.
p
, cm->tokí.
Àn
);

12187 
	g±r
 +
cm
->
tokí
.
Àn
;

12190 
	g›t
 = 
cm
->
›ti⁄s
;

12191 
	g¥ev_›t_numbî
 = 0;

12192 
	g›t
 !
NULL
) {

12193 
uöt8_t
 
dñè_ba£
 = 0, 
	gÀngth_ba£
 = 0;

12194 
uöt16_t
 
	gdñè_ext
 = 0, 
	gÀngth_ext
 = 0;

12196 
size_t
 
	g›t_dñè_Àn
 =

12197 
cﬂp_•lô_›t
(
›t
->
numbî
 - 
¥ev_›t_numbî
, &
dñè_ba£
, &
dñè_ext
);

12198 
size_t
 
	g›t_Ànght_Àn
 =

12199 
cﬂp_•lô_›t
((
uöt32_t
Ë
›t
->
vÆue
.
Àn
, &
Àngth_ba£
, &
Àngth_ext
);

12201 *
	g±r
 = (
dñè_ba£
 << 4Ë| 
Àngth_ba£
;

12202 
	g±r
++;

12204 
	g±r
 = 
cﬂp_add_›t_öfo
(
±r
, 
dñè_ext
, 
›t_dñè_Àn
);

12205 
	g±r
 = 
cﬂp_add_›t_öfo
(
±r
, 
Àngth_ext
, 
›t_Ànght_Àn
);

12207 i‡(
	g›t
->
	gvÆue
.
	gÀn
 != 0) {

12208 
mem˝y
(
±r
, 
›t
->
vÆue
.
p
, o±->vÆue.
Àn
);

12209 
	g±r
 +
›t
->
vÆue
.
Àn
;

12212 
	g¥ev_›t_numbî
 = 
›t
->
numbî
;

12213 
	g›t
 = 
›t
->
√xt
;

12216 i‡(
	gcm
->
	g∑ylﬂd
.
	gÀn
 != 0) {

12217 *
±r
 = () -1;

12218 
	g±r
++;

12219 
mem˝y
(
±r
, 
cm
->
∑ylﬂd
.
p
, cm->∑ylﬂd.
Àn
);

12225 
uöt32_t
 
mg_cﬂp_£nd_mesßge
(
mg_c⁄√˘i⁄
 *
nc
,

12226 
mg_cﬂp_mesßge
 *
cm
) {

12227 
mbuf
 
	g∑ckë_out
;

12228 
uöt32_t
 
	gcompo£_ªs
;

12230 
mbuf_öô
(&
∑ckë_out
, 0);

12231 
	gcompo£_ªs
 = 
mg_cﬂp_compo£
(
cm
, &
∑ckë_out
);

12232 i‡(
	gcompo£_ªs
 != 0) {

12233  
compo£_ªs
;

12236 
mg_£nd
(
nc
, 
∑ckë_out
.
buf
, (Ë∑ckë_out.
Àn
);

12237 
mbuf_‰ì
(&
∑ckë_out
);

12242 
uöt32_t
 
mg_cﬂp_£nd_ack
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
msg_id
) {

12243 
mg_cﬂp_mesßge
 
	gcm
;

12244 
mem£t
(&
cm
, 0, (cm));

12245 
	gcm
.
	gmsg_ty≥
 = 
MG_COAP_MSG_ACK
;

12246 
	gcm
.
	gmsg_id
 = 
msg_id
;

12248  
mg_cﬂp_£nd_mesßge
(
nc
, &
cm
);

12251 
cﬂp_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

12252 *
ev_d©a
 
MG_UD_ARG
(*
u£r_d©a
)) {

12253 
mbuf
 *
	gio
 = &
nc
->
ªcv_mbuf
;

12254 
mg_cﬂp_mesßge
 
	gcm
;

12255 
uöt32_t
 
	g∑r£_ªs
;

12257 
mem£t
(&
cm
, 0, (cm));

12259 
	gnc
->
h™dÀr
(
nc
, 
ev
, 
ev_d©a
 
MG_UD_ARG
(
u£r_d©a
));

12261 
	gev
) {

12262 
	gMG_EV_RECV
:

12263 
∑r£_ªs
 = 
mg_cﬂp_∑r£
(
io
, &
cm
);

12264 i‡((
	g∑r£_ªs
 & 
	gMG_COAP_IGNORE
) == 0) {

12265 i‡((
cm
.
Êags
 & 
MG_COAP_NOT_ENOUGH_DATA
) != 0) {

12270 
cm
.
Êags
 |
MG_COAP_FORMAT_ERROR
;

12272 
	gnc
->
h™dÀr
(
nc
, 
MG_COAP_EVENT_BASE
 + 
cm
.
msg_ty≥
,

12273 &
cm
 
MG_UD_ARG
(
u£r_d©a
));

12276 
mg_cﬂp_‰ì_›ti⁄s
(&
cm
);

12277 
mbuf_ªmove
(
io
, io->
Àn
);

12291 
mg_£t_¥Ÿocﬁ_cﬂp
(
mg_c⁄√˘i⁄
 *
nc
) {

12293 i‡((
	gnc
->
	gÊags
 & 
	gMG_F_UDP
) == 0) {

12297 
	gnc
->
	g¥Ÿo_h™dÀr
 = 
cﬂp_h™dÀr
;

12303 #ifde‡
MG_MODULE_LINES


12315 #i‡
MG_ENABLE_SNTP


12317 
	#SNTP_TIME_OFFSET
 2208988800

	)

12319 #i‚de‡
SNTP_TIMEOUT


12320 
	#SNTP_TIMEOUT
 10

	)

12323 #i‚de‡
SNTP_ATTEMPTS


12324 
	#SNTP_ATTEMPTS
 3

	)

12327 
uöt64_t
 
mg_gë_£c
(uöt64_à
vÆ
) {

12328  (
	gvÆ
 & 0xFFFFFFFF00000000) >> 32;

12331 
uöt64_t
 
mg_gë_u£c
(uöt64_à
vÆ
) {

12332 
uöt64_t
 
	gtmp
 = (
vÆ
 & 0x00000000FFFFFFFF);

12333 
	gtmp
 *= 1000000;

12334 
	gtmp
 >>= 32;

12335  
	gtmp
;

12338 
mg_¡p_to_tv
(
uöt64_t
 
vÆ
, 
timevÆ
 *
tv
) {

12339 
uöt64_t
 
	gtmp
;

12340 
	gtmp
 = 
mg_gë_£c
(
vÆ
);

12341 
	gtmp
 -
SNTP_TIME_OFFSET
;

12342 
	gtv
->
	gtv_£c
 = 
tmp
;

12343 
	gtv
->
	gtv_u£c
 = 
mg_gë_u£c
(
vÆ
);

12346 
mg_gë_¡p_ts
(c⁄° *
¡p
, 
uöt64_t
 *
vÆ
) {

12347 
uöt32_t
 
	gtmp
;

12348 
mem˝y
(&
tmp
, 
¡p
, (tmp));

12349 
	gtmp
 = 
¡ohl
(
tmp
);

12350 *
	gvÆ
 = (
uöt64_t
Ë
tmp
 << 32;

12351 
mem˝y
(&
tmp
, 
¡p
 + 4, (tmp));

12352 
	gtmp
 = 
¡ohl
(
tmp
);

12353 *
	gvÆ
 |
tmp
;

12356 
mg_¢ç_£nd_ªque°
(
mg_c⁄√˘i⁄
 *
c
) {

12357 
uöt8_t
 
	gbuf
[48] = {0};

12363 
	gbuf
[0] = (3 << 6) | (4 << 3) | 3;

12385 #i‚de‡
MG_SNTP_NO_DELAY_CORRECTION


12386 
uöt32_t
 
	g£c
;

12387 
	g£c
 = 
ht⁄l
((
uöt32_t
)(
mg_time
(Ë+ 
SNTP_TIME_OFFSET
));

12388 
mem˝y
(&
buf
[40], &
£c
, (sec));

12391 
mg_£nd
(
c
, 
buf
, (buf));

12394 #i‚de‡
MG_SNTP_NO_DELAY_CORRECTION


12395 
uöt64_t
 
mg_ˇlcuœã_dñay
(uöt64_à
t1
, uöt64_à
t2
, uöt64_à
t3
) {

12397 
uöt64_t
 
	gd1
 = ((
mg_time
(Ë+ 
SNTP_TIME_OFFSET
) * 1000000) -

12398 (
mg_gë_£c
(
t1
Ë* 1000000 + 
mg_gë_u£c
(t1));

12399 
uöt64_t
 
	gd2
 = (
mg_gë_£c
(
t3
Ë* 1000000 + 
mg_gë_u£c
(t3)) -

12400 (
mg_gë_£c
(
t2
Ë* 1000000 + 
mg_gë_u£c
(t2));

12402  (
	gd1
 > 
	gd2
) ? d1 - d2 : 0;

12406 
MG_INTERNAL
 
mg_¢ç_∑r£_ª∂y
(c⁄° *
buf
, 
Àn
,

12407 
mg_¢ç_mesßge
 *
msg
) {

12408 
uöt8_t
 
	ghdr
;

12409 
uöt64_t
 
	gåsm_ts_T3
, 
	gdñay
 = 0;

12410 
	gmode
;

12411 
timevÆ
 
	gtv
;

12413 i‡(
	gÀn
 < 48) {

12417 
	ghdr
 = 
buf
[0];

12419 i‡((
	ghdr
 & 0x38) >> 3 != 4) {

12424 
	gmode
 = 
hdr
 & 0x7;

12425 i‡(
	gmode
 !4 && 
mode
 != 5) {

12430 
mem£t
(
msg
, 0, (*msg));

12432 
	gmsg
->
	gkiss_of_dóth
 = (
buf
[1] == 0);

12434 
mg_gë_¡p_ts
(&
buf
[40], &
åsm_ts_T3
);

12436 #i‚de‡
MG_SNTP_NO_DELAY_CORRECTION


12438 
uöt64_t
 
	g‹ig_ts_T1
, 
	gªcv_ts_T2
;

12439 
mg_gë_¡p_ts
(&
buf
[24], &
‹ig_ts_T1
);

12440 
mg_gë_¡p_ts
(&
buf
[32], &
ªcv_ts_T2
);

12441 
	gdñay
 = 
mg_ˇlcuœã_dñay
(
‹ig_ts_T1
, 
ªcv_ts_T2
, 
åsm_ts_T3
);

12445 
mg_¡p_to_tv
(
åsm_ts_T3
, &
tv
);

12447 
	gmsg
->
	gtime
 = (Ë
tv
.
tv_£c
 + (((Ëtv.
tv_u£c
 + 
dñay
) / 1000000.0);

12452 
mg_¢ç_h™dÀr
(
mg_c⁄√˘i⁄
 *
c
, 
ev
,

12453 *
ev_d©a
 
MG_UD_ARG
(*
u£r_d©a
)) {

12454 
mbuf
 *
	gio
 = &
c
->
ªcv_mbuf
;

12455 
mg_¢ç_mesßge
 
	gmsg
;

12457 
	gc
->
h™dÀr
(
c
, 
ev
, 
ev_d©a
 
MG_UD_ARG
(
u£r_d©a
));

12459 
	gev
) {

12460 
	gMG_EV_RECV
: {

12461 i‡(
mg_¢ç_∑r£_ª∂y
(
io
->
buf
, io->
Àn
, &
msg
) < 0) {

12462 
DBG
(("InvÆid SNTPÖackëÑe˚ived (%d)", (Ë
io
->
Àn
));

12463 
	gc
->
h™dÀr
(
c
, 
MG_SNTP_MALFORMED_REPLY
, 
NULL
 
MG_UD_ARG
(
u£r_d©a
));

12465 
	gc
->
h™dÀr
(
c
, 
MG_SNTP_REPLY
, (*Ë&
msg
 
MG_UD_ARG
(
u£r_d©a
));

12468 
mbuf_ªmove
(
io
, io->
Àn
);

12474 
mg_£t_¥Ÿocﬁ_¢ç
(
mg_c⁄√˘i⁄
 *
c
) {

12475 i‡((
	gc
->
	gÊags
 & 
	gMG_F_UDP
) == 0) {

12479 
	gc
->
	g¥Ÿo_h™dÀr
 = 
mg_¢ç_h™dÀr
;

12484 
mg_c⁄√˘i⁄
 *
mg_¢ç_c⁄√˘
(
mg_mgr
 *
mgr
,

12485 
MG_CB
(
mg_evít_h™dÀr_t
 
evít_h™dÀr
,

12486 *
u£r_d©a
),

12487 c⁄° *
¢ç_£rvî_«me
) {

12488 
mg_c⁄√˘i⁄
 *
	gc
 = 
NULL
;

12489 
	guæ
[100], *
	gp_uæ
 = 
uæ
;

12490 c⁄° *
	g¥Ÿo
 = "", *
	gp‹t
 = "", *
	gtmp
;

12493 
	gtmp
 = 
°rchr
(
¢ç_£rvî_«me
, ':');

12494 i‡(
	gtmp
 !
NULL
 && *(
tmp
 + 1) == '/') {

12495 
tmp
 = 
°rchr
(tmp + 1, ':');

12498 i‡(
	gtmp
 =
NULL
) {

12499 
p‹t
 = ":123";

12503 i‡(
°∫cmp
(
¢ç_£rvî_«me
, "udp://", 6) != 0) {

12504 
¥Ÿo
 = "udp://";

12507 
mg_a•rötf
(&
p_uæ
, (
uæ
), "%s%s%s", 
¥Ÿo
, 
¢ç_£rvî_«me
, 
p‹t
);

12509 
	gc
 = 
mg_c⁄√˘
(
mgr
, 
p_uæ
, 
evít_h™dÀr
 
MG_UD_ARG
(
u£r_d©a
));

12511 i‡(
	gc
 =
NULL
) {

12512 
˛ónup
;

12515 
mg_£t_¥Ÿocﬁ_¢ç
(
c
);

12517 
	g˛ónup
:

12518 i‡(
p_uæ
 !
uæ
) {

12519 
MG_FREE
(
p_uæ
);

12522  
	gc
;

12525 
	s¢ç_d©a
 {

12526 
mg_evít_h™dÀr_t
 
	gh™dî
;

12527 
	gcou¡
;

12530 
mg_¢ç_utû_ev_h™dÀr
(
mg_c⁄√˘i⁄
 *
c
, 
ev
,

12531 *
ev_d©a
 
MG_UD_ARG
(*
u£r_d©a
)) {

12532 #i‡!
MG_ENABLE_CALLBACK_USERDATA


12533 *
	gu£r_d©a
 = 
c
->
u£r_d©a
;

12535 
¢ç_d©a
 *
	gsd
 = (¢ç_d©®*Ë
u£r_d©a
;

12537 
	gev
) {

12538 
	gMG_EV_CONNECT
:

12539 i‡(*(*Ë
ev_d©a
 != 0) {

12540 
mg_ˇŒ
(
c
, 
sd
->
h™dî
, c->
u£r_d©a
, 
MG_SNTP_FAILED
, 
NULL
);

12544 
	gMG_EV_TIMER
:

12545 i‡(
sd
->
cou¡
 <
SNTP_ATTEMPTS
) {

12546 
mg_¢ç_£nd_ªque°
(
c
);

12547 
mg_£t_timî
(
c
, 
mg_time
() + 10);

12548 
	gsd
->
	gcou¡
++;

12550 
mg_ˇŒ
(
c
, 
sd
->
h™dî
, c->
u£r_d©a
, 
MG_SNTP_FAILED
, 
NULL
);

12551 
	gc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

12554 
	gMG_SNTP_MALFORMED_REPLY
:

12555 
mg_ˇŒ
(
c
, 
sd
->
h™dî
, c->
u£r_d©a
, 
MG_SNTP_FAILED
, 
NULL
);

12556 
	gc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

12558 
	gMG_SNTP_REPLY
:

12559 
mg_ˇŒ
(
c
, 
sd
->
h™dî
, c->
u£r_d©a
, 
MG_SNTP_REPLY
, 
ev_d©a
);

12560 
	gc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

12562 
	gMG_EV_CLOSE
:

12563 
MG_FREE
(
u£r_d©a
);

12564 
	gc
->
	gu£r_d©a
 = 
NULL
;

12569 
mg_c⁄√˘i⁄
 *
mg_¢ç_gë_time
(
mg_mgr
 *
mgr
,

12570 
mg_evít_h™dÀr_t
 
evít_h™dÀr
,

12571 c⁄° *
¢ç_£rvî_«me
) {

12572 
mg_c⁄√˘i⁄
 *
	gc
;

12573 
¢ç_d©a
 *
	gsd
 = (¢ç_d©®*Ë
MG_CALLOC
(1, (*
sd
));

12574 i‡(
	gsd
 =
NULL
) {

12575  
NULL
;

12578 
	gc
 = 
mg_¢ç_c⁄√˘
(
mgr
, 
MG_CB
(
mg_¢ç_utû_ev_h™dÀr
, 
sd
),

12579 
¢ç_£rvî_«me
);

12580 i‡(
	gc
 =
NULL
) {

12581 
MG_FREE
(
sd
);

12582  
	gNULL
;

12585 
	gsd
->
	gh™dî
 = 
evít_h™dÀr
;

12586 #i‡!
MG_ENABLE_CALLBACK_USERDATA


12587 
	gc
->
	gu£r_d©a
 = 
sd
;

12590  
	gc
;

12594 #ifde‡
MG_MODULE_LINES


12602 #i‡
MG_ENABLE_SOCKS


12616 
mg_socks5_h™dshake
(
mg_c⁄√˘i⁄
 *
c
) {

12617 
mbuf
 *
	gr
 = &
c
->
ªcv_mbuf
;

12618 i‡(
	gr
->
	gbuf
[0] !
MG_SOCKS_VERSION
) {

12619 
c
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

12620 } i‡(
	gr
->
	gÀn
 > 2 && (
	gsize_t
Ër->
	gbuf
[1] + 2 <
r
->
Àn
) {

12622 
ª∂y
[2] = {
MG_SOCKS_VERSION
, 
MG_SOCKS_HANDSHAKE_FAILURE
};

12623 
	gi
;

12624 
	gi
 = 2; i < 
	gr
->
	gbuf
[1] + 2; i++) {

12626 i‡(
	gr
->
	gbuf
[
i
] =
MG_SOCKS_HANDSHAKE_NOAUTH
Ë
ª∂y
[1] = 
r
->
buf
[i];

12628 
mbuf_ªmove
(
r
, 2 +Ñ->
buf
[1]);

12629 
mg_£nd
(
c
, 
ª∂y
, (reply));

12630 
	gc
->
	gÊags
 |
MG_SOCKS_HANDSHAKE_DONE
;

12634 
disb™d
(
mg_c⁄√˘i⁄
 *
c
) {

12635 
mg_c⁄√˘i⁄
 *
	gc2
 = (mg_c⁄√˘i⁄ *Ë
c
->
u£r_d©a
;

12636 i‡(
	gc2
 !
NULL
) {

12637 
c2
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

12638 
	gc2
->
	gu£r_d©a
 = 
NULL
;

12640 
	gc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

12641 
	gc
->
	gu£r_d©a
 = 
NULL
;

12644 
ªœy_d©a
(
mg_c⁄√˘i⁄
 *
c
) {

12645 
mg_c⁄√˘i⁄
 *
	gc2
 = (mg_c⁄√˘i⁄ *Ë
c
->
u£r_d©a
;

12646 i‡(
	gc2
 !
NULL
) {

12647 
mg_£nd
(
c2
, 
c
->
ªcv_mbuf
.
buf
, c->ªcv_mbuf.
Àn
);

12648 
mbuf_ªmove
(&
c
->
ªcv_mbuf
, c->ªcv_mbuf.
Àn
);

12650 
	gc
->
	gÊags
 |
MG_F_SEND_AND_CLOSE
;

12654 
£rv_ev_h™dÀr
(
mg_c⁄√˘i⁄
 *
c
, 
ev
, *
ev_d©a
) {

12655 i‡(
	gev
 =
MG_EV_CLOSE
) {

12656 
disb™d
(
c
);

12657 } i‡(
	gev
 =
MG_EV_RECV
) {

12658 
ªœy_d©a
(
c
);

12659 } i‡(
	gev
 =
MG_EV_CONNECT
) {

12660 
ªs
 = *(*Ë
ev_d©a
;

12661 i‡(
	gªs
 !0Ë
LOG
(
LL_ERROR
, ("c⁄√˘Éº‹: %d", 
ªs
));

12665 
mg_socks5_c⁄√˘
(
mg_c⁄√˘i⁄
 *
c
, c⁄° *
addr
) {

12666 
mg_c⁄√˘i⁄
 *
	g£rv
 = 
mg_c⁄√˘
(
c
->
mgr
, 
addr
, 
£rv_ev_h™dÀr
);

12667 
	g£rv
->
	gu£r_d©a
 = 
c
;

12668 
	gc
->
	gu£r_d©a
 = 
£rv
;

12680 
mg_socks5_h™dÀ_ªque°
(
mg_c⁄√˘i⁄
 *
c
) {

12681 
mbuf
 *
	gr
 = &
c
->
ªcv_mbuf
;

12682 *
	gp
 = (*Ë
r
->
buf
;

12683 
	gaddr_Àn
 = 4, 
	gª∂y
 = 
MG_SOCKS_SUCCESS
;

12684 
	gvî
, 
	gcmd
, 
	g©yp
;

12685 
	gaddr
[300];

12687 i‡(
	gr
->
	gÀn
 < 8) ;

12688 
	gvî
 = 
p
[0];

12689 
	gcmd
 = 
p
[1];

12690 
	g©yp
 = 
p
[3];

12693 i‡(
	gvî
 !
MG_SOCKS_VERSION
 || 
cmd
 !
MG_SOCKS_CMD_CONNECT
) {

12694 
ª∂y
 = 
MG_SOCKS_CMD_NOT_SUPPORTED
;

12695 } i‡(
	g©yp
 =
MG_SOCKS_ADDR_IPV4
) {

12696 
addr_Àn
 = 4;

12697 i‡(
	gr
->
	gÀn
 < (
	gsize_t
Ë
	gaddr_Àn
 + 6) ;

12698 
¢¥ötf
(
addr
, ◊ddr), "%d.%d.%d.%d:%d", 
p
[4],Ö[5],Ö[6],Ö[7],

12699 
p
[8] << 8 |Ö[9]);

12700 
mg_socks5_c⁄√˘
(
c
, 
addr
);

12701 } i‡(
	g©yp
 =
MG_SOCKS_ADDR_IPV6
) {

12702 
addr_Àn
 = 16;

12703 i‡(
	gr
->
	gÀn
 < (
	gsize_t
Ë
	gaddr_Àn
 + 6) ;

12704 
¢¥ötf
(
addr
, (addr), "[%x:%x:%x:%x:%x:%x:%x:%x]:%d",

12705 
p
[4] << 8 |Ö[5],Ö[6] << 8 |Ö[7],Ö[8] << 8 |Ö[9],

12706 
p
[10] << 8 |Ö[11],Ö[12] << 8 |Ö[13],Ö[14] << 8 |Ö[15],

12707 
p
[16] << 8 |Ö[17],Ö[18] << 8 |Ö[19],Ö[20] << 8 |Ö[21]);

12708 
mg_socks5_c⁄√˘
(
c
, 
addr
);

12709 } i‡(
	g©yp
 =
MG_SOCKS_ADDR_DOMAIN
) {

12710 
addr_Àn
 = 
p
[4] + 1;

12711 i‡(
	gr
->
	gÀn
 < (
	gsize_t
Ë
	gaddr_Àn
 + 6) ;

12712 
¢¥ötf
(
addr
, ◊ddr), "%.*s:%d", 
p
[4],Ö + 5,

12713 
p
[4 + 
addr_Àn
] << 8 |Ö[4 +áddr_len + 1]);

12714 
mg_socks5_c⁄√˘
(
c
, 
addr
);

12716 
	gª∂y
 = 
MG_SOCKS_ADDR_NOT_SUPPORTED
;

12729 
	gbuf
[] = {
MG_SOCKS_VERSION
, 
ª∂y
, 0};

12730 
mg_£nd
(
c
, 
buf
, (buf));

12732 
mg_£nd
(
c
, 
r
->
buf
 + 3, 
addr_Àn
 + 1 + 2);

12734 
mbuf_ªmove
(
r
, 6 + 
addr_Àn
);

12735 
	gc
->
	gÊags
 |
MG_SOCKS_CONNECT_DONE
;

12738 
socks_h™dÀr
(
mg_c⁄√˘i⁄
 *
c
, 
ev
, *
ev_d©a
) {

12739 i‡(
	gev
 =
MG_EV_RECV
) {

12740 i‡(!(
c
->
Êags
 & 
MG_SOCKS_HANDSHAKE_DONE
)Ë
mg_socks5_h™dshake
(c);

12741 i‡(
	gc
->
	gÊags
 & 
	gMG_SOCKS_HANDSHAKE_DONE
 &&

12742 !(
	gc
->
	gÊags
 & 
	gMG_SOCKS_CONNECT_DONE
)) {

12743 
mg_socks5_h™dÀ_ªque°
(
c
);

12745 i‡(
	gc
->
	gÊags
 & 
	gMG_SOCKS_CONNECT_DONE
Ë
ªœy_d©a
(
c
);

12746 } i‡(
	gev
 =
MG_EV_CLOSE
) {

12747 
disb™d
(
c
);

12749 (Ë
	gev_d©a
;

12752 
mg_£t_¥Ÿocﬁ_socks
(
mg_c⁄√˘i⁄
 *
c
) {

12753 
	gc
->
	g¥Ÿo_h™dÀr
 = 
socks_h™dÀr
;

12756 #ifde‡
MG_MODULE_LINES


12764 #i‡
CS_PLATFORM
 =
CS_P_CC3200


12767 
	~<°dio.h
>

12768 
	~<°rög.h
>

12770 #i‚de‡
__TI_COMPILER_VERSION__


12771 
	~<ªít.h
>

12772 
	~<sys/°©.h
>

12773 
	~<sys/time.h
>

12774 
	~<uni°d.h
>

12777 
	~<öc/hw_ty≥s.h
>

12778 
	~<öc/hw_memm≠.h
>

12779 
	~<drivîlib/¥cm.h
>

12780 
	~<drivîlib/rom.h
>

12781 
	~<drivîlib/rom_m≠.h
>

12782 
	~<drivîlib/u¨t.h
>

12783 
	~<drivîlib/utûs.h
>

12785 
	#CONSOLE_UART
 
UARTA0_BASE


	)

12787 #ifde‡
__TI_COMPILER_VERSION__


12788 
a•rötf
(**
°Ω
, c⁄° *
fmt
, ...) {

12789 
va_li°
 
	g≠
;

12790 
	gÀn
;

12792 *
	g°Ω
 = 
MG_MALLOC
(
BUFSIZ
);

12793 i‡(*
	g°Ω
 =
NULL
)  -1;

12795 
va_°¨t
(
≠
, 
fmt
);

12796 
	gÀn
 = 
v¢¥ötf
(*
°Ω
, 
BUFSIZ
, 
fmt
, 
≠
);

12797 
va_íd
(
≠
);

12799 i‡(
	gÀn
 > 0) {

12800 *
	g°Ω
 = 
MG_REALLOC
(*
°Ω
, 
Àn
 + 1);

12801 i‡(*
	g°Ω
 =
NULL
)  -1;

12804 i‡(
	gÀn
 >
BUFSIZ
) {

12805 
va_°¨t
(
≠
, 
fmt
);

12806 
	gÀn
 = 
v¢¥ötf
(*
°Ω
, 
Àn
 + 1, 
fmt
, 
≠
);

12807 
va_íd
(
≠
);

12810  
	gÀn
;

12813 #i‡
MG_TI_NO_HOST_INTERFACE


12814 
time_t
 
HOSTtime
() {

12815 
timevÆ
 
	gç
;

12816 
gëtimeofday
(&
ç
, 
NULL
);

12817  
	gç
.
	gtv_£c
;

12823 
Âröt_°r
(
FILE
 *
Â
, c⁄° *
°r
) {

12824 *
	g°r
 != '\0') {

12825 i‡(*
°r
 ='\n'Ë
MAP_UARTCh¨Put
(
CONSOLE_UART
, '\r');

12826 
MAP_UARTCh¨Put
(
CONSOLE_UART
, *
°r
++);

12830 
_exô
(
°©us
) {

12831 
Âröt_°r
(
°dîr
, "_exit\n");

12833 *(*Ë1 = 
°©us
;

12838 
_nŸ_im∂emíãd
(c⁄° *
wh©
) {

12839 
Âröt_°r
(
°dîr
, 
wh©
);

12840 
Âröt_°r
(
°dîr
, " isÇot implemented\n");

12841 
_exô
(42);

12844 
_kûl
(
pid
, 
sig
) {

12845 (Ë
	gpid
;

12846 (Ë
	gsig
;

12847 
_nŸ_im∂emíãd
("_kill");

12851 
_gëpid
() {

12852 
Âröt_°r
(
°dîr
, "_getpid isÇot implemented\n");

12856 
_ißây
(
fd
) {

12858  
	gfd
 < 2;

12862 #ifde‡
MG_MODULE_LINES


12870 #i‡
CS_PLATFORM
 =
CS_P_MSP432


12872 
	~<ti/sysbios/BIOS.h
>

12873 
	~<ti/sysbios/k∆/Clock.h
>

12875 
gëtimeofday
(
timevÆ
 *
ç
, *
tzp
) {

12876 
uöt32_t
 
	gticks
 = 
Clock_gëTicks
();

12877 
	gç
->
	gtv_£c
 = 
ticks
 / 1000;

12878 
	gç
->
	gtv_u£c
 = (
ticks
 % 1000) * 1000;

12883 #ifde‡
MG_MODULE_LINES


12891 #i‡(
CS_PLATFORM
 =
CS_P_NRF51
 || CS_PLATFORM =
CS_P_NRF52
) && \

12892 
deföed
(
__ARMCC_VERSION
)

12893 
gëtimeofday
(
timevÆ
 *
ç
, *
tzp
) {

12895 
	gç
->
	gtv_£c
 = 0;

12896 
	gç
->
	gtv_u£c
 = 0;

12900 #ifde‡
MG_MODULE_LINES


12908 #i‚de‡
CS_COMMON_PLATFORMS_SIMPLELINK_SL_FS_SLFS_H_


12909 
	#CS_COMMON_PLATFORMS_SIMPLELINK_SL_FS_SLFS_H_


	)

12911 #i‡
deföed
(
MG_FS_SLFS
)

12913 
	~<°dio.h
>

12914 #i‚de‡
__TI_COMPILER_VERSION__


12915 
	~<uni°d.h
>

12916 
	~<sys/°©.h
>

12919 
	#MAX_OPEN_SLFS_FILES
 8

	)

12922 
fs_¶fs_›í
(c⁄° *
∑th«me
, 
Êags
, 
mode_t
 
mode
);

12923 
fs_¶fs_˛o£
(
fd
);

12924 
ssize_t
 
fs_¶fs_ªad
(
fd
, *
buf
, 
size_t
 
cou¡
);

12925 
ssize_t
 
fs_¶fs_wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
);

12926 
fs_¶fs_°©
(c⁄° *
∑th«me
, 
°©
 *
s
);

12927 
fs_¶fs_f°©
(
fd
, 
°©
 *
s
);

12928 
off_t
 
fs_¶fs_l£ek
(
fd
, off_à
off£t
, 
whí˚
);

12929 
fs_¶fs_u∆ök
(c⁄° *
fûíame
);

12930 
fs_¶fs_ª«me
(c⁄° *
‰om
, c⁄° *
to
);

12932 
fs_¶fs_£t_√w_fûe_size
(c⁄° *
«me
, 
size_t
 
size
);

12937 #ifde‡
MG_MODULE_LINES


12947 #i‡
deföed
(
MG_FS_SLFS
Ë|| deföed(
CC3200_FS_SLFS
)

12951 
	~<î∫o.h
>

12953 #i‡
CS_PLATFORM
 =
CS_P_CC3200


12954 
	~<öc/hw_ty≥s.h
>

12960 #i‡
SL_MAJOR_VERSION_NUM
 < 2

12961 
¶fs_›í
(c⁄° *
‚ame
, 
uöt32_t
 
Êags
) {

12962 
_i32
 
	gfh
;

12963 
_i32
 
	gr
 = 
¶_FsO≥n
(
‚ame
, 
Êags
, 
NULL
 , &
fh
);

12964  (
	gr
 < 0 ?Ñ : 
fh
);

12967 
¶fs_›í
(c⁄° *
‚ame
, 
uöt32_t
 
Êags
) {

12968  
¶_FsO≥n
(
‚ame
, 
Êags
, 
NULL
 );

12973 
£t_î∫o
(
e
);

12974 c⁄° *
dr›_dú
(c⁄° *
‚ame
, 
boﬁ
 *
is_¶fs
);

12980 #i‚de‡
FS_SLFS_MAX_FILE_SIZE


12981 
	#FS_SLFS_MAX_FILE_SIZE
 (64 * 1024)

	)

12984 
	s¶_fûe_size_höt
 {

12985 *
	g«me
;

12986 
size_t
 
	gsize
;

12989 
	s¶_fd_öfo
 {

12990 
_i32
 
	gfh
;

12991 
_off_t
 
	gpos
;

12992 
size_t
 
	gsize
;

12995 
¶_fd_öfo
 
	gs_¶_fds
[
MAX_OPEN_SLFS_FILES
];

12996 
¶_fûe_size_höt
 
	gs_¶_fûe_size_höts
[
MAX_OPEN_SLFS_FILES
];

12998 
¶_fs_to_î∫o
(
_i32
 
r
) {

12999 
DBG
(("SLÉº‹: %d", (Ë
r
));

13000 
	gr
) {

13001 
	gSL_FS_OK
:

13003 
	gSL_ERROR_FS_FILE_NAME_EXIST
:

13004  
EEXIST
;

13005 
	gSL_ERROR_FS_WRONG_FILE_NAME
:

13006  
EINVAL
;

13007 
	gSL_ERROR_FS_NO_AVAILABLE_NV_INDEX
:

13008 
SL_ERROR_FS_NOT_ENOUGH_STORAGE_SPACE
:

13009  
ENOSPC
;

13010 
	gSL_ERROR_FS_FAILED_TO_ALLOCATE_MEM
:

13011  
ENOMEM
;

13012 
	gSL_ERROR_FS_FILE_NOT_EXISTS
:

13013  
ENOENT
;

13014 
	gSL_ERROR_FS_NOT_SUPPORTED
:

13015  
ENOTSUP
;

13017  
	gENXIO
;

13020 
fs_¶fs_›í
(c⁄° *
∑th«me
, 
Êags
, 
mode_t
 
mode
) {

13021 
	gfd
;

13022 
	gfd
 = 0; fd < 
	gMAX_OPEN_SLFS_FILES
; fd++) {

13023 i‡(
	gs_¶_fds
[
fd
].
	gfh
 <= 0) ;

13025 i‡(
	gfd
 >
MAX_OPEN_SLFS_FILES
Ë 
£t_î∫o
(
ENOMEM
);

13026 
¶_fd_öfo
 *
	gfi
 = &
s_¶_fds
[
fd
];

13032 
	g∑th«me
 = 
dr›_dú
(
∑th«me
, 
NULL
);

13034 
_u32
 
	gam
 = 0;

13035 
	gfi
->
	gsize
 = (
size_t
) -1;

13036 
	grw
 = (
Êags
 & 3);

13037 
size_t
 
	g√w_size
 = 
FS_SLFS_MAX_FILE_SIZE
;

13038 i‡(
	grw
 =
O_RDONLY
) {

13039 
SlFsFûeInfo_t
 
¶_fi
;

13040 
_i32
 
	gr
 = 
¶_FsGëInfo
((c⁄° 
_u8
 *Ë
∑th«me
, 0, &
¶_fi
);

13041 i‡(
	gr
 =
SL_FS_OK
) {

13042 
fi
->
size
 = 
SL_FI_FILE_SIZE
(
¶_fi
);

13044 
	gam
 = 
SL_FS_READ
;

13046 i‡(!(
	gÊags
 & 
	gO_TRUNC
Ë|| (Êag†& 
	gO_APPEND
)) {

13049  
£t_î∫o
(
ENOTSUP
);

13051 i‡(
	gÊags
 & 
	gO_CREAT
) {

13052 
size_t
 
	gi
;

13053 
	gi
 = 0; i < 
	gMAX_OPEN_SLFS_FILES
; i++) {

13054 i‡(
	gs_¶_fûe_size_höts
[
i
].
	g«me
 !
NULL
 &&

13055 
°rcmp
(
s_¶_fûe_size_höts
[
i
].
«me
, 
∑th«me
) == 0) {

13056 
√w_size
 = 
s_¶_fûe_size_höts
[
i
].
size
;

13057 
MG_FREE
(
s_¶_fûe_size_höts
[
i
].
«me
);

13058 
	gs_¶_fûe_size_höts
[
i
].
	g«me
 = 
NULL
;

13062 
	gam
 = 
FS_MODE_OPEN_CREATE
(
√w_size
, 0);

13064 
	gam
 = 
SL_FS_WRITE
;

13067 
	gfi
->
	gfh
 = 
¶fs_›í
((
_u8
 *Ë
∑th«me
, 
am
);

13068 
LOG
(
LL_DEBUG
, ("¶_FsO≥n(%s, 0x%xËsz %u = %d", 
∑th«me
, (Ë
am
,

13069 (Ë
√w_size
, (Ë
fi
->
fh
));

13070 
	gr
;

13071 i‡(
	gfi
->
	gfh
 >= 0) {

13072 
fi
->
pos
 = 0;

13073 
	gr
 = 
fd
;

13075 
	gr
 = 
£t_î∫o
(
¶_fs_to_î∫o
(
fi
->
fh
));

13077  
	gr
;

13080 
fs_¶fs_˛o£
(
fd
) {

13081 
¶_fd_öfo
 *
	gfi
 = &
s_¶_fds
[
fd
];

13082 i‡(
	gfi
->
	gfh
 <0Ë 
£t_î∫o
(
EBADF
);

13083 
_i32
 
	gr
 = 
¶_FsClo£
(
fi
->
fh
, 
NULL
, NULL, 0);

13084 
LOG
(
LL_DEBUG
, ("¶_FsClo£(%dË%d", (Ë
fi
->
fh
, (Ë
r
));

13085 
	gs_¶_fds
[
fd
].
	gfh
 = -1;

13086  
£t_î∫o
(
¶_fs_to_î∫o
(
r
));

13089 
ssize_t
 
fs_¶fs_ªad
(
fd
, *
buf
, 
size_t
 
cou¡
) {

13090 
¶_fd_öfo
 *
	gfi
 = &
s_¶_fds
[
fd
];

13091 i‡(
	gfi
->
	gfh
 <0Ë 
£t_î∫o
(
EBADF
);

13094 i‡(
	gfi
->
	gpos
 =
fi
->
size
)  0;

13095 
_i32
 
	gr
 = 
¶_FsRód
(
fi
->
fh
, fi->
pos
, 
buf
, 
cou¡
);

13096 
DBG
(("¶_FsRód(%d, %d, %dË%d", (Ë
fi
->
fh
, (Ëfi->
pos
, (Ë
cou¡
,

13097 (Ë
r
));

13098 i‡(
	gr
 >= 0) {

13099 
fi
->
pos
 +
r
;

13100  
	gr
;

13102  
£t_î∫o
(
¶_fs_to_î∫o
(
r
));

13105 
ssize_t
 
fs_¶fs_wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
) {

13106 
¶_fd_öfo
 *
	gfi
 = &
s_¶_fds
[
fd
];

13107 i‡(
	gfi
->
	gfh
 <0Ë 
£t_î∫o
(
EBADF
);

13108 
_i32
 
	gr
 = 
¶_FsWrôe
(
fi
->
fh
, fi->
pos
, (
_u8
 *Ë
buf
, 
cou¡
);

13109 
DBG
(("¶_FsWrôe(%d, %d, %dË%d", (Ë
fi
->
fh
, (Ëfi->
pos
, (Ë
cou¡
,

13110 (Ë
r
));

13111 i‡(
	gr
 >= 0) {

13112 
fi
->
pos
 +
r
;

13113  
	gr
;

13115  
£t_î∫o
(
¶_fs_to_î∫o
(
r
));

13118 
fs_¶fs_°©
(c⁄° *
∑th«me
, 
°©
 *
s
) {

13119 
SlFsFûeInfo_t
 
	g¶_fi
;

13124 
	g∑th«me
 = 
dr›_dú
(
∑th«me
, 
NULL
);

13125 
_i32
 
	gr
 = 
¶_FsGëInfo
((c⁄° 
_u8
 *Ë
∑th«me
, 0, &
¶_fi
);

13126 i‡(
	gr
 =
SL_FS_OK
) {

13127 
s
->
°_mode
 = 
S_IFREG
 | 0666;

13128 
	gs
->
	g°_∆ök
 = 1;

13129 
	gs
->
	g°_size
 = 
SL_FI_FILE_SIZE
(
¶_fi
);

13132  
£t_î∫o
(
¶_fs_to_î∫o
(
r
));

13135 
fs_¶fs_f°©
(
fd
, 
°©
 *
s
) {

13136 
¶_fd_öfo
 *
	gfi
 = &
s_¶_fds
[
fd
];

13137 i‡(
	gfi
->
	gfh
 <0Ë 
£t_î∫o
(
EBADF
);

13138 
	gs
->
	g°_mode
 = 0666;

13139 
	gs
->
	g°_mode
 = 
S_IFREG
 | 0666;

13140 
	gs
->
	g°_∆ök
 = 1;

13141 
	gs
->
	g°_size
 = 
fi
->
size
;

13145 
off_t
 
fs_¶fs_l£ek
(
fd
, off_à
off£t
, 
whí˚
) {

13146 i‡(
	gs_¶_fds
[
fd
].
	gfh
 <0Ë 
£t_î∫o
(
EBADF
);

13147 
	gwhí˚
) {

13148 
	gSEEK_SET
:

13149 
s_¶_fds
[
fd
].
pos
 = 
off£t
;

13151 
	gSEEK_CUR
:

13152 
s_¶_fds
[
fd
].
pos
 +
off£t
;

13154 
	gSEEK_END
:

13155  
£t_î∫o
(
ENOTSUP
);

13160 
fs_¶fs_u∆ök
(c⁄° *
∑th«me
) {

13165 
	g∑th«me
 = 
dr›_dú
(
∑th«me
, 
NULL
);

13166  
£t_î∫o
(
¶_fs_to_î∫o
(
¶_FsDñ
((c⁄° 
_u8
 *Ë
∑th«me
, 0)));

13169 
fs_¶fs_ª«me
(c⁄° *
‰om
, c⁄° *
to
) {

13170  
£t_î∫o
(
ENOTSUP
);

13173 
fs_¶fs_£t_√w_fûe_size
(c⁄° *
«me
, 
size_t
 
size
) {

13174 
	gi
;

13175 
	gi
 = 0; i < 
	gMAX_OPEN_SLFS_FILES
; i++) {

13176 i‡(
	gs_¶_fûe_size_höts
[
i
].
	g«me
 =
NULL
) {

13177 
DBG
(("Fûêsizêhöt: %†%d", 
«me
, (Ë
size
));

13178 
	gs_¶_fûe_size_höts
[
i
].
	g«me
 = 
°rdup
(
«me
);

13179 
	gs_¶_fûe_size_höts
[
i
].
	gsize
 = 
size
;

13186 #ifde‡
MG_MODULE_LINES


13194 #i‡
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK
 && \

13195 (
deföed
(
MG_FS_SLFS
Ë|| deföed(
MG_FS_SPIFFS
))

13197 
£t_î∫o
(
e
) {

13198 
	gî∫o
 = 
e
;

13199  (
	ge
 == 0 ? 0 : -1);

13202 c⁄° *
dr›_dú
(c⁄° *
‚ame
, 
boﬁ
 *
is_¶fs
) {

13203 i‡(
	gis_¶fs
 !
NULL
) {

13204 *
is_¶fs
 = (
°∫cmp
(
‚ame
, "SL:", 3) == 0);

13205 i‡(*
	gis_¶fs
Ë
	g‚ame
 += 3;

13208 i‡(
	g‚ame
[0] ='.' && 
‚ame
[1] == '/') {

13209 
‚ame
 += 2;

13215 i‡(
	g‚ame
[0] ='/' && 
°rchr
(
‚ame
 + 1, '/'Ë=
NULL
) {

13216 
‚ame
++;

13218  
	g‚ame
;

13221 #i‡!
deföed
(
MG_FS_NO_VFS
)

13223 
	~<î∫o.h
>

13224 
	~<°dboﬁ.h
>

13225 
	~<°dio.h
>

13226 
	~<°dlib.h
>

13227 
	~<°rög.h
>

13228 #ifde‡
__TI_COMPILER_VERSION__


13229 
	~<fûe.h
>

13235 #ifde‡
CC3200_FS_SPIFFS


13239 #ifde‡
MG_FS_SLFS


13243 
	#NUM_SYS_FDS
 3

	)

13244 
	#SPIFFS_FD_BASE
 10

	)

13245 
	#SLFS_FD_BASE
 100

	)

13247 #i‡!
deföed
(
MG_UART_CHAR_PUT
Ë&& !deföed(
MG_UART_WRITE
)

13248 #i‡
CS_PLATFORM
 =
CS_P_CC3200


13249 
	~<öc/hw_ty≥s.h
>

13250 
	~<öc/hw_memm≠.h
>

13251 
	~<drivîlib/rom.h
>

13252 
	~<drivîlib/rom_m≠.h
>

13253 
	~<drivîlib/u¨t.h
>

13254 
	#MG_UART_CHAR_PUT
(
fd
, 
c
Ë
	`MAP_UARTCh¨Put
(
UARTA0_BASE
, c);

	)

13256 
	#MG_UART_WRITE
(
fd
, 
buf
, 
Àn
)

	)

13260 
	efd_ty≥
 {

13261 
	gFD_INVALID
,

13262 
	gFD_SYS
,

13263 #ifde‡
CC3200_FS_SPIFFS


13264 
	gFD_SPIFFS
,

13266 #ifde‡
MG_FS_SLFS


13267 
	gFD_SLFS


13270 
fd_ty≥
(
fd
) {

13271 i‡(
	gfd
 >0 && 
fd
 < 
NUM_SYS_FDS
Ë 
FD_SYS
;

13272 #ifde‡
CC3200_FS_SPIFFS


13273 i‡(
	gfd
 >
SPIFFS_FD_BASE
 && 
fd
 < SPIFFS_FD_BASE + 
MAX_OPEN_SPIFFS_FILES
) {

13274  
FD_SPIFFS
;

13277 #ifde‡
MG_FS_SLFS


13278 i‡(
	gfd
 >
SLFS_FD_BASE
 && 
fd
 < SLFS_FD_BASE + 
MAX_OPEN_SLFS_FILES
) {

13279  
FD_SLFS
;

13282  
	gFD_INVALID
;

13285 #i‡
MG_TI_NO_HOST_INTERFACE


13286 
›í
(c⁄° *
∑th«me
, 
Êags
, 
mode
) {

13288 
_›í
(c⁄° *
∑th«me
, 
Êags
, 
mode_t
 
mode
) {

13290 
	gfd
 = -1;

13291 
boﬁ
 
	gis_¶
;

13292 c⁄° *
	g‚ame
 = 
dr›_dú
(
∑th«me
, &
is_¶
);

13293 i‡(
	gis_¶
) {

13294 #ifde‡
MG_FS_SLFS


13295 
	gfd
 = 
fs_¶fs_›í
(
‚ame
, 
Êags
, 
mode
);

13296 i‡(
	gfd
 >0Ë
fd
 +
SLFS_FD_BASE
;

13299 #ifde‡
CC3200_FS_SPIFFS


13300 
	gfd
 = 
fs_•iffs_›í
(
‚ame
, 
Êags
, 
mode
);

13301 i‡(
	gfd
 >0Ë
fd
 +
SPIFFS_FD_BASE
;

13304 
LOG
(
LL_DEBUG
,

13305 ("›í(%s, 0x%xË%d, f«mê%s", 
∑th«me
, 
Êags
, 
fd
, 
‚ame
));

13306  
	gfd
;

13309 
_°©
(c⁄° *
∑th«me
, 
°©
 *
°
) {

13310 
	gªs
 = -1;

13311 
boﬁ
 
	gis_¶
;

13312 c⁄° *
	g‚ame
 = 
dr›_dú
(
∑th«me
, &
is_¶
);

13313 
mem£t
(
°
, 0, (*st));

13315 i‡(
	g‚ame
[0] ='\0' || 
°rcmp
(
‚ame
, ".") == 0) {

13316 
°
->
°_öo
 = 0;

13317 
	g°
->
	g°_mode
 = 
S_IFDIR
 | 0777;

13318 
	g°
->
	g°_∆ök
 = 1;

13319 
	g°
->
	g°_size
 = 0;

13322 i‡(
	gis_¶
) {

13323 #ifde‡
MG_FS_SLFS


13324 
	gªs
 = 
fs_¶fs_°©
(
‚ame
, 
°
);

13327 #ifde‡
CC3200_FS_SPIFFS


13328 
	gªs
 = 
fs_•iffs_°©
(
‚ame
, 
°
);

13331 
LOG
(
LL_DEBUG
, ("°©(%sË%d; f«mê%s", 
∑th«me
, 
ªs
, 
‚ame
));

13332  
	gªs
;

13335 #i‡
MG_TI_NO_HOST_INTERFACE


13336 
˛o£
(
fd
) {

13338 
_˛o£
(
fd
) {

13340 
	gr
 = -1;

13341 
fd_ty≥
(
fd
)) {

13342 
	gFD_INVALID
:

13343 
r
 = 
£t_î∫o
(
EBADF
);

13345 
	gFD_SYS
:

13346 
r
 = 
£t_î∫o
(
EACCES
);

13348 #ifde‡
CC3200_FS_SPIFFS


13349 
	gFD_SPIFFS
:

13350 
r
 = 
fs_•iffs_˛o£
(
fd
 - 
SPIFFS_FD_BASE
);

13353 #ifde‡
MG_FS_SLFS


13354 
	gFD_SLFS
:

13355 
r
 = 
fs_¶fs_˛o£
(
fd
 - 
SLFS_FD_BASE
);

13359 
DBG
(("˛o£(%dË%d", 
fd
, 
r
));

13360  
	gr
;

13363 #i‡
MG_TI_NO_HOST_INTERFACE


13364 
off_t
 
l£ek
(
fd
, off_à
off£t
, 
whí˚
) {

13366 
off_t
 
_l£ek
(
fd
, off_à
off£t
, 
whí˚
) {

13368 
	gr
 = -1;

13369 
fd_ty≥
(
fd
)) {

13370 
	gFD_INVALID
:

13371 
r
 = 
£t_î∫o
(
EBADF
);

13373 
	gFD_SYS
:

13374 
r
 = 
£t_î∫o
(
ESPIPE
);

13376 #ifde‡
CC3200_FS_SPIFFS


13377 
	gFD_SPIFFS
:

13378 
r
 = 
fs_•iffs_l£ek
(
fd
 - 
SPIFFS_FD_BASE
, 
off£t
, 
whí˚
);

13381 #ifde‡
MG_FS_SLFS


13382 
	gFD_SLFS
:

13383 
r
 = 
fs_¶fs_l£ek
(
fd
 - 
SLFS_FD_BASE
, 
off£t
, 
whí˚
);

13387 
DBG
(("l£ek(%d, %d, %dË%d", 
fd
, (Ë
off£t
, 
whí˚
, 
r
));

13388  
	gr
;

13391 
_f°©
(
fd
, 
°©
 *
s
) {

13392 
	gr
 = -1;

13393 
mem£t
(
s
, 0, (*s));

13394 
fd_ty≥
(
fd
)) {

13395 
	gFD_INVALID
:

13396 
r
 = 
£t_î∫o
(
EBADF
);

13398 
	gFD_SYS
: {

13400 
mem£t
(
s
, 0, (*s));

13401 
	gs
->
	g°_öo
 = 
fd
;

13402 
	gs
->
	g°_mode
 = 
S_IFCHR
 | 0666;

13403 
	gr
 = 0;

13406 #ifde‡
CC3200_FS_SPIFFS


13407 
	gFD_SPIFFS
:

13408 
r
 = 
fs_•iffs_f°©
(
fd
 - 
SPIFFS_FD_BASE
, 
s
);

13411 #ifde‡
MG_FS_SLFS


13412 
	gFD_SLFS
:

13413 
r
 = 
fs_¶fs_f°©
(
fd
 - 
SLFS_FD_BASE
, 
s
);

13417 
DBG
(("f°©(%dË%d", 
fd
, 
r
));

13418  
	gr
;

13421 #i‡
MG_TI_NO_HOST_INTERFACE


13422 
ªad
(
fd
, *
buf
, 
cou¡
) {

13424 
ssize_t
 
_ªad
(
fd
, *
buf
, 
size_t
 
cou¡
) {

13426 
	gr
 = -1;

13427 
fd_ty≥
(
fd
)) {

13428 
	gFD_INVALID
:

13429 
r
 = 
£t_î∫o
(
EBADF
);

13431 
	gFD_SYS
: {

13432 i‡(
fd
 != 0) {

13433 
r
 = 
£t_î∫o
(
EACCES
);

13437 
	gr
 = 
£t_î∫o
(
ENOTSUP
);

13440 #ifde‡
CC3200_FS_SPIFFS


13441 
	gFD_SPIFFS
:

13442 
r
 = 
fs_•iffs_ªad
(
fd
 - 
SPIFFS_FD_BASE
, 
buf
, 
cou¡
);

13445 #ifde‡
MG_FS_SLFS


13446 
	gFD_SLFS
:

13447 
r
 = 
fs_¶fs_ªad
(
fd
 - 
SLFS_FD_BASE
, 
buf
, 
cou¡
);

13451 
DBG
(("ªad(%d, %uË%d", 
fd
, 
cou¡
, 
r
));

13452  
	gr
;

13455 #i‡
MG_TI_NO_HOST_INTERFACE


13456 
wrôe
(
fd
, c⁄° *
buf
, 
cou¡
) {

13458 
ssize_t
 
_wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
) {

13460 
	gr
 = -1;

13461 
fd_ty≥
(
fd
)) {

13462 
	gFD_INVALID
:

13463 
r
 = 
£t_î∫o
(
EBADF
);

13465 
	gFD_SYS
: {

13466 i‡(
fd
 == 0) {

13467 
r
 = 
£t_î∫o
(
EACCES
);

13470 #ifde‡
MG_UART_WRITE


13471 
MG_UART_WRITE
(
fd
, 
buf
, 
cou¡
);

13472 #ñi‡
deföed
(
MG_UART_CHAR_PUT
)

13474 
size_t
 
	gi
;

13475 
	gi
 = 0; i < 
	gcou¡
; i++) {

13476 c⁄° 
	gc
 = ((c⁄° *Ë
buf
)[
i
];

13477 i‡(
	gc
 ='\n'Ë
MG_UART_CHAR_PUT
(
fd
, '\r');

13478 
MG_UART_CHAR_PUT
(
fd
, 
c
);

13482 
	gr
 = 
cou¡
;

13485 #ifde‡
CC3200_FS_SPIFFS


13486 
	gFD_SPIFFS
:

13487 
r
 = 
fs_•iffs_wrôe
(
fd
 - 
SPIFFS_FD_BASE
, 
buf
, 
cou¡
);

13490 #ifde‡
MG_FS_SLFS


13491 
	gFD_SLFS
:

13492 
r
 = 
fs_¶fs_wrôe
(
fd
 - 
SLFS_FD_BASE
, 
buf
, 
cou¡
);

13496  
	gr
;

13503 #i‡
MG_TI_NO_HOST_INTERFACE
 || 
deföed
(
_NEWLIB_VERSION
)

13504 
ª«me
(c⁄° *
‰om∑th
, c⁄° *
t›©h
) {

13505 
	gr
 = -1;

13506 
boﬁ
 
	gis_¶_‰om
, 
	gis_¶_to
;

13507 c⁄° *
	g‰om
 = 
dr›_dú
(
‰om∑th
, &
is_¶_‰om
);

13508 c⁄° *
	gto
 = 
dr›_dú
(
t›©h
, &
is_¶_to
);

13509 i‡(
	gis_¶_‰om
 || 
	gis_¶_to
) {

13510 
£t_î∫o
(
ENOTSUP
);

13512 #ifde‡
CC3200_FS_SPIFFS


13513 
	gr
 = 
fs_•iffs_ª«me
(
‰om
, 
to
);

13516 
DBG
(("ª«me(%s, %sË%d", 
‰om
, 
to
, 
r
));

13517  
	gr
;

13521 #i‡
MG_TI_NO_HOST_INTERFACE


13522 
u∆ök
(c⁄° *
∑th«me
) {

13524 
_u∆ök
(c⁄° *
∑th«me
) {

13526 
	gr
 = -1;

13527 
boﬁ
 
	gis_¶
;

13528 c⁄° *
	g‚ame
 = 
dr›_dú
(
∑th«me
, &
is_¶
);

13529 i‡(
	gis_¶
) {

13530 #ifde‡
MG_FS_SLFS


13531 
	gr
 = 
fs_¶fs_u∆ök
(
‚ame
);

13534 #ifde‡
CC3200_FS_SPIFFS


13535 
	gr
 = 
fs_•iffs_u∆ök
(
‚ame
);

13538 
DBG
(("u∆ök(%sË%d, f«mê%s", 
∑th«me
, 
r
, 
‚ame
));

13539  
	gr
;

13542 #ifde‡
CC3200_FS_SPIFFS


13543 
DIR
 *
›ídú
(c⁄° *
dú_«me
) {

13544 
DIR
 *
	gr
 = 
NULL
;

13545 
boﬁ
 
	gis_¶
;

13546 
dr›_dú
(
dú_«me
, &
is_¶
);

13547 i‡(
	gis_¶
) {

13548 
	gr
 = 
NULL
;

13549 
£t_î∫o
(
ENOTSUP
);

13551 
	gr
 = 
fs_•iffs_›ídú
(
dú_«me
);

13553 
DBG
(("›ídú(%sË%p", 
dú_«me
, 
r
));

13554  
	gr
;

13557 
dúít
 *
ªaddú
(
DIR
 *
dú
) {

13558 
dúít
 *
	gªs
 = 
fs_•iffs_ªaddú
(
dú
);

13559 
DBG
(("ªaddú(%pË%p", 
dú
, 
ªs
));

13560  
	gªs
;

13563 
˛o£dú
(
DIR
 *
dú
) {

13564 
	gªs
 = 
fs_•iffs_˛o£dú
(
dú
);

13565 
DBG
(("˛o£dú(%pË%d", 
dú
, 
ªs
));

13566  
	gªs
;

13569 
rmdú
(c⁄° *
∑th
) {

13570  
fs_•iffs_rmdú
(
∑th
);

13573 
mkdú
(c⁄° *
∑th
, 
mode_t
 
mode
) {

13574 (Ë
	g∑th
;

13575 (Ë
	gmode
;

13577  (
°æí
(
∑th
Ë=1 && *∑th ='.'Ë? 0 : 
ENOTDIR
;

13581 
¶_fs_öô
() {

13582 
	gªt
 = 1;

13583 #ifde‡
__TI_COMPILER_VERSION__


13584 #ifde‡
MG_FS_SLFS


13585 #¥agm®
düg_push


13586 #¥agm®
düg_suµªss
 169

13588 
	gªt
 = (
add_devi˚
("SL", 
_MSA
, 
fs_¶fs_›í
, 
fs_¶fs_˛o£
, 
fs_¶fs_ªad
,

13589 
fs_¶fs_wrôe
, 
fs_¶fs_l£ek
, 
fs_¶fs_u∆ök
,

13590 
fs_¶fs_ª«me
) == 0);

13591 #¥agm®
düg_p›


13594  
	gªt
;

13599 
deföed
(
MG_FS_SPIFFS
)) */

13600 #ifde‡
MG_MODULE_LINES


13608 #i‡
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK


13610 
	~<î∫o.h
>

13611 
	~<°dio.h
>

13615 c⁄° *
öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
sockÀn_t
 
size
) {

13616 
	gªs
;

13617 
ö_addr
 *
	gö
 = (ö_add∏*Ë
§c
;

13618 i‡(
	gaf
 !
AF_INET
) {

13619 
î∫o
 = 
ENOTSUP
;

13620  
	gNULL
;

13622 
	gªs
 = 
¢¥ötf
(
d°
, 
size
, "%lu.%lu.%lu.%lu", 
SL_IPV4_BYTE
(
ö
->
s_addr
, 0),

13623 
SL_IPV4_BYTE
(
ö
->
s_addr
, 1), SL_IPV4_BYTE(in->s_addr, 2),

13624 
SL_IPV4_BYTE
(
ö
->
s_addr
, 3));

13625  
	gªs
 > 0 ? 
	gd°
 : 
NULL
;

13628 *
öë_¡ﬂ
(
ö_addr
 
n
) {

13629 
	ga
[16];

13630  (*Ë
öë_¡›
(
AF_INET
, &
n
, 
a
, (a));

13633 
öë_±⁄
(
af
, c⁄° *
§c
, *
d°
) {

13634 
uöt32_t
 
	ga0
, 
	ga1
, 
	ga2
, 
	ga3
;

13635 
uöt8_t
 *
	gdb
 = (uöt8_à*Ë
d°
;

13636 i‡(
	gaf
 !
AF_INET
) {

13637 
î∫o
 = 
ENOTSUP
;

13640 i‡(
ssˇnf
(
§c
, "%lu.%lu.%lu.%lu", &
a0
, &
a1
, &
a2
, &
a3
) != 4) {

13643 *
	gdb
 = 
a3
;

13644 *(
	gdb
 + 1Ë
a2
;

13645 *(
	gdb
 + 2Ë
a1
;

13646 *(
	gdb
 + 3Ë
a0
;

13651 #ifde‡
MG_MODULE_LINES


13654 #i‡
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK
 && !
deföed
(
MG_SIMPLELINK_NO_OSI
)

13658 
	~<o¶ib/osi.h
>

13660 
	emg_q_msg_ty≥
 {

13661 
	gMG_Q_MSG_CB
,

13663 
	smg_q_msg
 {

13664 
mg_q_msg_ty≥
 
	gty≥
;

13665 (*
	gcb
)(
mg_mgr
 *
	gmgr
, *
	g¨g
);

13666 *
	g¨g
;

13668 
OsiMsgQ_t
 
	gs_mg_q
;

13669 
mg_èsk
(*
¨g
);

13671 
boﬁ
 
mg_°¨t_èsk
(
¥i‹ôy
, 
°ack_size
, 
mg_öô_cb
 
mg_öô
) {

13672 i‡(
osi_MsgQCª©e
(&
s_mg_q
, "MG", (
mg_q_msg
), 16Ë!
OSI_OK
) {

13673  
Ál£
;

13675 i‡(
osi_TaskCª©e
(
mg_èsk
, (c⁄° sig√d *Ë"MG", 
°ack_size
,

13676 (*Ë
mg_öô
, 
¥i‹ôy
, 
NULL
Ë!
OSI_OK
) {

13677  
Ál£
;

13679  
	gåue
;

13682 
mg_èsk
(*
¨g
) {

13683 
mg_mgr
 
	gmgr
;

13684 
mg_öô_cb
 
	gmg_öô
 = (mg_öô_cbË
¨g
;

13685 
mg_mgr_öô
(&
mgr
, 
NULL
);

13686 
mg_öô
(&
mgr
);

13688 
mg_q_msg
 
	gmsg
;

13689 
mg_mgr_pﬁl
(&
mgr
, 1);

13690 i‡(
osi_MsgQRód
(&
s_mg_q
, &
msg
, 1Ë!
OSI_OK
) ;

13691 
	gmsg
.
	gty≥
) {

13692 
	gMG_Q_MSG_CB
: {

13693 
msg
.
cb
(&
mgr
, msg.
¨g
);

13699 
mg_run_ö_èsk
((*
cb
)(
mg_mgr
 *
mgr
, *
¨g
), *
cb_¨g
) {

13700 
mg_q_msg
 
	gmsg
 = {
MG_Q_MSG_CB
, 
cb
, 
cb_¨g
};

13701 
osi_MsgQWrôe
(&
s_mg_q
, &
msg
, 
OSI_NO_WAIT
);

13706 #ifde‡
MG_MODULE_LINES


13714 #i‚de‡
CS_COMMON_PLATFORMS_SIMPLELINK_SL_NET_IF_H_


13715 
	#CS_COMMON_PLATFORMS_SIMPLELINK_SL_NET_IF_H_


	)

13719 #ifde‡
__˝lu•lus


13723 #i‚de‡
MG_ENABLE_NET_IF_SIMPLELINK


13724 
	#MG_ENABLE_NET_IF_SIMPLELINK
 
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK


	)

13727 c⁄° 
mg_iÁ˚_vèbÀ
 
mg_sim∂ñök_iÁ˚_vèbÀ
;

13729 #ifde‡
__˝lu•lus


13734 #ifde‡
MG_MODULE_LINES


13744 #i‡
MG_ENABLE_NET_IF_SIMPLELINK


13749 
	#MG_TCP_RECV_BUFFER_SIZE
 1024

	)

13750 
	#MG_UDP_RECV_BUFFER_SIZE
 1500

	)

13752 
sock_t
 
mg_›í_li°íög_sockë
(
mg_c⁄√˘i⁄
 *
nc
,

13753 
sockë_addªss
 *
ß
, 
ty≥
,

13754 
¥Ÿo
);

13756 
mg_£t_n⁄_blockög_mode
(
sock_t
 
sock
) {

13757 
SlSockN⁄blockög_t
 
	g›t
;

13758 #i‡
SL_MAJOR_VERSION_NUM
 < 2

13759 
	g›t
.
	gN⁄blockögE«bÀd
 = 1;

13761 
	g›t
.
	gN⁄BlockögE«bÀd
 = 1;

13763 
¶_SëSockO±
(
sock
, 
SL_SOL_SOCKET
, 
SL_SO_NONBLOCKING
, &
›t
, (opt));

13766 
mg_is_îr‹
(
n
) {

13767  (
	gn
 < 0 &&Ç !
SL_ERROR_BSD_EALREADY
 && 
n
 !
SL_ERROR_BSD_EAGAIN
);

13770 
mg_¶_if_c⁄√˘_t˝
(
mg_c⁄√˘i⁄
 *
nc
,

13771 c⁄° 
sockë_addªss
 *
ß
) {

13772 
	g¥Ÿo
 = 0;

13773 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_SSL
Ë
	g¥Ÿo
 = 
SL_SEC_SOCKET
;

13774 
sock_t
 
	gsock
 = 
¶_Sockë
(
AF_INET
, 
SOCK_STREAM
, 
¥Ÿo
);

13775 i‡(
	gsock
 < 0) {

13776 
	gnc
->
	gîr
 = 
sock
;

13777 
	gout
;

13779 
mg_sock_£t
(
nc
, 
sock
);

13780 #i‡
MG_ENABLE_SSL


13781 
	gnc
->
	gîr
 = 
¶_£t_s¶_›ts
(
sock
, 
nc
);

13782 i‡(
	gnc
->
	gîr
 !0Ë
out
;

13784 
	gnc
->
	gîr
 = 
¶_C⁄√˘
(
sock
, &
ß
->ß, (ß->
sö
));

13785 
	gout
:

13786 
DBG
(("%∞tÿ%s:%d sock %d %dÉº %d", 
nc
, 
öë_¡ﬂ
(
ß
->
sö
.
sö_addr
),

13787 
¡ohs
(
ß
->
sö
.
sö_p‹t
), 
nc
->
sock
, 
¥Ÿo
,Çc->
îr
));

13790 
mg_¶_if_c⁄√˘_udp
(
mg_c⁄√˘i⁄
 *
nc
) {

13791 
sock_t
 
	gsock
 = 
¶_Sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

13792 i‡(
	gsock
 < 0) {

13793 
	gnc
->
	gîr
 = 
sock
;

13796 
mg_sock_£t
(
nc
, 
sock
);

13797 
	gnc
->
	gîr
 = 0;

13800 
mg_¶_if_li°í_t˝
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

13801 
	g¥Ÿo
 = 0;

13802 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_SSL
Ë
	g¥Ÿo
 = 
SL_SEC_SOCKET
;

13803 
sock_t
 
	gsock
 = 
mg_›í_li°íög_sockë
(
nc
, 
ß
, 
SOCK_STREAM
, 
¥Ÿo
);

13804 i‡(
	gsock
 < 0)  sock;

13805 
mg_sock_£t
(
nc
, 
sock
);

13809 
mg_¶_if_li°í_udp
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

13810 
sock_t
 
	gsock
 = 
mg_›í_li°íög_sockë
(
nc
, 
ß
, 
SOCK_DGRAM
, 0);

13811 i‡(
	gsock
 =
INVALID_SOCKET
Ë (
î∫o
 ?Érrno : 1);

13812 
mg_sock_£t
(
nc
, 
sock
);

13816 
mg_¶_if_t˝_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
) {

13817 
mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

13820 
mg_¶_if_udp_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
) {

13821 
mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

13824 
mg_¶_if_ªcved
(
mg_c⁄√˘i⁄
 *
nc
, 
size_t
 
Àn
) {

13825 (Ë
	gnc
;

13826 (Ë
	gÀn
;

13829 
mg_¶_if_¸óã_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

13830 (Ë
	gnc
;

13834 
mg_¶_if_de°roy_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

13835 i‡(
	gnc
->
	gsock
 =
INVALID_SOCKET
) ;

13837 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
Ë||Çc->
	gli°íî
 =
NULL
) {

13838 
¶_Clo£
(
nc
->
sock
);

13840 
	gnc
->
	gsock
 = 
INVALID_SOCKET
;

13843 
mg_ac˚±_c⁄n
(
mg_c⁄√˘i⁄
 *
lc
) {

13844 
mg_c⁄√˘i⁄
 *
	gnc
;

13845 
sockë_addªss
 
	gß
;

13846 
sockÀn_t
 
	gß_Àn
 = (
ß
);

13847 
sock_t
 
	gsock
 = 
¶_Ac˚±
(
lc
->
sock
, &
ß
.ß, &
ß_Àn
);

13848 i‡(
	gsock
 < 0) {

13849 
DBG
(("%p: faûedÅÿac˚±: %d", 
lc
, 
sock
));

13852 
	gnc
 = 
mg_if_ac˚±_√w_c⁄n
(
lc
);

13853 i‡(
	gnc
 =
NULL
) {

13854 
¶_Clo£
(
sock
);

13857 
DBG
(("%∞c⁄¿‰om %s:%d", 
nc
, 
öë_¡ﬂ
(
ß
.
sö
.
sö_addr
),

13858 
¡ohs
(
ß
.
sö
.
sö_p‹t
)));

13859 
mg_sock_£t
(
nc
, 
sock
);

13860 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_SSL
Ënc->Êag†|
MG_F_SSL_HANDSHAKE_DONE
;

13861 
mg_if_ac˚±_t˝_cb
(
nc
, &
ß
, 
ß_Àn
);

13866 
sock_t
 
mg_›í_li°íög_sockë
(
mg_c⁄√˘i⁄
 *
nc
,

13867 
sockë_addªss
 *
ß
, 
ty≥
,

13868 
¥Ÿo
) {

13869 
	gr
;

13870 
sockÀn_t
 
	gß_Àn
 =

13871 (
ß
->ß.
ß_Ámûy
 =
AF_INET
Ë? (ß->
sö
Ë: (ß->
sö6
);

13872 
sock_t
 
	gsock
 = 
¶_Sockë
(
ß
->ß.
ß_Ámûy
, 
ty≥
, 
¥Ÿo
);

13873 i‡(
	gsock
 < 0)  sock;

13874 i‡((
	gr
 = 
¶_Böd
(
sock
, &
ß
->ß, 
ß_Àn
)Ë< 0Ë
	g˛ón
;

13875 i‡(
	gty≥
 !
SOCK_DGRAM
) {

13876 #i‡
MG_ENABLE_SSL


13877 i‡((
r
 = 
¶_£t_s¶_›ts
(
sock
, 
nc
)Ë< 0Ë
	g˛ón
;

13879 i‡((
	gr
 = 
¶_Li°í
(
sock
, 
SOMAXCONN
)Ë< 0Ë
	g˛ón
;

13881 
mg_£t_n⁄_blockög_mode
(
sock
);

13882 
	g˛ón
:

13883 i‡(
r
 < 0) {

13884 
¶_Clo£
(
sock
);

13885 
	gsock
 = 
r
;

13887  
	gsock
;

13890 
mg_wrôe_to_sockë
(
mg_c⁄√˘i⁄
 *
nc
) {

13891 
mbuf
 *
	gio
 = &
nc
->
£nd_mbuf
;

13892 
	gn
 = 0;

13894 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
) {

13895 
	gn
 = 
¶_SídTo
(
nc
->
sock
, 
io
->
buf
, io->
Àn
, 0, &nc->
ß
.sa,

13896 (
nc
->
ß
.
sö
));

13897 
DBG
(("%∞%d %d %d %s:%hu", 
nc
,Çc->
sock
, 
n
, 
î∫o
,

13898 
öë_¡ﬂ
(
nc
->
ß
.
sö
.
sö_addr
), 
¡ohs
“c->ß.sö.
sö_p‹t
)));

13900 
	gn
 = (Ë
¶_Síd
(
nc
->
sock
, 
io
->
buf
, io->
Àn
, 0);

13901 
DBG
(("%∞%d byã†-> %d", 
nc
, 
n
,Çc->
sock
));

13904 i‡(
	gn
 > 0) {

13905 
mg_if_£¡_cb
(
nc
, 
n
);

13906 } i‡(
	gn
 < 0 && 
mg_is_îr‹
(
n
)) {

13908 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

13912 
MG_INTERNAL
 
size_t
 
ªcv_avaû_size
(
mg_c⁄√˘i⁄
 *
c⁄n
, size_à
max
) {

13913 
size_t
 
	gavaû
;

13914 i‡(
	gc⁄n
->
	gªcv_mbuf_limô
 < c⁄n->
	gªcv_mbuf
.
	gÀn
)  0;

13915 
	gavaû
 = 
c⁄n
->
ªcv_mbuf_limô
 - c⁄n->
ªcv_mbuf
.
Àn
;

13916  
	gavaû
 > 
	gmax
 ? max : 
avaû
;

13919 
mg_h™dÀ_t˝_ªad
(
mg_c⁄√˘i⁄
 *
c⁄n
) {

13920 
	gn
 = 0;

13921 *
	gbuf
 = (*Ë
MG_MALLOC
(
MG_TCP_RECV_BUFFER_SIZE
);

13923 i‡(
	gbuf
 =
NULL
) {

13924 
DBG
(("OOM"));

13928 
	gn
 = (Ë
¶_Recv
(
c⁄n
->
sock
, 
buf
,

13929 
ªcv_avaû_size
(
c⁄n
, 
MG_TCP_RECV_BUFFER_SIZE
), 0);

13930 
DBG
(("%∞%d byã†<- %d", 
c⁄n
, 
n
, c⁄n->
sock
));

13931 i‡(
	gn
 > 0) {

13932 
mg_if_ªcv_t˝_cb
(
c⁄n
, 
buf
, 
n
, 1 );

13934 
MG_FREE
(
buf
);

13936 i‡(
	gn
 == 0) {

13938 
c⁄n
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

13939 } i‡(
mg_is_îr‹
(
n
)) {

13940 
	gc⁄n
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

13944 
mg_h™dÀ_udp_ªad
(
mg_c⁄√˘i⁄
 *
nc
) {

13945 *
	gbuf
 = (*Ë
MG_MALLOC
(
MG_UDP_RECV_BUFFER_SIZE
);

13946 i‡(
	gbuf
 =
NULL
) ;

13947 
sockë_addªss
 
	gß
;

13948 
sockÀn_t
 
	gß_Àn
 = (
ß
);

13949 
	gn
 = 
¶_RecvFrom
(
nc
->
sock
, 
buf
, 
MG_UDP_RECV_BUFFER_SIZE
, 0,

13950 (
SlSockAddr_t
 *Ë&
ß
, &
ß_Àn
);

13951 
DBG
(("%∞%d byã†‰om %s:%d", 
nc
, 
n
, 
öë_¡ﬂ
“c->
ß
.
sö
.
sö_addr
),

13952 
¡ohs
(
nc
->
ß
.
sö
.
sö_p‹t
)));

13953 i‡(
	gn
 > 0) {

13954 
mg_if_ªcv_udp_cb
(
nc
, 
buf
, 
n
, &
ß
, 
ß_Àn
);

13956 
MG_FREE
(
buf
);

13960 
	#_MG_F_FD_CAN_READ
 1

	)

13961 
	#_MG_F_FD_CAN_WRITE
 1 << 1

	)

13962 
	#_MG_F_FD_ERROR
 1 << 2

	)

13964 
mg_mgr_h™dÀ_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
, 
fd_Êags
, 
now
) {

13965 
DBG
(("%∞fd=%d fd_Êags=%dÇc_Êags=%luÑmbl=%d smbl=%d", 
nc
,Çc->
sock
,

13966 
fd_Êags
, 
nc
->
Êags
, (Ënc->
ªcv_mbuf
.
Àn
, (Ënc->
£nd_mbuf
.len));

13968 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_CONNECTING
) {

13969 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
 ||Çc->
	gîr
 !
SL_ERROR_BSD_EALREADY
) {

13970 
mg_if_c⁄√˘_cb
(
nc
,Çc->
îr
);

13975 i‡(
	gfd_Êags
 & 
	g_MG_F_FD_CAN_WRITE
) {

13976 
	gnc
->
	gîr
 = 
¶_C⁄√˘
(
nc
->
sock
, &nc->
ß
.ß, “c->ß.
sö
));

13977 
DBG
(("%∞c⁄¿ªs=%d", 
nc
,Çc->
îr
));

13978 i‡(
	gnc
->
	gîr
 =
SL_ERROR_BSD_ESECSNOVERIFY
 ||

13980 
nc
->
îr
 =
SL_ERROR_BSD_ESECDATEERROR


13981 #i‡
SL_MAJOR_VERSION_NUM
 >= 2

13986 
nc
->
îr
 =
SL_ERROR_BSD_ESECUNKNOWNROOTCA


13989 
nc
->
îr
 = 0;

13991 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_SSL
 &&Çc->
	gîr
 == 0) {

13992 
nc
->
Êags
 |
MG_F_SSL_HANDSHAKE_DONE
;

13994 
mg_if_c⁄√˘_cb
(
nc
,Çc->
îr
);

13998 
	gfd_Êags
 &~(
_MG_F_FD_CAN_READ
 | 
_MG_F_FD_CAN_WRITE
);

14001 i‡(
	gfd_Êags
 & 
	g_MG_F_FD_CAN_READ
) {

14002 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
) {

14003 
mg_h™dÀ_udp_ªad
(
nc
);

14005 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_LISTENING
) {

14006 
mg_ac˚±_c⁄n
(
nc
);

14008 
mg_h™dÀ_t˝_ªad
(
nc
);

14013 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_CLOSE_IMMEDIATELY
)) {

14014 i‡((
	gfd_Êags
 & 
	g_MG_F_FD_CAN_WRITE
Ë&& 
	gnc
->
	g£nd_mbuf
.
	gÀn
 > 0) {

14015 
mg_wrôe_to_sockë
(
nc
);

14018 i‡(!(
	gfd_Êags
 & (
	g_MG_F_FD_CAN_READ
 | 
	g_MG_F_FD_CAN_WRITE
))) {

14019 
mg_if_pﬁl
(
nc
, 
now
);

14021 
mg_if_timî
(
nc
, 
now
);

14024 
DBG
(("%∞a·î fd=%dÇc_Êags=%luÑmbl=%d smbl=%d", 
nc
,Çc->
sock
,Çc->
Êags
,

14025 (Ë
nc
->
ªcv_mbuf
.
Àn
, (Ënc->
£nd_mbuf
.len));

14029 
mg_¶_if_sock_£t
(
mg_c⁄√˘i⁄
 *
nc
, 
sock_t
 
sock
) {

14030 
mg_£t_n⁄_blockög_mode
(
sock
);

14031 
	gnc
->
	gsock
 = 
sock
;

14032 
DBG
(("%∞%d", 
nc
, 
sock
));

14035 
mg_¶_if_öô
(
mg_iÁ˚
 *
iÁ˚
) {

14036 (Ë
	giÁ˚
;

14037 
DBG
(("%∞usög sl_Sñe˘()", 
iÁ˚
->
mgr
));

14040 
mg_¶_if_‰ì
(
mg_iÁ˚
 *
iÁ˚
) {

14041 (Ë
	giÁ˚
;

14044 
mg_¶_if_add_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

14045 (Ë
	gnc
;

14048 
mg_¶_if_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

14049 (Ë
	gnc
;

14052 
time_t
 
mg_¶_if_pﬁl
(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
) {

14053 
mg_mgr
 *
	gmgr
 = 
iÁ˚
->
mgr
;

14054 
	gnow
 = 
mg_time
();

14055 
	gmö_timî
;

14056 
mg_c⁄√˘i⁄
 *
	gnc
, *
	gtmp
;

14057 
SlTimevÆ_t
 
	gtv
;

14058 
SlFdSë_t
 
	gªad_£t
, 
	gwrôe_£t
, 
	gîr_£t
;

14059 
sock_t
 
	gmax_fd
 = 
INVALID_SOCKET
;

14060 
	gnum_fds
, 
	gnum_ev
 = 0, 
	gnum_timîs
 = 0;

14062 
SL_SOCKET_FD_ZERO
(&
ªad_£t
);

14063 
SL_SOCKET_FD_ZERO
(&
wrôe_£t
);

14064 
SL_SOCKET_FD_ZERO
(&
îr_£t
);

14070 
	gmö_timî
 = 0;

14071 
	gnc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
, 
	gnum_fds
 = 0;Ç¯!
NULL
;Ç¯
tmp
) {

14072 
tmp
 = 
nc
->
√xt
;

14074 i‡(
	gnc
->
	gsock
 !
INVALID_SOCKET
) {

14075 
num_fds
++;

14077 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_WANT_WRITE
) &&

14078 
	gnc
->
	gªcv_mbuf
.
	gÀn
 <Çc->
	gªcv_mbuf_limô
 &&

14079 (!(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
Ë||Çc->
	gli°íî
 =
NULL
)) {

14080 
SL_SOCKET_FD_SET
(
nc
->
sock
, &
ªad_£t
);

14081 i‡(
	gmax_fd
 =
INVALID_SOCKET
 || 
nc
->
sock
 > 
max_fd
) max_fd =Çc->sock;

14084 i‡(((
	gnc
->
	gÊags
 & 
	gMG_F_CONNECTING
Ë&& !“c->Êag†& 
	gMG_F_WANT_READ
)) ||

14085 (
	gnc
->
	g£nd_mbuf
.
	gÀn
 > 0 && !“c->
	gÊags
 & 
	gMG_F_CONNECTING
))) {

14086 
SL_SOCKET_FD_SET
(
nc
->
sock
, &
wrôe_£t
);

14087 
SL_SOCKET_FD_SET
(
nc
->
sock
, &
îr_£t
);

14088 i‡(
	gmax_fd
 =
INVALID_SOCKET
 || 
nc
->
sock
 > 
max_fd
) max_fd =Çc->sock;

14092 i‡(
	gnc
->
	gev_timî_time
 > 0) {

14093 i‡(
	gnum_timîs
 =0 || 
nc
->
ev_timî_time
 < 
mö_timî
) {

14094 
mö_timî
 = 
nc
->
ev_timî_time
;

14096 
	gnum_timîs
++;

14104 i‡(
	gnum_timîs
 > 0) {

14105 
	gtimî_timeout_ms
 = (
mö_timî
 - 
mg_time
()) * 1000 + 1 ;

14106 i‡(
	gtimî_timeout_ms
 < 
	gtimeout_ms
) {

14107 
	gtimeout_ms
 = 
timî_timeout_ms
;

14110 i‡(
	gtimeout_ms
 < 0)Åimeout_ms = 0;

14112 
	gtv
.
	gtv_£c
 = 
timeout_ms
 / 1000;

14113 
	gtv
.
	gtv_u£c
 = (
timeout_ms
 % 1000) * 1000;

14115 i‡(
	gnum_fds
 > 0) {

14116 
	gnum_ev
 = 
¶_Sñe˘
((Ë
max_fd
 + 1, &
ªad_£t
, &
wrôe_£t
, &
îr_£t
, &
tv
);

14119 
	gnow
 = 
mg_time
();

14120 
DBG
(("¶_Sñe˘ @ %ldÇum_ev=%d o‡%d,Åimeout=%d", (Ë
now
, 
num_ev
,

14121 
num_fds
, 
timeout_ms
));

14123 
	gnc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

14124 
fd_Êags
 = 0;

14125 i‡(
	gnc
->
	gsock
 !
INVALID_SOCKET
) {

14126 i‡(
num_ev
 > 0) {

14127 
fd_Êags
 =

14128 (
SL_SOCKET_FD_ISSET
(
nc
->
sock
, &
ªad_£t
) &&

14129 (!(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
Ë||Çc->
	gli°íî
 =
NULL
)

14130 ? 
_MG_F_FD_CAN_READ


14132 (
SL_SOCKET_FD_ISSET
(
nc
->
sock
, &
wrôe_£t
Ë? 
	g_MG_F_FD_CAN_WRITE


14134 (
SL_SOCKET_FD_ISSET
(
nc
->
sock
, &
îr_£t
Ë? 
	g_MG_F_FD_ERROR
 : 0);

14137 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
 &&Çc->
	g£nd_mbuf
.
	gÀn
 > 0) {

14138 
	gfd_Êags
 |
_MG_F_FD_CAN_WRITE
;

14141 
	gtmp
 = 
nc
->
√xt
;

14142 
mg_mgr_h™dÀ_c⁄n
(
nc
, 
fd_Êags
, 
now
);

14145 
	gnc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

14146 
tmp
 = 
nc
->
√xt
;

14147 i‡((
	gnc
->
	gÊags
 & 
	gMG_F_CLOSE_IMMEDIATELY
) ||

14148 (
	gnc
->
	g£nd_mbuf
.
	gÀn
 =0 && (
nc
->
Êags
 & 
MG_F_SEND_AND_CLOSE
))) {

14149 
mg_˛o£_c⁄n
(
nc
);

14153  
	gnow
;

14156 
mg_¶_if_gë_c⁄n_addr
(
mg_c⁄√˘i⁄
 *
nc
, 
ªmŸe
,

14157 
sockë_addªss
 *
ß
) {

14161 i‡(
	gªmŸe
Ë
mem˝y
(
ß
, &
nc
->sa, (*sa));

14164 
¶_ª°¨t_cb
(
mg_mgr
 *
mgr
) {

14170 
mg_c⁄√˘i⁄
 *
	gnc
;

14171 
	gnc
 = 
mg_√xt
(
mgr
, 
NULL
);Ç¯!NULL;Ç¯mg_√xt(mgr, 
nc
)) {

14172 i‡(
	gnc
->
	gsock
 =
INVALID_SOCKET
) ;

14173 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_LISTENING
) {

14174 
DBG
(("ª°¨tög %∞%s:%d", 
nc
, 
öë_¡ﬂ
“c->
ß
.
sö
.
sö_addr
),

14175 
¡ohs
(
nc
->
ß
.
sö
.
sö_p‹t
)));

14176 
	gªs
 = (
nc
->
Êags
 & 
MG_F_UDP
 ? 
mg_¶_if_li°í_udp
“c, &nc->
ß
)

14177 : 
mg_¶_if_li°í_t˝
(
nc
, &nc->
ß
));

14178 i‡(
	gªs
 == 0) ;

14181 
	gnc
->
	gsock
 = 
INVALID_SOCKET
;

14182 
DBG
(("ãrmö©ög %∞%s:%d", 
nc
, 
öë_¡ﬂ
“c->
ß
.
sö
.
sö_addr
),

14183 
¡ohs
(
nc
->
ß
.
sö
.
sö_p‹t
)));

14185 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

14190 
	#MG_SL_IFACE_VTABLE
 \

14192 
mg_¶_if_öô
, \

14193 
mg_¶_if_‰ì
, \

14194 
mg_¶_if_add_c⁄n
, \

14195 
mg_¶_if_ªmove_c⁄n
, \

14196 
mg_¶_if_pﬁl
, \

14197 
mg_¶_if_li°í_t˝
, \

14198 
mg_¶_if_li°í_udp
, \

14199 
mg_¶_if_c⁄√˘_t˝
, \

14200 
mg_¶_if_c⁄√˘_udp
, \

14201 
mg_¶_if_t˝_£nd
, \

14202 
mg_¶_if_udp_£nd
, \

14203 
mg_¶_if_ªcved
, \

14204 
mg_¶_if_¸óã_c⁄n
, \

14205 
mg_¶_if_de°roy_c⁄n
, \

14206 
mg_¶_if_sock_£t
, \

14207 
mg_¶_if_gë_c⁄n_addr
, \

14208 }

	)

14211 c⁄° 
mg_iÁ˚_vèbÀ
 
	gmg_sim∂ñök_iÁ˚_vèbÀ
 = 
MG_SL_IFACE_VTABLE
;

14212 #i‡
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK


14213 c⁄° 
mg_iÁ˚_vèbÀ
 
	gmg_deÁu…_iÁ˚_vèbÀ
 = 
MG_SL_IFACE_VTABLE
;

14217 #ifde‡
MG_MODULE_LINES


14225 #i‡
MG_ENABLE_SSL
 && 
MG_SSL_IF
 =
MG_SSL_IF_SIMPLELINK


14229 #i‚de‡
MG_SSL_IF_SIMPLELINK_SLFS_PREFIX


14230 
	#MG_SSL_IF_SIMPLELINK_SLFS_PREFIX
 "SL:"

	)

14233 
	#MG_SSL_IF_SIMPLELINK_SLFS_PREFIX_LEN
 \

14234 ((
MG_SSL_IF_SIMPLELINK_SLFS_PREFIX
Ë- 1)

	)

14236 
	smg_s¶_if_˘x
 {

14237 *
	gs¶_˚π
;

14238 *
	gs¶_key
;

14239 *
	gs¶_ˇ_˚π
;

14240 *
	gs¶_£rvî_«me
;

14243 
mg_s¶_if_öô
() {

14246 
mg_s¶_if_ªsu…
 
mg_s¶_if_c⁄n_öô
(

14247 
mg_c⁄√˘i⁄
 *
nc
, c⁄° 
mg_s¶_if_c⁄n_∑øms
 *
∑øms
,

14248 c⁄° **
îr_msg
) {

14249 
mg_s¶_if_˘x
 *
	g˘x
 =

14250 (
mg_s¶_if_˘x
 *Ë
MG_CALLOC
(1, (*
˘x
));

14251 i‡(
	g˘x
 =
NULL
) {

14252 
MG_SET_PTRPTR
(
îr_msg
, "Out of memory");

14253  
	gMG_SSL_ERROR
;

14255 
	gnc
->
	gs¶_if_d©a
 = 
˘x
;

14257 i‡(
	g∑øms
->
	g˚π
 !
NULL
 || 
∑øms
->
key
 != NULL) {

14258 i‡(
∑øms
->
˚π
 !
NULL
 &&Ö¨ams->
key
 != NULL) {

14259 
˘x
->
s¶_˚π
 = 
°rdup
(
∑øms
->
˚π
);

14260 
	g˘x
->
	gs¶_key
 = 
°rdup
(
∑øms
->
key
);

14262 
MG_SET_PTRPTR
(
îr_msg
, "Both certánd keyáreÑequired.");

14263  
	gMG_SSL_ERROR
;

14266 i‡(
	g∑øms
->
	gˇ_˚π
 !
NULL
 && 
°rcmp
(
∑øms
->
ˇ_˚π
, "*") != 0) {

14267 
˘x
->
s¶_ˇ_˚π
 = 
°rdup
(
∑øms
->
ˇ_˚π
);

14270 i‡(
	g∑øms
->
	g£rvî_«me
 !
NULL
) {

14271 
˘x
->
s¶_£rvî_«me
 = 
°rdup
(
∑øms
->
£rvî_«me
);

14273  
	gMG_SSL_OK
;

14276 
mg_s¶_if_c⁄n_˛o£_nŸify
(
mg_c⁄√˘i⁄
 *
nc
) {

14278 (Ë
	gnc
;

14281 
mg_s¶_if_c⁄n_‰ì
(
mg_c⁄√˘i⁄
 *
nc
) {

14282 
mg_s¶_if_˘x
 *
	g˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

14283 i‡(
	g˘x
 =
NULL
) ;

14284 
	gnc
->
	gs¶_if_d©a
 = 
NULL
;

14285 
MG_FREE
(
˘x
->
s¶_˚π
);

14286 
MG_FREE
(
˘x
->
s¶_key
);

14287 
MG_FREE
(
˘x
->
s¶_ˇ_˚π
);

14288 
MG_FREE
(
˘x
->
s¶_£rvî_«me
);

14289 
mem£t
(
˘x
, 0, (*ctx));

14290 
MG_FREE
(
˘x
);

14293 
boﬁ
 
≥m_to_dî
(c⁄° *
≥m_fûe
, c⁄° *
dî_fûe
) {

14294 
boﬁ
 
	gªt
 = 
Ál£
;

14295 
FILE
 *
	gpf
 = 
NULL
, *
	gdf
 = NULL;

14296 
boﬁ
 
	gwrôög
 = 
Ál£
;

14297 
	gpf
 = 
f›í
(
≥m_fûe
, "r");

14298 i‡(
	gpf
 =
NULL
Ë
˛ón
;

14299 
ªmove
(
dî_fûe
);

14300 
fs_¶fs_£t_√w_fûe_size
(
dî_fûe
 + 
MG_SSL_IF_SIMPLELINK_SLFS_PREFIX_LEN
,

14302 
	gdf
 = 
f›í
(
dî_fûe
, "w");

14303 i‡(
	gdf
 =
NULL
Ë
˛ón
;

14305 
	g≥m_buf
[70];

14306 
	gdî_buf
[48];

14307 i‡(!
fgës
(
≥m_buf
, ’em_buf), 
pf
)) ;

14308 i‡(
	gwrôög
) {

14309 i‡(
°r°r
(
≥m_buf
, "-----END "Ë!
NULL
) {

14310 
ªt
 = 
åue
;

14313 
	gl
 = 0;

14314 !
is•a˚
((Ë
≥m_buf
[
l
])Ë
	gl
++;

14315 
	gdî_Àn
 = 0;

14316 
cs_ba£64_decode
((c⁄° *Ë
≥m_buf
, (pem_buf),

14317 
dî_buf
, &
dî_Àn
);

14318 i‡(
	gdî_Àn
 <= 0) ;

14319 i‡(
fwrôe
(
dî_buf
, 1, 
dî_Àn
, 
df
) != der_len) ;

14320 } i‡(
°r°r
(
≥m_buf
, "-----BEGIN "Ë!
NULL
) {

14321 
wrôög
 = 
åue
;

14325 
	g˛ón
:

14326 i‡(
pf
 !
NULL
Ë
f˛o£
(pf);

14327 i‡(
	gdf
 !
NULL
) {

14328 
f˛o£
(
df
);

14329 i‡(!
	gªt
Ë
ªmove
(
dî_fûe
);

14331  
	gªt
;

14334 #i‡
MG_ENABLE_FILESYSTEM
 && 
deföed
(
MG_FS_SLFS
)

14336 *
¶_≥m2dî
(c⁄° *
≥m_fûe
) {

14337 c⁄° *
	g≥m_ext
 = 
°r°r
(
≥m_fûe
, ".pem");

14338 i‡(
	g≥m_ext
 =
NULL
 || *(
≥m_ext
 + 4) != '\0') {

14339  
°rdup
(
≥m_fûe
);

14341 *
	gdî_fûe
 = 
NULL
;

14343 
	gl
 = 
mg_a•rötf
(&
dî_fûe
, 0, 
MG_SSL_IF_SIMPLELINK_SLFS_PREFIX
 "%.*s.der",

14344 (Ë(
≥m_ext
 - 
≥m_fûe
),Öem_file);

14345 i‡(
	gdî_fûe
 =
NULL
)  NULL;

14346 
boﬁ
 
	gªsu…
 = 
Ál£
;

14347 
cs_°©_t
 
	g°
;

14348 i‡(
mg_°©
(
dî_fûe
, &
°
) != 0) {

14349 
ªsu…
 = 
≥m_to_dî
(
≥m_fûe
, 
dî_fûe
);

14350 
LOG
(
LL_DEBUG
, ("%†-> %†%d", 
≥m_fûe
, 
dî_fûe
, 
ªsu…
));

14353 
	gªsu…
 = 
åue
;

14355 i‡(
	gªsu…
) {

14357 
memmove
(
dî_fûe
, dî_fûê+ 
MG_SSL_IF_SIMPLELINK_SLFS_PREFIX_LEN
,

14358 
l
 - 2 );

14360 
MG_FREE
(
dî_fûe
);

14361 
	gdî_fûe
 = 
NULL
;

14363  
	gdî_fûe
;

14366 *
¶_≥m2dî
(c⁄° *
≥m_fûe
) {

14367  
°rdup
(
≥m_fûe
);

14371 
¶_£t_s¶_›ts
(
sock
, 
mg_c⁄√˘i⁄
 *
nc
) {

14372 
	gîr
;

14373 c⁄° 
mg_s¶_if_˘x
 *
	g˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

14374 
DBG
(("%∞s¶ ctx: %p", 
nc
, 
˘x
));

14376 i‡(
	g˘x
 !
NULL
) {

14377 
DBG
(("%∞%s,%s,%s,%s", 
nc
, (
˘x
->
s¶_˚π
 ? ctx->ssl_cert : "-"),

14378 (
˘x
->
s¶_key
 ? ctx->
s¶_˚π
 : "-"),

14379 (
˘x
->
s¶_ˇ_˚π
 ? ctx->ssl_ca_cert : "-"),

14380 (
˘x
->
s¶_£rvî_«me
 ? ctx->ssl_server_name : "-")));

14381 i‡(
	g˘x
->
	gs¶_˚π
 !
NULL
 && 
˘x
->
s¶_key
 != NULL) {

14382 *
s¶_˚π
 = 
¶_≥m2dî
(
˘x
->ssl_cert);

14383 *
	gs¶_key
 = 
¶_≥m2dî
(
˘x
->
s¶_key
);

14384 i‡(
	gs¶_˚π
 !
NULL
 && 
s¶_key
 != NULL) {

14385 
îr
 = 
¶_SëSockO±
(
sock
, 
SL_SOL_SOCKET
,

14386 
SL_SO_SECURE_FILES_CERTIFICATE_FILE_NAME
, 
s¶_˚π
,

14387 
°æí
(
s¶_˚π
));

14388 
LOG
(
LL_INFO
, ("CERTIFICATE_FILE_NAME %†-> %d", 
s¶_˚π
, 
îr
));

14389 
	gîr
 = 
¶_SëSockO±
(
sock
, 
SL_SOL_SOCKET
,

14390 
SL_SO_SECURE_FILES_PRIVATE_KEY_FILE_NAME
, 
s¶_key
,

14391 
°æí
(
s¶_key
));

14392 
LOG
(
LL_INFO
, ("PRIVATE_KEY_FILE_NAME %†-> %d", 
s¶_key
, 
îr
));

14394 
	gîr
 = -1;

14396 
MG_FREE
(
s¶_˚π
);

14397 
MG_FREE
(
s¶_key
);

14398 i‡(
	gîr
 !0Ë 
îr
;

14400 i‡(
	g˘x
->
	gs¶_ˇ_˚π
 !
NULL
) {

14401 i‡(
˘x
->
s¶_ˇ_˚π
[0] != '\0') {

14402 *
s¶_ˇ_˚π
 = 
¶_≥m2dî
(
˘x
->ssl_ca_cert);

14403 i‡(
	gs¶_ˇ_˚π
 !
NULL
) {

14404 
îr
 = 
¶_SëSockO±
(
sock
, 
SL_SOL_SOCKET
,

14405 
SL_SO_SECURE_FILES_CA_FILE_NAME
, 
s¶_ˇ_˚π
,

14406 
°æí
(
s¶_ˇ_˚π
));

14407 
LOG
(
LL_INFO
, ("CA_FILE_NAME %†-> %d", 
s¶_ˇ_˚π
, 
îr
));

14409 
	gîr
 = -1;

14411 
MG_FREE
(
s¶_ˇ_˚π
);

14412 i‡(
	gîr
 !0Ë 
îr
;

14415 i‡(
	g˘x
->
	gs¶_£rvî_«me
 !
NULL
) {

14416 
îr
 = 
¶_SëSockO±
(
sock
, 
SL_SOL_SOCKET
,

14417 
SL_SO_SECURE_DOMAIN_NAME_VERIFICATION
,

14418 
˘x
->
s¶_£rvî_«me
, 
°æí
(ctx->ssl_server_name));

14419 
DBG
(("DOMAIN_NAME_VERIFICATION %†-> %d", 
˘x
->
s¶_£rvî_«me
, 
îr
));

14424 i‡(
	gîr
 !0 && 
îr
 !
SL_ERROR_BSD_ENOPROTOOPT
) Érr;

14431 #ifde‡
MG_MODULE_LINES


14439 #i‚de‡
CS_COMMON_PLATFORMS_LWIP_MG_NET_IF_LWIP_H_


14440 
	#CS_COMMON_PLATFORMS_LWIP_MG_NET_IF_LWIP_H_


	)

14442 #i‚de‡
MG_ENABLE_NET_IF_LWIP_LOW_LEVEL


14443 
	#MG_ENABLE_NET_IF_LWIP_LOW_LEVEL
 
MG_NET_IF
 =
MG_NET_IF_LWIP_LOW_LEVEL


	)

14446 #i‡
MG_ENABLE_NET_IF_LWIP_LOW_LEVEL


14448 
	~<°döt.h
>

14450 c⁄° 
mg_iÁ˚_vèbÀ
 
mg_lwù_iÁ˚_vèbÀ
;

14452 
	smg_lwù_c⁄n_°©e
 {

14453 
mg_c⁄√˘i⁄
 *
	gnc
;

14454 
mg_c⁄√˘i⁄
 *
	glc
;

14456 
t˝_pcb
 *
	gt˝
;

14457 
udp_pcb
 *
	gudp
;

14458 } 
	gpcb
;

14459 
îr_t
 
	gîr
;

14460 
size_t
 
	gnum_£¡
;

14461 
pbuf
 *
	grx_chaö
;

14462 
size_t
 
	grx_off£t
;

14464 
	gœ°_s¶_wrôe_size
;

14466 
	gªcv_≥ndög
 : 1;

14468 
	gdøöög_rx_chaö
 : 1;

14471 
	emg_sig_ty≥
 {

14472 
	gMG_SIG_CONNECT_RESULT
 = 1,

14473 
	gMG_SIG_RECV
 = 2,

14474 
	gMG_SIG_CLOSE_CONN
 = 3,

14475 
	gMG_SIG_TOMBSTONE
 = 4,

14476 
	gMG_SIG_ACCEPT
 = 5,

14479 
mg_lwù_po°_sig«l
(
mg_sig_ty≥
 
sig
, 
mg_c⁄√˘i⁄
 *
nc
);

14482 
mg_lwù_mgr_scheduÀ_pﬁl
(
mg_mgr
 *
mgr
);

14487 #ifde‡
MG_MODULE_LINES


14495 #i‡
MG_ENABLE_NET_IF_LWIP_LOW_LEVEL


14499 
	~<lwù/öô.h
>

14500 
	~<lwù/pbuf.h
>

14501 
	~<lwù/t˝.h
>

14502 
	~<lwù/t˝ù.h
>

14503 #i‡((
LWIP_VERSION_MAJOR
 << 8Ë| 
LWIP_VERSION_MINOR
) >= 0x0105

14504 
	~<lwù/¥iv/t˝_¥iv.h
>

14506 
	~<lwù/t˝_im∂.h
>

14508 
	~<lwù/udp.h
>

14516 #i‚de‡
ù_2_ù4


14517 #ifde‡
ùX_2_ù


14518 
	#ù_2_ù4
(
addr
Ë
	`ùX_2_ù
◊ddr)

	)

14520 
	#ù_2_ù4
(
addr
Ë◊ddr)

	)

14528 #i‡
MG_ENABLE_IPV6


14529 
	#TCP_NEW
 
t˝_√w_ù6


	)

14530 
	#TCP_BIND
 
t˝_böd_ù6


	)

14531 
	#UDP_BIND
 
udp_böd_ù6


	)

14532 
	#IPADDR_NTOA
(
x
Ë
	`ù6addr_¡ﬂ
((c⁄° 
ù6_addr_t
 *)(x))

	)

14533 
	#SET_ADDR
(
d°
, 
§c
) \

14534 
	`mem˝y
((
d°
)->
sö6
.
sö6_addr
.
s6_addr
, (
§c
)->
ù6
.
addr
, \

14535 ((
d°
)->
sö6
.
sö6_addr
.
s6_addr
))

	)

14537 
	#TCP_NEW
 
t˝_√w


	)

14538 
	#TCP_BIND
 
t˝_böd


	)

14539 
	#UDP_BIND
 
udp_böd


	)

14540 
	#IPADDR_NTOA
 
ùaddr_¡ﬂ


	)

14541 
	#SET_ADDR
(
d°
, 
§c
Ë(d°)->
sö
.
sö_addr
.
s_addr
 = 
	`ù_2_ù4
(§c)->
addr


	)

14544 #i‡
NO_SYS


14545 
	#t˝ù_ˇŒback
(
‚
, 
¨g
Ë(‚)◊rg)

	)

14546 (*
	gt˝ù_ˇŒback_‚
)(*
	t¨g
);

14549 
mg_lwù_s¶_do_hs
(
mg_c⁄√˘i⁄
 *
nc
);

14550 
mg_lwù_s¶_£nd
(
mg_c⁄√˘i⁄
 *
nc
);

14551 
mg_lwù_s¶_ªcv
(
mg_c⁄√˘i⁄
 *
nc
);

14553 
mg_lwù_if_öô
(
mg_iÁ˚
 *
iÁ˚
);

14554 
mg_lwù_if_‰ì
(
mg_iÁ˚
 *
iÁ˚
);

14555 
mg_lwù_if_add_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
);

14556 
mg_lwù_if_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
);

14557 
time_t
 
mg_lwù_if_pﬁl
(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
);

14559 #i‡
deföed
(
RTOS_SDK
Ë|| deföed(
ESP_PLATFORM
)

14560 
mgos_lock
();

14561 
mgos_u∆ock
();

14563 
	#mgos_lock
()

	)

14564 
	#mgos_u∆ock
()

	)

14567 
mg_lwù_ªcv_comm⁄
(
mg_c⁄√˘i⁄
 *
nc
, 
pbuf
 *
p
);

14569 #i‡
LWIP_TCP_KEEPALIVE


14570 
mg_lwù_£t_kì∑live_∑øms
(
mg_c⁄√˘i⁄
 *
nc
, 
idÀ
,

14571 
öãrvÆ
, 
cou¡
) {

14572 i‡(
	gnc
->
	gsock
 =
INVALID_SOCKET
 || 
nc
->
Êags
 & 
MG_F_UDP
) {

14575 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14576 
t˝_pcb
 *
	gçcb
 = 
cs
->
pcb
.
t˝
;

14577 i‡(
	gidÀ
 > 0 && 
	göãrvÆ
 > 0 && 
	gcou¡
 > 0) {

14578 
	gçcb
->
	gkìp_idÀ
 = 
idÀ
 * 1000;

14579 
	gçcb
->
	gkìp_ötvl
 = 
öãrvÆ
 * 1000;

14580 
	gçcb
->
	gkìp_˙t
 = 
cou¡
;

14581 
	gçcb
->
	gso_›ti⁄s
 |
SOF_KEEPALIVE
;

14583 
	gçcb
->
	gso_›ti⁄s
 &~
SOF_KEEPALIVE
;

14586 #ñi‡!
deföed
(
MG_NO_LWIP_TCP_KEEPALIVE
)

14587 #w¨nög 
LWIP
 
TCP
 
kì∑live
 
is
 
dißbÀd
. 
PÀa£
 
c⁄sidî
 
íablög
 
ô
.

14590 
îr_t
 
mg_lwù_t˝_c⁄n_cb
(*
¨g
, 
t˝_pcb
 *
çcb
,Éº_à
îr
) {

14591 
mg_c⁄√˘i⁄
 *
	gnc
 = (mg_c⁄√˘i⁄ *Ë
¨g
;

14592 
DBG
(("%∞c⁄√˘Åÿ%s:%u = %d", 
nc
, 
IPADDR_NTOA
(
ùX_2_ù
(&
çcb
->
ªmŸe_ù
)),

14593 
çcb
->
ªmŸe_p‹t
, 
îr
));

14594 i‡(
	gnc
 =
NULL
) {

14595 
t˝_ab‹t
(
çcb
);

14596  
	gERR_ARG
;

14598 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14599 
	gcs
->
	gîr
 = 
îr
;

14600 #i‡
LWIP_TCP_KEEPALIVE


14601 i‡(
	gîr
 =0Ë
mg_lwù_£t_kì∑live_∑øms
(
nc
, 60, 10, 6);

14603 
mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

14604  
	gERR_OK
;

14607 
mg_lwù_t˝_îr‹_cb
(*
¨g
, 
îr_t
 
îr
) {

14608 
mg_c⁄√˘i⁄
 *
	gnc
 = (mg_c⁄√˘i⁄ *Ë
¨g
;

14609 
DBG
(("%∞c⁄¿îr‹ %d", 
nc
, 
îr
));

14610 i‡(
	gnc
 =
NULL
) ;

14611 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14612 
	gcs
->
	gpcb
.
	gt˝
 = 
NULL
;

14613 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_CONNECTING
) {

14614 
	gcs
->
	gîr
 = 
îr
;

14615 
mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

14617 
mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

14621 
îr_t
 
mg_lwù_t˝_ªcv_cb
(*
¨g
, 
t˝_pcb
 *
çcb
,

14622 
pbuf
 *
p
, 
îr_t
 
îr
) {

14623 
mg_c⁄√˘i⁄
 *
	gnc
 = (mg_c⁄√˘i⁄ *Ë
¨g
;

14624 
DBG
(("%∞%∞%u %d", 
nc
, 
çcb
, (
p
 !
NULL
 ?Ö->
tŸ_Àn
 : 0), 
îr
));

14625 i‡(
	gp
 =
NULL
) {

14626 i‡(
nc
 !
NULL
 && !“c->
Êags
 & 
MG_F_CLOSE_IMMEDIATELY
)) {

14627 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14628 i‡(
	gcs
->
	grx_chaö
 !
NULL
) {

14633 
cs
->
døöög_rx_chaö
 = 1;

14635 
mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

14640  
	gERR_OK
;

14641 } i‡(
	gnc
 =
NULL
) {

14642 
t˝_ab‹t
(
çcb
);

14643  
	gERR_ARG
;

14645 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14650 i‡(
	gp
->
	g√xt
 !
NULL
) {

14651 
pbuf
 *
q
 = 
p
->
√xt
;

14652 ; 
	gq
 !
NULL
; q = 
q
->
√xt
Ë
pbuf_ªf
(q);

14654 
mgos_lock
();

14655 i‡(
	gcs
->
	grx_chaö
 =
NULL
) {

14656 
cs
->
rx_off£t
 = 0;

14657 } i‡(
pbuf_˛í
(
cs
->
rx_chaö
) >= 4) {

14661 
pbuf
 *
≈
 = 
pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

14662 i‡(
	g≈
 !
NULL
) {

14663 
pbuf_c›y
(
≈
, 
p
);

14664 
pbuf_‰ì
(
p
);

14665 
	gp
 = 
≈
;

14668 
mgos_u∆ock
();

14669 
mg_lwù_ªcv_comm⁄
(
nc
, 
p
);

14670  
	gERR_OK
;

14673 
mg_lwù_c⁄sume_rx_chaö_t˝
(
mg_c⁄√˘i⁄
 *
nc
) {

14674 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14675 i‡(
	gcs
->
	grx_chaö
 =
NULL
) ;

14676 #i‡
MG_ENABLE_SSL


14677 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_SSL
) {

14678 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_SSL_HANDSHAKE_DONE
) {

14679 
mg_lwù_s¶_ªcv
(
nc
);

14681 
mg_lwù_s¶_do_hs
(
nc
);

14686 
mgos_lock
();

14687 
	gcs
->
	grx_chaö
 !
NULL
 && 
nc
->
ªcv_mbuf
.
Àn
 <Çc->
ªcv_mbuf_limô
) {

14688 
pbuf
 *
£g
 = 
cs
->
rx_chaö
;

14690 
size_t
 
	g£g_Àn
 = (
£g
->
Àn
 - 
cs
->
rx_off£t
);

14691 
size_t
 
	gbuf_avaû
 = (
nc
->
ªcv_mbuf_limô
 -Çc->
ªcv_mbuf
.
Àn
);

14692 
size_t
 
	gÀn
 = 
MIN
(
£g_Àn
, 
buf_avaû
);

14694 *
	gd©a
 = (*Ë
MG_MALLOC
(
Àn
);

14695 i‡(
	gd©a
 =
NULL
) {

14696 
mgos_u∆ock
();

14697 
DBG
(("OOM"));

14700 
pbuf_c›y_∑πül
(
£g
, 
d©a
, 
Àn
, 
cs
->
rx_off£t
);

14701 
	gcs
->
	grx_off£t
 +
Àn
;

14702 i‡(
	gcs
->
	grx_off£t
 =
cs
->
rx_chaö
->
Àn
) {

14703 
cs
->
rx_chaö
 = 
pbuf_dechaö
(cs->rx_chain);

14704 
pbuf_‰ì
(
£g
);

14705 
	gcs
->
	grx_off£t
 = 0;

14707 
mgos_u∆ock
();

14708 
mg_if_ªcv_t˝_cb
(
nc
, 
d©a
, 
Àn
, 1 );

14709 
mgos_lock
();

14711 
mgos_u∆ock
();

14714 
mg_lwù_h™dÀ_ªcv_t˝
(
mg_c⁄√˘i⁄
 *
nc
) {

14715 
mg_lwù_c⁄sume_rx_chaö_t˝
(
nc
);

14717 i‡(
	gnc
->
	g£nd_mbuf
.
	gÀn
 > 0) {

14718 
mg_lwù_mgr_scheduÀ_pﬁl
(
nc
->
mgr
);

14722 
îr_t
 
mg_lwù_t˝_£¡_cb
(*
¨g
, 
t˝_pcb
 *
çcb
,

14723 
u16_t
 
num_£¡
) {

14724 
mg_c⁄√˘i⁄
 *
	gnc
 = (mg_c⁄√˘i⁄ *Ë
¨g
;

14725 
DBG
(("%∞%∞%u %∞%p", 
nc
, 
çcb
, 
num_£¡
,Åpcb->
un£¡
,Åpcb->
u«cked
));

14726 i‡(
	gnc
 =
NULL
Ë 
ERR_OK
;

14727 i‡((
	gnc
->
	gÊags
 & 
	gMG_F_SEND_AND_CLOSE
Ë&& !“c->Êag†& 
	gMG_F_WANT_WRITE
) &&

14728 
	gnc
->
	g£nd_mbuf
.
	gÀn
 =0 && 
çcb
->
un£¡
 =
NULL
 &&Åpcb->
u«cked
 == NULL) {

14729 
mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

14731  
	gERR_OK
;

14734 
	smg_lwù_if_c⁄√˘_t˝_˘x
 {

14735 
mg_c⁄√˘i⁄
 *
	gnc
;

14736 c⁄° 
sockë_addªss
 *
	gß
;

14739 
mg_lwù_if_c⁄√˘_t˝_t˝ù
(*
¨g
) {

14740 
mg_lwù_if_c⁄√˘_t˝_˘x
 *
	g˘x
 =

14741 (
mg_lwù_if_c⁄√˘_t˝_˘x
 *Ë
¨g
;

14742 
mg_c⁄√˘i⁄
 *
	gnc
 = 
˘x
->
nc
;

14743 c⁄° 
sockë_addªss
 *
	gß
 = 
˘x
->
ß
;

14745 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14746 
t˝_pcb
 *
	gçcb
 = 
TCP_NEW
();

14747 
	gcs
->
	gpcb
.
	gt˝
 = 
çcb
;

14748 
ù_addr_t
 *
	gù
 = (ù_addr_à*Ë&
ß
->
sö
.
sö_addr
.
s_addr
;

14749 
u16_t
 
	gp‹t
 = 
¡ohs
(
ß
->
sö
.
sö_p‹t
);

14750 
t˝_¨g
(
çcb
, 
nc
);

14751 
t˝_îr
(
çcb
, 
mg_lwù_t˝_îr‹_cb
);

14752 
t˝_£¡
(
çcb
, 
mg_lwù_t˝_£¡_cb
);

14753 
t˝_ªcv
(
çcb
, 
mg_lwù_t˝_ªcv_cb
);

14754 
	gcs
->
	gîr
 = 
TCP_BIND
(
çcb
, 
IP_ADDR_ANY
, 0 );

14755 
DBG
(("%∞t˝_böd = %d", 
nc
, 
cs
->
îr
));

14756 i‡(
	gcs
->
	gîr
 !
ERR_OK
) {

14757 
mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

14760 
	gcs
->
	gîr
 = 
t˝_c⁄√˘
(
çcb
, 
ù
, 
p‹t
, 
mg_lwù_t˝_c⁄n_cb
);

14761 
DBG
(("%∞t˝_c⁄√˘ %∞%d", 
nc
, 
çcb
, 
cs
->
îr
));

14762 i‡(
	gcs
->
	gîr
 !
ERR_OK
) {

14763 
mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

14768 
mg_lwù_if_c⁄√˘_t˝
(
mg_c⁄√˘i⁄
 *
nc
,

14769 c⁄° 
sockë_addªss
 *
ß
) {

14770 
mg_lwù_if_c⁄√˘_t˝_˘x
 
	g˘x
 = {.
nc
 =Çc, .
	gß
 = 
ß
};

14771 
t˝ù_ˇŒback
(
mg_lwù_if_c⁄√˘_t˝_t˝ù
, &
˘x
);

14778 #i‡((
LWIP_VERSION_MAJOR
 << 8Ë| 
LWIP_VERSION_MINOR
) >= 0x0105

14779 
mg_lwù_udp_ªcv_cb
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

14780 c⁄° 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
)

14782 
mg_lwù_udp_ªcv_cb
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

14783 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
)

14786 
mg_c⁄√˘i⁄
 *
	gnc
 = (mg_c⁄√˘i⁄ *Ë
¨g
;

14787 
DBG
(("%∞%s:%u %∞%u %u", 
nc
, 
IPADDR_NTOA
(
addr
), 
p‹t
, 
p
,Ö->
ªf
,Ö->
Àn
));

14789 
pbuf
 *
	gßp
 =

14790 
pbuf_Æloc
(
PBUF_RAW
, (
sockë_addªss
), 
PBUF_RAM
);

14791 i‡(
	gßp
 =
NULL
) {

14792 
pbuf_‰ì
(
p
);

14795 
sockë_addªss
 *
	gß
 = (sockë_addªs†*Ë
ßp
->
∑ylﬂd
;

14796 #i‡((
LWIP_VERSION_MAJOR
 << 8Ë| 
LWIP_VERSION_MINOR
) >= 0x0105

14797 
	gß
->
	gsö
.
	gsö_addr
.
	gs_addr
 = 
ù_2_ù4
(
addr
)->addr;

14799 
	gß
->
	gsö
.
	gsö_addr
.
	gs_addr
 = 
addr
->addr;

14801 
	gß
->
	gsö
.
	gsö_p‹t
 = 
ht⁄s
(
p‹t
);

14803 
	gp
 = 
pbuf_cﬂÀs˚
(
p
, 
PBUF_RAW
);

14804 
pbuf_chaö
(
ßp
, 
p
);

14805 
mg_lwù_ªcv_comm⁄
(
nc
, 
ßp
);

14806 (Ë
	gpcb
;

14809 
mg_lwù_ªcv_comm⁄
(
mg_c⁄√˘i⁄
 *
nc
, 
pbuf
 *
p
) {

14810 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14811 
mgos_lock
();

14812 i‡(
	gcs
->
	grx_chaö
 =
NULL
) {

14813 
cs
->
rx_chaö
 = 
p
;

14815 
pbuf_chaö
(
cs
->
rx_chaö
, 
p
);

14817 i‡(!
	gcs
->
	gªcv_≥ndög
) {

14818 
	gcs
->
	gªcv_≥ndög
 = 1;

14819 
mg_lwù_po°_sig«l
(
MG_SIG_RECV
, 
nc
);

14821 
mgos_u∆ock
();

14824 
mg_lwù_h™dÀ_ªcv_udp
(
mg_c⁄√˘i⁄
 *
nc
) {

14825 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14830 
	gcs
->
	grx_chaö
 !
NULL
) {

14831 
pbuf
 *
ßp
 = 
cs
->
rx_chaö
;

14832 
pbuf
 *
	gp
 = 
ßp
->
√xt
;

14833 
	gcs
->
	grx_chaö
 = 
pbuf_dechaö
(
p
);

14834 
size_t
 
	gd©a_Àn
 = 
p
->
Àn
;

14835 *
	gd©a
 = (*Ë
MG_MALLOC
(
d©a_Àn
);

14836 i‡(
	gd©a
 !
NULL
) {

14837 
pbuf_c›y_∑πül
(
p
, 
d©a
, 
d©a_Àn
, 0);

14838 
pbuf_‰ì
(
p
);

14839 
mg_if_ªcv_udp_cb
(
nc
, 
d©a
, 
d©a_Àn
,

14840 (
sockë_addªss
 *Ë
ßp
->
∑ylﬂd
, s≠->
Àn
);

14841 
pbuf_‰ì
(
ßp
);

14843 
pbuf_‰ì
(
p
);

14844 
pbuf_‰ì
(
ßp
);

14849 
mg_lwù_if_c⁄√˘_udp_t˝ù
(*
¨g
) {

14850 
mg_c⁄√˘i⁄
 *
	gnc
 = (mg_c⁄√˘i⁄ *Ë
¨g
;

14851 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14852 
udp_pcb
 *
	gupcb
 = 
udp_√w
();

14853 
	gcs
->
	gîr
 = 
UDP_BIND
(
upcb
, 
IP_ADDR_ANY
, 0 );

14854 
DBG
(("%∞udp_böd %∞%d", 
nc
, 
upcb
, 
cs
->
îr
));

14855 i‡(
	gcs
->
	gîr
 =
ERR_OK
) {

14856 
udp_ªcv
(
upcb
, 
mg_lwù_udp_ªcv_cb
, 
nc
);

14857 
	gcs
->
	gpcb
.
	gudp
 = 
upcb
;

14859 
udp_ªmove
(
upcb
);

14861 
mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

14864 
mg_lwù_if_c⁄√˘_udp
(
mg_c⁄√˘i⁄
 *
nc
) {

14865 
t˝ù_ˇŒback
(
mg_lwù_if_c⁄√˘_udp_t˝ù
, 
nc
);

14868 
mg_lwù_ac˚±_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
, 
t˝_pcb
 *
çcb
) {

14869 
sockë_addªss
 
	gß
;

14870 
SET_ADDR
(&
ß
, &
çcb
->
ªmŸe_ù
);

14871 
	gß
.
	gsö
.
	gsö_p‹t
 = 
ht⁄s
(
çcb
->
ªmŸe_p‹t
);

14872 
mg_if_ac˚±_t˝_cb
(
nc
, &
ß
, (ß.
sö
));

14875 
t˝_˛o£_t˝ù
(*
¨g
) {

14876 
t˝_˛o£
((
t˝_pcb
 *Ë
¨g
);

14879 
mg_lwù_h™dÀ_ac˚±
(
mg_c⁄√˘i⁄
 *
nc
) {

14880 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14881 i‡(
	gcs
->
	gpcb
.
	gt˝
 =
NULL
) ;

14882 #i‡
MG_ENABLE_SSL


14883 i‡(
	gcs
->
	glc
->
	gÊags
 & 
	gMG_F_SSL
) {

14884 i‡(
mg_s¶_if_c⁄n_ac˚±
(
nc
, 
cs
->
lc
Ë!
MG_SSL_OK
) {

14885 
LOG
(
LL_ERROR
, ("SSLÉrror"));

14886 
t˝ù_ˇŒback
(
t˝_˛o£_t˝ù
, 
cs
->
pcb
.
t˝
);

14891 
mg_lwù_ac˚±_c⁄n
(
nc
, 
cs
->
pcb
.
t˝
);

14895 
îr_t
 
mg_lwù_ac˚±_cb
(*
¨g
, 
t˝_pcb
 *
√wçcb
,Éº_à
îr
) {

14896 
mg_c⁄√˘i⁄
 *
	glc
 = (mg_c⁄√˘i⁄ *Ë
¨g
, *
	gnc
;

14897 
mg_lwù_c⁄n_°©e
 *
	glcs
, *
	gcs
;

14898 
t˝_pcb_li°í
 *
	gÕcb
;

14899 
LOG
(
LL_DEBUG
,

14900 ("%∞c⁄¿%∞‰om %s:%u", 
lc
, 
√wçcb
,

14901 
IPADDR_NTOA
(
ùX_2_ù
(&
√wçcb
->
ªmŸe_ù
)),Çewçcb->
ªmŸe_p‹t
));

14902 i‡(
	glc
 =
NULL
) {

14903 
t˝_ab‹t
(
√wçcb
);

14904  
	gERR_ABRT
;

14906 
	glcs
 = (
mg_lwù_c⁄n_°©e
 *Ë
lc
->
sock
;

14907 
	gÕcb
 = (
t˝_pcb_li°í
 *Ë
lcs
->
pcb
.
t˝
;

14908 #i‡
TCP_LISTEN_BACKLOG


14909 
t˝_ac˚±ed
(
Õcb
);

14911 
	gnc
 = 
mg_if_ac˚±_√w_c⁄n
(
lc
);

14912 i‡(
	gnc
 =
NULL
) {

14913 
t˝_ab‹t
(
√wçcb
);

14914  
	gERR_ABRT
;

14916 
	gcs
 = (
mg_lwù_c⁄n_°©e
 *Ë
nc
->
sock
;

14917 
	gcs
->
	glc
 = 
lc
;

14918 
	gcs
->
	gpcb
.
	gt˝
 = 
√wçcb
;

14921 
t˝_¨g
(
√wçcb
, 
nc
);

14922 
t˝_îr
(
√wçcb
, 
mg_lwù_t˝_îr‹_cb
);

14923 
t˝_£¡
(
√wçcb
, 
mg_lwù_t˝_£¡_cb
);

14924 
t˝_ªcv
(
√wçcb
, 
mg_lwù_t˝_ªcv_cb
);

14925 #i‡
LWIP_TCP_KEEPALIVE


14926 
mg_lwù_£t_kì∑live_∑øms
(
nc
, 60, 10, 6);

14928 
mg_lwù_po°_sig«l
(
MG_SIG_ACCEPT
, 
nc
);

14929 (Ë
	gîr
;

14930 (Ë
	gÕcb
;

14931  
	gERR_OK
;

14934 
	smg_lwù_if_li°í_˘x
 {

14935 
mg_c⁄√˘i⁄
 *
	gnc
;

14936 
sockë_addªss
 *
	gß
;

14937 
	gªt
;

14940 
mg_lwù_if_li°í_t˝_t˝ù
(*
¨g
) {

14941 
mg_lwù_if_li°í_˘x
 *
	g˘x
 = (mg_lwù_if_li°í_˘x *Ë
¨g
;

14942 
mg_c⁄√˘i⁄
 *
	gnc
 = 
˘x
->
nc
;

14943 
sockë_addªss
 *
	gß
 = 
˘x
->
ß
;

14944 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14945 
t˝_pcb
 *
	gçcb
 = 
TCP_NEW
();

14946 
ù_addr_t
 *
	gù
 = (ù_addr_à*Ë&
ß
->
sö
.
sö_addr
.
s_addr
;

14947 
u16_t
 
	gp‹t
 = 
¡ohs
(
ß
->
sö
.
sö_p‹t
);

14948 
	gcs
->
	gîr
 = 
TCP_BIND
(
çcb
, 
ù
, 
p‹t
);

14949 
DBG
(("%∞t˝_böd(%s:%uË%d", 
nc
, 
IPADDR_NTOA
(
ù
), 
p‹t
, 
cs
->
îr
));

14950 i‡(
	gcs
->
	gîr
 !
ERR_OK
) {

14951 
t˝_˛o£
(
çcb
);

14952 
	g˘x
->
	gªt
 = -1;

14955 
t˝_¨g
(
çcb
, 
nc
);

14956 
	gçcb
 = 
t˝_li°í
(
çcb
);

14957 
	gcs
->
	gpcb
.
	gt˝
 = 
çcb
;

14958 
t˝_ac˚±
(
çcb
, 
mg_lwù_ac˚±_cb
);

14959 
	g˘x
->
	gªt
 = 0;

14962 
mg_lwù_if_li°í_t˝
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

14963 
mg_lwù_if_li°í_˘x
 
	g˘x
 = {.
nc
 =Çc, .
	gß
 = 
ß
};

14964 
t˝ù_ˇŒback
(
mg_lwù_if_li°í_t˝_t˝ù
, &
˘x
);

14965  
	g˘x
.
	gªt
;

14968 
mg_lwù_if_li°í_udp_t˝ù
(*
¨g
) {

14969 
mg_lwù_if_li°í_˘x
 *
	g˘x
 = (mg_lwù_if_li°í_˘x *Ë
¨g
;

14970 
mg_c⁄√˘i⁄
 *
	gnc
 = 
˘x
->
nc
;

14971 
sockë_addªss
 *
	gß
 = 
˘x
->
ß
;

14972 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14973 
udp_pcb
 *
	gupcb
 = 
udp_√w
();

14974 
ù_addr_t
 *
	gù
 = (ù_addr_à*Ë&
ß
->
sö
.
sö_addr
.
s_addr
;

14975 
u16_t
 
	gp‹t
 = 
¡ohs
(
ß
->
sö
.
sö_p‹t
);

14976 
	gcs
->
	gîr
 = 
UDP_BIND
(
upcb
, 
ù
, 
p‹t
);

14977 
DBG
(("%∞udb_böd(%s:%uË%d", 
nc
, 
IPADDR_NTOA
(
ù
), 
p‹t
, 
cs
->
îr
));

14978 i‡(
	gcs
->
	gîr
 !
ERR_OK
) {

14979 
udp_ªmove
(
upcb
);

14980 
	g˘x
->
	gªt
 = -1;

14982 
udp_ªcv
(
upcb
, 
mg_lwù_udp_ªcv_cb
, 
nc
);

14983 
	gcs
->
	gpcb
.
	gudp
 = 
upcb
;

14984 
	g˘x
->
	gªt
 = 0;

14988 
mg_lwù_if_li°í_udp
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

14989 
mg_lwù_if_li°í_˘x
 
	g˘x
 = {.
nc
 =Çc, .
	gß
 = 
ß
};

14990 
t˝ù_ˇŒback
(
mg_lwù_if_li°í_udp_t˝ù
, &
˘x
);

14991  
	g˘x
.
	gªt
;

14994 
	smg_lwù_t˝_wrôe_˘x
 {

14995 
mg_c⁄√˘i⁄
 *
	gnc
;

14996 c⁄° *
	gd©a
;

14997 
uöt16_t
 
	gÀn
;

14998 
	gªt
;

15001 
t˝_ouçut_t˝ù
(*
¨g
) {

15002 
t˝_ouçut
((
t˝_pcb
 *Ë
¨g
);

15005 
mg_lwù_t˝_wrôe_t˝ù
(*
¨g
) {

15006 
mg_lwù_t˝_wrôe_˘x
 *
	g˘x
 = (mg_lwù_t˝_wrôe_˘x *Ë
¨g
;

15007 
mg_c⁄√˘i⁄
 *
	gnc
 = 
˘x
->
nc
;

15008 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15009 
t˝_pcb
 *
	gçcb
 = 
cs
->
pcb
.
t˝
;

15010 
size_t
 
	gÀn
 = 
MIN
(
çcb
->
mss
, MIN(
˘x
->
Àn
,Åpcb->
¢d_buf
));

15011 
size_t
 
	gun£¡
, 
	gu«cked
;

15012 i‡(
	gÀn
 == 0) {

15013 
DBG
(("%∞nÿbu‡avaû %u %u %∞%p", 
çcb
,Åpcb->
¢d_buf
,Åpcb->
¢d_queuñí
,

15014 
çcb
->
un£¡
,Åpcb->
u«cked
));

15015 
t˝ù_ˇŒback
(
t˝_ouçut_t˝ù
, 
çcb
);

15016 
	g˘x
->
	gªt
 = 0;

15019 
	gun£¡
 = (
çcb
->
un£¡
 !
NULL
 ?Åpcb->un£¡->
Àn
 : 0);

15020 
	gu«cked
 = (
çcb
->
u«cked
 !
NULL
 ?Åpcb->u«cked->
Àn
 : 0);

15027 #i‡
CS_PLATFORM
 =
CS_P_ESP8266


15028 i‡(
	gu«cked
 > 0) {

15029 
	g˘x
->
	gªt
 = 0;

15032 
	gÀn
 = 
MIN
(
Àn
, (
TCP_MSS
 - 
un£¡
));

15034 
	gcs
->
	gîr
 = 
t˝_wrôe
(
çcb
, 
˘x
->
d©a
, 
Àn
, 
TCP_WRITE_FLAG_COPY
);

15035 
	gun£¡
 = (
çcb
->
un£¡
 !
NULL
 ?Åpcb->un£¡->
Àn
 : 0);

15036 
	gu«cked
 = (
çcb
->
u«cked
 !
NULL
 ?Åpcb->u«cked->
Àn
 : 0);

15037 
DBG
(("%∞t˝_wrôê%u = %d, %u %u", 
çcb
, 
Àn
, 
cs
->
îr
, 
un£¡
, 
u«cked
));

15038 i‡(
	gcs
->
	gîr
 !
ERR_OK
) {

15043 
˘x
->
ªt
 = (
cs
->
îr
 =
ERR_MEM
 ? 0 : -1);

15046 
	g˘x
->
	gªt
 = 
Àn
;

15049 
mg_lwù_t˝_wrôe
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
d©a
,

15050 
uöt16_t
 
Àn
) {

15051 
mg_lwù_t˝_wrôe_˘x
 
	g˘x
 = {.
nc
 =Çc, .
	gd©a
 = 
d©a
, .
	gÀn
 = 
Àn
};

15052 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15053 
t˝_pcb
 *
	gçcb
 = 
cs
->
pcb
.
t˝
;

15054 i‡(
	gçcb
 =
NULL
) {

15057 
t˝ù_ˇŒback
(
mg_lwù_t˝_wrôe_t˝ù
, &
˘x
);

15058  
	g˘x
.
	gªt
;

15061 
	sudp_£ndto_˘x
 {

15062 
udp_pcb
 *
	gupcb
;

15063 
pbuf
 *
	gp
;

15064 
ù_addr_t
 *
	gù
;

15065 
uöt16_t
 
	gp‹t
;

15066 
	gªt
;

15069 
udp_£ndto_t˝ù
(*
¨g
) {

15070 
udp_£ndto_˘x
 *
	g˘x
 = (udp_£ndto_˘x *Ë
¨g
;

15071 
	g˘x
->
	gªt
 = 
udp_£ndto
(
˘x
->
upcb
, ctx->
p
, ctx->
ù
, ctx->
p‹t
);

15074 
mg_lwù_udp_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
d©a
,

15075 
uöt16_t
 
Àn
) {

15076 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15077 i‡(
	gcs
->
	gpcb
.
	gudp
 =
NULL
) {

15083 
DBG
(("%∞sockë i†nŸ c⁄√˘ed", 
nc
));

15086 
udp_pcb
 *
	gupcb
 = 
cs
->
pcb
.
udp
;

15087 
pbuf
 *
	gp
 = 
pbuf_Æloc
(
PBUF_TRANSPORT
, 
Àn
, 
PBUF_RAM
);

15088 #i‡
deföed
(
LWIP_IPV4
Ë&& LWIP_IPV4 && deföed(
LWIP_IPV6
) && LWIP_IPV6

15089 
ù_addr_t
 
	gù
 = {.
u_addr
.
ù4
.
addr
 = 
nc
->
ß
.
sö
.
sö_addr
.
s_addr
, .
	gty≥
 = 0};

15091 
ù_addr_t
 
	gù
 = {.
addr
 = 
nc
->
ß
.
sö
.
sö_addr
.
s_addr
};

15093 
u16_t
 
	gp‹t
 = 
¡ohs
(
nc
->
ß
.
sö
.
sö_p‹t
);

15094 i‡(
	gp
 =
NULL
) {

15095 
DBG
(("OOM"));

15098 
mem˝y
(
p
->
∑ylﬂd
, 
d©a
, 
Àn
);

15099 
udp_£ndto_˘x
 
	g˘x
 = {.
upcb
 = upcb, .
	gp
 = 
p
, .
	gù
 = &
ù
, .
	gp‹t
 = 
p‹t
};

15100 
t˝ù_ˇŒback
(
udp_£ndto_t˝ù
, &
˘x
);

15101 
	gcs
->
	gîr
 = 
˘x
.
ªt
;

15102 
pbuf_‰ì
(
p
);

15103  (
	gcs
->
	gîr
 =
ERR_OK
 ? 
Àn
 : -1);

15106 
mg_lwù_£nd_m‹e
(
mg_c⁄√˘i⁄
 *
nc
) {

15107 
	gnum_£¡
 = 0;

15108 i‡(
	gnc
->
	gsock
 =
INVALID_SOCKET
) ;

15109 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
) {

15110 
	gnum_£¡
 = 
mg_lwù_udp_£nd
(
nc
,Çc->
£nd_mbuf
.
buf
,Çc->£nd_mbuf.
Àn
);

15111 
DBG
(("%∞mg_lwù_udp_£nd %u = %d", 
nc
,Çc->
£nd_mbuf
.
Àn
, 
num_£¡
));

15113 
	gnum_£¡
 = 
mg_lwù_t˝_wrôe
(
nc
,Çc->
£nd_mbuf
.
buf
,Çc->£nd_mbuf.
Àn
);

15114 
DBG
(("%∞mg_lwù_t˝_wrôê%u = %d", 
nc
,Çc->
£nd_mbuf
.
Àn
, 
num_£¡
));

15116 i‡(
	gnum_£¡
 == 0) ;

15117 i‡(
	gnum_£¡
 > 0) {

15118 
mg_if_£¡_cb
(
nc
, 
num_£¡
);

15120 
mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

15124 
mg_lwù_if_t˝_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
,

15125 
size_t
 
Àn
) {

15126 
mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

15127 
mg_lwù_mgr_scheduÀ_pﬁl
(
nc
->
mgr
);

15130 
mg_lwù_if_udp_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
,

15131 
size_t
 
Àn
) {

15132 
mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

15133 
mg_lwù_mgr_scheduÀ_pﬁl
(
nc
->
mgr
);

15136 
	st˝_ªcved_˘x
 {

15137 
t˝_pcb
 *
	gçcb
;

15138 
size_t
 
	gÀn
;

15141 
t˝_ªcved_t˝ù
(*
¨g
) {

15142 
t˝_ªcved_˘x
 *
	g˘x
 = (t˝_ªcved_˘x *Ë
¨g
;

15143 
t˝_ªcved
(
˘x
->
çcb
, ctx->
Àn
);

15146 
mg_lwù_if_ªcved
(
mg_c⁄√˘i⁄
 *
nc
, 
size_t
 
Àn
) {

15147 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
) ;

15148 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15149 i‡(
	gnc
->
	gsock
 =
INVALID_SOCKET
 || 
cs
->
pcb
.
t˝
 =
NULL
) {

15150 
DBG
(("%∞övÆid sockë", 
nc
));

15153 
DBG
(("%∞%∞%u %u", 
nc
, 
cs
->
pcb
.
t˝
, 
Àn
,

15154 (
cs
->
rx_chaö
 ? cs->rx_chaö->
tŸ_Àn
 : 0)));

15155 
t˝_ªcved_˘x
 
	g˘x
 = {.
çcb
 = 
cs
->
pcb
.
t˝
, .
	gÀn
 = 
Àn
};

15156 #i‡
MG_ENABLE_SSL


15157 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_SSL
)) {

15158 
t˝ù_ˇŒback
(
t˝_ªcved_t˝ù
, &
˘x
);

15164 
t˝ù_ˇŒback
(
t˝_ªcved_t˝ù
, &
˘x
);

15166 
mbuf_åim
(&
nc
->
ªcv_mbuf
);

15169 
mg_lwù_if_¸óã_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

15170 
mg_lwù_c⁄n_°©e
 *
	gcs
 =

15171 (
mg_lwù_c⁄n_°©e
 *Ë
MG_CALLOC
(1, (*
cs
));

15172 i‡(
	gcs
 =
NULL
)  0;

15173 
	gcs
->
	gnc
 = 
nc
;

15174 
	gnc
->
	gsock
 = (
öçå_t
Ë
cs
;

15178 
udp_ªmove_t˝ù
(*
¨g
) {

15179 
udp_ªmove
((
udp_pcb
 *Ë
¨g
);

15182 
mg_lwù_if_de°roy_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

15183 i‡(
	gnc
->
	gsock
 =
INVALID_SOCKET
) ;

15184 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15185 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
)) {

15186 
t˝_pcb
 *
	gçcb
 = 
cs
->
pcb
.
t˝
;

15187 i‡(
	gçcb
 !
NULL
) {

15188 
t˝_¨g
(
çcb
, 
NULL
);

15189 
DBG
(("%∞t˝_˛o£ %p", 
nc
, 
çcb
));

15190 
t˝_¨g
(
çcb
, 
NULL
);

15191 
t˝ù_ˇŒback
(
t˝_˛o£_t˝ù
, 
çcb
);

15193 
	gcs
->
	grx_chaö
 !
NULL
) {

15194 
pbuf
 *
£g
 = 
cs
->
rx_chaö
;

15195 
	gcs
->
	grx_chaö
 = 
pbuf_dechaö
(
cs
->
rx_chaö
);

15196 
pbuf_‰ì
(
£g
);

15198 
mem£t
(
cs
, 0, (*cs));

15199 
MG_FREE
(
cs
);

15200 } i‡(
	gnc
->
	gli°íî
 =
NULL
) {

15202 
udp_pcb
 *
upcb
 = 
cs
->
pcb
.
udp
;

15203 i‡(
	gupcb
 !
NULL
) {

15204 
DBG
(("%∞udp_ªmovê%p", 
nc
, 
upcb
));

15205 
t˝ù_ˇŒback
(
udp_ªmove_t˝ù
, 
upcb
);

15207 
mem£t
(
cs
, 0, (*cs));

15208 
MG_FREE
(
cs
);

15210 
	gnc
->
	gsock
 = 
INVALID_SOCKET
;

15213 
mg_lwù_if_gë_c⁄n_addr
(
mg_c⁄√˘i⁄
 *
nc
, 
ªmŸe
,

15214 
sockë_addªss
 *
ß
) {

15215 
mem£t
(
ß
, 0, (*sa));

15216 i‡(
	gnc
 =
NULL
 || 
nc
->
sock
 =
INVALID_SOCKET
) ;

15217 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15218 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
) {

15219 
udp_pcb
 *
	gupcb
 = 
cs
->
pcb
.
udp
;

15220 i‡(
	gªmŸe
) {

15221 
mem˝y
(
ß
, &
nc
->sa, (*sa));

15222 } i‡(
	gupcb
 !
NULL
) {

15223 
ß
->
sö
.
sö_p‹t
 = 
ht⁄s
(
upcb
->
loˇl_p‹t
);

15224 
SET_ADDR
(
ß
, &
upcb
->
loˇl_ù
);

15227 
t˝_pcb
 *
	gçcb
 = 
cs
->
pcb
.
t˝
;

15228 i‡(
	gªmŸe
) {

15229 
mem˝y
(
ß
, &
nc
->sa, (*sa));

15230 } i‡(
	gçcb
 !
NULL
) {

15231 
ß
->
sö
.
sö_p‹t
 = 
ht⁄s
(
çcb
->
loˇl_p‹t
);

15232 
SET_ADDR
(
ß
, &
çcb
->
loˇl_ù
);

15237 
mg_lwù_if_sock_£t
(
mg_c⁄√˘i⁄
 *
nc
, 
sock_t
 
sock
) {

15238 
	gnc
->
	gsock
 = 
sock
;

15242 
	#MG_LWIP_IFACE_VTABLE
 \

15244 
mg_lwù_if_öô
, \

15245 
mg_lwù_if_‰ì
, \

15246 
mg_lwù_if_add_c⁄n
, \

15247 
mg_lwù_if_ªmove_c⁄n
, \

15248 
mg_lwù_if_pﬁl
, \

15249 
mg_lwù_if_li°í_t˝
, \

15250 
mg_lwù_if_li°í_udp
, \

15251 
mg_lwù_if_c⁄√˘_t˝
, \

15252 
mg_lwù_if_c⁄√˘_udp
, \

15253 
mg_lwù_if_t˝_£nd
, \

15254 
mg_lwù_if_udp_£nd
, \

15255 
mg_lwù_if_ªcved
, \

15256 
mg_lwù_if_¸óã_c⁄n
, \

15257 
mg_lwù_if_de°roy_c⁄n
, \

15258 
mg_lwù_if_sock_£t
, \

15259 
mg_lwù_if_gë_c⁄n_addr
, \

15260 }

	)

15263 c⁄° 
mg_iÁ˚_vèbÀ
 
	gmg_lwù_iÁ˚_vèbÀ
 = 
MG_LWIP_IFACE_VTABLE
;

15264 #i‡
MG_NET_IF
 =
MG_NET_IF_LWIP_LOW_LEVEL


15265 c⁄° 
mg_iÁ˚_vèbÀ
 
	gmg_deÁu…_iÁ˚_vèbÀ
 = 
MG_LWIP_IFACE_VTABLE
;

15269 #ifde‡
MG_MODULE_LINES


15277 #i‡
MG_NET_IF
 =
MG_NET_IF_LWIP_LOW_LEVEL


15279 #i‚de‡
MG_SIG_QUEUE_LEN


15280 
	#MG_SIG_QUEUE_LEN
 32

	)

15283 
	smg_ev_mgr_lwù_sig«l
 {

15284 
	gsig
;

15285 
mg_c⁄√˘i⁄
 *
	gnc
;

15288 
	smg_ev_mgr_lwù_d©a
 {

15289 
mg_ev_mgr_lwù_sig«l
 
	gsig_queue
[
MG_SIG_QUEUE_LEN
];

15290 
	gsig_queue_Àn
;

15291 
	g°¨t_ödex
;

15294 
mg_lwù_po°_sig«l
(
mg_sig_ty≥
 
sig
, 
mg_c⁄√˘i⁄
 *
nc
) {

15295 
mg_ev_mgr_lwù_d©a
 *
	gmd
 =

15296 (
mg_ev_mgr_lwù_d©a
 *Ë
nc
->
iÁ˚
->
d©a
;

15297 
mgos_lock
();

15298 i‡(
	gmd
->
	gsig_queue_Àn
 >
MG_SIG_QUEUE_LEN
) {

15299 
mgos_u∆ock
();

15302 
	gíd_ödex
 = (
md
->
°¨t_ödex
 + md->
sig_queue_Àn
Ë% 
MG_SIG_QUEUE_LEN
;

15303 
	gmd
->
	gsig_queue
[
íd_ödex
].
	gsig
 = 
sig
;

15304 
	gmd
->
	gsig_queue
[
íd_ödex
].
	gnc
 = 
nc
;

15305 
	gmd
->
	gsig_queue_Àn
++;

15306 
mg_lwù_mgr_scheduÀ_pﬁl
(
nc
->
mgr
);

15307 
mgos_u∆ock
();

15310 
mg_ev_mgr_lwù_¥o˚ss_sig«ls
(
mg_mgr
 *
mgr
) {

15311 
mg_ev_mgr_lwù_d©a
 *
	gmd
 =

15312 (
mg_ev_mgr_lwù_d©a
 *Ë
mgr
->
iÁ˚s
[
MG_MAIN_IFACE
]->
d©a
;

15313 
	gmd
->
	gsig_queue_Àn
 > 0) {

15314 
mgos_lock
();

15315 
	gsig
 = 
md
->
sig_queue
[md->
°¨t_ödex
].
sig
;

15316 
mg_c⁄√˘i⁄
 *
	gnc
 = 
md
->
sig_queue
[md->
°¨t_ödex
].
nc
;

15317 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15318 
	gmd
->
	g°¨t_ödex
 = (
md
->
°¨t_ödex
 + 1Ë% 
MG_SIG_QUEUE_LEN
;

15319 
	gmd
->
	gsig_queue_Àn
--;

15320 
mgos_u∆ock
();

15321 i‡(
	gnc
->
	giÁ˚
 =
NULL
 || 
nc
->
mgr
 == NULL) ;

15322 
	gsig
) {

15323 
	gMG_SIG_CONNECT_RESULT
: {

15324 #i‡
MG_ENABLE_SSL


15325 i‡(
cs
->
îr
 =0 && (
nc
->
Êags
 & 
MG_F_SSL
) &&

15326 !(
nc
->
Êags
 & 
MG_F_SSL_HANDSHAKE_DONE
)) {

15327 
mg_lwù_s¶_do_hs
(
nc
);

15331 
mg_if_c⁄√˘_cb
(
nc
, 
cs
->
îr
);

15335 
	gMG_SIG_CLOSE_CONN
: {

15336 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

15337 
mg_˛o£_c⁄n
(
nc
);

15340 
	gMG_SIG_RECV
: {

15341 
cs
->
ªcv_≥ndög
 = 0;

15342 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
) {

15343 
mg_lwù_h™dÀ_ªcv_udp
(
nc
);

15345 
mg_lwù_h™dÀ_ªcv_t˝
(
nc
);

15349 
	gMG_SIG_TOMBSTONE
: {

15352 
	gMG_SIG_ACCEPT
: {

15353 
mg_lwù_h™dÀ_ac˚±
(
nc
);

15360 
mg_lwù_if_öô
(
mg_iÁ˚
 *
iÁ˚
) {

15361 
LOG
(
LL_INFO
, ("%∞M⁄goo£ inô", 
iÁ˚
));

15362 
	giÁ˚
->
	gd©a
 = 
MG_CALLOC
(1, (
mg_ev_mgr_lwù_d©a
));

15365 
mg_lwù_if_‰ì
(
mg_iÁ˚
 *
iÁ˚
) {

15366 
MG_FREE
(
iÁ˚
->
d©a
);

15367 
	giÁ˚
->
	gd©a
 = 
NULL
;

15370 
mg_lwù_if_add_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

15371 (Ë
	gnc
;

15374 
mg_lwù_if_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

15375 
mg_ev_mgr_lwù_d©a
 *
	gmd
 =

15376 (
mg_ev_mgr_lwù_d©a
 *Ë
nc
->
iÁ˚
->
d©a
;

15378 
	gi
 = 0; i < 
	gMG_SIG_QUEUE_LEN
; i++) {

15379 i‡(
	gmd
->
	gsig_queue
[
i
].
	gnc
 =
nc
) {

15380 
md
->
sig_queue
[
i
].
sig
 = 
MG_SIG_TOMBSTONE
;

15385 
time_t
 
mg_lwù_if_pﬁl
(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
) {

15386 
mg_mgr
 *
	gmgr
 = 
iÁ˚
->
mgr
;

15387 
	gn
 = 0;

15388 
	gnow
 = 
mg_time
();

15389 
mg_c⁄√˘i⁄
 *
	gnc
, *
	gtmp
;

15390 
	gmö_timî
 = 0;

15391 
	gnum_timîs
 = 0;

15393 
DBG
(("begöÖﬁ»@%u", (Ë(
now
 * 1000)));

15395 
mg_ev_mgr_lwù_¥o˚ss_sig«ls
(
mgr
);

15396 
	gnc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

15397 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15398 
	gtmp
 = 
nc
->
√xt
;

15399 
	gn
++;

15400 i‡((
	gnc
->
	gÊags
 & 
	gMG_F_CLOSE_IMMEDIATELY
) ||

15401 ((
	gnc
->
	gÊags
 & 
	gMG_F_SEND_AND_CLOSE
Ë&& (nc->Êag†& 
	gMG_F_UDP
) &&

15402 (
	gnc
->
	g£nd_mbuf
.
	gÀn
 == 0))) {

15403 
mg_˛o£_c⁄n
(
nc
);

15406 
mg_if_pﬁl
(
nc
, 
now
);

15407 
mg_if_timî
(
nc
, 
now
);

15408 #i‡
MG_ENABLE_SSL


15409 i‡((
	gnc
->
	gÊags
 & 
	gMG_F_SSL
Ë&& 
	gcs
 !
NULL
 && 
cs
->
pcb
.
t˝
 != NULL &&

15410 
cs
->
pcb
.
t˝
->
°©e
 =
ESTABLISHED
) {

15411 i‡(((
nc
->
Êags
 & 
MG_F_WANT_WRITE
) ||

15412 ((
nc
->
£nd_mbuf
.
Àn
 > 0) &&

15413 (
nc
->
Êags
 & 
MG_F_SSL_HANDSHAKE_DONE
))) &&

15414 
cs
->
pcb
.
t˝
->
¢d_buf
 > 0) {

15416 i‡(
nc
->
Êags
 & 
MG_F_SSL_HANDSHAKE_DONE
) {

15417 i‡(!(
nc
->
Êags
 & 
MG_F_CONNECTING
)Ë
mg_lwù_s¶_£nd
(nc);

15419 
mg_lwù_s¶_do_hs
(
nc
);

15422 i‡(
	gcs
->
	grx_chaö
 !
NULL
 || (
nc
->
Êags
 & 
MG_F_WANT_READ
)) {

15423 i‡(
nc
->
Êags
 & 
MG_F_SSL_HANDSHAKE_DONE
) {

15424 i‡(!(
nc
->
Êags
 & 
MG_F_CONNECTING
)Ë
mg_lwù_s¶_ªcv
(nc);

15426 
mg_lwù_s¶_do_hs
(
nc
);

15432 i‡(
	gnc
->
	g£nd_mbuf
.
	gÀn
 > 0 && !“c->
	gÊags
 & 
	gMG_F_CONNECTING
)) {

15433 
mg_lwù_£nd_m‹e
(
nc
);

15436 i‡(
	gnc
->
	gsock
 !
INVALID_SOCKET
 &&

15437 !(
nc
->
Êags
 & (
MG_F_UDP
 | 
MG_F_LISTENING
)Ë&& 
cs
->
pcb
.
t˝
 !
NULL
 &&

15438 
cs
->
pcb
.
t˝
->
un£¡
 !
NULL
) {

15439 
t˝ù_ˇŒback
(
t˝_ouçut_t˝ù
, 
cs
->
pcb
.
t˝
);

15441 i‡(
	gnc
->
	gev_timî_time
 > 0) {

15442 i‡(
	gnum_timîs
 =0 || 
nc
->
ev_timî_time
 < 
mö_timî
) {

15443 
mö_timî
 = 
nc
->
ev_timî_time
;

15445 
	gnum_timîs
++;

15448 i‡(
	gnc
->
	gsock
 !
INVALID_SOCKET
) {

15450 
mg_lwù_c⁄sume_rx_chaö_t˝
(
nc
);

15456 i‡(
	gcs
->
	gdøöög_rx_chaö
 && cs->
	grx_chaö
 =
NULL
) {

15457 
mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

15462 
DBG
(("endÖoll @%u, %d conns, %dÅimers (min %u),Çext in %d ms",

15463 (Ë(
now
 * 1000), 
n
, 
num_timîs
,

15464 (Ë(
mö_timî
 * 1000), 
timeout_ms
));

15466 (Ë
	gtimeout_ms
;

15467  
	gnow
;

15470 
uöt32_t
 
mg_lwù_gë_pﬁl_dñay_ms
(
mg_mgr
 *
mgr
) {

15471 
mg_c⁄√˘i⁄
 *
	gnc
;

15472 
	gnow
;

15473 
	gmö_timî
 = 0;

15474 
	gnum_timîs
 = 0;

15475 
mg_ev_mgr_lwù_¥o˚ss_sig«ls
(
mgr
);

15476 
	gnc
 = 
mg_√xt
(
mgr
, 
NULL
);Ç¯!NULL;Ç¯mg_√xt(mgr, 
nc
)) {

15477 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15478 i‡(
	gnc
->
	gev_timî_time
 > 0) {

15479 i‡(
	gnum_timîs
 =0 || 
nc
->
ev_timî_time
 < 
mö_timî
) {

15480 
mö_timî
 = 
nc
->
ev_timî_time
;

15482 
	gnum_timîs
++;

15484 i‡(
	gnc
->
	g£nd_mbuf
.
	gÀn
 > 0

15485 #i‡
MG_ENABLE_SSL


15486 || (
	gnc
->
	gÊags
 & 
	gMG_F_WANT_WRITE
)

15489 
	gˇn_£nd
 = 0;

15491 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
) {

15493 
	gˇn_£nd
 = (
cs
->
pcb
.
udp
 !
NULL
);

15495 
	gˇn_£nd
 = (
cs
->
pcb
.
t˝
 !
NULL
 && cs->pcb.t˝->
¢d_buf
 > 0);

15498 i‡(
	gˇn_£nd
)  0;

15501 
uöt32_t
 
	gtimeout_ms
 = ~0;

15502 
	gnow
 = 
mg_time
();

15503 i‡(
	gnum_timîs
 > 0) {

15505 i‡(
	gmö_timî
 < 
	gnow
)  0;

15506 
	gtimî_timeout_ms
 = (
mö_timî
 - 
now
) * 1000 + 1 ;

15507 i‡(
	gtimî_timeout_ms
 < 
	gtimeout_ms
) {

15508 
	gtimeout_ms
 = 
timî_timeout_ms
;

15511  
	gtimeout_ms
;

15515 #ifde‡
MG_MODULE_LINES


15523 #i‡
MG_ENABLE_SSL
 && 
MG_NET_IF
 =
MG_NET_IF_LWIP_LOW_LEVEL


15528 
	~<lwù/pbuf.h
>

15529 
	~<lwù/t˝.h
>

15531 #i‚de‡
MG_LWIP_SSL_IO_SIZE


15532 
	#MG_LWIP_SSL_IO_SIZE
 1024

	)

15535 #i‚de‡
MIN


15536 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

15539 
mg_lwù_s¶_do_hs
(
mg_c⁄√˘i⁄
 *
nc
) {

15540 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15541 
	g£rvî_side
 = (
nc
->
li°íî
 !
NULL
);

15542 
mg_s¶_if_ªsu…
 
	gªs
;

15543 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_CLOSE_IMMEDIATELY
) ;

15544 
	gªs
 = 
mg_s¶_if_h™dshake
(
nc
);

15545 
DBG
(("%∞%lu %d %d", 
nc
,Çc->
Êags
, 
£rvî_side
, 
ªs
));

15546 i‡(
	gªs
 !
MG_SSL_OK
) {

15547 i‡(
ªs
 =
MG_SSL_WANT_WRITE
) {

15548 
nc
->
Êags
 |
MG_F_WANT_WRITE
;

15549 
	gcs
->
	gîr
 = 0;

15550 } i‡(
	gªs
 =
MG_SSL_WANT_READ
) {

15555 
nc
->
Êags
 &~
MG_F_WANT_READ
;

15556 
	gcs
->
	gîr
 = 0;

15558 
	gcs
->
	gîr
 = 
ªs
;

15559 i‡(
	g£rvî_side
) {

15560 
mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

15562 
mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

15566 
	gcs
->
	gîr
 = 0;

15567 
	gnc
->
	gÊags
 &~
MG_F_WANT_WRITE
;

15572 
	gnc
->
	gÊags
 |(
MG_F_SSL_HANDSHAKE_DONE
 | 
MG_F_WANT_READ
);

15573 i‡(
	g£rvî_side
) {

15574 
mg_lwù_ac˚±_c⁄n
(
nc
, 
cs
->
pcb
.
t˝
);

15576 
mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

15581 
mg_lwù_s¶_£nd
(
mg_c⁄√˘i⁄
 *
nc
) {

15582 i‡(
	gnc
->
	gsock
 =
INVALID_SOCKET
) {

15583 
DBG
(("%∞övÆid sockë", 
nc
));

15586 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15588 
	gÀn
 = 
cs
->
œ°_s¶_wrôe_size
;

15589 i‡(
	gÀn
 == 0) {

15590 
Àn
 = 
MIN
(
MG_LWIP_SSL_IO_SIZE
, 
nc
->
£nd_mbuf
.len);

15592 
	gªt
 = 
mg_s¶_if_wrôe
(
nc
,Çc->
£nd_mbuf
.
buf
, 
Àn
);

15593 
DBG
(("%∞SSL_wrôê%u = %d", 
nc
, 
Àn
, 
ªt
));

15594 i‡(
	gªt
 > 0) {

15595 
mg_if_£¡_cb
(
nc
, 
ªt
);

15596 
	gcs
->
	gœ°_s¶_wrôe_size
 = 0;

15597 } i‡(
	gªt
 < 0) {

15600 
	gcs
->
	gœ°_s¶_wrôe_size
 = 
Àn
;

15602 i‡(
	gªt
 =
Àn
) {

15603 
nc
->
Êags
 &~
MG_F_WANT_WRITE
;

15604 } i‡(
	gªt
 =
MG_SSL_WANT_WRITE
) {

15605 
nc
->
Êags
 |
MG_F_WANT_WRITE
;

15607 
mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

15611 
mg_lwù_s¶_ªcv
(
mg_c⁄√˘i⁄
 *
nc
) {

15612 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15614 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_CONNECTING
) ;

15615 
	gnc
->
	gªcv_mbuf
.
	gÀn
 <Çc->
	gªcv_mbuf_limô
) {

15616 *
	gbuf
 = (*Ë
MG_MALLOC
(
MG_LWIP_SSL_IO_SIZE
);

15617 i‡(
	gbuf
 =
NULL
) ;

15618 
	gªt
 = 
mg_s¶_if_ªad
(
nc
, 
buf
, 
MG_LWIP_SSL_IO_SIZE
);

15619 
DBG
(("%∞%∞SSL_ªad %u = %d", 
nc
, 
cs
->
rx_chaö
, 
MG_LWIP_SSL_IO_SIZE
, 
ªt
));

15620 i‡(
	gªt
 <= 0) {

15621 
MG_FREE
(
buf
);

15622 i‡(
	gªt
 =
MG_SSL_WANT_WRITE
) {

15623 
nc
->
Êags
 |
MG_F_WANT_WRITE
;

15625 } i‡(
	gªt
 =
MG_SSL_WANT_READ
) {

15630 
nc
->
Êags
 &~
MG_F_WANT_READ
;

15631 
	gcs
->
	gîr
 = 0;

15634 
mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

15638 
mg_if_ªcv_t˝_cb
(
nc
, 
buf
, 
ªt
, 1 );

15643 #ifde‡
KR_VERSION


15645 
ssize_t
 
kr_£nd
(
fd
, c⁄° *
buf
, 
size_t
 
Àn
) {

15646 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
fd
;

15647 
	gªt
 = 
mg_lwù_t˝_wrôe
(
cs
->
nc
, 
buf
, 
Àn
);

15648 
DBG
(("%∞mg_lwù_t˝_wrôê%u = %d", 
cs
->
nc
, 
Àn
, 
ªt
));

15649 i‡(
	gªt
 =0Ë
ªt
 = 
KR_IO_WOULDBLOCK
;

15650  
	gªt
;

15653 
ssize_t
 
kr_ªcv
(
fd
, *
buf
, 
size_t
 
Àn
) {

15654 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
fd
;

15655 
pbuf
 *
	g£g
 = 
cs
->
rx_chaö
;

15656 i‡(
	g£g
 =
NULL
) {

15657 
DBG
(("%u -ÇŸhögÅÿªad", 
Àn
));

15658  
	gKR_IO_WOULDBLOCK
;

15660 
size_t
 
	g£g_Àn
 = (
£g
->
Àn
 - 
cs
->
rx_off£t
);

15661 
DBG
(("%u %u %u %u", 
Àn
, 
cs
->
rx_chaö
->Àn, 
£g_Àn
, cs->rx_chaö->
tŸ_Àn
));

15662 
	gÀn
 = 
MIN
(
Àn
, 
£g_Àn
);

15663 
pbuf_c›y_∑πül
(
£g
, 
buf
, 
Àn
, 
cs
->
rx_off£t
);

15664 
	gcs
->
	grx_off£t
 +
Àn
;

15665 
t˝_ªcved
(
cs
->
pcb
.
t˝
, 
Àn
);

15666 i‡(
	gcs
->
	grx_off£t
 =
cs
->
rx_chaö
->
Àn
) {

15667 
cs
->
rx_chaö
 = 
pbuf_dechaö
(cs->rx_chain);

15668 
pbuf_‰ì
(
£g
);

15669 
	gcs
->
	grx_off£t
 = 0;

15671  
	gÀn
;

15674 #ñi‡
MG_SSL_IF
 =
MG_SSL_IF_MBEDTLS


15676 
s¶_sockë_£nd
(*
˘x
, c⁄° *
buf
, 
size_t
 
Àn
) {

15677 
mg_c⁄√˘i⁄
 *
	gnc
 = (mg_c⁄√˘i⁄ *Ë
˘x
;

15678 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15679 
	gªt
 = 
mg_lwù_t˝_wrôe
(
cs
->
nc
, 
buf
, 
Àn
);

15680 i‡(
	gªt
 =0Ë
ªt
 = 
MBEDTLS_ERR_SSL_WANT_WRITE
;

15681 
LOG
(
LL_DEBUG
, ("%∞%d -> %d", 
nc
, 
Àn
, 
ªt
));

15682  
	gªt
;

15685 
s¶_sockë_ªcv
(*
˘x
, *
buf
, 
size_t
 
Àn
) {

15686 
mg_c⁄√˘i⁄
 *
	gnc
 = (mg_c⁄√˘i⁄ *Ë
˘x
;

15687 
mg_lwù_c⁄n_°©e
 *
	gcs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

15688 
pbuf
 *
	g£g
 = 
cs
->
rx_chaö
;

15689 i‡(
	g£g
 =
NULL
) {

15690 
DBG
(("%u -ÇŸhögÅÿªad", 
Àn
));

15691  
	gMBEDTLS_ERR_SSL_WANT_READ
;

15693 
size_t
 
	g£g_Àn
 = (
£g
->
Àn
 - 
cs
->
rx_off£t
);

15694 
DBG
(("%u %u %u %u", 
Àn
, 
cs
->
rx_chaö
->Àn, 
£g_Àn
, cs->rx_chaö->
tŸ_Àn
));

15695 
mgos_lock
();

15696 
	gÀn
 = 
MIN
(
Àn
, 
£g_Àn
);

15697 
pbuf_c›y_∑πül
(
£g
, 
buf
, 
Àn
, 
cs
->
rx_off£t
);

15698 
	gcs
->
	grx_off£t
 +
Àn
;

15701 i‡(
	gcs
->
	gpcb
.
	gt˝
 !
NULL
Ë
t˝_ªcved
(
cs
->
pcb
.
t˝
, 
Àn
);

15702 i‡(
	gcs
->
	grx_off£t
 =
cs
->
rx_chaö
->
Àn
) {

15703 
cs
->
rx_chaö
 = 
pbuf_dechaö
(cs->rx_chain);

15704 
pbuf_‰ì
(
£g
);

15705 
	gcs
->
	grx_off£t
 = 0;

15707 
mgos_u∆ock
();

15708 
LOG
(
LL_DEBUG
, ("%∞<- %d", 
nc
, (Ë
Àn
));

15709  
	gÀn
;

15715 #ifde‡
MG_MODULE_LINES


15723 #ifde‡
WINCE


15725 c⁄° *
°ªº‹
(
îr
) {

15730 
	gbuf
[10];

15731 
¢¥ötf
(
buf
, (buf), "%d", 
îr
);

15732  
	gbuf
;

15735 
›í
(c⁄° *
fûíame
, 
oÊag
, 
pmode
) {

15741 
DebugBªak
();

15745 
_w°©i64
(c⁄° 
wch¨_t
 *
∑th
, 
cs_°©_t
 *
°
) {

15746 
DWORD
 
	gÁ
 = 
GëFûeAâribuãsW
(
∑th
);

15747 i‡(
	gÁ
 =
INVALID_FILE_ATTRIBUTES
) {

15750 
mem£t
(
°
, 0, (*st));

15751 i‡((
	gÁ
 & 
	gFILE_ATTRIBUTE_DIRECTORY
) == 0) {

15752 
HANDLE
 
h
;

15753 
FILETIME
 
	g·ime
;

15754 
	g°
->
	g°_mode
 |
_S_IFREG
;

15755 
	gh
 = 
Cª©eFûeW
(
∑th
, 
GENERIC_READ
, 0, 
NULL
, 
OPEN_EXISTING
,

15756 
FILE_ATTRIBUTE_NORMAL
, 
NULL
);

15757 i‡(
	gh
 =
INVALID_HANDLE_VALUE
) {

15760 
	g°
->
	g°_size
 = 
GëFûeSize
(
h
, 
NULL
);

15761 
GëFûeTime
(
h
, 
NULL
, NULL, &
·ime
);

15762 
	g°
->
	g°_mtime
 = (
uöt32_t
)((((
uöt64_t
Ë
·ime
.
dwLowD©eTime
 +

15763 ((
uöt64_t
Ë
·ime
.
dwHighD©eTime
 << 32)) /

15766 
Clo£H™dÀ
(
h
);

15768 
	g°
->
	g°_mode
 |
_S_IFDIR
;

15774 
mg_gmt_time_°rög
(*
buf
, 
size_t
 
buf_Àn
, 
time_t
 *
t
) {

15775 
FILETIME
 
	g·
;

15776 
SYSTEMTIME
 
	gsy°ime
;

15777 i‡(
	gt
 !
NULL
) {

15778 
uöt64_t
 
fûëime
 = (*
t
 + 11644473600) * 10000000;

15779 
	g·
.
	gdwLowD©eTime
 = 
fûëime
 & 0xFFFFFFFF;

15780 
	g·
.
	gdwHighD©eTime
 = (
fûëime
 & 0xFFFFFFFF00000000) >> 32;

15781 
FûeTimeToSy°emTime
(&
·
, &
sy°ime
);

15783 
GëSy°emTime
(&
sy°ime
);

15786 
¢¥ötf
(
buf
, 
buf_Àn
, "%d.%d.%d %d:%d:%d GMT", (Ë
sy°ime
.
wYór
,

15787 (Ë
sy°ime
.
wM⁄th
, (Ësy°ime.
wDay
, (Ësy°ime.
wHour
,

15788 (Ë
sy°ime
.
wMöuã
, (Ësy°ime.
wSec⁄d
);

15792 #ifde‡
MG_MODULE_LINES


15800 #i‚de‡
CS_COMMON_PLATFORMS_PIC32_NET_IF_H_


15801 
	#CS_COMMON_PLATFORMS_PIC32_NET_IF_H_


	)

15805 #ifde‡
__˝lu•lus


15809 #i‚de‡
MG_ENABLE_NET_IF_PIC32


15810 
	#MG_ENABLE_NET_IF_PIC32
 
MG_NET_IF
 =
MG_NET_IF_PIC32


	)

15813 c⁄° 
mg_iÁ˚_vèbÀ
 
mg_pic32_iÁ˚_vèbÀ
;

15815 #ifde‡
__˝lu•lus


15820 #ifde‡
MG_MODULE_LINES


15828 #i‡
MG_ENABLE_NET_IF_PIC32


15830 
mg_pic32_if_¸óã_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

15831 (Ë
	gnc
;

15835 
mg_pic32_if_ªcved
(
mg_c⁄√˘i⁄
 *
nc
, 
size_t
 
Àn
) {

15836 (Ë
	gnc
;

15837 (Ë
	gÀn
;

15840 
mg_pic32_if_add_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

15841 (Ë
	gnc
;

15844 
mg_pic32_if_öô
(
mg_iÁ˚
 *
iÁ˚
) {

15845 (Ë
	giÁ˚
;

15846 (Ë
mg_gë_î∫o
();

15849 
mg_pic32_if_‰ì
(
mg_iÁ˚
 *
iÁ˚
) {

15850 (Ë
	giÁ˚
;

15853 
mg_pic32_if_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

15854 (Ë
	gnc
;

15857 
mg_pic32_if_de°roy_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

15858 i‡(
	gnc
->
	gsock
 =
INVALID_SOCKET
) ;

15860 i‡(!(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
)) {

15862 
TCPIP_TCP_Clo£
((
TCP_SOCKET
Ë
nc
->
sock
);

15863 } i‡(
	gnc
->
	gli°íî
 =
NULL
) {

15865 
TCPIP_UDP_Clo£
((
UDP_SOCKET
Ë
nc
->
sock
);

15868 
	gnc
->
	gsock
 = 
INVALID_SOCKET
;

15871 
mg_pic32_if_li°í_udp
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

15872 
	gnc
->
	gsock
 = 
TCPIP_UDP_SîvîO≥n
(

15873 
ß
->
sö
.
sö_Ámûy
 =
AF_INET
 ? 
IP_ADDRESS_TYPE_IPV4


15874 : 
IP_ADDRESS_TYPE_IPV6
,

15875 
¡ohs
(
ß
->
sö
.
sö_p‹t
),

15876 
ß
->
sö
.
sö_addr
.
s_addr
 =0 ? 0 : (
IP_MULTI_ADDRESS
 *) &sa->sin);

15877 i‡(
	gnc
->
	gsock
 =
INVALID_SOCKET
) {

15883 
mg_pic32_if_udp_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
,

15884 
size_t
 
Àn
) {

15885 
mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

15888 
mg_pic32_if_t˝_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
,

15889 
size_t
 
Àn
) {

15890 
mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

15893 
mg_pic32_if_li°í_t˝
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

15894 
	gnc
->
	gsock
 = 
TCPIP_TCP_SîvîO≥n
(

15895 
ß
->
sö
.
sö_Ámûy
 =
AF_INET
 ? 
IP_ADDRESS_TYPE_IPV4


15896 : 
IP_ADDRESS_TYPE_IPV6
,

15897 
¡ohs
(
ß
->
sö
.
sö_p‹t
),

15898 
ß
->
sö
.
sö_addr
.
s_addr
 =0 ? 0 : (
IP_MULTI_ADDRESS
 *) &sa->sin);

15899 
mem˝y
(&
nc
->
ß
, sa, (*sa));

15900 i‡(
	gnc
->
	gsock
 =
INVALID_SOCKET
) {

15906 
mg_ac˚±_c⁄n
(
mg_c⁄√˘i⁄
 *
lc
) {

15907 
mg_c⁄√˘i⁄
 *
	gnc
;

15908 
TCP_SOCKET_INFO
 
	gsi
;

15909 
sockë_addªss
 
	gß
;

15911 
	gnc
 = 
mg_if_ac˚±_√w_c⁄n
(
lc
);

15913 i‡(
	gnc
 =
NULL
) {

15917 
	gnc
->
	gsock
 = 
lc
->
sock
;

15918 
	gnc
->
	gÊags
 &~
MG_F_LISTENING
;

15920 i‡(!
TCPIP_TCP_SockëInfoGë
((
TCP_SOCKET
Ë
nc
->
sock
, &
si
)) {

15924 i‡(
	gsi
.
	gaddªssTy≥
 =
IP_ADDRESS_TYPE_IPV4
) {

15925 
ß
.
sö
.
sö_Ámûy
 = 
AF_INET
;

15926 
	gß
.
	gsö
.
	gsö_p‹t
 = 
ht⁄s
(
si
.
ªmŸeP‹t
);

15927 
	gß
.
	gsö
.
	gsö_addr
.
	gs_addr
 = 
si
.
ªmŸeIPaddªss
.
v4Add
.
VÆ
;

15930 
mem£t
(&
ß
, 0, (sa));

15933 
mg_if_ac˚±_t˝_cb
(
nc
, (
sockë_addªss
 *Ë&
ß
, (sa));

15935  
mg_pic32_if_li°í_t˝
(
lc
, &lc->
ß
) >= 0;

15938 *
öë_¡ﬂ
(
ö_addr
 
ö
) {

15939 
	gaddr
[17];

15940 
¢¥ötf
(
addr
, ◊ddr), "%d.%d.%d.%d", (Ë
ö
.
S_un
.
S_un_b
.
s_b1
,

15941 (Ë
ö
.
S_un
.
S_un_b
.
s_b2
, (Ëö.S_un.S_un_b.
s_b3
,

15942 (Ë
ö
.
S_un
.
S_un_b
.
s_b4
);

15943  
	gaddr
;

15946 
mg_h™dÀ_£nd
(
mg_c⁄√˘i⁄
 *
nc
) {

15947 
uöt16_t
 
	gbyãs_wrôãn
 = 0;

15948 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
) {

15949 i‡(!
TCPIP_UDP_RemŸeBöd
(

15950 (
UDP_SOCKET
Ë
nc
->
sock
,

15951 
nc
->
ß
.
sö
.
sö_Ámûy
 =
AF_INET
 ? 
IP_ADDRESS_TYPE_IPV4


15952 : 
IP_ADDRESS_TYPE_IPV6
,

15953 
¡ohs
(
nc
->
ß
.
sö
.
sö_p‹t
), (
IP_MULTI_ADDRESS
 *) &nc->sa.sin)) {

15954 
	gnc
->
	gÊags
 |
MG_F_CLOSE_IMMEDIATELY
;

15957 
	gbyãs_wrôãn
 = 
TCPIP_UDP_TxPutIsRódy
((
UDP_SOCKET
Ë
nc
->
sock
, 0);

15958 i‡(
	gbyãs_wrôãn
 >
nc
->
£nd_mbuf
.
Àn
) {

15959 i‡(
TCPIP_UDP_AºayPut
((
UDP_SOCKET
Ë
nc
->
sock
,

15960 (
uöt8_t
 *Ë
nc
->
£nd_mbuf
.
buf
,

15961 
nc
->
£nd_mbuf
.
Àn
) !=Çc->send_mbuf.len) {

15962 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

15963 
	gbyãs_wrôãn
 = 0;

15967 
	gbyãs_wrôãn
 = 
TCPIP_TCP_FifoTxFªeGë
((
TCP_SOCKET
Ë
nc
->
sock
);

15968 i‡(
	gbyãs_wrôãn
 != 0) {

15969 i‡(
byãs_wrôãn
 > 
nc
->
£nd_mbuf
.
Àn
) {

15970 
byãs_wrôãn
 = 
nc
->
£nd_mbuf
.
Àn
;

15972 i‡(
TCPIP_TCP_AºayPut
((
TCP_SOCKET
Ë
nc
->
sock
,

15973 (
uöt8_t
 *Ë
nc
->
£nd_mbuf
.
buf
,

15974 
byãs_wrôãn
) != bytes_written) {

15975 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

15976 
	gbyãs_wrôãn
 = 0;

15981 
mg_if_£¡_cb
(
nc
, 
byãs_wrôãn
);

15984 
mg_h™dÀ_ªcv
(
mg_c⁄√˘i⁄
 *
nc
) {

15985 
uöt16_t
 
	gbyãs_ªad
 = 0;

15986 
uöt8_t
 *
	gbuf
 = 
NULL
;

15987 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
) {

15988 
	gbyãs_ªad
 = 
TCPIP_UDP_GëIsRódy
((
UDP_SOCKET
Ë
nc
->
sock
);

15989 i‡(
	gbyãs_ªad
 != 0 &&

15990 (
nc
->
ªcv_mbuf_limô
 == -1 ||

15991 
nc
->
ªcv_mbuf
.
Àn
 + 
byãs_ªad
 <Çc->
ªcv_mbuf_limô
)) {

15992 
buf
 = (
uöt8_t
 *Ë
MG_MALLOC
(
byãs_ªad
);

15993 i‡(
TCPIP_UDP_AºayGë
((
UDP_SOCKET
Ë
nc
->
sock
, 
buf
, 
byãs_ªad
) !=

15994 
byãs_ªad
) {

15995 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

15996 
	gbyãs_ªad
 = 0;

15997 
MG_FREE
(
buf
);

16001 
	gbyãs_ªad
 = 
TCPIP_TCP_GëIsRódy
((
TCP_SOCKET
Ë
nc
->
sock
);

16002 i‡(
	gbyãs_ªad
 != 0) {

16003 i‡(
nc
->
ªcv_mbuf_limô
 != -1 &&

16004 
nc
->
ªcv_mbuf_limô
 -Çc->
ªcv_mbuf
.
Àn
 > 
byãs_ªad
) {

16005 
byãs_ªad
 = 
nc
->
ªcv_mbuf_limô
 -Çc->
ªcv_mbuf
.
Àn
;

16007 
	gbuf
 = (
uöt8_t
 *Ë
MG_MALLOC
(
byãs_ªad
);

16008 i‡(
TCPIP_TCP_AºayGë
((
TCP_SOCKET
Ë
nc
->
sock
, 
buf
, 
byãs_ªad
) !=

16009 
byãs_ªad
) {

16010 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

16011 
MG_FREE
(
buf
);

16012 
	gbyãs_ªad
 = 0;

16017 i‡(
	gbyãs_ªad
 != 0) {

16018 
mg_if_ªcv_t˝_cb
(
nc
, 
buf
, 
byãs_ªad
, 1 );

16022 
time_t
 
mg_pic32_if_pﬁl
(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
) {

16023 
mg_mgr
 *
	gmgr
 = 
iÁ˚
->
mgr
;

16024 
	gnow
 = 
mg_time
();

16025 
mg_c⁄√˘i⁄
 *
	gnc
, *
	gtmp
;

16027 
	gnc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

16028 
tmp
 = 
nc
->
√xt
;

16030 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_CONNECTING
) {

16032 i‡(
	gnc
->
	gÊags
 & 
	gMG_F_UDP
 ||

16033 
TCPIP_TCP_IsC⁄√˘ed
((
TCP_SOCKET
Ë
nc
->
sock
)) {

16034 
mg_if_c⁄√˘_cb
(
nc
, 0);

16036 } i‡(
	gnc
->
	gÊags
 & 
	gMG_F_LISTENING
) {

16037 i‡(
TCPIP_TCP_IsC⁄√˘ed
((
TCP_SOCKET
Ë
nc
->
sock
)) {

16039 
mg_ac˚±_c⁄n
(
nc
);

16042 i‡(
	gnc
->
	g£nd_mbuf
.
	gÀn
 != 0) {

16043 
mg_h™dÀ_£nd
(
nc
);

16046 i‡(
	gnc
->
	gªcv_mbuf_limô
 == -1 ||

16047 
nc
->
ªcv_mbuf
.
Àn
 <Çc->
ªcv_mbuf_limô
) {

16048 
mg_h™dÀ_ªcv
(
nc
);

16053 
	gnc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

16054 
tmp
 = 
nc
->
√xt
;

16055 i‡((
	gnc
->
	gÊags
 & 
	gMG_F_CLOSE_IMMEDIATELY
) ||

16056 (
	gnc
->
	g£nd_mbuf
.
	gÀn
 =0 && (
nc
->
Êags
 & 
MG_F_SEND_AND_CLOSE
))) {

16057 
mg_˛o£_c⁄n
(
nc
);

16061  
	gnow
;

16064 
mg_pic32_if_sock_£t
(
mg_c⁄√˘i⁄
 *
nc
, 
sock_t
 
sock
) {

16065 
	gnc
->
	gsock
 = 
sock
;

16068 
mg_pic32_if_gë_c⁄n_addr
(
mg_c⁄√˘i⁄
 *
nc
, 
ªmŸe
,

16069 
sockë_addªss
 *
ß
) {

16073 
mg_pic32_if_c⁄√˘_t˝
(
mg_c⁄√˘i⁄
 *
nc
,

16074 c⁄° 
sockë_addªss
 *
ß
) {

16075 
	gnc
->
	gsock
 = 
TCPIP_TCP_Clõ¡O≥n
(

16076 
ß
->
sö
.
sö_Ámûy
 =
AF_INET
 ? 
IP_ADDRESS_TYPE_IPV4


16077 : 
IP_ADDRESS_TYPE_IPV6
,

16078 
¡ohs
(
ß
->
sö
.
sö_p‹t
), (
IP_MULTI_ADDRESS
 *) &sa->sin);

16079 
	gnc
->
	gîr
 = (
nc
->
sock
 =
INVALID_SOCKET
) ? -1 : 0;

16082 
mg_pic32_if_c⁄√˘_udp
(
mg_c⁄√˘i⁄
 *
nc
) {

16083 
	gnc
->
	gsock
 = 
TCPIP_UDP_Clõ¡O≥n
(
IP_ADDRESS_TYPE_ANY
, 0, 
NULL
);

16084 
	gnc
->
	gîr
 = (
nc
->
sock
 =
INVALID_SOCKET
) ? -1 : 0;

16088 
	#MG_PIC32_IFACE_VTABLE
 \

16090 
mg_pic32_if_öô
, \

16091 
mg_pic32_if_‰ì
, \

16092 
mg_pic32_if_add_c⁄n
, \

16093 
mg_pic32_if_ªmove_c⁄n
, \

16094 
mg_pic32_if_pﬁl
, \

16095 
mg_pic32_if_li°í_t˝
, \

16096 
mg_pic32_if_li°í_udp
, \

16097 
mg_pic32_if_c⁄√˘_t˝
, \

16098 
mg_pic32_if_c⁄√˘_udp
, \

16099 
mg_pic32_if_t˝_£nd
, \

16100 
mg_pic32_if_udp_£nd
, \

16101 
mg_pic32_if_ªcved
, \

16102 
mg_pic32_if_¸óã_c⁄n
, \

16103 
mg_pic32_if_de°roy_c⁄n
, \

16104 
mg_pic32_if_sock_£t
, \

16105 
mg_pic32_if_gë_c⁄n_addr
, \

16106 }

	)

16109 c⁄° 
mg_iÁ˚_vèbÀ
 
	gmg_pic32_iÁ˚_vèbÀ
 = 
MG_PIC32_IFACE_VTABLE
;

16110 #i‡
MG_NET_IF
 =
MG_NET_IF_PIC32


16111 c⁄° 
mg_iÁ˚_vèbÀ
 
	gmg_deÁu…_iÁ˚_vèbÀ
 = 
MG_PIC32_IFACE_VTABLE
;

16115 #ifde‡
MG_MODULE_LINES


16123 #ifde‡
_WIN32


16125 
rmdú
(c⁄° *
dú«me
) {

16126  
_rmdú
(
dú«me
);

16129 
¶ìp
(
£c⁄ds
) {

16130 
SÀï
(
£c⁄ds
 * 1000);

	@swupdate/mongoose/mongoose.h

1 #ifde‡
MG_MODULE_LINES


25 #i‚de‡
CS_MONGOOSE_SRC_COMMON_H_


26 
	#CS_MONGOOSE_SRC_COMMON_H_


	)

28 
	#MG_VERSION
 "6.11"

	)

31 #ifde‡
MG_LOCALS


32 
	~<mg_loˇls.h
>

36 #ifde‡
MG_MODULE_LINES


39 #i‚de‡
CS_COMMON_PLATFORM_H_


40 
	#CS_COMMON_PLATFORM_H_


	)

46 
	#CS_P_CUSTOM
 0

	)

47 
	#CS_P_UNIX
 1

	)

48 
	#CS_P_WINDOWS
 2

	)

49 
	#CS_P_ESP32
 15

	)

50 
	#CS_P_ESP8266
 3

	)

51 
	#CS_P_CC3100
 6

	)

52 
	#CS_P_CC3200
 4

	)

53 
	#CS_P_CC3220
 17

	)

54 
	#CS_P_MSP432
 5

	)

55 
	#CS_P_TM4C129
 14

	)

56 
	#CS_P_MBED
 7

	)

57 
	#CS_P_WINCE
 8

	)

58 
	#CS_P_NXP_LPC
 13

	)

59 
	#CS_P_NXP_KINETIS
 9

	)

60 
	#CS_P_NRF51
 12

	)

61 
	#CS_P_NRF52
 10

	)

62 
	#CS_P_PIC32
 11

	)

63 
	#CS_P_STM32
 16

	)

67 #i‚de‡
CS_PLATFORM


69 #i‡
deföed
(
TARGET_IS_MSP432P4XX
Ë|| deföed(
__MSP432P401R__
)

70 
	#CS_PLATFORM
 
CS_P_MSP432


	)

71 #ñi‡
deföed
(
cc3200
Ë|| deföed(
TARGET_IS_CC3200
)

72 
	#CS_PLATFORM
 
CS_P_CC3200


	)

73 #ñi‡
deföed
(
cc3220
Ë|| deföed(
TARGET_IS_CC3220
)

74 
	#CS_PLATFORM
 
CS_P_CC3220


	)

75 #ñi‡
deföed
(
__unix__
Ë|| deföed(
__APPLE__
)

76 
	#CS_PLATFORM
 
CS_P_UNIX


	)

77 #ñi‡
deföed
(
WINCE
)

78 
	#CS_PLATFORM
 
CS_P_WINCE


	)

79 #ñi‡
deföed
(
_WIN32
)

80 
	#CS_PLATFORM
 
CS_P_WINDOWS


	)

81 #ñi‡
deföed
(
__MBED__
)

82 
	#CS_PLATFORM
 
CS_P_MBED


	)

83 #ñi‡
deföed
(
__USE_LPCOPEN
)

84 
	#CS_PLATFORM
 
CS_P_NXP_LPC


	)

85 #ñi‡
deföed
(
FRDM_K64F
Ë|| deföed(
FREEDOM
)

86 
	#CS_PLATFORM
 
CS_P_NXP_KINETIS


	)

87 #ñi‡
deföed
(
PIC32
)

88 
	#CS_PLATFORM
 
CS_P_PIC32


	)

89 #ñi‡
deföed
(
ESP_PLATFORM
)

90 
	#CS_PLATFORM
 
CS_P_ESP32


	)

91 #ñi‡
deföed
(
ICACHE_FLASH
)

92 
	#CS_PLATFORM
 
CS_P_ESP8266


	)

93 #ñi‡
deföed
(
TARGET_IS_TM4C129_RA0
Ë|| deföed(
TARGET_IS_TM4C129_RA1
) || \

94 
	$deföed
(
TARGET_IS_TM4C129_RA2
)

95 
	#CS_PLATFORM
 
CS_P_TM4C129


	)

96 #ñi‡
	`deföed
(
STM32
)

97 
	#CS_PLATFORM
 
CS_P_STM32


	)

100 #i‚de‡
CS_PLATFORM


106 
	#MG_NET_IF_SOCKET
 1

	)

107 
	#MG_NET_IF_SIMPLELINK
 2

	)

108 
	#MG_NET_IF_LWIP_LOW_LEVEL
 3

	)

109 
	#MG_NET_IF_PIC32
 4

	)

111 
	#MG_SSL_IF_OPENSSL
 1

	)

112 
	#MG_SSL_IF_MBEDTLS
 2

	)

113 
	#MG_SSL_IF_SIMPLELINK
 3

	)

133 #i‡!
	`deföed
(
WEAK
)

134 #i‡(
	`deföed
(
__GNUC__
Ë|| deföed(
__TI_COMPILER_VERSION__
)Ë&& !deföed(
_WIN32
)

135 
	#WEAK
 
	`__©åibuã__
((
wók
))

	)

137 
	#WEAK


	)

141 #ifde‡
__GNUC__


142 
	#NORETURN
 
	`__©åibuã__
((
n‹ëu∫
))

	)

143 
	#NOINLINE
 
	`__©åibuã__
((
noölöe
))

	)

144 
	#WARN_UNUSED_RESULT
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

145 
	#NOINSTR
 
	`__©åibuã__
((
no_ö°rumít_fun˘i⁄
))

	)

146 
	#DO_NOT_WARN_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

148 
	#NORETURN


	)

149 
	#NOINLINE


	)

150 
	#WARN_UNUSED_RESULT


	)

151 
	#NOINSTR


	)

152 
	#DO_NOT_WARN_UNUSED


	)

155 #i‚de‡
ARRAY_SIZE


156 
	#ARRAY_SIZE
(
¨øy
Ë(◊ºayË/ ◊ºay[0]))

	)

160 #ifde‡
MG_MODULE_LINES


163 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_WINDOWS_H_


164 
	#CS_COMMON_PLATFORMS_PLATFORM_WINDOWS_H_


	)

165 #i‡
CS_PLATFORM
 =
CS_P_WINDOWS


179 #ifde‡
_MSC_VER


180 #¥agm®
	`w¨nög
(
dißbÀ
 : 4127)

181 #¥agm®
	`w¨nög
(
dißbÀ
 : 4204)

184 #i‚de‡
_WINSOCK_DEPRECATED_NO_WARNINGS


185 
	#_WINSOCK_DEPRECATED_NO_WARNINGS
 1

	)

188 #i‚de‡
_CRT_SECURE_NO_WARNINGS


189 
	#_CRT_SECURE_NO_WARNINGS


	)

192 
	~<as£π.h
>

193 
	~<dúe˘.h
>

194 
	~<î∫o.h
>

195 
	~<f˙é.h
>

196 
	~<io.h
>

197 
	~<limôs.h
>

198 
	~<sig«l.h
>

199 
	~<°ddef.h
>

200 
	~<°dio.h
>

201 
	~<°dlib.h
>

202 
	~<sys/°©.h
>

203 
	~<time.h
>

204 
	~<˘y≥.h
>

206 #ifde‡
_MSC_VER


207 #¥agm®
	`commít
(
lib
, "ws2_32.lib")

210 
	~<wösock2.h
>

211 
	~<ws2t˝ù.h
>

212 
	~<wödows.h
>

213 
	~<¥o˚ss.h
>

215 #i‡
_MSC_VER
 < 1700

216 
	tboﬁ
;

218 
	~<°dboﬁ.h
>

221 #i‡
	`deföed
(
_MSC_VER
) && _MSC_VER >= 1800

222 
	#°rdup
 
_°rdup


	)

225 #i‚de‡
EINPROGRESS


226 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

228 #i‚de‡
EWOULDBLOCK


229 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

231 #i‚de‡
__func__


232 
	#STRX
(
x
Ë#x

	)

233 
	#STR
(
x
Ë
	`STRX
(x)

	)

234 
	#__func__
 
__FILE__
 ":" 
	`STR
(
__LINE__
)

	)

236 
	#¢¥ötf
 
_¢¥ötf


	)

237 
	#v¢¥ötf
 
_v¢¥ötf


	)

238 
	#to64
(
x
Ë
	`_©oi64
(x)

	)

239 #i‡!
	`deföed
(
__MINGW32__
Ë&& !deföed(
__MINGW64__
)

240 
	#p›í
(
x
, 
y
Ë
	`_p›í
((x), (y))

	)

241 
	#p˛o£
(
x
Ë
	`_p˛o£
(x)

	)

242 
	#fûío
 
_fûío


	)

244 #i‡
	`deföed
(
_MSC_VER
) && _MSC_VER >= 1400

245 
	#f£eko
(
x
, 
y
, 
z
Ë
	`_f£eki64
((x), (y), (z))

	)

247 
	#f£eko
(
x
, 
y
, 
z
Ë
	`f£ek
((x), (y), (z))

	)

249 #i‡
	`deföed
(
_MSC_VER
) && _MSC_VER <= 1200

250 
	tuöçå_t
;

251 
	töçå_t
;

253 
	tsockÀn_t
;

254 #i‡
_MSC_VER
 >= 1700

255 
	~<°döt.h
>

257 sig√d 
	töt8_t
;

258 
	tuöt8_t
;

259 
	töt32_t
;

260 
	tuöt32_t
;

261 
	töt16_t
;

262 
	tuöt16_t
;

263 
__öt64
 
	töt64_t
;

264 
	t__öt64
 
	tuöt64_t
;

266 
SOCKET
 
	tsock_t
;

267 
uöt32_t
 
	tö_addr_t
;

268 #i‚de‡
UINT16_MAX


269 
	#UINT16_MAX
 65535

	)

271 #i‚de‡
UINT32_MAX


272 
	#UINT32_MAX
 4294967295

	)

274 #i‚de‡
pid_t


275 
	#pid_t
 
HANDLE


	)

277 
	#INT64_FMT
 "I64d"

	)

278 
	#INT64_X_FMT
 "I64x"

	)

279 
	#SIZE_T_FMT
 "Iu"

	)

280 
_°©i64
 
	tcs_°©_t
;

281 #i‚de‡
S_ISDIR


282 
	#S_ISDIR
(
x
Ë(((xË&
_S_IFMT
Ë=
_S_IFDIR
)

	)

284 #i‚de‡
S_ISREG


285 
	#S_ISREG
(
x
Ë(((xË&
_S_IFMT
Ë=
_S_IFREG
)

	)

287 
	#DIRSEP
 '\\'

	)

288 
	#CS_DEFINE_DIRENT


	)

290 #i‚de‡
va_c›y


291 #ifde‡
__va_c›y


292 
	#va_c›y
 
__va_c›y


	)

294 
	#va_c›y
(
x
, 
y
Ë(xË(y)

	)

298 #i‚de‡
MG_MAX_HTTP_REQUEST_SIZE


299 
	#MG_MAX_HTTP_REQUEST_SIZE
 8192

	)

302 #i‚de‡
MG_MAX_HTTP_SEND_MBUF


303 
	#MG_MAX_HTTP_SEND_MBUF
 4096

	)

306 #i‚de‡
MG_MAX_HTTP_HEADERS


307 
	#MG_MAX_HTTP_HEADERS
 40

	)

310 #i‚de‡
CS_ENABLE_STDIO


311 
	#CS_ENABLE_STDIO
 1

	)

314 #i‚de‡
MG_ENABLE_BROADCAST


315 
	#MG_ENABLE_BROADCAST
 1

	)

318 #i‚de‡
MG_ENABLE_DIRECTORY_LISTING


319 
	#MG_ENABLE_DIRECTORY_LISTING
 1

	)

322 #i‚de‡
MG_ENABLE_FILESYSTEM


323 
	#MG_ENABLE_FILESYSTEM
 1

	)

326 #i‚de‡
MG_ENABLE_HTTP_CGI


327 
	#MG_ENABLE_HTTP_CGI
 
MG_ENABLE_FILESYSTEM


	)

330 #i‚de‡
MG_NET_IF


331 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

334 
	`¶ìp
(
£c⁄ds
);

337 
	#timegm
 
_mkgmtime


	)

339 
	#gmtime_r
(
a
, 
b
) \

341 *(
b
Ë*
	`gmtime
(
a
); \

342 
	}
} 0)

	)

346 #ifde‡
MG_MODULE_LINES


349 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_UNIX_H_


350 
	#CS_COMMON_PLATFORMS_PLATFORM_UNIX_H_


	)

351 #i‡
CS_PLATFORM
 =
CS_P_UNIX


353 #i‚de‡
_XOPEN_SOURCE


354 
	#_XOPEN_SOURCE
 600

	)

358 #i‚de‡
__STDC_FORMAT_MACROS


359 
	#__STDC_FORMAT_MACROS


	)

363 #i‚de‡
__STDC_LIMIT_MACROS


364 
	#__STDC_LIMIT_MACROS


	)

368 #i‚de‡
_LARGEFILE_SOURCE


369 
	#_LARGEFILE_SOURCE


	)

373 #i‚de‡
_FILE_OFFSET_BITS


374 
	#_FILE_OFFSET_BITS
 64

	)

377 
	~<¨∑/öë.h
>

378 
	~<as£π.h
>

379 
	~<˘y≥.h
>

380 
	~<dúít.h
>

381 
	~<î∫o.h
>

382 
	~<f˙é.h
>

383 
	~<öây≥s.h
>

384 
	~<°döt.h
>

385 
	~<limôs.h
>

386 
	~<m©h.h
>

387 
	~<√tdb.h
>

388 
	~<√töë/ö.h
>

389 
	~<±hªad.h
>

390 
	~<sig«l.h
>

391 
	~<°d¨g.h
>

392 
	~<°dboﬁ.h
>

393 
	~<°dio.h
>

394 
	~<°dlib.h
>

395 
	~<°rög.h
>

396 
	~<sys/∑øm.h
>

397 
	~<sys/sockë.h
>

398 
	~<sys/£À˘.h
>

399 
	~<sys/°©.h
>

400 
	~<sys/time.h
>

401 
	~<sys/ty≥s.h
>

402 
	~<uni°d.h
>

404 #ifde‡
__APPLE__


405 
	~<machöe/ídün.h
>

406 #i‚de‡
BYTE_ORDER


407 
	#LITTLE_ENDIAN
 
__DARWIN_LITTLE_ENDIAN


	)

408 
	#BIG_ENDIAN
 
__DARWIN_BIG_ENDIAN


	)

409 
	#PDP_ENDIAN
 
__DARWIN_PDP_ENDIAN


	)

410 
	#BYTE_ORDER
 
__DARWIN_BYTE_ORDER


	)

420 #i‡!(
deföed
(
__˝lu•lus
) && __cplusplus >= 201103L) && \

421 !(
deföed
(
__DARWIN_C_LEVEL
Ë&& 
	g__DARWIN_C_LEVEL
 >= 200809L)

422 
°πﬁl
(const *, **, );

425 
	tsock_t
;

426 
	#INVALID_SOCKET
 (-1)

	)

427 
	#SIZE_T_FMT
 "zu"

	)

428 
°©
 
	tcs_°©_t
;

429 
	#DIRSEP
 '/'

	)

430 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

431 
	#INT64_FMT
 
PRId64


	)

432 
	#INT64_X_FMT
 
PRIx64


	)

434 #i‚de‡
__cde˛


435 
	#__cde˛


	)

438 #i‚de‡
va_c›y


439 #ifde‡
__va_c›y


440 
	#va_c›y
 
__va_c›y


	)

442 
	#va_c›y
(
x
, 
y
Ë(xË(y)

	)

446 
	#˛o£sockë
(
x
Ë
	`˛o£
(x)

	)

448 #i‚de‡
MG_MAX_HTTP_REQUEST_SIZE


449 
	#MG_MAX_HTTP_REQUEST_SIZE
 8192

	)

452 #i‚de‡
MG_MAX_HTTP_SEND_MBUF


453 
	#MG_MAX_HTTP_SEND_MBUF
 4096

	)

456 #i‚de‡
MG_MAX_HTTP_HEADERS


457 
	#MG_MAX_HTTP_HEADERS
 40

	)

460 #i‚de‡
CS_ENABLE_STDIO


461 
	#CS_ENABLE_STDIO
 1

	)

464 #i‚de‡
MG_ENABLE_BROADCAST


465 
	#MG_ENABLE_BROADCAST
 1

	)

468 #i‚de‡
MG_ENABLE_DIRECTORY_LISTING


469 
	#MG_ENABLE_DIRECTORY_LISTING
 1

	)

472 #i‚de‡
MG_ENABLE_FILESYSTEM


473 
	#MG_ENABLE_FILESYSTEM
 1

	)

476 #i‚de‡
MG_ENABLE_HTTP_CGI


477 
	#MG_ENABLE_HTTP_CGI
 
MG_ENABLE_FILESYSTEM


	)

480 #i‚de‡
MG_NET_IF


481 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

484 #i‚de‡
MG_HOSTS_FILE_NAME


485 
	#MG_HOSTS_FILE_NAME
 "/ëc/ho°s"

	)

488 #i‚de‡
MG_RESOLV_CONF_FILE_NAME


489 
	#MG_RESOLV_CONF_FILE_NAME
 "/ëc/ªsﬁv.c⁄f"

	)

494 #ifde‡
MG_MODULE_LINES


502 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_ESP32_H_


503 
	#CS_COMMON_PLATFORMS_PLATFORM_ESP32_H_


	)

504 #i‡
CS_PLATFORM
 =
CS_P_ESP32


506 
	~<as£π.h
>

507 
	~<˘y≥.h
>

508 
	~<dúít.h
>

509 
	~<f˙é.h
>

510 
	~<öây≥s.h
>

511 
	~<machöe/ídün.h
>

512 
	~<°dboﬁ.h
>

513 
	~<°döt.h
>

514 
	~<°rög.h
>

515 
	~<sys/°©.h
>

516 
	~<sys/time.h
>

518 
	#SIZE_T_FMT
 "u"

	)

519 
°©
 
	tcs_°©_t
;

520 
	#DIRSEP
 '/'

	)

521 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

522 
	#INT64_FMT
 
PRId64


	)

523 
	#INT64_X_FMT
 
PRIx64


	)

524 
	#__cde˛


	)

525 
	#_FILE_OFFSET_BITS
 32

	)

527 
	#MG_LWIP
 1

	)

529 #i‚de‡
MG_NET_IF


530 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

533 #i‚de‡
CS_ENABLE_STDIO


534 
	#CS_ENABLE_STDIO
 1

	)

539 #ifde‡
MG_MODULE_LINES


547 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_ESP8266_H_


548 
	#CS_COMMON_PLATFORMS_PLATFORM_ESP8266_H_


	)

549 #i‡
CS_PLATFORM
 =
CS_P_ESP8266


551 
	~<as£π.h
>

552 
	~<˘y≥.h
>

553 
	~<f˙é.h
>

554 
	~<öây≥s.h
>

555 
	~<machöe/ídün.h
>

556 
	~<°dboﬁ.h
>

557 
	~<°rög.h
>

558 
	~<sys/°©.h
>

559 
	~<sys/time.h
>

561 
	#SIZE_T_FMT
 "u"

	)

562 
°©
 
	tcs_°©_t
;

563 
	#DIRSEP
 '/'

	)

564 #i‡!
deföed
(
MGOS_VFS_DEFINE_DIRENT
)

565 
	#CS_DEFINE_DIRENT


	)

568 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

569 
	#INT64_FMT
 
PRId64


	)

570 
	#INT64_X_FMT
 
PRIx64


	)

571 
	#__cde˛


	)

572 
	#_FILE_OFFSET_BITS
 32

	)

574 #i‡!
deföed
(
RTOS_SDK
Ë&& !deföed(
__˝lu•lus
)

575 
	#fûío
(
x
Ë-1

	)

578 
	#MG_LWIP
 1

	)

581 
	#LWIP_TIMEVAL_PRIVATE
 0

	)

583 #i‚de‡
MG_NET_IF


584 
	~<lwù/›t.h
>

585 #i‡
LWIP_SOCKET


586 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

588 
	#MG_NET_IF
 
MG_NET_IF_LWIP_LOW_LEVEL


	)

592 #i‚de‡
CS_ENABLE_STDIO


593 
	#CS_ENABLE_STDIO
 1

	)

596 
	#öë_¡›
(
af
, 
§c
, 
d°
, 
size
) \

597 (((
af
Ë=
AF_INET
Ë? 
	`ùaddr_¡ﬂ_r
((c⁄° 
ù_addr_t
 *Ë(
§c
), (
d°
), (
size
)) \

598 : 
NULL
)

	)

599 
	#öë_±⁄
(
af
, 
§c
, 
d°
) \

600 (((
af
Ë=
AF_INET
Ë? 
	`ùaddr_©⁄
((
§c
), (
ù_addr_t
 *Ë(
d°
)Ë: 0)

	)

604 #ifde‡
MG_MODULE_LINES


612 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_CC3100_H_


613 
	#CS_COMMON_PLATFORMS_PLATFORM_CC3100_H_


	)

614 #i‡
CS_PLATFORM
 =
CS_P_CC3100


616 
	~<as£π.h
>

617 
	~<˘y≥.h
>

618 
	~<î∫o.h
>

619 
	~<öây≥s.h
>

620 
	~<°döt.h
>

621 
	~<°rög.h
>

622 
	~<time.h
>

624 
	#MG_NET_IF
 
MG_NET_IF_SIMPLELINK


	)

625 
	#MG_SSL_IF
 
MG_SSL_IF_SIMPLELINK


	)

633 
	~<sim∂ñök.h
>

634 
	~<√èµ.h
>

635 #unde‡
timevÆ


637 
	tsock_t
;

638 
	#INVALID_SOCKET
 (-1)

	)

640 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

641 
	#INT64_FMT
 
PRId64


	)

642 
	#INT64_X_FMT
 
PRIx64


	)

643 
	#SIZE_T_FMT
 "u"

	)

645 
	#SOMAXCONN
 8

	)

647 c⁄° *
öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
sockÀn_t
 
size
);

648 *
öë_¡ﬂ
(
ö_addr
 
ö
);

649 
öë_±⁄
(
af
, c⁄° *
§c
, *
d°
);

653 #ifde‡
MG_MODULE_LINES


661 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_CC3200_H_


662 
	#CS_COMMON_PLATFORMS_PLATFORM_CC3200_H_


	)

663 #i‡
CS_PLATFORM
 =
CS_P_CC3200


665 
	~<as£π.h
>

666 
	~<˘y≥.h
>

667 
	~<î∫o.h
>

668 
	~<öây≥s.h
>

669 
	~<°dboﬁ.h
>

670 
	~<°döt.h
>

671 
	~<°rög.h
>

672 
	~<time.h
>

674 #i‚de‡
__TI_COMPILER_VERSION__


675 
	~<f˙é.h
>

676 
	~<sys/time.h
>

679 
	#MG_NET_IF
 
MG_NET_IF_SIMPLELINK


	)

680 
	#MG_SSL_IF
 
MG_SSL_IF_SIMPLELINK


	)

683 #i‡
deföed
(
CC3200_FS_SPIFFS
Ë&& !deföed(
MG_ENABLE_DIRECTORY_LISTING
)

684 
	#MG_ENABLE_DIRECTORY_LISTING
 1

	)

689 
	tsock_t
;

690 
	#INVALID_SOCKET
 (-1)

	)

691 
	#SIZE_T_FMT
 "u"

	)

692 
°©
 
	tcs_°©_t
;

693 
	#DIRSEP
 '/'

	)

694 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

695 
	#INT64_FMT
 
PRId64


	)

696 
	#INT64_X_FMT
 
PRIx64


	)

697 
	#__cde˛


	)

699 
	#fûío
(
x
Ë-1

	)

703 #ifde‡
__˝lu•lus


707 #ifde‡
__TI_COMPILER_VERSION__


708 
SlTimevÆ_t
;

709 
	#timevÆ
 
SlTimevÆ_t


	)

710 
gëtimeofday
(
timevÆ
 *
t
, *
tz
);

711 
£âimeofday
(c⁄° 
timevÆ
 *
tv
, c⁄° *
tz
);

713 
a•rötf
(**
°Ω
, c⁄° *
fmt
, ...);

718 #ifde‡
__TI_COMPILER_VERSION__


720 
	~<fûe.h
>

722 
	tmode_t
;

723 
size_t
 
	t_off_t
;

724 
	tssize_t
;

726 
	s°©
 {

727 
	m°_öo
;

728 
mode_t
 
	m°_mode
;

729 
	m°_∆ök
;

730 
time_t
 
	m°_mtime
;

731 
off_t
 
	m°_size
;

734 
_°©
(c⁄° *
∑th«me
, 
°©
 *
°
);

735 
°©
(c⁄° *
∑th«me
, °© *
°
);

737 
	#__S_IFMT
 0170000

	)

739 
	#__S_IFDIR
 0040000

	)

740 
	#__S_IFCHR
 0020000

	)

741 
	#__S_IFREG
 0100000

	)

743 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË&
__S_IFMT
Ë=(mask))

	)

745 
	#S_IFDIR
 
__S_IFDIR


	)

746 
	#S_IFCHR
 
__S_IFCHR


	)

747 
	#S_IFREG
 
__S_IFREG


	)

748 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

749 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

752 #i‡
__TI_COMPILER_VERSION__
 < 16000000

753 
	#va_c›y
(
≠c
, 
≠
Ë(◊pcË◊p))

	)

758 #ifde‡
CC3200_FS_SLFS


759 
	#MG_FS_SLFS


	)

762 #i‡(
deföed
(
CC3200_FS_SPIFFS
Ë|| deföed(
CC3200_FS_SLFS
)) && \

763 !
	$deföed
(
MG_ENABLE_FILESYSTEM
)

764 
	#MG_ENABLE_FILESYSTEM
 1

	)

765 
	#CS_DEFINE_DIRENT


	)

768 #i‚de‡
CS_ENABLE_STDIO


769 
	#CS_ENABLE_STDIO
 1

	)

772 #ifde‡
__˝lu•lus


773 
	}
}

778 #ifde‡
MG_MODULE_LINES


786 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_MSP432_H_


787 
	#CS_COMMON_PLATFORMS_PLATFORM_MSP432_H_


	)

788 #i‡
CS_PLATFORM
 =
CS_P_MSP432


790 
	~<as£π.h
>

791 
	~<˘y≥.h
>

792 
	~<î∫o.h
>

793 
	~<öây≥s.h
>

794 
	~<°döt.h
>

795 
	~<°rög.h
>

796 
	~<time.h
>

798 #i‚de‡
__TI_COMPILER_VERSION__


799 
	~<f˙é.h
>

800 
	~<sys/time.h
>

803 
	#MG_NET_IF
 
MG_NET_IF_SIMPLELINK


	)

804 
	#MG_SSL_IF
 
MG_SSL_IF_SIMPLELINK


	)

808 
	tsock_t
;

809 
	#INVALID_SOCKET
 (-1)

	)

810 
	#SIZE_T_FMT
 "u"

	)

811 
°©
 
	tcs_°©_t
;

812 
	#DIRSEP
 '/'

	)

813 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

814 
	#INT64_FMT
 
PRId64


	)

815 
	#INT64_X_FMT
 
PRIx64


	)

816 
	#__cde˛


	)

818 
	#fûío
(
x
Ë-1

	)

822 #ifde‡
__˝lu•lus


826 #ifde‡
__TI_COMPILER_VERSION__


827 
SlTimevÆ_t
;

828 
	#timevÆ
 
SlTimevÆ_t


	)

829 
gëtimeofday
(
timevÆ
 *
t
, *
tz
);

833 #ifde‡
__TI_COMPILER_VERSION__


835 
	~<fûe.h
>

837 
	tmode_t
;

838 
size_t
 
	t_off_t
;

839 
	tssize_t
;

841 
	s°©
 {

842 
	m°_öo
;

843 
mode_t
 
	m°_mode
;

844 
	m°_∆ök
;

845 
time_t
 
	m°_mtime
;

846 
off_t
 
	m°_size
;

849 
_°©
(c⁄° *
∑th«me
, 
°©
 *
°
);

850 
	#°©
(
a
, 
b
Ë
	`_°©
◊, b)

	)

852 
	#__S_IFMT
 0170000

	)

854 
	#__S_IFDIR
 0040000

	)

855 
	#__S_IFCHR
 0020000

	)

856 
	#__S_IFREG
 0100000

	)

858 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË&
__S_IFMT
Ë=(mask))

	)

860 
	#S_IFDIR
 
__S_IFDIR


	)

861 
	#S_IFCHR
 
__S_IFCHR


	)

862 
	#S_IFREG
 
__S_IFREG


	)

863 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

864 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

867 
	#va_c›y
(
≠c
, 
≠
Ë(◊pcË◊p))

	)

871 #i‚de‡
CS_ENABLE_STDIO


872 
	#CS_ENABLE_STDIO
 1

	)

875 #i‡(
deföed
(
CC3200_FS_SPIFFS
Ë|| deföed(
CC3200_FS_SLFS
)) && \

876 !
	$deföed
(
MG_ENABLE_FILESYSTEM
)

877 
	#MG_ENABLE_FILESYSTEM
 1

	)

880 #ifde‡
__˝lu•lus


881 
	}
}

886 #ifde‡
MG_MODULE_LINES


894 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_TM4C129_H_


895 
	#CS_COMMON_PLATFORMS_PLATFORM_TM4C129_H_


	)

896 #i‡
CS_PLATFORM
 =
CS_P_TM4C129


898 
	~<as£π.h
>

899 
	~<˘y≥.h
>

900 
	~<î∫o.h
>

901 
	~<öây≥s.h
>

902 
	~<°döt.h
>

903 
	~<°rög.h
>

904 
	~<time.h
>

906 #i‚de‡
__TI_COMPILER_VERSION__


907 
	~<f˙é.h
>

908 
	~<sys/time.h
>

911 
	#SIZE_T_FMT
 "u"

	)

912 
°©
 
	tcs_°©_t
;

913 
	#DIRSEP
 '/'

	)

914 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

915 
	#INT64_FMT
 
PRId64


	)

916 
	#INT64_X_FMT
 
PRIx64


	)

917 
	#__cde˛


	)

919 #i‚de‡
MG_NET_IF


920 
	~<lwù/›t.h
>

921 #i‡
LWIP_SOCKET


922 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

924 
	#MG_NET_IF
 
MG_NET_IF_LWIP_LOW_LEVEL


	)

926 
	#MG_LWIP
 1

	)

927 #ñi‡
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK


931 #i‚de‡
CS_ENABLE_STDIO


932 
	#CS_ENABLE_STDIO
 1

	)

935 #ifde‡
__TI_COMPILER_VERSION__


937 
	#va_c›y
(
≠c
, 
≠
Ë(◊pcË◊p))

	)

940 #ifde‡
__˝lu•lus


946 #ifde‡
MG_MODULE_LINES


954 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_MBED_H_


955 
	#CS_COMMON_PLATFORMS_PLATFORM_MBED_H_


	)

956 #i‡
CS_PLATFORM
 =
CS_P_MBED


962 #ifde‡
__˝lu•lus


966 
	~<as£π.h
>

967 
	~<˘y≥.h
>

968 
	~<î∫o.h
>

969 
	~<öây≥s.h
>

970 
	~<°döt.h
>

971 
	~<°rög.h
>

972 
	~<time.h
>

973 
	~<sys/°©.h
>

974 
	~<sys/ty≥s.h
>

975 
	~<f˙é.h
>

976 
	~<°dio.h
>

978 
°©
 
	tcs_°©_t
;

979 
	#DIRSEP
 '/'

	)

981 #i‚de‡
CS_ENABLE_STDIO


982 
	#CS_ENABLE_STDIO
 1

	)

991 #i‡
deföed
(
__ARMCC_VERSION
Ë|| deföed(
__ICCARM__
)

992 
	#_TIMEVAL_DEFINED


	)

993 
	#gëtimeofday
 
_gëtimeofday


	)

996 
	tsu£c⁄ds_t
;

997 
	stimevÆ
 {

998 
time_t
 
	mtv_£c
;

999 
su£c⁄ds_t
 
	mtv_u£c
;

1004 #i‡
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK


1006 
	#MG_SIMPLELINK_NO_OSI
 1

	)

1008 
	~<sim∂ñök.h
>

1010 
	tsock_t
;

1011 
	#INVALID_SOCKET
 (-1)

	)

1013 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

1014 
	#INT64_FMT
 
PRId64


	)

1015 
	#INT64_X_FMT
 
PRIx64


	)

1016 
	#SIZE_T_FMT
 "u"

	)

1018 
	#SOMAXCONN
 8

	)

1020 c⁄° *
öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
sockÀn_t
 
size
);

1021 *
öë_¡ﬂ
(
ö_addr
 
ö
);

1022 
öë_±⁄
(
af
, c⁄° *
§c
, *
d°
);

1023 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
öp
);

1024 
ö_addr_t
 
öë_addr
(c⁄° *
˝
);

1030 #ifde‡
MG_MODULE_LINES


1037 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_NRF51_H_


1038 
	#CS_COMMON_PLATFORMS_PLATFORM_NRF51_H_


	)

1039 #i‡
CS_PLATFORM
 =
CS_P_NRF51


1041 
	~<as£π.h
>

1042 
	~<˘y≥.h
>

1043 
	~<öây≥s.h
>

1044 
	~<°döt.h
>

1045 
	~<°rög.h
>

1046 
	~<time.h
>

1048 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

1050 
	#MG_NET_IF
 
MG_NET_IF_LWIP_LOW_LEVEL


	)

1051 
	#MG_LWIP
 1

	)

1052 
	#MG_ENABLE_IPV6
 1

	)

1058 #i‡!
deföed
(
__ARMCC_VERSION
)

1059 
	#LWIP_TIMEVAL_PRIVATE
 0

	)

1061 
	gtimevÆ
;

1062 
gëtimeofday
(
timevÆ
 *
ç
, *
tzp
);

1065 
	#INT64_FMT
 
PRId64


	)

1066 
	#SIZE_T_FMT
 "u"

	)

1071 
	#CS_ENABLE_STRDUP
 
	`deföed
(
__ARMCC_VERSION
)

	)

1075 #ifde‡
MG_MODULE_LINES


1082 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_NRF52_H_


1083 
	#CS_COMMON_PLATFORMS_PLATFORM_NRF52_H_


	)

1084 #i‡
CS_PLATFORM
 =
CS_P_NRF52


1086 
	~<as£π.h
>

1087 
	~<˘y≥.h
>

1088 
	~<î∫o.h
>

1089 
	~<öây≥s.h
>

1090 
	~<°dboﬁ.h
>

1091 
	~<°döt.h
>

1092 
	~<°rög.h
>

1093 
	~<time.h
>

1095 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

1097 
	#MG_NET_IF
 
MG_NET_IF_LWIP_LOW_LEVEL


	)

1098 
	#MG_LWIP
 1

	)

1099 
	#MG_ENABLE_IPV6
 1

	)

1101 #i‡!
deföed
(
ENOSPC
)

1102 
	#ENOSPC
 28

	)

1109 #i‡!
deföed
(
__ARMCC_VERSION
)

1110 
	#LWIP_TIMEVAL_PRIVATE
 0

	)

1113 
	#INT64_FMT
 
PRId64


	)

1114 
	#SIZE_T_FMT
 "u"

	)

1119 
	#CS_ENABLE_STRDUP
 
	`deföed
(
__ARMCC_VERSION
)

	)

1123 #ifde‡
MG_MODULE_LINES


1131 #i‚de‡
CS_COMMON_PLATFORMS_SIMPLELINK_CS_SIMPLELINK_H_


1132 
	#CS_COMMON_PLATFORMS_SIMPLELINK_CS_SIMPLELINK_H_


	)

1134 #i‡
deföed
(
MG_NET_IF
Ë&& MG_NET_IF =
MG_NET_IF_SIMPLELINK


1137 #i‡!
deföed
(
__SIMPLELINK_H__
)

1139 
	~<°dboﬁ.h
>

1141 #i‚de‡
__TI_COMPILER_VERSION__


1142 #unde‡
__CONCAT


1143 #unde‡
FD_CLR


1144 #unde‡
FD_ISSET


1145 #unde‡
FD_SET


1146 #unde‡
FD_SETSIZE


1147 #unde‡
FD_ZERO


1148 #unde‡
fd_£t


1151 #i‡
CS_PLATFORM
 =
CS_P_CC3220


1152 
	~<ti/drivîs/√t/wifi/p‹tög/u£r.h
>

1153 
	~<ti/drivîs/√t/wifi/sim∂ñök.h
>

1154 
	~<ti/drivîs/√t/wifi/¶_sockë.h
>

1155 
	~<ti/drivîs/√t/wifi/√èµ.h
>

1159 
	#PROVISIONING_API_H_


	)

1160 
	~<sim∂ñök/u£r.h
>

1161 #unde‡
PROVISIONING_API_H_


1162 #unde‡
SL_INC_STD_BSD_API_NAMING


1164 
	~<sim∂ñök/ö˛ude/sim∂ñök.h
>

1165 
	~<sim∂ñök/ö˛ude/√èµ.h
>

1170 
	#AF_INET
 
SL_AF_INET


	)

1172 
	#sockÀn_t
 
SlSockÀn_t


	)

1173 
	#sockaddr
 
SlSockAddr_t


	)

1174 
	#sockaddr_ö
 
SlSockAddrIn_t


	)

1175 
	#ö_addr
 
SlInAddr_t


	)

1177 
	#SOCK_STREAM
 
SL_SOCK_STREAM


	)

1178 
	#SOCK_DGRAM
 
SL_SOCK_DGRAM


	)

1180 
	#ht⁄l
 
¶_Ht⁄l


	)

1181 
	#¡ohl
 
¶_Ntohl


	)

1182 
	#ht⁄s
 
¶_Ht⁄s


	)

1183 
	#¡ohs
 
¶_Ntohs


	)

1185 #i‚de‡
EACCES


1186 
	#EACCES
 
SL_EACCES


	)

1188 #i‚de‡
EAFNOSUPPORT


1189 
	#EAFNOSUPPORT
 
SL_EAFNOSUPPORT


	)

1191 #i‚de‡
EAGAIN


1192 
	#EAGAIN
 
SL_EAGAIN


	)

1194 #i‚de‡
EBADF


1195 
	#EBADF
 
SL_EBADF


	)

1197 #i‚de‡
EINVAL


1198 
	#EINVAL
 
SL_EINVAL


	)

1200 #i‚de‡
ENOMEM


1201 
	#ENOMEM
 
SL_ENOMEM


	)

1203 #i‚de‡
EWOULDBLOCK


1204 
	#EWOULDBLOCK
 
SL_EWOULDBLOCK


	)

1207 
	#SOMAXCONN
 8

	)

1209 #ifde‡
__˝lu•lus


1213 c⁄° *
öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
sockÀn_t
 
size
);

1214 *
öë_¡ﬂ
(
ö_addr
 
ö
);

1215 
öë_±⁄
(
af
, c⁄° *
§c
, *
d°
);

1217 
mg_mgr
;

1218 
mg_c⁄√˘i⁄
;

1220 (*
mg_öô_cb
)(
	tmg_mgr
 *
	tmgr
);

1221 
boﬁ
 
mg_°¨t_èsk
(
¥i‹ôy
, 
°ack_size
, 
mg_öô_cb
 
mg_öô
);

1223 
mg_run_ö_èsk
((*
cb
)(
mg_mgr
 *
mgr
, *
¨g
), *
cb_¨g
);

1225 
¶_fs_öô
();

1227 
¶_ª°¨t_cb
(
mg_mgr
 *
mgr
);

1229 
¶_£t_s¶_›ts
(
sock
, 
mg_c⁄√˘i⁄
 *
nc
);

1231 #ifde‡
__˝lu•lus


1238 #i‡
SL_MAJOR_VERSION_NUM
 < 2

1240 
	#SL_ERROR_BSD_EAGAIN
 
SL_EAGAIN


	)

1241 
	#SL_ERROR_BSD_EALREADY
 
SL_EALREADY


	)

1242 
	#SL_ERROR_BSD_ENOPROTOOPT
 
SL_ENOPROTOOPT


	)

1243 
	#SL_ERROR_BSD_ESECDATEERROR
 
SL_ESECDATEERROR


	)

1244 
	#SL_ERROR_BSD_ESECSNOVERIFY
 
SL_ESECSNOVERIFY


	)

1245 
	#SL_ERROR_FS_FAILED_TO_ALLOCATE_MEM
 
SL_FS_ERR_FAILED_TO_ALLOCATE_MEM


	)

1246 
	#SL_ERROR_FS_FILE_HAS_NOT_BEEN_CLOSE_CORRECTLY
 \

1247 
SL_FS_FILE_HAS_NOT_BEEN_CLOSE_CORRECTLY


	)

1248 
	#SL_ERROR_FS_FILE_NAME_EXIST
 
SL_FS_FILE_NAME_EXIST


	)

1249 
	#SL_ERROR_FS_FILE_NOT_EXISTS
 
SL_FS_ERR_FILE_NOT_EXISTS


	)

1250 
	#SL_ERROR_FS_NO_AVAILABLE_NV_INDEX
 
SL_FS_ERR_NO_AVAILABLE_NV_INDEX


	)

1251 
	#SL_ERROR_FS_NOT_ENOUGH_STORAGE_SPACE
 
SL_FS_ERR_NO_AVAILABLE_BLOCKS


	)

1252 
	#SL_ERROR_FS_NOT_SUPPORTED
 
SL_FS_ERR_NOT_SUPPORTED


	)

1253 
	#SL_ERROR_FS_WRONG_FILE_NAME
 
SL_FS_WRONG_FILE_NAME


	)

1254 
	#SL_ERROR_FS_INVALID_HANDLE
 
SL_FS_ERR_INVALID_HANDLE


	)

1255 
	#SL_NETCFG_MAC_ADDRESS_GET
 
SL_MAC_ADDRESS_GET


	)

1256 
	#SL_SOCKET_FD_ZERO
 
SL_FD_ZERO


	)

1257 
	#SL_SOCKET_FD_SET
 
SL_FD_SET


	)

1258 
	#SL_SOCKET_FD_ISSET
 
SL_FD_ISSET


	)

1259 
	#SL_SO_SECURE_DOMAIN_NAME_VERIFICATION
 
SO_SECURE_DOMAIN_NAME_VERIFICATION


	)

1261 
	#SL_FS_READ
 
FS_MODE_OPEN_READ


	)

1262 
	#SL_FS_WRITE
 
FS_MODE_OPEN_WRITE


	)

1264 
	#SL_FI_FILE_SIZE
(
fi
Ë((fi).
FûeLí
)

	)

1265 
	#SL_FI_FILE_MAX_SIZE
(
fi
Ë((fi).
AŒoˇãdLí
)

	)

1267 
	#SlDevi˚Vîsi⁄_t
 
SlVîsi⁄FuŒ


	)

1268 
	#¶_Devi˚Gë
 
¶_DevGë


	)

1269 
	#SL_DEVICE_GENERAL
 
SL_DEVICE_GENERAL_CONFIGURATION


	)

1270 
	#SL_LEN_TYPE
 
_u8


	)

1271 
	#SL_OPT_TYPE
 
_u8


	)

1275 
	#FS_MODE_OPEN_CREATE
(
max_size
, 
Êag
) \

1276 (
SL_FS_CREATE
 | 
	`SL_FS_CREATE_MAX_SIZE
(
max_size
))

	)

1277 
	#SL_FI_FILE_SIZE
(
fi
Ë((fi).
Lí
)

	)

1278 
	#SL_FI_FILE_MAX_SIZE
(
fi
Ë((fi).
MaxSize
)

	)

1280 
	#SL_LEN_TYPE
 
_u16


	)

1281 
	#SL_OPT_TYPE
 
_u16


	)

1285 
¶fs_›í
(c⁄° *
‚ame
, 
uöt32_t
 
Êags
);

1290 #ifde‡
MG_MODULE_LINES


1293 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_WINCE_H_


1294 
	#CS_COMMON_PLATFORMS_PLATFORM_WINCE_H_


	)

1296 #i‡
CS_PLATFORM
 =
CS_P_WINCE


1310 #¥agm®
w¨nög
(
dißbÀ
 : 4127)

1311 #¥agm®
w¨nög
(
dißbÀ
 : 4204)

1313 #i‚de‡
_WINSOCK_DEPRECATED_NO_WARNINGS


1314 
	#_WINSOCK_DEPRECATED_NO_WARNINGS
 1

	)

1317 #i‚de‡
_CRT_SECURE_NO_WARNINGS


1318 
	#_CRT_SECURE_NO_WARNINGS


	)

1321 
	~<as£π.h
>

1322 
	~<limôs.h
>

1323 
	~<°ddef.h
>

1324 
	~<°dio.h
>

1325 
	~<°dlib.h
>

1326 
	~<time.h
>

1328 #¥agm®
commít
(
lib
, "ws2.lib")

1330 
	~<wösock2.h
>

1331 
	~<ws2t˝ù.h
>

1332 
	~<wödows.h
>

1334 
	#°rdup
 
_°rdup


	)

1336 #i‚de‡
EINPROGRESS


1337 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

1340 #i‚de‡
EWOULDBLOCK


1341 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

1344 #i‚de‡
EAGAIN


1345 
	#EAGAIN
 
EWOULDBLOCK


	)

1348 #i‚de‡
__func__


1349 
	#STRX
(
x
Ë#x

	)

1350 
	#STR
(
x
Ë
	`STRX
(x)

	)

1351 
	#__func__
 
__FILE__
 ":" 
	`STR
(
__LINE__
)

	)

1354 
	#¢¥ötf
 
_¢¥ötf


	)

1355 
	#fûío
 
_fûío


	)

1356 
	#v¢¥ötf
 
_v¢¥ötf


	)

1357 
	#¶ìp
(
x
Ë
	`SÀï
((xË*1000)

	)

1358 
	#to64
(
x
Ë
	`_©oi64
(x)

	)

1359 
	#rmdú
 
_rmdú


	)

1361 #i‡
deföed
(
_MSC_VER
) && _MSC_VER >= 1400

1362 
	#f£eko
(
x
, 
y
, 
z
Ë
	`_f£eki64
((x), (y), (z))

	)

1364 
	#f£eko
(
x
, 
y
, 
z
Ë
	`f£ek
((x), (y), (z))

	)

1367 
	tsockÀn_t
;

1369 #i‡
_MSC_VER
 >= 1700

1370 
	~<°döt.h
>

1372 sig√d 
	töt8_t
;

1373 
	tuöt8_t
;

1374 
	töt32_t
;

1375 
	tuöt32_t
;

1376 
	töt16_t
;

1377 
	tuöt16_t
;

1378 
__öt64
 
	töt64_t
;

1379 
	t__öt64
 
	tuöt64_t
;

1382 
SOCKET
 
	tsock_t
;

1383 
uöt32_t
 
	tö_addr_t
;

1385 #i‚de‡
UINT16_MAX


1386 
	#UINT16_MAX
 65535

	)

1389 #i‚de‡
UINT32_MAX


1390 
	#UINT32_MAX
 4294967295

	)

1393 #i‚de‡
pid_t


1394 
	#pid_t
 
HANDLE


	)

1397 
	#INT64_FMT
 "I64d"

	)

1398 
	#INT64_X_FMT
 "I64x"

	)

1400 
	#SIZE_T_FMT
 "u"

	)

1402 
	#DIRSEP
 '\\'

	)

1403 
	#CS_DEFINE_DIRENT


	)

1405 #i‚de‡
va_c›y


1406 #ifde‡
__va_c›y


1407 
	#va_c›y
 
__va_c›y


	)

1409 
	#va_c›y
(
x
, 
y
Ë(xË(y)

	)

1413 #i‚de‡
MG_MAX_HTTP_REQUEST_SIZE


1414 
	#MG_MAX_HTTP_REQUEST_SIZE
 8192

	)

1417 #i‚de‡
MG_MAX_HTTP_SEND_MBUF


1418 
	#MG_MAX_HTTP_SEND_MBUF
 4096

	)

1421 #i‚de‡
MG_MAX_HTTP_HEADERS


1422 
	#MG_MAX_HTTP_HEADERS
 40

	)

1425 #i‚de‡
CS_ENABLE_STDIO


1426 
	#CS_ENABLE_STDIO
 1

	)

1429 
	#ab‹t
(Ë
	`DebugBªak
();

	)

1431 #i‚de‡
BUFSIZ


1432 
	#BUFSIZ
 4096

	)

1438 #i‚de‡
MG_ENABLE_THREADS


1439 
	#MG_ENABLE_THREADS
 0

	)

1442 #i‚de‡
MG_ENABLE_FILESYSTEM


1443 
	#MG_ENABLE_FILESYSTEM
 1

	)

1446 #i‚de‡
MG_NET_IF


1447 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

1450 
	s_°©i64
 {

1451 
uöt32_t
 
	g°_mtime
;

1452 
uöt32_t
 
	g°_size
;

1453 
uöt32_t
 
	g°_mode
;

1454 } 
	tcs_°©_t
;

1461 #i‚de‡
ENOENT


1462 
	#ENOENT
 
ERROR_PATH_NOT_FOUND


	)

1465 #i‚de‡
EACCES


1466 
	#EACCES
 
ERROR_ACCESS_DENIED


	)

1469 #i‚de‡
ENOMEM


1470 
	#ENOMEM
 
ERROR_NOT_ENOUGH_MEMORY


	)

1473 #i‚de‡
_UINTPTR_T_DEFINED


1474 *
	tuöçå_t
;

1477 
	#_S_IFREG
 2

	)

1478 
	#_S_IFDIR
 4

	)

1480 #i‚de‡
S_ISDIR


1481 
	#S_ISDIR
(
x
Ë(((xË&
_S_IFDIR
Ë!0)

	)

1484 #i‚de‡
S_ISREG


1485 
	#S_ISREG
(
x
Ë(((xË&
_S_IFREG
Ë!0)

	)

1488 
›í
(c⁄° *
fûíame
, 
oÊag
, 
pmode
);

1489 
_w°©i64
(c⁄° 
wch¨_t
 *
∑th
, 
cs_°©_t
 *
°
);

1490 c⁄° *
°ªº‹
();

1494 #ifde‡
MG_MODULE_LINES


1502 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_NXP_LPC_H_


1503 
	#CS_COMMON_PLATFORMS_PLATFORM_NXP_LPC_H_


	)

1505 #i‡
CS_PLATFORM
 =
CS_P_NXP_LPC


1507 
	~<˘y≥.h
>

1508 
	~<°döt.h
>

1509 
	~<°rög.h
>

1511 
	#SIZE_T_FMT
 "u"

	)

1512 
°©
 
	tcs_°©_t
;

1513 
	#INT64_FMT
 "Œd"

	)

1514 
	#INT64_X_FMT
 "Œx"

	)

1515 
	#__cde˛


	)

1517 
	#MG_LWIP
 1

	)

1519 
	#MG_NET_IF
 
MG_NET_IF_LWIP_LOW_LEVEL


	)

1528 #ifde‡
__REDLIB_INTERFACE_VERSION__


1531 
	#LWIP_TIMEVAL_PRIVATE
 1

	)

1533 
	#va_c›y
(
d
, 
s
Ë
	`__buûtö_va_c›y
(d, s)

	)

1535 
	#CS_ENABLE_TO64
 1

	)

1536 
	#to64
(
x
Ë
	`cs_to64
(x)

	)

1538 
	#CS_ENABLE_STRDUP
 1

	)

1542 
	~<sys/time.h
>

1543 
	#LWIP_TIMEVAL_PRIVATE
 0

	)

1544 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

1550 #ifde‡
MG_MODULE_LINES


1558 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_NXP_KINETIS_H_


1559 
	#CS_COMMON_PLATFORMS_PLATFORM_NXP_KINETIS_H_


	)

1561 #i‡
CS_PLATFORM
 =
CS_P_NXP_KINETIS


1563 
	~<˘y≥.h
>

1564 
	~<öây≥s.h
>

1565 
	~<°rög.h
>

1566 
	~<sys/time.h
>

1568 
	#SIZE_T_FMT
 "u"

	)

1569 
°©
 
	tcs_°©_t
;

1570 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

1571 
	#INT64_FMT
 "Œd"

	)

1572 
	#INT64_X_FMT
 "Œx"

	)

1573 
	#__cde˛


	)

1575 
	#MG_LWIP
 1

	)

1577 
	#MG_NET_IF
 
MG_NET_IF_LWIP_LOW_LEVEL


	)

1580 
	#LWIP_TIMEVAL_PRIVATE
 0

	)

1584 #ifde‡
MG_MODULE_LINES


1592 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_PIC32_H_


1593 
	#CS_COMMON_PLATFORMS_PLATFORM_PIC32_H_


	)

1595 #i‡
CS_PLATFORM
 =
CS_P_PIC32


1597 
	#MG_NET_IF
 
MG_NET_IF_PIC32


	)

1599 
	~<°döt.h
>

1600 
	~<time.h
>

1601 
	~<˘y≥.h
>

1602 
	~<°dlib.h
>

1604 
	~<sy°em_c⁄fig.h
>

1605 
	~<sy°em_deföôi⁄s.h
>

1607 
	~<sys/ty≥s.h
>

1609 
TCP_SOCKET
 
	tsock_t
;

1610 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

1612 
	#SIZE_T_FMT
 "lu"

	)

1613 
	#INT64_FMT
 "Œd"

	)

1615 #i‚de‡
CS_ENABLE_STDIO


1616 
	#CS_ENABLE_STDIO
 1

	)

1619 *
öë_¡ﬂ
(
ö_addr
 
ö
);

1624 #ifde‡
MG_MODULE_LINES


1632 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_STM32_H_


1633 
	#CS_COMMON_PLATFORMS_PLATFORM_STM32_H_


	)

1634 #i‡
CS_PLATFORM
 =
CS_P_STM32


1636 
	~<˘y≥.h
>

1637 
	~<î∫o.h
>

1638 
	~<f˙é.h
>

1639 
	~<°döt.h
>

1640 
	~<°dio.h
>

1641 
	~<°rög.h
>

1642 
	~<sys/°©.h
>

1643 
	~<sys/time.h
>

1644 
	~<sys/ty≥s.h
>

1645 
	~<uni°d.h
>

1646 
	~<dúít.h
>

1648 
	~<°m32_sdk_hÆ.h
>

1650 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

1651 
	#INT64_FMT
 
PRId64


	)

1652 
	#SIZE_T_FMT
 "u"

	)

1653 
°©
 
	tcs_°©_t
;

1654 
	#DIRSEP
 '/'

	)

1656 #i‚de‡
CS_ENABLE_STDIO


1657 
	#CS_ENABLE_STDIO
 1

	)

1660 #i‚de‡
MG_ENABLE_FILESYSTEM


1661 
	#MG_ENABLE_FILESYSTEM
 1

	)

1666 #ifde‡
MG_MODULE_LINES


1674 #i‚de‡
CS_COMMON_PLATFORMS_LWIP_MG_LWIP_H_


1675 
	#CS_COMMON_PLATFORMS_LWIP_MG_LWIP_H_


	)

1677 #i‚de‡
MG_LWIP


1678 
	#MG_LWIP
 0

	)

1681 #i‡
MG_LWIP


1692 #i‡
CS_PLATFORM
 =
CS_P_NRF51
 || CS_PLATFORM =
CS_P_NRF52


1693 #unde‡
BYTE_ORDER


1696 
	~<lwù/›t.h
>

1697 
	~<lwù/îr.h
>

1698 
	~<lwù/ù_addr.h
>

1699 
	~<lwù/öë.h
>

1700 
	~<lwù/√tdb.h
>

1701 
	~<lwù/dns.h
>

1703 #i‚de‡
LWIP_PROVIDE_ERRNO


1704 
	~<î∫o.h
>

1707 #i‡
LWIP_SOCKET


1708 
	~<lwù/sockës.h
>

1711 #unde‡
LWIP_SOCKET


1712 
	#LWIP_SOCKET
 1

	)

1713 
	~<lwù/sockës.h
>

1714 #unde‡
LWIP_SOCKET


1715 
	#LWIP_SOCKET
 0

	)

1718 
	#INVALID_SOCKET
 (-1)

	)

1719 
	#SOMAXCONN
 10

	)

1720 
	tsock_t
;

1722 #i‡
MG_NET_IF
 =
MG_NET_IF_LWIP_LOW_LEVEL


1723 
	gmg_mgr
;

1724 
	gmg_c⁄√˘i⁄
;

1725 
uöt32_t
 
mg_lwù_gë_pﬁl_dñay_ms
(
mg_mgr
 *
mgr
);

1726 
mg_lwù_£t_kì∑live_∑øms
(
mg_c⁄√˘i⁄
 *
nc
, 
idÀ
,

1727 
öãrvÆ
, 
cou¡
);

1731 #i‚de‡
ùX_2_ù


1732 
	#ùX_2_ù
(
x
Ë(x)

	)

1738 #ifde‡
MG_MODULE_LINES


1746 #i‚de‡
CS_COMMON_MD5_H_


1747 
	#CS_COMMON_MD5_H_


	)

1751 #i‚de‡
CS_DISABLE_MD5


1752 
	#CS_DISABLE_MD5
 0

	)

1755 #ifde‡
__˝lu•lus


1760 
uöt32_t
 
buf
[4];

1761 
uöt32_t
 
bôs
[2];

1762 
ö
[64];

1763 } 
	tcs_md5_˘x
;

1765 
cs_md5_öô
(
cs_md5_˘x
 *
c
);

1766 
cs_md5_upd©e
(
cs_md5_˘x
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

1767 
cs_md5_föÆ
(*
md
, 
cs_md5_˘x
 *
c
);

1769 #ifde‡
__˝lu•lus


1774 #ifde‡
MG_MODULE_LINES


1782 #i‚de‡
CS_COMMON_SHA1_H_


1783 
	#CS_COMMON_SHA1_H_


	)

1785 #i‚de‡
CS_DISABLE_SHA1


1786 
	#CS_DISABLE_SHA1
 0

	)

1789 #i‡!
CS_DISABLE_SHA1


1793 #ifde‡
__˝lu•lus


1798 
uöt32_t
 
°©e
[5];

1799 
uöt32_t
 
cou¡
[2];

1800 
buf„r
[64];

1801 } 
	tcs_sha1_˘x
;

1803 
cs_sha1_öô
(
cs_sha1_˘x
 *);

1804 
cs_sha1_upd©e
(
cs_sha1_˘x
 *, c⁄° *
d©a
, 
uöt32_t
 
Àn
);

1805 
cs_sha1_föÆ
(
dige°
[20], 
cs_sha1_˘x
 *);

1806 
cs_hmac_sha1
(c⁄° *
key
, 
size_t
 
key_Àn
,

1807 c⁄° *
ãxt
, 
size_t
 
ãxt_Àn
,

1808 
out
[20]);

1809 #ifde‡
__˝lu•lus


1816 #ifde‡
MG_MODULE_LINES


1824 #i‚de‡
CS_COMMON_CS_TIME_H_


1825 
	#CS_COMMON_CS_TIME_H_


	)

1827 
	~<time.h
>

1831 #ifde‡
__˝lu•lus


1836 
cs_time
();

1842 
cs_timegm
(c⁄° 
tm
 *tm);

1844 #ifde‡
__˝lu•lus


1849 #ifde‡
MG_MODULE_LINES


1857 #i‚de‡
CS_COMMON_MG_STR_H_


1858 
	#CS_COMMON_MG_STR_H_


	)

1860 
	~<°ddef.h
>

1864 #ifde‡
__˝lu•lus


1869 
	smg_°r
 {

1870 c⁄° *
p
;

1871 
size_t
 
Àn
;

1878 
mg_°r
 
mg_mk_°r
(c⁄° *
s
);

1883 
mg_°r
 
mg_mk_°r_n
(c⁄° *
s
, 
size_t
 
Àn
);

1886 
	#MG_MK_STR
(
°r_lôîÆ
) \

1887 { 
°r_lôîÆ
, (°r_lôîÆË- 1 }

	)

1888 
	#MG_NULL_STR
 \

1889 { 
NULL
, 0 }

	)

1895 
mg_vcmp
(c⁄° 
mg_°r
 *
°r2
, c⁄° *
°r1
);

1901 
mg_vˇ£cmp
(c⁄° 
mg_°r
 *
°r2
, c⁄° *
°r1
);

1904 
mg_°r
 
mg_°rdup
(c⁄° mg_°∏
s
);

1910 
mg_°r
 
mg_°rdup_nul
(c⁄° mg_°∏
s
);

1915 c⁄° *
mg_°rchr
(c⁄° 
mg_°r
 
s
, 
c
);

1920 
mg_°rcmp
(c⁄° 
mg_°r
 
°r1
, c⁄° mg_°∏
°r2
);

1925 
mg_°∫cmp
(c⁄° 
mg_°r
 
°r1
, c⁄° mg_°∏
°r2
, 
size_t
 
n
);

1930 c⁄° *
mg_°r°r
(c⁄° 
mg_°r
 
hay°ack
, c⁄° mg_°∏
√edÀ
);

1932 #ifde‡
__˝lu•lus


1937 #ifde‡
MG_MODULE_LINES


1954 #i‚de‡
CS_COMMON_MBUF_H_


1955 
	#CS_COMMON_MBUF_H_


	)

1957 
	~<°dlib.h
>

1960 #i‡
deföed
(
__˝lu•lus
)

1964 #i‚de‡
MBUF_SIZE_MULTIPLIER


1965 
	#MBUF_SIZE_MULTIPLIER
 1.5

	)

1969 
	smbuf
 {

1970 *
buf
;

1971 
size_t
 
Àn
;

1972 
size_t
 
size
;

1979 
mbuf_öô
(
mbuf
 *, 
size_t
 
öôül_ˇ∑côy
);

1982 
mbuf_‰ì
(
mbuf
 *);

1989 
size_t
 
mbuf_≠≥nd
(
mbuf
 *, c⁄° *
d©a
, size_à
d©a_size
);

1998 
size_t
 
mbuf_ö£π
(
mbuf
 *, size_t, const *, size_t);

2001 
mbuf_ªmove
(
mbuf
 *, 
size_t
 
d©a_size
);

2009 
mbuf_ªsize
(
mbuf
 *, 
size_t
 
√w_size
);

2012 
mbuf_åim
(
mbuf
 *);

2014 #i‡
deföed
(
__˝lu•lus
)

2019 #ifde‡
MG_MODULE_LINES


2027 #i‚de‡
CS_COMMON_CS_BASE64_H_


2028 
	#CS_COMMON_CS_BASE64_H_


	)

2030 #i‚de‡
DISABLE_BASE64


2031 
	#DISABLE_BASE64
 0

	)

2034 #i‡!
DISABLE_BASE64


2036 
	~<°dio.h
>

2038 #ifde‡
__˝lu•lus


2042 (*
cs_ba£64_putc_t
)(, *);

2044 
	scs_ba£64_˘x
 {

2046 
cs_ba£64_putc_t
 
b64_putc
;

2047 
chunk
[3];

2048 
chunk_size
;

2049 *
u£r_d©a
;

2052 
cs_ba£64_öô
(
cs_ba£64_˘x
 *
˘x
, 
cs_ba£64_putc_t
 
putc
,

2053 *
u£r_d©a
);

2054 
cs_ba£64_upd©e
(
cs_ba£64_˘x
 *
˘x
, c⁄° *
°r
, 
size_t
 
Àn
);

2055 
cs_ba£64_föish
(
cs_ba£64_˘x
 *
˘x
);

2057 
cs_ba£64_ícode
(c⁄° *
§c
, 
§c_Àn
, *
d°
);

2058 
cs_Âröt_ba£64
(
FILE
 *
f
, c⁄° *
§c
, 
§c_Àn
);

2059 
cs_ba£64_decode
(c⁄° *
s
, 
Àn
, *
d°
, *
dec_Àn
);

2061 #ifde‡
__˝lu•lus


2068 #ifde‡
MG_MODULE_LINES


2076 #i‚de‡
CS_COMMON_STR_UTIL_H_


2077 
	#CS_COMMON_STR_UTIL_H_


	)

2079 
	~<°d¨g.h
>

2080 
	~<°dlib.h
>

2085 #i‚de‡
CS_ENABLE_STRDUP


2086 
	#CS_ENABLE_STRDUP
 0

	)

2089 #i‚de‡
CS_ENABLE_TO64


2090 
	#CS_ENABLE_TO64
 0

	)

2097 
	#CS_STRINGIFY_LIT
(
x
Ë#x

	)

2108 
	#CS_STRINGIFY_MACRO
(
x
Ë
	`CS_STRINGIFY_LIT
(x)

	)

2110 #ifde‡
__˝lu•lus


2117 
size_t
 
c_°∫Àn
(c⁄° *
s
, size_à
maxÀn
);

2122 
c_¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
f‹m©
, ...);

2127 
c_v¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

2133 c⁄° *
c_°∫°r
(c⁄° *
s
, c⁄° *
föd
, 
size_t
 
¶í
);

2140 
cs_to_hex
(*
to
, c⁄° *
p
, 
size_t
 
Àn
);

2146 
cs_‰om_hex
(*
to
, c⁄° *
p
, 
size_t
 
Àn
);

2148 #i‡
CS_ENABLE_STRDUP


2152 *
°rdup
(c⁄° *
§c
);

2155 #i‡
CS_ENABLE_TO64


2156 
	~<°döt.h
>

2160 
öt64_t
 
cs_to64
(c⁄° *
s
);

2166 
mg_nˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
);

2171 
mg_ˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
);

2190 
mg_a•rötf
(**
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

2193 
mg_av¥ötf
(**
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
);

2208 c⁄° *
mg_√xt_comma_li°_íåy
(c⁄° *
li°
, 
mg_°r
 *
vÆ
,

2209 
mg_°r
 *
eq_vÆ
);

2214 
mg_°r
 
mg_√xt_comma_li°_íåy_n
(mg_°∏
li°
, mg_°∏*
vÆ
,

2215 
mg_°r
 *
eq_vÆ
);

2237 
size_t
 
mg_m©ch_¥efix
(c⁄° *
∑âîn
, 
∑âîn_Àn
, c⁄° *
°r
);

2242 
size_t
 
mg_m©ch_¥efix_n
(c⁄° 
mg_°r
 
∑âîn
, c⁄° mg_°∏
°r
);

2244 #ifde‡
__˝lu•lus


2249 #ifde‡
MG_MODULE_LINES


2285 #i‚de‡
_SYS_QUEUE_H_


2286 
	#_SYS_QUEUE_H_


	)

2361 #ifde‡
QUEUE_MACRO_DEBUG


2363 
	sqm_åa˚
 {

2364 
œ°löe
;

2365 
¥evlöe
;

2366 c⁄° *
œ°fûe
;

2367 c⁄° *
¥evfûe
;

2370 
	#TRACEBUF
 
qm_åa˚
 
åa˚
;

	)

2371 
	#TRACEBUF_INITIALIZER
 { 
__LINE__
, 0, 
__FILE__
, 
NULL
 } ,

	)

2372 
	#TRASHIT
(
x
Ëdÿ{(xË(*)-1;} 0)

	)

2373 
	#QMD_SAVELINK
(
«me
, 
lök
Ë**«mê(*)&÷ök)

	)

2375 
	#QMD_TRACE_HEAD
(
hód
) do { \

2376 (
hód
)->
åa˚
.
¥evlöe
 = (hód)->åa˚.
œ°löe
; \

2377 (
hód
)->
åa˚
.
¥evfûe
 = (hód)->åa˚.
œ°fûe
; \

2378 (
hód
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

2379 (
hód
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

2380 } 0)

	)

2382 
	#QMD_TRACE_ELEM
(
ñem
) do { \

2383 (
ñem
)->
åa˚
.
¥evlöe
 = (ñem)->åa˚.
œ°löe
; \

2384 (
ñem
)->
åa˚
.
¥evfûe
 = (ñem)->åa˚.
œ°fûe
; \

2385 (
ñem
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

2386 (
ñem
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

2387 } 0)

	)

2390 
	#QMD_TRACE_ELEM
(
ñem
)

	)

2391 
	#QMD_TRACE_HEAD
(
hód
)

	)

2392 
	#QMD_SAVELINK
(
«me
, 
lök
)

	)

2393 
	#TRACEBUF


	)

2394 
	#TRACEBUF_INITIALIZER


	)

2395 
	#TRASHIT
(
x
)

	)

2398 #ifde‡
__˝lu•lus


2402 
	#QUEUE_TYPEOF
(
ty≥
Ë
	)
type

2404 
	#QUEUE_TYPEOF
(
ty≥
Ë
	)
type

2410 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

2411 
	s«me
 { \

2412 
ty≥
 *
¶h_fú°
; \

2413 }

	)

2415 
	#SLIST_CLASS_HEAD
(
«me
, 
ty≥
) \

2416 
	s«me
 { \

2417 
˛ass
 
ty≥
 *
¶h_fú°
; \

2418 }

	)

2420 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

2421 { 
NULL
 }

	)

2423 
	#SLIST_ENTRY
(
ty≥
) \

2425 
ty≥
 *
¶e_√xt
; \

2426 }

	)

2428 
	#SLIST_CLASS_ENTRY
(
ty≥
) \

2430 
˛ass
 
ty≥
 *
¶e_√xt
; \

2431 }

	)

2436 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

2438 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

2440 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

2441 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

2442 (
v¨
); \

2443 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

2445 
	#SLIST_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

2446 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`SLIST_FIRST
((
hód
))); \

2447 (
v¨
); \

2448 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

2450 
	#SLIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2451 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

2452 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

2453 (
v¨
Ë(
tv¨
))

	)

2455 
	#SLIST_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2456 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`SLIST_FIRST
((
hód
))); \

2457 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

2458 (
v¨
Ë(
tv¨
))

	)

2460 
	#SLIST_FOREACH_PREVPTR
(
v¨
, 
v¨p
, 
hód
, 
fõld
) \

2461 (
v¨p
Ë&
	`SLIST_FIRST
((
hód
)); \

2462 ((
v¨
Ë*(
v¨p
)Ë!
NULL
; \

2463 (
v¨p
Ë&
	`SLIST_NEXT
((
v¨
), 
fõld
))

	)

2465 
	#SLIST_INIT
(
hód
) do { \

2466 
	`SLIST_FIRST
((
hód
)Ë
NULL
; \

2467 } 0)

	)

2469 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

2470 
	`SLIST_NEXT
((
ñm
), 
fõld
ËSLIST_NEXT((
¶i°ñm
), field); \

2471 
	`SLIST_NEXT
((
¶i°ñm
), 
fõld
Ë(
ñm
); \

2472 } 0)

	)

2474 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

2475 
	`SLIST_NEXT
((
ñm
), 
fõld
Ë
	`SLIST_FIRST
((
hód
)); \

2476 
	`SLIST_FIRST
((
hód
)Ë(
ñm
); \

2477 } 0)

	)

2479 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

2481 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

2482 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
¶e_√xt
); \

2483 i‡(
	`SLIST_FIRST
((
hód
)Ë=(
ñm
)) { \

2484 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

2487 
	`QUEUE_TYPEOF
(
ty≥
Ë*
cuªlm
 = 
	`SLIST_FIRST
(
hód
); \

2488 
	`SLIST_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

2489 
cuªlm
 = 
	`SLIST_NEXT
(cuªlm, 
fõld
); \

2490 
	`SLIST_REMOVE_AFTER
(
cuªlm
, 
fõld
); \

2492 
	`TRASHIT
(*
ﬁd√xt
); \

2493 } 0)

	)

2495 
	#SLIST_REMOVE_AFTER
(
ñm
, 
fõld
) do { \

2496 
	`SLIST_NEXT
(
ñm
, 
fõld
) = \

2497 
	`SLIST_NEXT
(SLIST_NEXT(
ñm
, 
fõld
), field); \

2498 } 0)

	)

2500 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

2501 
	`SLIST_FIRST
((
hód
)Ë
	`SLIST_NEXT
(SLIST_FIRST((hód)), 
fõld
); \

2502 } 0)

	)

2504 
	#SLIST_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

2505 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_fú°
 = 
	`SLIST_FIRST
(
hód1
); \

2506 
	`SLIST_FIRST
(
hód1
ËSLIST_FIRST(
hód2
); \

2507 
	`SLIST_FIRST
(
hód2
Ë
sw≠_fú°
; \

2508 } 0)

	)

2513 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

2514 
	s«me
 { \

2515 
ty≥
 *
°qh_fú°
; \

2516 
ty≥
 **
°qh_œ°
; \

2517 }

	)

2519 
	#STAILQ_CLASS_HEAD
(
«me
, 
ty≥
) \

2520 
	s«me
 { \

2521 
˛ass
 
ty≥
 *
°qh_fú°
; \

2522 
˛ass
 
ty≥
 **
°qh_œ°
; \

2523 }

	)

2525 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

2526 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

2528 
	#STAILQ_ENTRY
(
ty≥
) \

2530 
ty≥
 *
°qe_√xt
; \

2531 }

	)

2533 
	#STAILQ_CLASS_ENTRY
(
ty≥
) \

2535 
˛ass
 
ty≥
 *
°qe_√xt
; \

2536 }

	)

2541 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

2542 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

2543 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

2544 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

2545 
	`STAILQ_INIT
((
hód2
)); \

2547 } 0)

	)

2549 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

2551 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

2553 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

2554 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

2555 (
v¨
); \

2556 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

2558 
	#STAILQ_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

2559 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`STAILQ_FIRST
((
hód
))); \

2560 (
v¨
); \

2561 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

2563 
	#STAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2564 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

2565 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

2566 (
v¨
Ë(
tv¨
))

	)

2568 
	#STAILQ_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2569 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`STAILQ_FIRST
((
hód
))); \

2570 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

2571 (
v¨
Ë(
tv¨
))

	)

2573 
	#STAILQ_INIT
(
hód
) do { \

2574 
	`STAILQ_FIRST
((
hód
)Ë
NULL
; \

2575 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

2576 } 0)

	)

2578 
	#STAILQ_INSERT_AFTER
(
hód
, 
tqñm
, 
ñm
, 
fõld
) do { \

2579 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
ËSTAILQ_NEXT((
tqñm
), fõld)Ë=
NULL
)\

2580 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

2581 
	`STAILQ_NEXT
((
tqñm
), 
fõld
Ë(
ñm
); \

2582 } 0)

	)

2584 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

2585 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
	`STAILQ_FIRST
((
hód
))Ë=
NULL
) \

2586 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

2587 
	`STAILQ_FIRST
((
hód
)Ë(
ñm
); \

2588 } 0)

	)

2590 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

2591 
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

2592 *(
hód
)->
°qh_œ°
 = (
ñm
); \

2593 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

2594 } 0)

	)

2596 
	#STAILQ_LAST
(
hód
, 
ty≥
, 
fõld
) \

2597 (
	`STAILQ_EMPTY
((
hód
)Ë? 
NULL
 : \

2598 
	`__c⁄èöîof
((
hód
)->
°qh_œ°
, \

2599 
	`QUEUE_TYPEOF
(
ty≥
), 
fõld
.
°qe_√xt
))

	)

2601 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

2603 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

2604 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
°qe_√xt
); \

2605 i‡(
	`STAILQ_FIRST
((
hód
)Ë=(
ñm
)) { \

2606 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

2609 
	`QUEUE_TYPEOF
(
ty≥
Ë*
cuªlm
 = 
	`STAILQ_FIRST
(
hód
); \

2610 
	`STAILQ_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

2611 
cuªlm
 = 
	`STAILQ_NEXT
(cuªlm, 
fõld
); \

2612 
	`STAILQ_REMOVE_AFTER
(
hód
, 
cuªlm
, 
fõld
); \

2614 
	`TRASHIT
(*
ﬁd√xt
); \

2615 } 0)

	)

2617 
	#STAILQ_REMOVE_AFTER
(
hód
, 
ñm
, 
fõld
) do { \

2618 i‡((
	`STAILQ_NEXT
(
ñm
, 
fõld
) = \

2619 
	`STAILQ_NEXT
(STAILQ_NEXT(
ñm
, 
fõld
), fõld)Ë=
NULL
) \

2620 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

2621 } 0)

	)

2623 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

2624 i‡((
	`STAILQ_FIRST
((
hód
)) = \

2625 
	`STAILQ_NEXT
(
	`STAILQ_FIRST
((
hód
)), 
fõld
)Ë=
NULL
) \

2626 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

2627 } 0)

	)

2629 
	#STAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

2630 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_fú°
 = 
	`STAILQ_FIRST
(
hód1
); \

2631 
	`QUEUE_TYPEOF
(
ty≥
Ë**
sw≠_œ°
 = (
hód1
)->
°qh_œ°
; \

2632 
	`STAILQ_FIRST
(
hód1
ËSTAILQ_FIRST(
hód2
); \

2633 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

2634 
	`STAILQ_FIRST
(
hód2
Ë
sw≠_fú°
; \

2635 (
hód2
)->
°qh_œ°
 = 
sw≠_œ°
; \

2636 i‡(
	`STAILQ_EMPTY
(
hód1
)) \

2637 (
hód1
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head1); \

2638 i‡(
	`STAILQ_EMPTY
(
hód2
)) \

2639 (
hód2
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head2); \

2640 } 0)

	)

2646 
	#LIST_HEAD
(
«me
, 
ty≥
) \

2647 
	s«me
 { \

2648 
ty≥
 *
lh_fú°
; \

2649 }

	)

2651 
	#LIST_CLASS_HEAD
(
«me
, 
ty≥
) \

2652 
	s«me
 { \

2653 
˛ass
 
ty≥
 *
lh_fú°
; \

2654 }

	)

2656 
	#LIST_HEAD_INITIALIZER
(
hód
) \

2657 { 
NULL
 }

	)

2659 
	#LIST_ENTRY
(
ty≥
) \

2661 
ty≥
 *
À_√xt
; \

2662 
ty≥
 **
À_¥ev
; \

2663 }

	)

2665 
	#LIST_CLASS_ENTRY
(
ty≥
) \

2667 
˛ass
 
ty≥
 *
À_√xt
; \

2668 
˛ass
 
ty≥
 **
À_¥ev
; \

2669 }

	)

2675 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

2676 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
) do { \

2677 i‡(
	`LIST_FIRST
((
hód
)Ë!
NULL
 && \

2678 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 != \

2679 &
	`LIST_FIRST
((
hód
))) \

2680 
	`∑nic
("BadÜi° hód %∞fú°->¥ev !hód", (
hód
)); \

2681 } 0)

	)

2683 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
) do { \

2684 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

2685 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 != \

2686 &((
ñm
)->
fõld
.
À_√xt
)) \

2687 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

2688 } 0)

	)

2690 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
) do { \

2691 i‡(*(
ñm
)->
fõld
.
À_¥ev
 != (elm)) \

2692 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

2693 } 0)

	)

2695 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
)

	)

2696 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
)

	)

2697 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
)

	)

2700 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

2702 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

2704 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

2705 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

2706 (
v¨
); \

2707 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

2709 
	#LIST_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

2710 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`LIST_FIRST
((
hód
))); \

2711 (
v¨
); \

2712 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

2714 
	#LIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2715 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

2716 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

2717 (
v¨
Ë(
tv¨
))

	)

2719 
	#LIST_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2720 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`LIST_FIRST
((
hód
))); \

2721 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

2722 (
v¨
Ë(
tv¨
))

	)

2724 
	#LIST_INIT
(
hód
) do { \

2725 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

2726 } 0)

	)

2728 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

2729 
	`QMD_LIST_CHECK_NEXT
(
li°ñm
, 
fõld
); \

2730 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

2731 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

2732 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

2733 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

2734 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

2735 } 0)

	)

2737 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

2738 
	`QMD_LIST_CHECK_PREV
(
li°ñm
, 
fõld
); \

2739 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

2740 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

2741 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

2742 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

2743 } 0)

	)

2745 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

2746 
	`QMD_LIST_CHECK_HEAD
((
hód
), 
fõld
); \

2747 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

2748 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

2749 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

2750 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

2751 } 0)

	)

2753 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

2755 
	#LIST_PREV
(
ñm
, 
hód
, 
ty≥
, 
fõld
) \

2756 ((
ñm
)->
fõld
.
À_¥ev
 =&
	`LIST_FIRST
((
hód
)Ë? 
NULL
 : \

2757 
	`__c⁄èöîof
((
ñm
)->
fõld
.
À_¥ev
, \

2758 
	`QUEUE_TYPEOF
(
ty≥
), 
fõld
.
À_√xt
))

	)

2760 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

2761 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
À_√xt
); \

2762 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
À_¥ev
); \

2763 
	`QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
); \

2764 
	`QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
); \

2765 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

2766 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

2767 (
ñm
)->
fõld
.
À_¥ev
; \

2768 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

2769 
	`TRASHIT
(*
ﬁd√xt
); \

2770 
	`TRASHIT
(*
ﬁd¥ev
); \

2771 } 0)

	)

2773 
	#LIST_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

2774 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_tmp
 = 
	`LIST_FIRST
(
hód1
); \

2775 
	`LIST_FIRST
((
hód1
)ËLIST_FIRST((
hód2
)); \

2776 
	`LIST_FIRST
((
hód2
)Ë
sw≠_tmp
; \

2777 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód1
))Ë!
NULL
) \

2778 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód1
)); \

2779 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód2
))Ë!
NULL
) \

2780 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód2
)); \

2781 } 0)

	)

2786 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

2787 
	s«me
 { \

2788 
ty≥
 *
tqh_fú°
; \

2789 
ty≥
 **
tqh_œ°
; \

2790 
TRACEBUF
 \

2791 }

	)

2793 
	#TAILQ_CLASS_HEAD
(
«me
, 
ty≥
) \

2794 
	s«me
 { \

2795 
˛ass
 
ty≥
 *
tqh_fú°
; \

2796 
˛ass
 
ty≥
 **
tqh_œ°
; \

2797 
TRACEBUF
 \

2798 }

	)

2800 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

2801 { 
NULL
, &(
hód
).
tqh_fú°
, 
TRACEBUF_INITIALIZER
 }

	)

2803 
	#TAILQ_ENTRY
(
ty≥
) \

2805 
ty≥
 *
tqe_√xt
; \

2806 
ty≥
 **
tqe_¥ev
; \

2807 
TRACEBUF
 \

2808 }

	)

2810 
	#TAILQ_CLASS_ENTRY
(
ty≥
) \

2812 
˛ass
 
ty≥
 *
tqe_√xt
; \

2813 
˛ass
 
ty≥
 **
tqe_¥ev
; \

2814 
TRACEBUF
 \

2815 }

	)

2820 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

2821 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
) do { \

2822 i‡(!
	`TAILQ_EMPTY
(
hód
) && \

2823 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 != \

2824 &
	`TAILQ_FIRST
((
hód
))) \

2825 
	`∑nic
("BadÅaûq hód %∞fú°->¥ev !hód", (
hód
)); \

2826 } 0)

	)

2828 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
) do { \

2829 i‡(*(
hód
)->
tqh_œ°
 !
NULL
) \

2830 
	`∑nic
("BadÅaûq NEXT(%p->tqh_œ°Ë!NULL", (
hód
)); \

2831 } 0)

	)

2833 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
) do { \

2834 i‡(
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

2835 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 != \

2836 &((
ñm
)->
fõld
.
tqe_√xt
)) \

2837 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

2838 } 0)

	)

2840 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
) do { \

2841 i‡(*(
ñm
)->
fõld
.
tqe_¥ev
 != (elm)) \

2842 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

2843 } 0)

	)

2845 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
)

	)

2846 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
hód«me
)

	)

2847 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
)

	)

2848 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
)

	)

2851 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

2852 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

2853 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

2854 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

2855 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

2856 
	`TAILQ_INIT
((
hód2
)); \

2857 
	`QMD_TRACE_HEAD
(
hód1
); \

2858 
	`QMD_TRACE_HEAD
(
hód2
); \

2860 } 0)

	)

2862 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

2864 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

2866 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

2867 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

2868 (
v¨
); \

2869 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

2871 
	#TAILQ_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

2872 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_FIRST
((
hód
))); \

2873 (
v¨
); \

2874 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

2876 
	#TAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2877 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

2878 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

2879 (
v¨
Ë(
tv¨
))

	)

2881 
	#TAILQ_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2882 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_FIRST
((
hód
))); \

2883 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

2884 (
v¨
Ë(
tv¨
))

	)

2886 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

2887 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

2888 (
v¨
); \

2889 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

2891 
	#TAILQ_FOREACH_REVERSE_FROM
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

2892 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_LAST
((
hód
), 
hód«me
)); \

2893 (
v¨
); \

2894 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

2896 
	#TAILQ_FOREACH_REVERSE_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

2897 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

2898 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

2899 (
v¨
Ë(
tv¨
))

	)

2901 
	#TAILQ_FOREACH_REVERSE_FROM_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

2902 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_LAST
((
hód
), 
hód«me
)); \

2903 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

2904 (
v¨
Ë(
tv¨
))

	)

2906 
	#TAILQ_INIT
(
hód
) do { \

2907 
	`TAILQ_FIRST
((
hód
)Ë
NULL
; \

2908 (
hód
)->
tqh_œ°
 = &
	`TAILQ_FIRST
((head)); \

2909 
	`QMD_TRACE_HEAD
(
hód
); \

2910 } 0)

	)

2912 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

2913 
	`QMD_TAILQ_CHECK_NEXT
(
li°ñm
, 
fõld
); \

2914 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
ËTAILQ_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

2915 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

2916 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

2918 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

2919 
	`QMD_TRACE_HEAD
(
hód
); \

2921 
	`TAILQ_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

2922 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
li°ñm
), field); \

2923 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

2924 
	`QMD_TRACE_ELEM
(&(
li°ñm
)->
fõld
); \

2925 } 0)

	)

2927 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

2928 
	`QMD_TAILQ_CHECK_PREV
(
li°ñm
, 
fõld
); \

2929 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

2930 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

2931 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

2932 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
ñm
), field); \

2933 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

2934 
	`QMD_TRACE_ELEM
(&(
li°ñm
)->
fõld
); \

2935 } 0)

	)

2937 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

2938 
	`QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
); \

2939 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
	`TAILQ_FIRST
((
hód
))Ë!
NULL
) \

2940 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 = \

2941 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

2943 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

2944 
	`TAILQ_FIRST
((
hód
)Ë(
ñm
); \

2945 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_FIRST
((
hód
)); \

2946 
	`QMD_TRACE_HEAD
(
hód
); \

2947 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

2948 } 0)

	)

2950 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

2951 
	`QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
); \

2952 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

2953 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

2954 *(
hód
)->
tqh_œ°
 = (
ñm
); \

2955 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

2956 
	`QMD_TRACE_HEAD
(
hód
); \

2957 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

2958 } 0)

	)

2960 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

2961 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

2963 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

2965 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

2966 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

2968 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

2969 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
tqe_√xt
); \

2970 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
tqe_¥ev
); \

2971 
	`QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
); \

2972 
	`QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
); \

2973 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
)Ë!
NULL
) \

2974 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

2975 (
ñm
)->
fõld
.
tqe_¥ev
; \

2977 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

2978 
	`QMD_TRACE_HEAD
(
hód
); \

2980 *(
ñm
)->
fõld
.
tqe_¥ev
 = 
	`TAILQ_NEXT
((elm), field); \

2981 
	`TRASHIT
(*
ﬁd√xt
); \

2982 
	`TRASHIT
(*
ﬁd¥ev
); \

2983 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

2984 } 0)

	)

2986 
	#TAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

2987 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_fú°
 = (
hód1
)->
tqh_fú°
; \

2988 
	`QUEUE_TYPEOF
(
ty≥
Ë**
sw≠_œ°
 = (
hód1
)->
tqh_œ°
; \

2989 (
hód1
)->
tqh_fú°
 = (
hód2
)->tqh_first; \

2990 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

2991 (
hód2
)->
tqh_fú°
 = 
sw≠_fú°
; \

2992 (
hód2
)->
tqh_œ°
 = 
sw≠_œ°
; \

2993 i‡((
sw≠_fú°
 = (
hód1
)->
tqh_fú°
Ë!
NULL
) \

2994 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód1
)->
tqh_fú°
; \

2996 (
hód1
)->
tqh_œ°
 = &(hód1)->
tqh_fú°
; \

2997 i‡((
sw≠_fú°
 = (
hód2
)->
tqh_fú°
Ë!
NULL
) \

2998 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód2
)->
tqh_fú°
; \

3000 (
hód2
)->
tqh_œ°
 = &(hód2)->
tqh_fú°
; \

3001 } 0)

	)

3004 #ifde‡
MG_MODULE_LINES


3012 #i‚de‡
CS_MONGOOSE_SRC_FEATURES_H_


3013 
	#CS_MONGOOSE_SRC_FEATURES_H_


	)

3015 #i‚de‡
MG_DISABLE_HTTP_DIGEST_AUTH


3016 
	#MG_DISABLE_HTTP_DIGEST_AUTH
 0

	)

3019 #i‚de‡
MG_DISABLE_HTTP_KEEP_ALIVE


3020 
	#MG_DISABLE_HTTP_KEEP_ALIVE
 0

	)

3023 #i‚de‡
MG_DISABLE_PFS


3024 
	#MG_DISABLE_PFS
 0

	)

3027 #i‚de‡
MG_DISABLE_WS_RANDOM_MASK


3028 
	#MG_DISABLE_WS_RANDOM_MASK
 0

	)

3031 #i‚de‡
MG_ENABLE_ASYNC_RESOLVER


3032 
	#MG_ENABLE_ASYNC_RESOLVER
 1

	)

3035 #i‚de‡
MG_ENABLE_BROADCAST


3036 
	#MG_ENABLE_BROADCAST
 0

	)

3039 #i‚de‡
MG_ENABLE_COAP


3040 
	#MG_ENABLE_COAP
 0

	)

3043 #i‚de‡
MG_ENABLE_DEBUG


3044 
	#MG_ENABLE_DEBUG
 0

	)

3047 #i‚de‡
MG_ENABLE_DIRECTORY_LISTING


3048 
	#MG_ENABLE_DIRECTORY_LISTING
 0

	)

3051 #i‚de‡
MG_ENABLE_DNS


3052 
	#MG_ENABLE_DNS
 1

	)

3055 #i‚de‡
MG_ENABLE_DNS_SERVER


3056 
	#MG_ENABLE_DNS_SERVER
 0

	)

3059 #i‚de‡
MG_ENABLE_FAKE_DAVLOCK


3060 
	#MG_ENABLE_FAKE_DAVLOCK
 0

	)

3063 #i‚de‡
MG_ENABLE_FILESYSTEM


3064 
	#MG_ENABLE_FILESYSTEM
 0

	)

3067 #i‚de‡
MG_ENABLE_GETADDRINFO


3068 
	#MG_ENABLE_GETADDRINFO
 0

	)

3071 #i‚de‡
MG_ENABLE_HEXDUMP


3072 
	#MG_ENABLE_HEXDUMP
 
CS_ENABLE_STDIO


	)

3075 #i‚de‡
MG_ENABLE_HTTP


3076 
	#MG_ENABLE_HTTP
 1

	)

3079 #i‚de‡
MG_ENABLE_HTTP_CGI


3080 
	#MG_ENABLE_HTTP_CGI
 0

	)

3083 #i‚de‡
MG_ENABLE_HTTP_SSI


3084 
	#MG_ENABLE_HTTP_SSI
 
MG_ENABLE_FILESYSTEM


	)

3087 #i‚de‡
MG_ENABLE_HTTP_SSI_EXEC


3088 
	#MG_ENABLE_HTTP_SSI_EXEC
 0

	)

3091 #i‚de‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


3092 
	#MG_ENABLE_HTTP_STREAMING_MULTIPART
 0

	)

3095 #i‚de‡
MG_ENABLE_HTTP_WEBDAV


3096 
	#MG_ENABLE_HTTP_WEBDAV
 0

	)

3099 #i‚de‡
MG_ENABLE_HTTP_WEBSOCKET


3100 
	#MG_ENABLE_HTTP_WEBSOCKET
 
MG_ENABLE_HTTP


	)

3103 #i‚de‡
MG_ENABLE_IPV6


3104 
	#MG_ENABLE_IPV6
 0

	)

3107 #i‚de‡
MG_ENABLE_MQTT


3108 
	#MG_ENABLE_MQTT
 1

	)

3111 #i‚de‡
MG_ENABLE_SOCKS


3112 
	#MG_ENABLE_SOCKS
 0

	)

3115 #i‚de‡
MG_ENABLE_MQTT_BROKER


3116 
	#MG_ENABLE_MQTT_BROKER
 0

	)

3119 #i‚de‡
MG_ENABLE_SSL


3120 
	#MG_ENABLE_SSL
 0

	)

3123 #i‚de‡
MG_ENABLE_SYNC_RESOLVER


3124 
	#MG_ENABLE_SYNC_RESOLVER
 0

	)

3127 #i‚de‡
MG_ENABLE_STDIO


3128 
	#MG_ENABLE_STDIO
 
CS_ENABLE_STDIO


	)

3131 #i‚de‡
MG_NET_IF


3132 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

3135 #i‚de‡
MG_SSL_IF


3136 
	#MG_SSL_IF
 
MG_SSL_IF_OPENSSL


	)

3139 #i‚de‡
MG_ENABLE_THREADS


3140 #ifde‡
_WIN32


3141 
	#MG_ENABLE_THREADS
 1

	)

3143 
	#MG_ENABLE_THREADS
 0

	)

3147 #i‡
MG_ENABLE_DEBUG
 && !
deföed
(
CS_ENABLE_DEBUG
)

3148 
	#CS_ENABLE_DEBUG
 1

	)

3152 #i‡
MG_ENABLE_MQTT_BROKER
 && !
MG_ENABLE_MQTT


3153 #unde‡
MG_ENABLE_MQTT


3154 
	#MG_ENABLE_MQTT
 1

	)

3157 #i‚de‡
MG_ENABLE_HTTP_URL_REWRITES


3158 
	#MG_ENABLE_HTTP_URL_REWRITES
 \

3159 (
CS_PLATFORM
 =
CS_P_WINDOWS
 || CS_PLATFORM =
CS_P_UNIX
)

	)

3162 #i‚de‡
MG_ENABLE_SNTP


3163 
	#MG_ENABLE_SNTP
 0

	)

3166 #i‚de‡
MG_ENABLE_EXTRA_ERRORS_DESC


3167 
	#MG_ENABLE_EXTRA_ERRORS_DESC
 0

	)

3170 #i‚de‡
MG_ENABLE_CALLBACK_USERDATA


3171 
	#MG_ENABLE_CALLBACK_USERDATA
 0

	)

3174 #i‡
MG_ENABLE_CALLBACK_USERDATA


3175 
	#MG_UD_ARG
(
ud
Ë, 
	)
ud

3176 
	#MG_CB
(
cb
, 
ud
Ëcb, 
	)
ud

3178 
	#MG_UD_ARG
(
ud
)

	)

3179 
	#MG_CB
(
cb
, 
ud
Ë
	)
cb

3183 #ifde‡
MG_MODULE_LINES


3191 #i‚de‡
CS_MONGOOSE_SRC_NET_IF_H_


3192 
	#CS_MONGOOSE_SRC_NET_IF_H_


	)

3206 #ifde‡
__˝lu•lus


3210 
	#MG_MAIN_IFACE
 0

	)

3212 
mg_mgr
;

3213 
mg_c⁄√˘i⁄
;

3214 
sockë_addªss
;

3216 
mg_iÁ˚_vèbÀ
;

3218 
	smg_iÁ˚
 {

3219 
mg_mgr
 *
mgr
;

3220 *
d©a
;

3221 c⁄° 
mg_iÁ˚_vèbÀ
 *
vèbÀ
;

3224 
	smg_iÁ˚_vèbÀ
 {

3225 (*
öô
)(
mg_iÁ˚
 *
iÁ˚
);

3226 (*
‰ì
)(
mg_iÁ˚
 *
iÁ˚
);

3227 (*
add_c⁄n
)(
mg_c⁄√˘i⁄
 *
nc
);

3228 (*
ªmove_c⁄n
)(
mg_c⁄√˘i⁄
 *
nc
);

3229 
time_t
 (*
pﬁl
)(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
);

3232 (*
li°í_t˝
)(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
);

3234 (*
li°í_udp
)(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
);

3237 (*
c⁄√˘_t˝
)(
mg_c⁄√˘i⁄
 *
nc
, c⁄° 
sockë_addªss
 *
ß
);

3239 (*
c⁄√˘_udp
)(
mg_c⁄√˘i⁄
 *
nc
);

3242 (*
t˝_£nd
)(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
);

3243 (*
udp_£nd
)(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
);

3245 (*
ªcved
)(
mg_c⁄√˘i⁄
 *
nc
, 
size_t
 
Àn
);

3248 (*
¸óã_c⁄n
)(
mg_c⁄√˘i⁄
 *
nc
);

3250 (*
de°roy_c⁄n
)(
mg_c⁄√˘i⁄
 *
nc
);

3253 (*
sock_£t
)(
mg_c⁄√˘i⁄
 *
nc
, 
sock_t
 
sock
);

3256 (*
gë_c⁄n_addr
)(
mg_c⁄√˘i⁄
 *
nc
, 
ªmŸe
,

3257 
sockë_addªss
 *
ß
);

3260 c⁄° 
mg_iÁ˚_vèbÀ
 *
mg_iÁ˚s
[];

3261 
mg_num_iÁ˚s
;

3264 
mg_iÁ˚
 *
mg_if_¸óã_iÁ˚
(c⁄° 
mg_iÁ˚_vèbÀ
 *
vèbÀ
,

3265 
mg_mgr
 *
mgr
);

3271 
mg_iÁ˚
 *
mg_föd_iÁ˚
(
mg_mgr
 *
mgr
,

3272 c⁄° 
mg_iÁ˚_vèbÀ
 *
vèbÀ
,

3273 
mg_iÁ˚
 *
‰om
);

3280 
mg_c⁄√˘i⁄
 *
mg_if_ac˚±_√w_c⁄n
(mg_c⁄√˘i⁄ *
lc
);

3281 
mg_if_ac˚±_t˝_cb
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
,

3282 
size_t
 
ß_Àn
);

3285 
mg_if_c⁄√˘_cb
(
mg_c⁄√˘i⁄
 *
nc
, 
îr
);

3287 
mg_if_£¡_cb
(
mg_c⁄√˘i⁄
 *
nc
, 
num_£¡
);

3294 
mg_if_ªcv_t˝_cb
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
Àn
, 
own
);

3300 
mg_if_ªcv_udp_cb
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
Àn
,

3301 
sockë_addªss
 *
ß
, 
size_t
 
ß_Àn
);

3306 
mg_if_pﬁl
(
mg_c⁄√˘i⁄
 *
nc
, 
time_t
 
now
);

3309 
mg_if_timî
(
mg_c⁄√˘i⁄
 *
c
, 
now
);

3311 #ifde‡
__˝lu•lus


3316 #ifde‡
MG_MODULE_LINES


3324 #i‚de‡
CS_MONGOOSE_SRC_SSL_IF_H_


3325 
	#CS_MONGOOSE_SRC_SSL_IF_H_


	)

3327 #i‡
MG_ENABLE_SSL


3329 #ifde‡
__˝lu•lus


3333 
mg_s¶_if_˘x
;

3334 
mg_c⁄√˘i⁄
;

3336 
mg_s¶_if_öô
();

3338 
	emg_s¶_if_ªsu…
 {

3339 
MG_SSL_OK
 = 0,

3340 
MG_SSL_WANT_READ
 = -1,

3341 
MG_SSL_WANT_WRITE
 = -2,

3342 
MG_SSL_ERROR
 = -3,

3345 
	smg_s¶_if_c⁄n_∑øms
 {

3346 c⁄° *
˚π
;

3347 c⁄° *
key
;

3348 c⁄° *
ˇ_˚π
;

3349 c⁄° *
£rvî_«me
;

3350 c⁄° *
cùhî_suôes
;

3351 c⁄° *
psk_idítôy
;

3352 c⁄° *
psk_key
;

3355 
mg_s¶_if_ªsu…
 
mg_s¶_if_c⁄n_öô
(

3356 
mg_c⁄√˘i⁄
 *
nc
, c⁄° 
mg_s¶_if_c⁄n_∑øms
 *
∑øms
,

3357 c⁄° **
îr_msg
);

3358 
mg_s¶_if_ªsu…
 
mg_s¶_if_c⁄n_ac˚±
(
mg_c⁄√˘i⁄
 *
nc
,

3359 
mg_c⁄√˘i⁄
 *
lc
);

3360 
mg_s¶_if_c⁄n_˛o£_nŸify
(
mg_c⁄√˘i⁄
 *
nc
);

3361 
mg_s¶_if_c⁄n_‰ì
(
mg_c⁄√˘i⁄
 *
nc
);

3363 
mg_s¶_if_ªsu…
 
mg_s¶_if_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
);

3364 
mg_s¶_if_ªad
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
size_t
 
buf_size
);

3365 
mg_s¶_if_wrôe
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
d©a
, 
size_t
 
Àn
);

3367 #ifde‡
__˝lu•lus


3374 #ifde‡
MG_MODULE_LINES


3404 #i‚de‡
CS_MONGOOSE_SRC_NET_H_


3405 
	#CS_MONGOOSE_SRC_NET_H_


	)

3411 #i‚de‡
MG_VPRINTF_BUFFER_SIZE


3412 
	#MG_VPRINTF_BUFFER_SIZE
 100

	)

3415 #ifde‡
MG_USE_READ_WRITE


3416 
	#MG_RECV_FUNC
(
s
, 
b
, 
l
, 
f
Ë
	`ªad
(s, b,Ü)

	)

3417 
	#MG_SEND_FUNC
(
s
, 
b
, 
l
, 
f
Ë
	`wrôe
(s, b,Ü)

	)

3419 
	#MG_RECV_FUNC
(
s
, 
b
, 
l
, 
f
Ë
	`ªcv
(s, b,Ü, f)

	)

3420 
	#MG_SEND_FUNC
(
s
, 
b
, 
l
, 
f
Ë
	`£nd
(s, b,Ü, f)

	)

3423 #ifde‡
__˝lu•lus


3427 
	usockë_addªss
 {

3428 
sockaddr
 
ß
;

3429 
sockaddr_ö
 
sö
;

3430 #i‡
MG_ENABLE_IPV6


3431 
sockaddr_ö6
 
sö6
;

3433 
sockaddr
 
sö6
;

3437 
mg_c⁄√˘i⁄
;

3443 (*
mg_evít_h™dÀr_t
)(
	tmg_c⁄√˘i⁄
 *
	tnc
, 
	tev
,

3444 *
	tev_d©a
 
	tMG_UD_ARG
(*
	tu£r_d©a
));

3447 
	#MG_EV_POLL
 0

	)

3448 
	#MG_EV_ACCEPT
 1

	)

3449 
	#MG_EV_CONNECT
 2

	)

3450 
	#MG_EV_RECV
 3

	)

3451 
	#MG_EV_SEND
 4

	)

3452 
	#MG_EV_CLOSE
 5

	)

3453 
	#MG_EV_TIMER
 6

	)

3458 
	smg_mgr
 {

3459 
mg_c⁄√˘i⁄
 *
a˘ive_c⁄√˘i⁄s
;

3460 #i‡
MG_ENABLE_HEXDUMP


3461 c⁄° *
hexdump_fûe
;

3463 #i‡
MG_ENABLE_BROADCAST


3464 
sock_t
 
˘l
[2];

3466 *
u£r_d©a
;

3467 
num_iÁ˚s
;

3468 
mg_iÁ˚
 **
iÁ˚s
;

3469 c⁄° *
«me£rvî
;

3475 
	smg_c⁄√˘i⁄
 {

3476 
mg_c⁄√˘i⁄
 *
√xt
, *
¥ev
;

3477 
mg_c⁄√˘i⁄
 *
li°íî
;

3478 
mg_mgr
 *
mgr
;

3480 
sock_t
 
sock
;

3481 
îr
;

3482 
sockë_addªss
 
ß
;

3483 
size_t
 
ªcv_mbuf_limô
;

3484 
mbuf
 
ªcv_mbuf
;

3485 
mbuf
 
£nd_mbuf
;

3486 
time_t
 
œ°_io_time
;

3487 
ev_timî_time
;

3488 #i‡
MG_ENABLE_SSL


3489 *
s¶_if_d©a
;

3491 
mg_evít_h™dÀr_t
 
¥Ÿo_h™dÀr
;

3492 *
¥Ÿo_d©a
;

3493 (*
¥Ÿo_d©a_de°ru˘‹
)(*
¥Ÿo_d©a
);

3494 
mg_evít_h™dÀr_t
 
h™dÀr
;

3495 *
u£r_d©a
;

3497 *
v
;

3502 
mg_evít_h™dÀr_t
 
f
;

3503 } 
¥iv_1
;

3504 *
¥iv_2
;

3505 *
mgr_d©a
;

3506 
mg_iÁ˚
 *
iÁ˚
;

3507 
Êags
;

3509 
	#MG_F_LISTENING
 (1 << 0Ë

	)

3510 
	#MG_F_UDP
 (1 << 1Ë

	)

3511 
	#MG_F_RESOLVING
 (1 << 2Ë

	)

3512 
	#MG_F_CONNECTING
 (1 << 3Ë

	)

3513 
	#MG_F_SSL
 (1 << 4Ë

	)

3514 
	#MG_F_SSL_HANDSHAKE_DONE
 (1 << 5Ë

	)

3515 
	#MG_F_WANT_READ
 (1 << 6Ë

	)

3516 
	#MG_F_WANT_WRITE
 (1 << 7Ë

	)

3517 
	#MG_F_IS_WEBSOCKET
 (1 << 8Ë

	)

3520 
	#MG_F_SEND_AND_CLOSE
 (1 << 10Ë

	)

3521 
	#MG_F_CLOSE_IMMEDIATELY
 (1 << 11Ë

	)

3522 
	#MG_F_WEBSOCKET_NO_DEFRAG
 (1 << 12Ë

	)

3523 
	#MG_F_DELETE_CHUNK
 (1 << 13Ë

	)

3524 
	#MG_F_ENABLE_BROADCAST
 (1 << 14Ë

	)

3526 
	#MG_F_USER_1
 (1 << 20Ë

	)

3527 
	#MG_F_USER_2
 (1 << 21)

	)

3528 
	#MG_F_USER_3
 (1 << 22)

	)

3529 
	#MG_F_USER_4
 (1 << 23)

	)

3530 
	#MG_F_USER_5
 (1 << 24)

	)

3531 
	#MG_F_USER_6
 (1 << 25)

	)

3542 
mg_mgr_öô
(
mg_mgr
 *
mgr
, *
u£r_d©a
);

3559 
	smg_mgr_öô_›ts
 {

3560 c⁄° 
mg_iÁ˚_vèbÀ
 *
maö_iÁ˚
;

3561 
num_iÁ˚s
;

3562 c⁄° 
mg_iÁ˚_vèbÀ
 **
iÁ˚s
;

3563 c⁄° *
«me£rvî
;

3572 
mg_mgr_öô_›t
(
mg_mgr
 *
mgr
, *
u£r_d©a
,

3573 
mg_mgr_öô_›ts
 
›ts
);

3580 
mg_mgr_‰ì
(
mg_mgr
 *);

3590 
time_t
 
mg_mgr_pﬁl
(
mg_mgr
 *, 
mûli
);

3592 #i‡
MG_ENABLE_BROADCAST


3605 
mg_brﬂdˇ°
(
mg_mgr
 *
mgr
, 
mg_evít_h™dÀr_t
 
cb
, *
d©a
,

3606 
size_t
 
Àn
);

3622 
mg_c⁄√˘i⁄
 *
mg_√xt
(
mg_mgr
 *
mgr
, mg_c⁄√˘i⁄ *
c
);

3630 
	smg_add_sock_›ts
 {

3631 *
u£r_d©a
;

3632 
Êags
;

3633 c⁄° **
îr‹_°rög
;

3634 
mg_iÁ˚
 *
iÁ˚
;

3643 
mg_c⁄√˘i⁄
 *
mg_add_sock
(
mg_mgr
 *
mgr
, 
sock_t
 
sock
,

3644 
MG_CB
(
mg_evít_h™dÀr_t
 
h™dÀr
,

3645 *
u£r_d©a
));

3653 
mg_c⁄√˘i⁄
 *
mg_add_sock_›t
(
mg_mgr
 *
mgr
, 
sock_t
 
sock
,

3654 
MG_CB
(
mg_evít_h™dÀr_t
 
h™dÀr
,

3655 *
u£r_d©a
),

3656 
mg_add_sock_›ts
 
›ts
);

3664 
	smg_böd_›ts
 {

3665 *
u£r_d©a
;

3666 
Êags
;

3667 c⁄° **
îr‹_°rög
;

3668 
mg_iÁ˚
 *
iÁ˚
;

3669 #i‡
MG_ENABLE_SSL


3676 c⁄° *
s¶_˚π
;

3679 c⁄° *
s¶_key
;

3681 c⁄° *
s¶_ˇ_˚π
;

3693 c⁄° *
s¶_cùhî_suôes
;

3702 
mg_c⁄√˘i⁄
 *
mg_böd
(
mg_mgr
 *
mgr
, c⁄° *
addªss
,

3703 
MG_CB
(
mg_evít_h™dÀr_t
 
h™dÀr
,

3704 *
u£r_d©a
));

3723 
mg_c⁄√˘i⁄
 *
mg_böd_›t
(
mg_mgr
 *
mgr
, c⁄° *
addªss
,

3724 
MG_CB
(
mg_evít_h™dÀr_t
 
h™dÀr
,

3725 *
u£r_d©a
),

3726 
mg_böd_›ts
 
›ts
);

3729 
	smg_c⁄√˘_›ts
 {

3730 *
u£r_d©a
;

3731 
Êags
;

3732 c⁄° **
îr‹_°rög
;

3733 
mg_iÁ˚
 *
iÁ˚
;

3734 c⁄° *
«me£rvî
;

3735 #i‡
MG_ENABLE_SSL


3740 c⁄° *
s¶_˚π
;

3745 c⁄° *
s¶_key
;

3750 c⁄° *
s¶_ˇ_˚π
;

3762 c⁄° *
s¶_cùhî_suôes
;

3770 c⁄° *
s¶_£rvî_«me
;

3778 c⁄° *
s¶_psk_idítôy
;

3779 c⁄° *
s¶_psk_key
;

3788 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘
(
mg_mgr
 *
mgr
, c⁄° *
addªss
,

3789 
MG_CB
(
mg_evít_h™dÀr_t
 
h™dÀr
,

3790 *
u£r_d©a
));

3840 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_›t
(
mg_mgr
 *
mgr
, c⁄° *
addªss
,

3841 
MG_CB
(
mg_evít_h™dÀr_t
 
h™dÀr
,

3842 *
u£r_d©a
),

3843 
mg_c⁄√˘_›ts
 
›ts
);

3845 #i‡
MG_ENABLE_SSL
 && 
MG_NET_IF
 !
MG_NET_IF_SIMPLELINK


3860 c⁄° *
mg_£t_s¶
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˚π
,

3861 c⁄° *
ˇ_˚π
);

3871 
mg_£nd
(
mg_c⁄√˘i⁄
 *, c⁄° *
buf
, 
Àn
);

3874 #i‡
deföed
(
__GNUC__
)

3875 
__©åibuã__
((
f‹m©
(
¥ötf
, 2, 3)))

3884 
mg_¥ötf
(
mg_c⁄√˘i⁄
 *, c⁄° *
fmt
, ...);

3887 
mg_v¥ötf
(
mg_c⁄√˘i⁄
 *, c⁄° *
fmt
, 
va_li°
 
≠
);

3894 
mg_sockë∑ú
(
sock_t
[2], 
sock_ty≥
);

3896 #i‡
MG_ENABLE_SYNC_RESOLVER


3907 
mg_ªsﬁve
(c⁄° *
domaö_«me
, *
ù_addr_buf
, 
size_t
 
buf_Àn
);

3930 
mg_check_ù_a˛
(c⁄° *
a˛
, 
uöt32_t
 
ªmŸe_ù
);

3956 
mg_£t_timî
(
mg_c⁄√˘i⁄
 *
c
, 
time°amp
);

3961 
mg_time
();

3963 #ifde‡
__˝lu•lus


3968 #ifde‡
MG_MODULE_LINES


3980 #i‚de‡
CS_MONGOOSE_SRC_URI_H_


3981 
	#CS_MONGOOSE_SRC_URI_H_


	)

3985 #ifde‡
__˝lu•lus


4012 
mg_∑r£_uri
(c⁄° 
mg_°r
 
uri
, mg_°∏*
scheme
,

4013 
mg_°r
 *
u£r_öfo
, mg_°∏*
ho°
,

4014 *
p‹t
, 
mg_°r
 *
∑th
, mg_°∏*
quîy
,

4015 
mg_°r
 *
‰agmít
);

4026 
mg_as£mbÀ_uri
(c⁄° 
mg_°r
 *
scheme
, c⁄° mg_°∏*
u£r_öfo
,

4027 c⁄° 
mg_°r
 *
ho°
, 
p‹t
,

4028 c⁄° 
mg_°r
 *
∑th
, c⁄° mg_°∏*
quîy
,

4029 c⁄° 
mg_°r
 *
‰agmít
, 
n‹mÆize_∑th
,

4030 
mg_°r
 *
uri
);

4032 
mg_n‹mÆize_uri_∑th
(c⁄° 
mg_°r
 *
ö
, mg_°∏*
out
);

4034 #ifde‡
__˝lu•lus


4038 #ifde‡
MG_MODULE_LINES


4050 #i‚de‡
CS_MONGOOSE_SRC_UTIL_H_


4051 
	#CS_MONGOOSE_SRC_UTIL_H_


	)

4053 
	~<°dio.h
>

4058 #ifde‡
__˝lu•lus


4062 #i‚de‡
MG_MAX_PATH


4063 #ifde‡
PATH_MAX


4064 
	#MG_MAX_PATH
 
PATH_MAX


	)

4066 
	#MG_MAX_PATH
 256

	)

4079 c⁄° *
mg_skù
(c⁄° *
s
, c⁄° *
íd_°rög
,

4080 c⁄° *
dñimôîs
, 
mg_°r
 *
v
);

4092 
mg_ba£64_decode
(c⁄° *
s
, 
Àn
, *
d°
);

4099 
mg_ba£64_ícode
(c⁄° *
§c
, 
§c_Àn
, *
d°
);

4101 #i‡
MG_ENABLE_FILESYSTEM


4109 
mg_°©
(c⁄° *
∑th
, 
cs_°©_t
 *
°
);

4118 
FILE
 *
mg_f›í
(c⁄° *
∑th
, c⁄° *
mode
);

4127 
mg_›í
(c⁄° *
∑th
, 
Êag
, 
mode
);

4134 
size_t
 
mg_‰ód
(*
±r
, size_à
size
, size_à
cou¡
, 
FILE
 *
f
);

4141 
size_t
 
mg_fwrôe
(c⁄° *
±r
, size_à
size
, size_à
cou¡
, 
FILE
 *
f
);

4145 #i‡
MG_ENABLE_THREADS


4152 *
mg_°¨t_thªad
(*(*
thªad_func
)(*), *
thªad_func_∑øm
);

4155 
mg_£t_˛o£_⁄_exec
(
sock_t
);

4157 
	#MG_SOCK_STRINGIFY_IP
 1

	)

4158 
	#MG_SOCK_STRINGIFY_PORT
 2

	)

4159 
	#MG_SOCK_STRINGIFY_REMOTE
 4

	)

4174 
mg_c⁄n_addr_to_°r
(
mg_c⁄√˘i⁄
 *
c
, *
buf
, 
size_t
 
Àn
,

4175 
Êags
);

4176 #i‡
MG_NET_IF
 =
MG_NET_IF_SOCKET


4178 
mg_sock_to_°r
(
sock_t
 
sock
, *
buf
, 
size_t
 
Àn
, 
Êags
);

4186 
mg_sock_addr_to_°r
(c⁄° 
sockë_addªss
 *
ß
, *
buf
, 
size_t
 
Àn
,

4187 
Êags
);

4189 #i‡
MG_ENABLE_HEXDUMP


4198 
mg_hexdump
(c⁄° *
buf
, 
Àn
, *
d°
, 
d°_Àn
);

4201 
mg_hexdumpf
(
FILE
 *
Â
, c⁄° *
buf
, 
Àn
);

4210 
mg_hexdump_c⁄√˘i⁄
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

4211 c⁄° *
buf
, 
num_byãs
, 
ev
);

4217 
mg_is_big_ídün
();

4222 
mg_mbuf_≠≥nd_ba£64_putc
(
ch
, *
u£r_d©a
);

4227 
mg_mbuf_≠≥nd_ba£64
(
mbuf
 *mbuf, c⁄° *
d©a
, 
size_t
 
Àn
);

4234 
mg_basic_auth_hódî
(c⁄° 
mg_°r
 
u£r
, c⁄° mg_°∏
∑ss
,

4235 
mbuf
 *
buf
);

4243 
mg_°r
 
mg_uæ_ícode
(c⁄° mg_°∏
§c
);

4245 #ifde‡
__˝lu•lus


4249 #ifde‡
MG_MODULE_LINES


4261 #i‚de‡
CS_MONGOOSE_SRC_HTTP_H_


4262 
	#CS_MONGOOSE_SRC_HTTP_H_


	)

4264 #i‡
MG_ENABLE_HTTP


4269 #ifde‡
__˝lu•lus


4273 #i‚de‡
MG_MAX_HTTP_HEADERS


4274 
	#MG_MAX_HTTP_HEADERS
 20

	)

4277 #i‚de‡
MG_MAX_HTTP_REQUEST_SIZE


4278 
	#MG_MAX_HTTP_REQUEST_SIZE
 1024

	)

4281 #i‚de‡
MG_MAX_HTTP_SEND_MBUF


4282 
	#MG_MAX_HTTP_SEND_MBUF
 1024

	)

4285 #i‚de‡
MG_CGI_ENVIRONMENT_SIZE


4286 
	#MG_CGI_ENVIRONMENT_SIZE
 8192

	)

4290 
	shâp_mesßge
 {

4291 
mg_°r
 
mesßge
;

4292 
mg_°r
 
body
;

4295 
mg_°r
 
mëhod
;

4296 
mg_°r
 
uri
;

4297 
mg_°r
 
¥Ÿo
;

4300 
ª•_code
;

4301 
mg_°r
 
ª•_°©us_msg
;

4311 
mg_°r
 
quîy_°rög
;

4314 
mg_°r
 
hódî_«mes
[
MG_MAX_HTTP_HEADERS
];

4315 
mg_°r
 
hódî_vÆues
[
MG_MAX_HTTP_HEADERS
];

4318 #i‡
MG_ENABLE_HTTP_WEBSOCKET


4320 
	swebsockë_mesßge
 {

4321 *
d©a
;

4322 
size_t
 
size
;

4323 
Êags
;

4328 
	smg_hâp_mu…ù¨t_∑π
 {

4329 c⁄° *
fûe_«me
;

4330 c⁄° *
v¨_«me
;

4331 
mg_°r
 
d©a
;

4332 
°©us
;

4333 *
u£r_d©a
;

4337 
	smg_ssi_ˇŒ_˘x
 {

4338 
hâp_mesßge
 *
ªq
;

4339 
mg_°r
 
fûe
;

4340 
mg_°r
 
¨g
;

4344 
	#MG_EV_HTTP_REQUEST
 100

	)

4345 
	#MG_EV_HTTP_REPLY
 101

	)

4346 
	#MG_EV_HTTP_CHUNK
 102

	)

4347 
	#MG_EV_SSI_CALL
 105

	)

4348 
	#MG_EV_SSI_CALL_CTX
 106

	)

4350 #i‡
MG_ENABLE_HTTP_WEBSOCKET


4351 
	#MG_EV_WEBSOCKET_HANDSHAKE_REQUEST
 111

	)

4352 
	#MG_EV_WEBSOCKET_HANDSHAKE_DONE
 112

	)

4353 
	#MG_EV_WEBSOCKET_FRAME
 113

	)

4354 
	#MG_EV_WEBSOCKET_CONTROL_FRAME
 114

	)

4357 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


4358 
	#MG_EV_HTTP_MULTIPART_REQUEST
 121

	)

4359 
	#MG_EV_HTTP_PART_BEGIN
 122

	)

4360 
	#MG_EV_HTTP_PART_DATA
 123

	)

4361 
	#MG_EV_HTTP_PART_END
 124

	)

4363 
	#MG_EV_HTTP_MULTIPART_REQUEST_END
 125

	)

4418 
mg_£t_¥Ÿocﬁ_hâp_websockë
(
mg_c⁄√˘i⁄
 *
nc
);

4420 #i‡
MG_ENABLE_HTTP_WEBSOCKET


4435 
mg_£nd_websockë_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
uri
,

4436 c⁄° *
exåa_hódîs
);

4448 
mg_£nd_websockë_h™dshake2
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

4449 c⁄° *
ho°
, c⁄° *
¥Ÿocﬁ
,

4450 c⁄° *
exåa_hódîs
);

4453 
mg_£nd_websockë_h™dshake3
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

4454 c⁄° *
ho°
, c⁄° *
¥Ÿocﬁ
,

4455 c⁄° *
exåa_hódîs
, c⁄° *
u£r
,

4456 c⁄° *
∑ss
);

4460 
mg_£nd_websockë_h™dshake3v
(
mg_c⁄√˘i⁄
 *
nc
,

4461 c⁄° 
mg_°r
 
∑th
,

4462 c⁄° 
mg_°r
 
ho°
,

4463 c⁄° 
mg_°r
 
¥Ÿocﬁ
,

4464 c⁄° 
mg_°r
 
exåa_hódîs
,

4465 c⁄° 
mg_°r
 
u£r
,

4466 c⁄° 
mg_°r
 
∑ss
);

4488 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_ws
(
mg_mgr
 *
mgr
,

4489 
MG_CB
(
mg_evít_h™dÀr_t
 
evít_h™dÀr
,

4490 *
u£r_d©a
),

4491 c⁄° *
uæ
, c⁄° *
¥Ÿocﬁ
,

4492 c⁄° *
exåa_hódîs
);

4500 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_ws_›t
(

4501 
mg_mgr
 *
mgr
, 
MG_CB
(
mg_evít_h™dÀr_t
 
ev_h™dÀr
, *
u£r_d©a
),

4502 
mg_c⁄√˘_›ts
 
›ts
, c⁄° *
uæ
, c⁄° *
¥Ÿocﬁ
,

4503 c⁄° *
exåa_hódîs
);

4523 
mg_£nd_websockë_‰ame
(
mg_c⁄√˘i⁄
 *
nc
, 
›_™d_Êags
,

4524 c⁄° *
d©a
, 
size_t
 
d©a_Àn
);

4530 
mg_£nd_websockë_‰amev
(
mg_c⁄√˘i⁄
 *
nc
, 
›_™d_Êags
,

4531 c⁄° 
mg_°r
 *
°rögs
, 
num_°rögs
);

4539 
mg_¥ötf_websockë_‰ame
(
mg_c⁄√˘i⁄
 *
nc
, 
›_™d_Êags
,

4540 c⁄° *
fmt
, ...);

4543 
	#WEBSOCKET_OP_CONTINUE
 0

	)

4544 
	#WEBSOCKET_OP_TEXT
 1

	)

4545 
	#WEBSOCKET_OP_BINARY
 2

	)

4546 
	#WEBSOCKET_OP_CLOSE
 8

	)

4547 
	#WEBSOCKET_OP_PING
 9

	)

4548 
	#WEBSOCKET_OP_PONG
 10

	)

4562 
	#WEBSOCKET_DONT_FIN
 0x100

	)

4577 
mg_uæ_decode
(c⁄° *
§c
, 
§c_Àn
, *
d°
, 
d°_Àn
,

4578 
is_f‹m_uæ_ícoded
);

4580 
mg_hash_md5_v
(
size_t
 
num_msgs
, c⁄° 
uöt8_t
 *
msgs
[],

4581 c⁄° 
size_t
 *
msg_Àns
, 
uöt8_t
 *
dige°
);

4582 
mg_hash_sha1_v
(
size_t
 
num_msgs
, c⁄° 
uöt8_t
 *
msgs
[],

4583 c⁄° 
size_t
 *
msg_Àns
, 
uöt8_t
 *
dige°
);

4588 
	#MG_AUTH_FLAG_IS_DIRECTORY
 (1 << 0)

	)

4589 
	#MG_AUTH_FLAG_IS_GLOBAL_PASS_FILE
 (1 << 1)

	)

4590 
	#MG_AUTH_FLAG_ALLOW_MISSING_FILE
 (1 << 2)

	)

4599 
mg_hâp_is_auth‹ized
(
hâp_mesßge
 *
hm
, 
mg_°r
 
∑th
,

4600 c⁄° *
domaö
, c⁄° *
∑ssw‹ds_fûe
,

4601 
Êags
);

4606 
mg_hâp_£nd_dige°_auth_ªque°
(
mg_c⁄√˘i⁄
 *
c
,

4607 c⁄° *
domaö
);

4609 #ifde‡
__˝lu•lus


4616 #ifde‡
MG_MODULE_LINES


4623 #i‚de‡
CS_MONGOOSE_SRC_HTTP_SERVER_H_


4624 
	#CS_MONGOOSE_SRC_HTTP_SERVER_H_


	)

4626 #i‡
MG_ENABLE_HTTP


4628 #ifde‡
__˝lu•lus


4640 
mg_∑r£_hâp
(c⁄° *
s
, 
n
, 
hâp_mesßge
 *
hm
, 
is_ªq
);

4648 
mg_°r
 *
mg_gë_hâp_hódî
(
hâp_mesßge
 *
hm
, c⁄° *
«me
);

4672 
mg_hâp_∑r£_hódî2
(
mg_°r
 *
hdr
, c⁄° *
v¨_«me
, **
buf
,

4673 
size_t
 
buf_size
);

4682 
mg_hâp_∑r£_hódî
(
mg_°r
 *
hdr
, c⁄° *
v¨_«me
, *
buf
,

4683 
size_t
 
buf_size
)

4684 #ifde‡
__GNUC__


4685 
__©åibuã__
((
dïªˇãd
));

4695 
mg_gë_hâp_basic_auth
(
hâp_mesßge
 *
hm
, *
u£r
, 
size_t
 
u£r_Àn
,

4696 *
∑ss
, 
size_t
 
∑ss_Àn
);

4703 
mg_∑r£_hâp_basic_auth
(
mg_°r
 *
hdr
, *
u£r
, 
size_t
 
u£r_Àn
,

4704 *
∑ss
, 
size_t
 
∑ss_Àn
);

4742 
size_t
 
mg_∑r£_mu…ù¨t
(c⁄° *
buf
, size_à
buf_Àn
, *
v¨_«me
,

4743 
size_t
 
v¨_«me_Àn
, *
fûe_«me
,

4744 
size_t
 
fûe_«me_Àn
, c⁄° **
chunk
,

4745 
size_t
 *
chunk_Àn
);

4756 
mg_gë_hâp_v¨
(c⁄° 
mg_°r
 *
buf
, c⁄° *
«me
, *
d°
,

4757 
size_t
 
d°_Àn
);

4759 #i‡
MG_ENABLE_FILESYSTEM


4764 
	smg_£rve_hâp_›ts
 {

4766 c⁄° *
documít_roŸ
;

4769 c⁄° *
ödex_fûes
;

4780 c⁄° *
≥r_dúe˘‹y_auth_fûe
;

4783 c⁄° *
auth_domaö
;

4793 c⁄° *
globÆ_auth_fûe
;

4796 c⁄° *
íabÀ_dúe˘‹y_li°ög
;

4856 c⁄° *
ssi_∑âîn
;

4859 c⁄° *
ù_a˛
;

4861 #i‡
MG_ENABLE_HTTP_URL_REWRITES


4886 c⁄° *
uæ_ªwrôes
;

4890 c⁄° *
dav_documít_roŸ
;

4896 c⁄° *
dav_auth_fûe
;

4899 c⁄° *
hiddí_fûe_∑âîn
;

4902 c⁄° *
cgi_fûe_∑âîn
;

4905 c⁄° *
cgi_öãΩªãr
;

4911 c⁄° *
cu°om_mime_ty≥s
;

4917 c⁄° *
exåa_hódîs
;

4940 
mg_£rve_hâp
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

4941 
mg_£rve_hâp_›ts
 
›ts
);

4962 
mg_hâp_£rve_fûe
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

4963 c⁄° *
∑th
, c⁄° 
mg_°r
 
mime_ty≥
,

4964 c⁄° 
mg_°r
 
exåa_hódîs
);

4966 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


4969 
mg_°r
 (*
	tmg_fu_‚ame_‚
)(
	tmg_c⁄√˘i⁄
 *
	tnc
,

4970 
	tmg_°r
 
	t‚ame
);

5004 
mg_fûe_u∂ﬂd_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
,

5005 
mg_fu_‚ame_‚
 
loˇl_«me_‚


5006 
MG_UD_ARG
(*
u£r_d©a
));

5037 
mg_ªgi°î_hâp_ídpoöt
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
uri_∑th
,

5038 
MG_CB
(
mg_evít_h™dÀr_t
 
h™dÀr
,

5039 *
u£r_d©a
));

5041 
	smg_hâp_ídpoöt_›ts
 {

5042 *
u£r_d©a
;

5044 c⁄° *
auth_domaö
;

5045 c⁄° *
auth_fûe
;

5048 
mg_ªgi°î_hâp_ídpoöt_›t
(
mg_c⁄√˘i⁄
 *
nc
,

5049 c⁄° *
uri_∑th
,

5050 
mg_evít_h™dÀr_t
 
h™dÀr
,

5051 
mg_hâp_ídpoöt_›ts
 
›ts
);

5057 
mg_hâp_check_dige°_auth
(
hâp_mesßge
 *
hm
, c⁄° *
auth_domaö
,

5058 
FILE
 *
Â
);

5066 
mg_check_dige°_auth
(
mg_°r
 
mëhod
, mg_°∏
uri
,

5067 
mg_°r
 
u£∫ame
, mg_°∏
˙⁄˚
,

5068 
mg_°r
 
ª•⁄£
, mg_°∏
q›
,

5069 
mg_°r
 
nc
, mg_°∏
n⁄˚
,

5070 
mg_°r
 
auth_domaö
, 
FILE
 *
Â
);

5090 
mg_£nd_hâp_chunk
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
);

5096 
mg_¥ötf_hâp_chunk
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
fmt
, ...);

5111 
mg_£nd_ª•⁄£_löe
(
mg_c⁄√˘i⁄
 *
nc
, 
°©us_code
,

5112 c⁄° *
exåa_hódîs
);

5118 
mg_hâp_£nd_îr‹
(
mg_c⁄√˘i⁄
 *
nc
, 
code
, c⁄° *
ªas⁄
);

5131 
mg_hâp_£nd_ªdúe˘
(
mg_c⁄√˘i⁄
 *
nc
, 
°©us_code
,

5132 c⁄° 
mg_°r
 
loˇti⁄
,

5133 c⁄° 
mg_°r
 
exåa_hódîs
);

5149 
mg_£nd_hód
(
mg_c⁄√˘i⁄
 *
n
, 
°©us_code
,

5150 
öt64_t
 
c⁄ã¡_Àngth
, c⁄° *
exåa_hódîs
);

5155 
mg_¥ötf_html_esˇ≥
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
fmt
, ...);

5157 #i‡
MG_ENABLE_HTTP_URL_REWRITES


5168 
mg_hâp_ªvî£_¥oxy
(
mg_c⁄√˘i⁄
 *
nc
,

5169 c⁄° 
hâp_mesßge
 *
hm
, 
mg_°r
 
mou¡
,

5170 
mg_°r
 
up°ªam
);

5173 #ifde‡
__˝lu•lus


5180 #ifde‡
MG_MODULE_LINES


5187 #i‚de‡
CS_MONGOOSE_SRC_HTTP_CLIENT_H_


5188 
	#CS_MONGOOSE_SRC_HTTP_CLIENT_H_


	)

5190 #ifde‡
__˝lu•lus


5218 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_hâp
(

5219 
mg_mgr
 *
mgr
,

5220 
MG_CB
(
mg_evít_h™dÀr_t
 
evít_h™dÀr
, *
u£r_d©a
), c⁄° *
uæ
,

5221 c⁄° *
exåa_hódîs
, c⁄° *
po°_d©a
);

5230 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_hâp_›t
(

5231 
mg_mgr
 *
mgr
, 
MG_CB
(
mg_evít_h™dÀr_t
 
ev_h™dÀr
, *
u£r_d©a
),

5232 
mg_c⁄√˘_›ts
 
›ts
, c⁄° *
uæ
, c⁄° *
exåa_hódîs
,

5233 c⁄° *
po°_d©a
);

5236 
mg_hâp_¸óã_dige°_auth_hódî
(*
buf
, 
size_t
 
buf_Àn
,

5237 c⁄° *
mëhod
, c⁄° *
uri
,

5238 c⁄° *
auth_domaö
, c⁄° *
u£r
,

5239 c⁄° *
∑sswd
, c⁄° *
n⁄˚
);

5241 #ifde‡
__˝lu•lus


5245 #ifde‡
MG_MODULE_LINES


5269 #i‚de‡
CS_MONGOOSE_SRC_MQTT_H_


5270 
	#CS_MONGOOSE_SRC_MQTT_H_


	)

5274 
	smg_mqâ_mesßge
 {

5275 
cmd
;

5276 
qos
;

5277 
Àn
;

5278 
mg_°r
 
t›ic
;

5279 
mg_°r
 
∑ylﬂd
;

5281 
uöt8_t
 
c⁄«ck_ªt_code
;

5282 
uöt16_t
 
mesßge_id
;

5285 
uöt8_t
 
¥Ÿocﬁ_vîsi⁄
;

5286 
uöt8_t
 
c⁄√˘_Êags
;

5287 
uöt16_t
 
kìp_Æive_timî
;

5288 
mg_°r
 
¥Ÿocﬁ_«me
;

5289 
mg_°r
 
˛õ¡_id
;

5290 
mg_°r
 
wûl_t›ic
;

5291 
mg_°r
 
wûl_mesßge
;

5292 
mg_°r
 
u£r_«me
;

5293 
mg_°r
 
∑ssw‹d
;

5296 
	smg_mqâ_t›ic_ex¥essi⁄
 {

5297 c⁄° *
	gt›ic
;

5298 
uöt8_t
 
	gqos
;

5301 
	smg_£nd_mqâ_h™dshake_›ts
 {

5302 
	gÊags
;

5303 
uöt16_t
 
	gkìp_Æive
;

5304 c⁄° *
	gwûl_t›ic
;

5305 c⁄° *
	gwûl_mesßge
;

5306 c⁄° *
	gu£r_«me
;

5307 c⁄° *
	g∑ssw‹d
;

5311 
	smg_mqâ_¥Ÿo_d©a
 {

5312 
uöt16_t
 
	gkìp_Æive
;

5313 
	gœ°_c⁄åﬁ_time
;

5317 
	#MG_MQTT_CMD_CONNECT
 1

	)

5318 
	#MG_MQTT_CMD_CONNACK
 2

	)

5319 
	#MG_MQTT_CMD_PUBLISH
 3

	)

5320 
	#MG_MQTT_CMD_PUBACK
 4

	)

5321 
	#MG_MQTT_CMD_PUBREC
 5

	)

5322 
	#MG_MQTT_CMD_PUBREL
 6

	)

5323 
	#MG_MQTT_CMD_PUBCOMP
 7

	)

5324 
	#MG_MQTT_CMD_SUBSCRIBE
 8

	)

5325 
	#MG_MQTT_CMD_SUBACK
 9

	)

5326 
	#MG_MQTT_CMD_UNSUBSCRIBE
 10

	)

5327 
	#MG_MQTT_CMD_UNSUBACK
 11

	)

5328 
	#MG_MQTT_CMD_PINGREQ
 12

	)

5329 
	#MG_MQTT_CMD_PINGRESP
 13

	)

5330 
	#MG_MQTT_CMD_DISCONNECT
 14

	)

5333 
	#MG_MQTT_EVENT_BASE
 200

	)

5334 
	#MG_EV_MQTT_CONNECT
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_CONNECT
)

	)

5335 
	#MG_EV_MQTT_CONNACK
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_CONNACK
)

	)

5336 
	#MG_EV_MQTT_PUBLISH
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PUBLISH
)

	)

5337 
	#MG_EV_MQTT_PUBACK
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PUBACK
)

	)

5338 
	#MG_EV_MQTT_PUBREC
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PUBREC
)

	)

5339 
	#MG_EV_MQTT_PUBREL
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PUBREL
)

	)

5340 
	#MG_EV_MQTT_PUBCOMP
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PUBCOMP
)

	)

5341 
	#MG_EV_MQTT_SUBSCRIBE
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_SUBSCRIBE
)

	)

5342 
	#MG_EV_MQTT_SUBACK
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_SUBACK
)

	)

5343 
	#MG_EV_MQTT_UNSUBSCRIBE
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_UNSUBSCRIBE
)

	)

5344 
	#MG_EV_MQTT_UNSUBACK
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_UNSUBACK
)

	)

5345 
	#MG_EV_MQTT_PINGREQ
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PINGREQ
)

	)

5346 
	#MG_EV_MQTT_PINGRESP
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PINGRESP
)

	)

5347 
	#MG_EV_MQTT_DISCONNECT
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_DISCONNECT
)

	)

5350 
	#MG_MQTT_RETAIN
 0x1

	)

5351 
	#MG_MQTT_DUP
 0x4

	)

5352 
	#MG_MQTT_QOS
(
qos
Ë((qosË<< 1)

	)

5353 
	#MG_MQTT_GET_QOS
(
Êags
Ë(((ÊagsË&0x6Ë>> 1)

	)

5354 
	#MG_MQTT_SET_QOS
(
Êags
, 
qos
Ë(ÊagsË((ÊagsË& ~0x6Ë| ((qosË<< 1)

	)

5357 
	#MG_MQTT_CLEAN_SESSION
 0x02

	)

5358 
	#MG_MQTT_HAS_WILL
 0x04

	)

5359 
	#MG_MQTT_WILL_RETAIN
 0x20

	)

5360 
	#MG_MQTT_HAS_PASSWORD
 0x40

	)

5361 
	#MG_MQTT_HAS_USER_NAME
 0x80

	)

5362 
	#MG_MQTT_GET_WILL_QOS
(
Êags
Ë(((ÊagsË&0x18Ë>> 3)

	)

5363 
	#MG_MQTT_SET_WILL_QOS
(
Êags
, 
qos
) \

5364 (
Êags
Ë((ÊagsË& ~0x18Ë| ((
qos
Ë<< 3)

	)

5367 
	#MG_EV_MQTT_CONNACK_ACCEPTED
 0

	)

5368 
	#MG_EV_MQTT_CONNACK_UNACCEPTABLE_VERSION
 1

	)

5369 
	#MG_EV_MQTT_CONNACK_IDENTIFIER_REJECTED
 2

	)

5370 
	#MG_EV_MQTT_CONNACK_SERVER_UNAVAILABLE
 3

	)

5371 
	#MG_EV_MQTT_CONNACK_BAD_AUTH
 4

	)

5372 
	#MG_EV_MQTT_CONNACK_NOT_AUTHORIZED
 5

	)

5374 #ifde‡
__˝lu•lus


5391 
mg_£t_¥Ÿocﬁ_mqâ
(
mg_c⁄√˘i⁄
 *
nc
);

5394 
mg_£nd_mqâ_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˛õ¡_id
);

5397 
mg_£nd_mqâ_h™dshake_›t
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˛õ¡_id
,

5398 
mg_£nd_mqâ_h™dshake_›ts
);

5401 
mg_mqâ_publish
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
t›ic
,

5402 
uöt16_t
 
mesßge_id
, 
Êags
, c⁄° *
d©a
,

5403 
size_t
 
Àn
);

5406 
mg_mqâ_subs¸ibe
(
mg_c⁄√˘i⁄
 *
nc
,

5407 c⁄° 
mg_mqâ_t›ic_ex¥essi⁄
 *
t›ics
,

5408 
size_t
 
t›ics_Àn
, 
uöt16_t
 
mesßge_id
);

5411 
mg_mqâ_unsubs¸ibe
(
mg_c⁄√˘i⁄
 *
nc
, **
t›ics
,

5412 
size_t
 
t›ics_Àn
, 
uöt16_t
 
mesßge_id
);

5415 
mg_mqâ_disc⁄√˘
(
mg_c⁄√˘i⁄
 *
nc
);

5418 
mg_mqâ_c⁄«ck
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt8_t
 
ªtu∫_code
);

5421 
mg_mqâ_puback
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
);

5424 
mg_mqâ_pubªc
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
);

5427 
mg_mqâ_pubªl
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
);

5430 
mg_mqâ_pubcomp
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
);

5436 
mg_mqâ_suback
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt8_t
 *
qoss
, 
size_t
 
qoss_Àn
,

5437 
uöt16_t
 
mesßge_id
);

5440 
mg_mqâ_unsuback
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
);

5443 
mg_mqâ_pög
(
mg_c⁄√˘i⁄
 *
nc
);

5446 
mg_mqâ_p⁄g
(
mg_c⁄√˘i⁄
 *
nc
);

5455 
mg_mqâ_√xt_subs¸ibe_t›ic
(
mg_mqâ_mesßge
 *
msg
,

5456 
mg_°r
 *
t›ic
, 
uöt8_t
 *
qos
, 
pos
);

5463 
mg_mqâ_m©ch_t›ic_ex¥essi⁄
(
mg_°r
 
exp
, mg_°∏
t›ic
);

5469 
mg_mqâ_vm©ch_t›ic_ex¥essi⁄
(c⁄° *
exp
, 
mg_°r
 
t›ic
);

5471 #ifde‡
__˝lu•lus


5476 #ifde‡
MG_MODULE_LINES


5500 #i‚de‡
CS_MONGOOSE_SRC_MQTT_BROKER_H_


5501 
	#CS_MONGOOSE_SRC_MQTT_BROKER_H_


	)

5503 #i‡
MG_ENABLE_MQTT_BROKER


5508 #ifde‡
__˝lu•lus


5512 #i‚de‡
MG_MQTT_MAX_SESSION_SUBSCRIPTIONS


5513 
	#MG_MQTT_MAX_SESSION_SUBSCRIPTIONS
 512

	)

5516 
mg_mqâ_brokî
;

5519 
	smg_mqâ_£ssi⁄
 {

5520 
mg_mqâ_brokî
 *
brk
;

5521 
LIST_ENTRY
(
mg_mqâ_£ssi⁄
Ë
lök
;

5522 
mg_c⁄√˘i⁄
 *
nc
;

5523 
size_t
 
num_subs¸ùti⁄s
;

5524 *
u£r_d©a
;

5525 
mg_mqâ_t›ic_ex¥essi⁄
 *
subs¸ùti⁄s
;

5529 
	smg_mqâ_brokî
 {

5530 
LIST_HEAD
(
_mg_£sshód
, 
mg_mqâ_£ssi⁄
Ë
£ssi⁄s
;

5531 *
u£r_d©a
;

5535 
mg_mqâ_brokî_öô
(
mg_mqâ_brokî
 *
brk
, *
u£r_d©a
);

5562 
mg_mqâ_brokî
(
mg_c⁄√˘i⁄
 *
brk
, 
ev
, *
d©a
);

5574 
mg_mqâ_£ssi⁄
 *
mg_mqâ_√xt
(
mg_mqâ_brokî
 *
brk
,

5575 
mg_mqâ_£ssi⁄
 *
s
);

5577 #ifde‡
__˝lu•lus


5583 #ifde‡
MG_MODULE_LINES


5595 #i‚de‡
CS_MONGOOSE_SRC_DNS_H_


5596 
	#CS_MONGOOSE_SRC_DNS_H_


	)

5600 #ifde‡
__˝lu•lus


5604 
	#MG_DNS_A_RECORD
 0x01

	)

5605 
	#MG_DNS_CNAME_RECORD
 0x05

	)

5606 
	#MG_DNS_PTR_RECORD
 0x0¯

	)

5607 
	#MG_DNS_TXT_RECORD
 0x10

	)

5608 
	#MG_DNS_AAAA_RECORD
 0x1¯

	)

5609 
	#MG_DNS_SRV_RECORD
 0x21

	)

5610 
	#MG_DNS_MX_RECORD
 0x0‡

	)

5611 
	#MG_DNS_ANY_RECORD
 0xff

	)

5612 
	#MG_DNS_NSEC_RECORD
 0x2f

	)

5614 
	#MG_MAX_DNS_QUESTIONS
 32

	)

5615 
	#MG_MAX_DNS_ANSWERS
 32

	)

5617 
	#MG_DNS_MESSAGE
 100

	)

5619 
	emg_dns_ªsour˚_ªc‹d_köd
 {

5620 
MG_DNS_INVALID_RECORD
 = 0,

5621 
MG_DNS_QUESTION
,

5622 
MG_DNS_ANSWER


5626 
	smg_dns_ªsour˚_ªc‹d
 {

5627 
mg_°r
 
«me
;

5628 
πy≥
;

5629 
r˛ass
;

5630 
âl
;

5631 
mg_dns_ªsour˚_ªc‹d_köd
 
köd
;

5632 
mg_°r
 
rd©a
;

5636 
	smg_dns_mesßge
 {

5637 
mg_°r
 
pkt
;

5638 
uöt16_t
 
Êags
;

5639 
uöt16_t
 
å™ß˘i⁄_id
;

5640 
num_que°i⁄s
;

5641 
num_™swîs
;

5642 
mg_dns_ªsour˚_ªc‹d
 
que°i⁄s
[
MG_MAX_DNS_QUESTIONS
];

5643 
mg_dns_ªsour˚_ªc‹d
 
™swîs
[
MG_MAX_DNS_ANSWERS
];

5646 
mg_dns_ªsour˚_ªc‹d
 *
mg_dns_√xt_ªc‹d
(

5647 
mg_dns_mesßge
 *
msg
, 
quîy
, 
mg_dns_ªsour˚_ªc‹d
 *
¥ev
);

5660 
mg_dns_∑r£_ªc‹d_d©a
(
mg_dns_mesßge
 *
msg
,

5661 
mg_dns_ªsour˚_ªc‹d
 *
º
, *
d©a
,

5662 
size_t
 
d©a_Àn
);

5667 
mg_£nd_dns_quîy
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
«me
,

5668 
quîy_ty≥
);

5675 
mg_dns_ö£π_hódî
(
mbuf
 *
io
, 
size_t
 
pos
,

5676 
mg_dns_mesßge
 *
msg
);

5686 
mg_dns_c›y_que°i⁄s
(
mbuf
 *
io
, 
mg_dns_mesßge
 *
msg
);

5704 
mg_dns_ícode_ªc‹d
(
mbuf
 *
io
, 
mg_dns_ªsour˚_ªc‹d
 *
º
,

5705 c⁄° *
«me
, 
size_t
 
∆í
, c⁄° *
rd©a
,

5706 
size_t
 
æí
);

5711 
mg_dns_ícode_«me
(
mbuf
 *
io
, c⁄° *
«me
, 
size_t
 
Àn
);

5714 
mg_∑r£_dns
(c⁄° *
buf
, 
Àn
, 
mg_dns_mesßge
 *
msg
);

5729 
size_t
 
mg_dns_uncom¥ess_«me
(
mg_dns_mesßge
 *
msg
, 
mg_°r
 *
«me
,

5730 *
d°
, 
d°_Àn
);

5744 
mg_£t_¥Ÿocﬁ_dns
(
mg_c⁄√˘i⁄
 *
nc
);

5746 #ifde‡
__˝lu•lus


5750 #ifde‡
MG_MODULE_LINES


5764 #i‚de‡
CS_MONGOOSE_SRC_DNS_SERVER_H_


5765 
	#CS_MONGOOSE_SRC_DNS_SERVER_H_


	)

5767 #i‡
MG_ENABLE_DNS_SERVER


5771 #ifde‡
__˝lu•lus


5775 
	#MG_DNS_SERVER_DEFAULT_TTL
 3600

	)

5777 
	smg_dns_ª∂y
 {

5778 
mg_dns_mesßge
 *
msg
;

5779 
mbuf
 *
io
;

5780 
size_t
 
°¨t
;

5811 
mg_dns_ª∂y
 
mg_dns_¸óã_ª∂y
(
mbuf
 *
io
,

5812 
mg_dns_mesßge
 *
msg
);

5822 
mg_dns_ª∂y_ªc‹d
(
mg_dns_ª∂y
 *
ª∂y
,

5823 
mg_dns_ªsour˚_ªc‹d
 *
que°i⁄
,

5824 c⁄° *
«me
, 
πy≥
, 
âl
, c⁄° *
rd©a
,

5825 
size_t
 
rd©a_Àn
);

5839 
mg_dns_£nd_ª∂y
(
mg_c⁄√˘i⁄
 *
nc
, 
mg_dns_ª∂y
 *
r
);

5841 #ifde‡
__˝lu•lus


5847 #ifde‡
MG_MODULE_LINES


5859 #i‚de‡
CS_MONGOOSE_SRC_RESOLV_H_


5860 
	#CS_MONGOOSE_SRC_RESOLV_H_


	)

5864 #ifde‡
__˝lu•lus


5868 
	emg_ªsﬁve_îr
 {

5869 
MG_RESOLVE_OK
 = 0,

5870 
MG_RESOLVE_NO_ANSWERS
 = 1,

5871 
MG_RESOLVE_EXCEEDED_RETRY_COUNT
 = 2,

5872 
MG_RESOLVE_TIMEOUT
 = 3

5875 (*
mg_ªsﬁve_ˇŒback_t
)(
	tmg_dns_mesßge
 *
	tdns_mesßge
,

5876 *
	tu£r_d©a
, 
	tmg_ªsﬁve_îr
);

5879 
	smg_ªsﬁve_async_›ts
 {

5880 c⁄° *
«me£rvî
;

5881 
max_ªåõs
;

5882 
timeout
;

5883 
ac˚±_lôîÆ
;

5884 
⁄ly_lôîÆ
;

5885 
mg_c⁄√˘i⁄
 **
dns_c⁄n
;

5889 
mg_ªsﬁve_async
(
mg_mgr
 *
mgr
, c⁄° *
«me
, 
quîy
,

5890 
mg_ªsﬁve_ˇŒback_t
 
cb
, *
d©a
);

5893 
mg_£t_«me£rvî
(
mg_mgr
 *
mgr
, c⁄° *
«me£rvî
);

5916 
mg_ªsﬁve_async_›t
(
mg_mgr
 *
mgr
, c⁄° *
«me
, 
quîy
,

5917 
mg_ªsﬁve_ˇŒback_t
 
cb
, *
d©a
,

5918 
mg_ªsﬁve_async_›ts
 
›ts
);

5925 
mg_ªsﬁve_‰om_ho°s_fûe
(c⁄° *
ho°
, 
sockë_addªss
 *
uß
);

5927 #ifde‡
__˝lu•lus


5931 #ifde‡
MG_MODULE_LINES


5965 #i‚de‡
CS_MONGOOSE_SRC_COAP_H_


5966 
	#CS_MONGOOSE_SRC_COAP_H_


	)

5968 #i‡
MG_ENABLE_COAP


5970 
	#MG_COAP_MSG_TYPE_FIELD
 0x2

	)

5971 
	#MG_COAP_CODE_CLASS_FIELD
 0x4

	)

5972 
	#MG_COAP_CODE_DETAIL_FIELD
 0x8

	)

5973 
	#MG_COAP_MSG_ID_FIELD
 0x10

	)

5974 
	#MG_COAP_TOKEN_FIELD
 0x20

	)

5975 
	#MG_COAP_OPTIOMG_FIELD
 0x40

	)

5976 
	#MG_COAP_PAYLOAD_FIELD
 0x80

	)

5978 
	#MG_COAP_ERROR
 0x10000

	)

5979 
	#MG_COAP_FORMAT_ERROR
 (
MG_COAP_ERROR
 | 0x20000)

	)

5980 
	#MG_COAP_IGNORE
 (
MG_COAP_ERROR
 | 0x40000)

	)

5981 
	#MG_COAP_NOT_ENOUGH_DATA
 (
MG_COAP_ERROR
 | 0x80000)

	)

5982 
	#MG_COAP_NETWORK_ERROR
 (
MG_COAP_ERROR
 | 0x100000)

	)

5984 
	#MG_COAP_MSG_CON
 0

	)

5985 
	#MG_COAP_MSG_NOC
 1

	)

5986 
	#MG_COAP_MSG_ACK
 2

	)

5987 
	#MG_COAP_MSG_RST
 3

	)

5988 
	#MG_COAP_MSG_MAX
 3

	)

5990 
	#MG_COAP_CODECLASS_REQUEST
 0

	)

5991 
	#MG_COAP_CODECLASS_RESP_OK
 2

	)

5992 
	#MG_COAP_CODECLASS_CLIENT_ERR
 4

	)

5993 
	#MG_COAP_CODECLASS_SRV_ERR
 5

	)

5995 
	#MG_COAP_EVENT_BASE
 300

	)

5996 
	#MG_EV_COAP_CON
 (
MG_COAP_EVENT_BASE
 + 
MG_COAP_MSG_CON
)

	)

5997 
	#MG_EV_COAP_NOC
 (
MG_COAP_EVENT_BASE
 + 
MG_COAP_MSG_NOC
)

	)

5998 
	#MG_EV_COAP_ACK
 (
MG_COAP_EVENT_BASE
 + 
MG_COAP_MSG_ACK
)

	)

5999 
	#MG_EV_COAP_RST
 (
MG_COAP_EVENT_BASE
 + 
MG_COAP_MSG_RST
)

	)

6006 
	smg_cﬂp_›ti⁄
 {

6007 
mg_cﬂp_›ti⁄
 *
√xt
;

6008 
uöt32_t
 
numbî
;

6009 
mg_°r
 
vÆue
;

6013 
	smg_cﬂp_mesßge
 {

6014 
uöt32_t
 
	gÊags
;

6015 
uöt8_t
 
	gmsg_ty≥
;

6016 
uöt8_t
 
	gcode_˛ass
;

6017 
uöt8_t
 
	gcode_dëaû
;

6018 
uöt16_t
 
	gmsg_id
;

6019 
mg_°r
 
	gtokí
;

6020 
mg_cﬂp_›ti⁄
 *
	g›ti⁄s
;

6021 
mg_°r
 
	g∑ylﬂd
;

6022 
mg_cﬂp_›ti⁄
 *
	g›tiomg_èû
;

6025 #ifde‡
__˝lu•lus


6030 
mg_£t_¥Ÿocﬁ_cﬂp
(
mg_c⁄√˘i⁄
 *
nc
);

6037 
mg_cﬂp_›ti⁄
 *
mg_cﬂp_add_›ti⁄
(
mg_cﬂp_mesßge
 *
cm
,

6038 
uöt32_t
 
numbî
, *
vÆue
,

6039 
size_t
 
Àn
);

6045 
mg_cﬂp_‰ì_›ti⁄s
(
mg_cﬂp_mesßge
 *
cm
);

6058 
uöt32_t
 
mg_cﬂp_£nd_mesßge
(
mg_c⁄√˘i⁄
 *
nc
,

6059 
mg_cﬂp_mesßge
 *
cm
);

6066 
uöt32_t
 
mg_cﬂp_£nd_ack
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
msg_id
);

6083 
uöt32_t
 
mg_cﬂp_∑r£
(
mbuf
 *
io
, 
mg_cﬂp_mesßge
 *
cm
);

6090 
uöt32_t
 
mg_cﬂp_compo£
(
mg_cﬂp_mesßge
 *
cm
, 
mbuf
 *
io
);

6092 #ifde‡
__˝lu•lus


6099 #ifde‡
MG_MODULE_LINES


6107 #i‚de‡
CS_MONGOOSE_SRC_SNTP_H_


6108 
	#CS_MONGOOSE_SRC_SNTP_H_


	)

6110 #i‡
MG_ENABLE_SNTP


6112 
	#MG_SNTP_EVENT_BASE
 500

	)

6118 
	#MG_SNTP_REPLY
 (
MG_SNTP_EVENT_BASE
 + 1)

	)

6121 
	#MG_SNTP_MALFORMED_REPLY
 (
MG_SNTP_EVENT_BASE
 + 2)

	)

6124 
	#MG_SNTP_FAILED
 (
MG_SNTP_EVENT_BASE
 + 3)

	)

6126 
	smg_¢ç_mesßge
 {

6128 
kiss_of_dóth
;

6130 
time
;

6134 
mg_c⁄√˘i⁄
 *
mg_¢ç_c⁄√˘
(
mg_mgr
 *
mgr
,

6135 
MG_CB
(
mg_evít_h™dÀr_t
 
evít_h™dÀr
,

6136 *
u£r_d©a
),

6137 c⁄° *
¢ç_£rvî_«me
);

6140 
mg_¢ç_£nd_ªque°
(
mg_c⁄√˘i⁄
 *
c
);

6149 
mg_c⁄√˘i⁄
 *
mg_¢ç_gë_time
(
mg_mgr
 *
mgr
,

6150 
mg_evít_h™dÀr_t
 
evít_h™dÀr
,

6151 c⁄° *
¢ç_£rvî_«me
);

6156 #ifde‡
MG_MODULE_LINES


6164 #i‚de‡
CS_MONGOOSE_SRC_SOCKS_H_


6165 
	#CS_MONGOOSE_SRC_SOCKS_H_


	)

6167 #i‡
MG_ENABLE_SOCKS


6169 
	#MG_SOCKS_VERSION
 5

	)

6171 
	#MG_SOCKS_HANDSHAKE_DONE
 
MG_F_USER_1


	)

6172 
	#MG_SOCKS_CONNECT_DONE
 
MG_F_USER_2


	)

6175 
	emg_socks_h™dshake_mëhod
 {

6176 
	gMG_SOCKS_HANDSHAKE_NOAUTH
 = 0,

6177 
	gMG_SOCKS_HANDSHAKE_GSSAPI
 = 1,

6178 
	gMG_SOCKS_HANDSHAKE_USERPASS
 = 2,

6179 
	gMG_SOCKS_HANDSHAKE_FAILURE
 = 0xff,

6183 
	emg_socks_comm™d
 {

6184 
	gMG_SOCKS_CMD_CONNECT
 = 1,

6185 
	gMG_SOCKS_CMD_BIND
 = 2,

6186 
	gMG_SOCKS_CMD_UDP_ASSOCIATE
 = 3,

6190 
	emg_socks_addªss_ty≥
 {

6191 
	gMG_SOCKS_ADDR_IPV4
 = 1,

6192 
	gMG_SOCKS_ADDR_DOMAIN
 = 3,

6193 
	gMG_SOCKS_ADDR_IPV6
 = 4,

6197 
	emg_socks_ª•⁄£
 {

6198 
	gMG_SOCKS_SUCCESS
 = 0,

6199 
	gMG_SOCKS_FAILURE
 = 1,

6200 
	gMG_SOCKS_NOT_ALLOWED
 = 2,

6201 
	gMG_SOCKS_NET_UNREACHABLE
 = 3,

6202 
	gMG_SOCKS_HOST_UNREACHABLE
 = 4,

6203 
	gMG_SOCKS_CONN_REFUSED
 = 5,

6204 
	gMG_SOCKS_TTL_EXPIRED
 = 6,

6205 
	gMG_SOCKS_CMD_NOT_SUPPORTED
 = 7,

6206 
	gMG_SOCKS_ADDR_NOT_SUPPORTED
 = 8,

6209 #ifde‡
__˝lu•lus


6214 
mg_£t_¥Ÿocﬁ_socks
(
mg_c⁄√˘i⁄
 *
c
);

6217 
mg_iÁ˚
 *
mg_socks_mk_iÁ˚
(
mg_mgr
 *, c⁄° *
¥oxy_addr
);

6219 #ifde‡
__˝lu•lus


	@swupdate/mongoose/mongoose_interface.c

13 
	#_XOPEN_SOURCE
 600

14 

	)

15 
	~<°ddef.h
>

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<uni°d.h
>

20 
	~<°dboﬁ.h
>

22 
	~<gë›t.h
>

24 
	~<√tw‹k_ùc.h
>

25 
	~<m⁄goo£_öãrÁ˚.h
>

26 
	~<∑r£lib.h
>

27 
	~<¥ogªss_ùc.h
>

28 
	~<swupd©e_£âögs.h
>

30 
	~"m⁄goo£.h
"

32 
	#MG_PORT
 "8080"

	)

33 
	#MG_ROOT
 "."

	)

35 
	eMONGOOSE_API_VERSION
 {

36 
	mMONGOOSE_API_V1
 = 1,

37 
	mMONGOOSE_API_V2


40 
	sm⁄goo£_›ti⁄s
 {

41 *
	mroŸ
;

42 
boﬁ
 
	mli°ög
;

43 *
	mp‹t
;

44 *
	mglobÆ_auth_fûe
;

45 *
	mauth_domaö
;

46 #i‡
MG_ENABLE_SSL


47 *
	ms¶_˚π
;

48 *
	ms¶_key
;

50 
MONGOOSE_API_VERSION
 
	m≠i_vîsi⁄
;

53 
	sfûe_u∂ﬂd_°©e
 {

54 
size_t
 
	mÀn
;

55 
	mfd
;

58 
boﬁ
 
	grun_po°upd©e
;

59 
mg_£rve_hâp_›ts
 
	gs_hâp_£rvî_›ts
;

60 
u∂ﬂd_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
p
);

65 
	#íum_°rög
(
x
Ë[x] = #x

	)

66 c⁄° *
	$gë_°©us_°rög
(
°©us
)

68 c⁄° * c⁄° 
°r
[] = {

69 
	`íum_°rög
(
IDLE
),

70 
	`íum_°rög
(
START
),

71 
	`íum_°rög
(
RUN
),

72 
	`íum_°rög
(
SUCCESS
),

73 
	`íum_°rög
(
FAILURE
),

74 
	`íum_°rög
(
DOWNLOAD
),

75 
	`íum_°rög
(
DONE
),

76 
	`íum_°rög
(
SUBPROCESS
)

79 i‡(
°©us
 >
	`ARRAY_SIZE
(
°r
))

82  
°r
[
°©us
];

83 
	}
}

85 
	#íum_sour˚_°rög
(
x
Ë[
SOURCE_
##x] = #x

	)

86 c⁄° *
	$gë_sour˚_°rög
(
sour˚
)

88 c⁄° * c⁄° 
°r
[] = {

89 
	`íum_sour˚_°rög
(
UNKNOWN
),

90 
	`íum_sour˚_°rög
(
WEBSERVER
),

91 
	`íum_sour˚_°rög
(
SURICATTA
),

92 
	`íum_sour˚_°rög
(
DOWNLOADER
),

93 
	`íum_sour˚_°rög
(
LOCAL
)

96 i‡(
sour˚
 >
	`ARRAY_SIZE
(
°r
))

99  
°r
[
sour˚
];

100 
	}
}

103 
size_t
 
	$¢esˇ≥
(*
d°
, 
size_t
 
n
, c⁄° *
§c
)

105 
size_t
 
Àn
 = 0;

107 i‡(
n
 < 3)

110 
	`mem£t
(
d°
, 0, 
n
);

112 
i
 = 0; 
§c
[i] != '\0'; i++) {

113 i‡(
§c
[
i
] == '\\' || src[i] == '\"') {

114 i‡(
Àn
 < 
n
 - 2)

115 
d°
[
Àn
] = '\\';

116 
Àn
++;

118 i‡(
Àn
 < 
n
 - 1)

119 
d°
[
Àn
] = 
§c
[
i
];

120 
Àn
++;

123  
Àn
;

124 
	}
}

126 
	$ª°¨t_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
)

128 
hâp_mesßge
 *
hm
 = (hâp_mesßgê*Ë
ev_d©a
;

129 
ùc_mesßge
 
msg
 = {};

131 ()
ev
;

133 if(
	`mg_vˇ£cmp
(&
hm
->
mëhod
, "POST") != 0) {

134 
	`mg_hâp_£nd_îr‹
(
nc
, 405, "Method Not Allowed");

138 
ªt
 = 
	`ùc_po°upd©e
(&
msg
);

139 i‡(
ªt
) {

140 
	`mg_hâp_£nd_îr‹
(
nc
, 500, "FailedÅo queue command");

144 
	`mg_hâp_£nd_îr‹
(
nc
, 201, "Device willÑebootÇow.");

145 
	}
}

147 
	$brﬂdˇ°_ˇŒback
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
)

149 *
buf
 = (*Ë
ev_d©a
;

151 i‡(
ev
 !
MG_EV_POLL
)

154 i‡(!(
nc
->
Êags
 & 
MG_F_IS_WEBSOCKET
))

157 
	`mg_£nd_websockë_‰ame
(
nc
, 
WEBSOCKET_OP_TEXT
, 
buf
, 
	`°æí
(buf));

158 
	}
}

160 
	$brﬂdˇ°
(
mg_mgr
 *
mgr
, *
°r
)

162 
	`mg_brﬂdˇ°
(
mgr
, 
brﬂdˇ°_ˇŒback
, 
°r
, 
	`°æí
(str) + 1);

163 
	}
}

165 *
	$brﬂdˇ°_mesßge_thªad
(*
d©a
)

168 
ùc_mesßge
 
msg
;

169 
ªt
 = 
	`ùc_gë_°©us
(&
msg
);

171 i‡(!
ªt
 && 
	`°æí
(
msg
.
d©a
.
°©us
.
desc
) != 0) {

172 
mg_mgr
 *
mgr
 = (mg_mg∏*Ë
d©a
;

173 
ãxt
[4096];

174 
°r
[4160];

176 
	`¢esˇ≥
(
ãxt
, —ext), 
msg
.
d©a
.
°©us
.
desc
);

178 
	`¢¥ötf
(
°r
, (str),

184 (
msg
.
d©a
.
°©us
.
îr‹
) ? 3 : 6,

185 
ãxt
);

187 
	`brﬂdˇ°
(
mgr
, 
°r
);

191 
	`u¶ìp
(50 * 1000);

194  
NULL
;

195 
	}
}

197 *
	$brﬂdˇ°_¥ogªss_thªad
(*
d©a
)

199 
°©us
 = -1;

200 
sour˚
 = -1;

201 
°ï
 = 0;

202 
≥r˚¡
 = 0;

203 
fd
 = -1;

206 
mg_mgr
 *
mgr
 = (mg_mg∏*Ë
d©a
;

207 
¥ogªss_msg
 
msg
;

208 
°r
[512];

209 
ªt
;

211 i‡(
fd
 < 0)

212 
fd
 = 
	`¥ogªss_ùc_c⁄√˘
(
åue
);

214 
ªt
 = 
	`¥ogªss_ùc_ª˚ive
(&
fd
, &
msg
);

215 i‡(
ªt
 !(
msg
))

216  
NULL
;

218 i‡(
msg
.
°©us
 !°©u†|| msg.°©u†=
FAILURE
) {

219 
°©us
 = 
msg
.status;

221 
	`¢¥ötf
(
°r
, (str),

226 
	`gë_°©us_°rög
(
msg
.
°©us
));

227 
	`brﬂdˇ°
(
mgr
, 
°r
);

230 i‡(
msg
.
sour˚
 != source) {

231 
sour˚
 = 
msg
.source;

233 
	`¢¥ötf
(
°r
, (str),

238 
	`gë_sour˚_°rög
(
msg
.
sour˚
));

239 
	`brﬂdˇ°
(
mgr
, 
°r
);

242 i‡(
msg
.
°©us
 =
SUCCESS
 && msg.
sour˚
 =
SOURCE_WEBSERVER
 && 
run_po°upd©e
) {

243 
ùc_mesßge
 
ùc
 = {};

245 
	`ùc_po°upd©e
(&
ùc
);

248 i‡(
msg
.
öfﬁí
) {

249 
	`¢¥ötf
(
°r
, (str),

254 
msg
.
öfo
);

255 
	`brﬂdˇ°
(
mgr
, 
°r
);

258 i‡((
msg
.
cur_°ï
 !
°ï
 || msg.
cur_≥r˚¡
 !
≥r˚¡
) &&

259 
msg
.
cur_°ï
) {

260 
°ï
 = 
msg
.
cur_°ï
;

261 
≥r˚¡
 = 
msg
.
cur_≥r˚¡
;

263 
	`¢¥ötf
(
°r
, (str),

271 
msg
.
n°ïs
,

272 
msg
.
cur_°ï
,

273 
msg
.
cur_°ï
 ? msg.
cur_image
: "",

274 
msg
.
cur_≥r˚¡
);

275 
	`brﬂdˇ°
(
mgr
, 
°r
);

279  
NULL
;

280 
	}
}

285 
	$u∂ﬂd_h™dÀr_v1
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
p
)

287 
mg_°r
 *
fûíame
, *
d©a
;

288 
hâp_mesßge
 *
hm
;

289 
size_t
 
Àngth
;

290 
buf
[16];

291 
fd
;

293 
ev
) {

294 
MG_EV_HTTP_REQUEST
:

295 
hm
 = (
hâp_mesßge
 *Ë
p
;

297 
fûíame
 = 
	`mg_gë_hâp_hódî
(
hm
, "X_FILENAME");

298 i‡(
fûíame
 =
NULL
) {

299 
	`mg_hâp_£nd_îr‹
(
nc
, 403, 
NULL
);

303 
d©a
 = 
	`mg_gë_hâp_hódî
(
hm
, "Content-length");

304 i‡(
d©a
 =
NULL
 || d©a->
Àn
 >
	`ARRAY_SIZE
(
buf
)) {

305 
	`mg_hâp_£nd_îr‹
(
nc
, 403, 
NULL
);

309 
	`mem˝y
(
buf
, 
d©a
->
p
, d©a->
Àn
);

310 
buf
[
d©a
->
Àn
] = '\0';

311 
Àngth
 = 
	`°πoul
(
d©a
->
p
, 
NULL
, 10);

312 i‡(
Àngth
 == 0) {

313 
	`mg_hâp_£nd_îr‹
(
nc
, 403, 
NULL
);

317 
fd
 = 
	`ùc_ö°_°¨t_ext
(
SOURCE_WEBSERVER
, 
fûíame
->
Àn
, fûíame->
p
, 
Ál£
);

318 
	`ùc_£nd_d©a
(
fd
, (*Ë
hm
->
body
.
p
, hm->body.
Àn
);

319 
	`ùc_íd
(
fd
);

321 
	`mg_£nd_ª•⁄£_löe
(
nc
, 200,

324 
	`mg_£nd
(
nc
, "\r\n", 2);

325 
	`mg_¥ötf
(
nc
, "Ok, %.*†- %d byãs.\r\n", (Ë
fûíame
->
Àn
, fûíame->
p
, (Ë
Àngth
);

326 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

329 
	`u∂ﬂd_h™dÀr
(
nc
, 
ev
, 
p
);

332 
	}
}

334 
	$ªcovîy_°©us
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
)

336 
ùc_mesßge
 
ùc
;

337 
ªt
;

338 
buf
[4096];

340 ()
ev
;

341 ()
ev_d©a
;

343 
ªt
 = 
	`ùc_gë_°©us
(&
ùc
);

345 i‡(
ªt
) {

346 
	`mg_hâp_£nd_îr‹
(
nc
, 500, 
NULL
);

350 
	`¢¥ötf
(
buf
, (buf),

357 
ùc
.
d©a
.
°©us
.
cuºít
,

358 
	`°æí
(
ùc
.
d©a
.
°©us
.
desc
) ? ipc.data.status.desc : "",

359 
ùc
.
d©a
.
°©us
.
îr‹
,

360 
ùc
.
d©a
.
°©us
.
œ°_ªsu…
);

362 
	`mg_£nd_hód
(
nc
, 200, 
	`°æí
(
buf
),

366 
	`mg_£nd
(
nc
, 
buf
, 
	`°æí
(buf));

368 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

369 
	}
}

374 
	$u∂ﬂd_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
p
)

376 
mg_hâp_mu…ù¨t_∑π
 *
mp
;

377 
fûe_u∂ﬂd_°©e
 *
fus
;

379 
ev
) {

380 
MG_EV_HTTP_PART_BEGIN
:

381 
mp
 = (
mg_hâp_mu…ù¨t_∑π
 *Ë
p
;

383 
fus
 = (
fûe_u∂ﬂd_°©e
 *Ë
	`ˇŒoc
(1, (*fus));

384 i‡(
fus
 =
NULL
) {

385 
	`mg_hâp_£nd_îr‹
(
nc
, 500, "Out of memory");

389 
fus
->
fd
 = 
	`ùc_ö°_°¨t_ext
(
SOURCE_WEBSERVER
, 
	`°æí
(
mp
->
fûe_«me
), mp->fûe_«me, 
Ál£
);

390 i‡(
fus
->
fd
 < 0) {

391 
	`mg_hâp_£nd_îr‹
(
nc
, 500, "FailedÅo queue command");

392 
	`‰ì
(
fus
);

396 
mp
->
u£r_d©a
 = 
fus
;

400 
MG_EV_HTTP_PART_DATA
:

401 
mp
 = (
mg_hâp_mu…ù¨t_∑π
 *Ë
p
;

402 
fus
 = (
fûe_u∂ﬂd_°©e
 *Ë
mp
->
u£r_d©a
;

404 i‡(!
fus
)

407 
	`ùc_£nd_d©a
(
fus
->
fd
, (*Ë
mp
->
d©a
.
p
, mp->d©a.
Àn
);

408 
fus
->
Àn
 +
mp
->
d©a
.len;

412 
MG_EV_HTTP_PART_END
:

413 
mp
 = (
mg_hâp_mu…ù¨t_∑π
 *Ë
p
;

414 
fus
 = (
fûe_u∂ﬂd_°©e
 *Ë
mp
->
u£r_d©a
;

416 i‡(!
fus
)

419 
	`ùc_íd
(
fus
->
fd
);

421 
	`mg_£nd_ª•⁄£_löe
(
nc
, 200,

424 
	`mg_£nd
(
nc
, "\r\n", 2);

425 
	`mg_¥ötf
(
nc
, "Ok, %†- %d byãs.\r\n", 
mp
->
fûe_«me
, (Ë
fus
->
Àn
);

426 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

428 
mp
->
u£r_d©a
 = 
NULL
;

429 
	`‰ì
(
fus
);

432 
	}
}

434 
ev_h™dÀr_v1
(
mg_c⁄√˘i⁄
 
__©åibuã__
 ((
__unu£d__
)Ë*
nc
,

435 
__©åibuã__
 ((
__unu£d__
)Ë
ev
,

436 
__©åibuã__
 ((
__unu£d__
)Ë*
ev_d©a
)

440 
	$ev_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
)

442 i‡(
ev
 =
MG_EV_HTTP_REQUEST
) {

443 
	`mg_£rve_hâp
(
nc
, 
ev_d©a
, 
s_hâp_£rvî_›ts
);

445 
	}
}

447 
m⁄goo£_£âögs
(*
ñem
, 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

449 
m⁄goo£_›ti⁄s
 *
	g›ts
 = (m⁄goo£_›ti⁄†*)
d©a
;

450 
	gtmp
[128];

452 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "documít_roŸ", 
tmp
);

453 i‡(
°æí
(
tmp
)) {

454 
	g›ts
->
	groŸ
 = 
°rdup
(
tmp
);

457 
gë_fõld
(
LIBCFG_PARSER
, 
ñem
, "enable_directory_listing",

458 &
›ts
->
li°ög
);

460 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "li°íög_p‹ts", 
tmp
);

461 i‡(
°æí
(
tmp
)) {

462 
	g›ts
->
	gp‹t
 = 
°rdup
(
tmp
);

464 #i‡
MG_ENABLE_SSL


465 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "s¶_˚πifiˇã", 
tmp
);

466 i‡(
°æí
(
tmp
)) {

467 
	g›ts
->
	gs¶_˚π
 = 
°rdup
(
tmp
);

470 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "s¶_˚πifiˇã_key", 
tmp
);

471 i‡(
°æí
(
tmp
)) {

472 
	g›ts
->
	gs¶_key
 = 
°rdup
(
tmp
);

478 
gë_fõld
(
LIBCFG_PARSER
, 
ñem
, "≠i", &
›ts
->
≠i_vîsi⁄
);

479 
	g›ts
->
	g≠i_vîsi⁄
) {

480 
	gMONGOOSE_API_V1
:

481 
MONGOOSE_API_V2
:

484 
›ts
->
≠i_vîsi⁄
 = 
MONGOOSE_API_V2
;

487 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "globÆ-auth-fûe", 
tmp
);

488 i‡(
°æí
(
tmp
)) {

489 
	g›ts
->
	gglobÆ_auth_fûe
 = 
°rdup
(
tmp
);

491 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "auth-domaö", 
tmp
);

492 i‡(
°æí
(
tmp
)) {

493 
	g›ts
->
	gauth_domaö
 = 
°rdup
(
tmp
);

495 
gë_fõld
(
LIBCFG_PARSER
, 
ñem
, "run-po°upd©e", &
run_po°upd©e
);

501 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

502 {"li°ög", 
no_¨gumít
, 
NULL
, 'l'},

503 {"p‹t", 
ªquúed_¨gumít
, 
NULL
, 'p'},

504 #i‡
MG_ENABLE_SSL


505 {"s¶", 
no_¨gumít
, 
NULL
, 's'},

506 {"s¶-˚π", 
ªquúed_¨gumít
, 
NULL
, 'C'},

507 {"s¶-key", 
ªquúed_¨gumít
, 
NULL
, 'K'},

509 {"documít-roŸ", 
ªquúed_¨gumít
, 
NULL
, 'r'},

510 {"≠i-vîsi⁄", 
ªquúed_¨gumít
, 
NULL
, 'a'},

511 {"auth-domaö", 
ªquúed_¨gumít
, 
NULL
, '0'},

512 {"globÆ-auth-fûe", 
ªquúed_¨gumít
, 
NULL
, '1'},

513 {
NULL
, 0, NULL, 0}

516 
	$m⁄goo£_¥öt_hñp
()

518 
	`Ârötf
(

519 
°dout
,

523 #i‡
MG_ENABLE_SSL


532 
MG_PORT
, 
MG_ROOT
);

533 
	}
}

535 
	$°¨t_m⁄goo£
(c⁄° *
cfg‚ame
, 
¨gc
, *
¨gv
[])

537 
m⁄goo£_›ti⁄s
 
›ts
;

538 
mg_mgr
 
mgr
;

539 
mg_c⁄√˘i⁄
 *
nc
;

540 
mg_böd_›ts
 
böd_›ts
;

541 c⁄° *
s_hâp_p‹t
 = 
NULL
;

542 c⁄° *
îr_°r
;

543 #i‡
MG_ENABLE_SSL


544 
boﬁ
 
s¶
 = 
Ál£
;

546 
choi˚
 = 0;

548 
	`mem£t
(&
›ts
, 0, (opts));

550 
›ts
.
≠i_vîsi⁄
 = 
MONGOOSE_API_V2
;

553 
›ts
.
li°ög
 = 
Ál£
;

558 
run_po°upd©e
 = 
åue
;

560 i‡(
cfg‚ame
) {

561 
	`ªad_moduÀ_£âögs
(
cfg‚ame
, "web£rvî", 
m⁄goo£_£âögs
, &
›ts
);

564 
›töd
 = 1;

565 (
choi˚
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "lp:sC:K:r:a:",

566 
l⁄g_›ti⁄s
, 
NULL
)) != -1) {

567 
choi˚
) {

569 
	`‰ì
(
›ts
.
auth_domaö
);

570 
›ts
.
auth_domaö
 = 
	`°rdup
(
›èrg
);

573 
	`‰ì
(
›ts
.
globÆ_auth_fûe
);

574 
›ts
.
globÆ_auth_fûe
 = 
	`°rdup
(
›èrg
);

577 
›ts
.
li°ög
 = 
åue
;

580 
	`‰ì
(
›ts
.
p‹t
);

581 
›ts
.
p‹t
 = 
	`°rdup
(
›èrg
);

583 #i‡
MG_ENABLE_SSL


585 
s¶
 = 
åue
;

588 
	`‰ì
(
›ts
.
s¶_˚π
);

589 
›ts
.
s¶_˚π
 = 
	`°rdup
(
›èrg
);

592 
	`‰ì
(
›ts
.
s¶_key
);

593 
›ts
.
s¶_key
 = 
	`°rdup
(
›èrg
);

597 
	`‰ì
(
›ts
.
roŸ
);

598 
›ts
.
roŸ
 = 
	`°rdup
(
›èrg
);

601 
›ts
.
≠i_vîsi⁄
 = (!
	`°rcmp
(
›èrg
, "1")) ?

602 
MONGOOSE_API_V1
 :

603 
MONGOOSE_API_V2
;

607  -
EINVAL
;

611 
s_hâp_£rvî_›ts
.
documít_roŸ
 =

612 
›ts
.
roŸ
 ? o±s.roŸ : 
MG_ROOT
;

613 
s_hâp_£rvî_›ts
.
íabÀ_dúe˘‹y_li°ög
 =

614 
›ts
.
li°ög
 ? "yes" : "no";

615 
s_hâp_p‹t
 = 
›ts
.
p‹t
 ? o±s.p‹à: 
MG_PORT
;

616 
s_hâp_£rvî_›ts
.
globÆ_auth_fûe
 = 
›ts
.global_auth_file;

617 
s_hâp_£rvî_›ts
.
auth_domaö
 = 
›ts
.auth_domain;

619 
	`mem£t
(&
böd_›ts
, 0, (bind_opts));

620 
böd_›ts
.
îr‹_°rög
 = &
îr_°r
;

621 #i‡
MG_ENABLE_SSL


622 i‡(
s¶
) {

623 
böd_›ts
.
s¶_˚π
 = 
›ts
.ssl_cert;

624 
böd_›ts
.
s¶_key
 = 
›ts
.ssl_key;

628 
	`mg_mgr_öô
(&
mgr
, 
NULL
);

630 i‡(
›ts
.
≠i_vîsi⁄
 =
MONGOOSE_API_V1
)

631 
nc
 = 
	`mg_böd_›t
(&
mgr
, 
s_hâp_p‹t
, 
ev_h™dÀr_v1
, 
böd_›ts
);

633 
nc
 = 
	`mg_böd_›t
(&
mgr
, 
s_hâp_p‹t
, 
ev_h™dÀr
, 
böd_›ts
);

634 i‡(
nc
 =
NULL
) {

635 
	`Ârötf
(
°dîr
, "FaûedÅÿ°¨àM⁄goo£: %s\n", *
böd_›ts
.
îr‹_°rög
);

636 
	`exô
(
EXIT_FAILURE
);

639 
	`mg_£t_¥Ÿocﬁ_hâp_websockë
(
nc
);

640 
›ts
.
≠i_vîsi⁄
) {

641 
MONGOOSE_API_V1
:

642 
	`mg_ªgi°î_hâp_ídpoöt
(
nc
, "/h™dÀ_po°_ªque°", 
	`MG_CB
(
u∂ﬂd_h™dÀr_v1
, 
NULL
));

643 
	`mg_ªgi°î_hâp_ídpoöt
(
nc
, "/gë°©us.js⁄", 
	`MG_CB
(
ªcovîy_°©us
, 
NULL
));

645 
MONGOOSE_API_V2
:

646 
	`mg_ªgi°î_hâp_ídpoöt
(
nc
, "/ª°¨t", 
ª°¨t_h™dÀr
);

647 
	`mg_ªgi°î_hâp_ídpoöt
(
nc
, "/u∂ﬂd", 
	`MG_CB
(
u∂ﬂd_h™dÀr
, 
NULL
));

648 
	`mg_°¨t_thªad
(
brﬂdˇ°_mesßge_thªad
, &
mgr
);

649 
	`mg_°¨t_thªad
(
brﬂdˇ°_¥ogªss_thªad
, &
mgr
);

653 
	`¥ötf
("Mongoose web server version %s withÖid %d started onÖort(s) %s with webÑoot [%s]ánd API %s\n",

654 
MG_VERSION
, 
	`gëpid
(), 
s_hâp_p‹t
,

655 
s_hâp_£rvî_›ts
.
documít_roŸ
,

656 (
›ts
.
≠i_vîsi⁄
 =
MONGOOSE_API_V1
) ? "v1" : "v2");

659 
	`mg_mgr_pﬁl
(&
mgr
, 100);

661 
	`mg_mgr_‰ì
(&
mgr
);

664 
	}
}

	@swupdate/parser/parse_external.c

10 
	~<limôs.h
>

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<î∫o.h
>

15 
	~"gíî©ed/autoc⁄f.h
"

16 
	~"swupd©e.h
"

17 
	~"∑r£rs.h
"

19 #ifde‡
CONFIG_LUAEXTERNAL


20 
	~"lua.h
"

21 
	~"œuxlib.h
"

22 
	~"luÆib.h
"

23 
	~"utû.h
"

24 
	~"lua_utû.h
"

25 #i‚de‡
CONFIG_SETEXTPARSERNAME


26 
	#LUA_PARSER
 "lua-toﬁs/exç¨£r.lua"

	)

28 
	#LUA_PARSER
 (
CONFIG_EXTPARSERNAME
)

	)

31 
	$sw_≠≥nd_°ªam
(
img_ty≥
 *
img
, c⁄° *
key
,

32 c⁄° *
vÆue
)

34 c⁄° 
off£t
[] = "offset";

35 
£ek_°r
[
MAX_SEEK_STRING_SIZE
];

37 i‡(!
	`°rcmp
(
key
, "type"))

38 
	`°∫˝y
(
img
->
ty≥
, 
vÆue
,

39 (
img
->
ty≥
));

40 i‡(!
	`°rcmp
(
key
, "filename")) {

41 
	`°∫˝y
(
img
->
‚ame
, 
vÆue
,

42 (
img
->
‚ame
));

43 
img
->
ªquúed
 = 1;

45 i‡(!
	`°rcmp
(
key
, "name")) {

46 
	`°∫˝y
(
img
->
id
.
«me
, 
vÆue
,

47 (
img
->
id
.
«me
));

49 i‡(!
	`°rcmp
(
key
, "version")) {

50 
	`°∫˝y
(
img
->
id
.
vîsi⁄
, 
vÆue
,

51 (
img
->
id
.
vîsi⁄
));

53 i‡(!
	`°rcmp
(
key
, "mtdname") || !strcmp(key, "dest"))

54 
	`°∫˝y
(
img
->
∑th
, 
vÆue
,

55 (
img
->
∑th
));

56 i‡(!
	`°rcmp
(
key
, "filesystem"))

57 
	`°∫˝y
(
img
->
fûesy°em
, 
vÆue
,

58 (
img
->
fûesy°em
));

59 i‡(!
	`°rcmp
(
key
, "volume"))

60 
	`°∫˝y
(
img
->
vﬁ«me
, 
vÆue
,

61 (
img
->
vﬁ«me
));

62 i‡(!
	`°rcmp
(
key
, "device_id"))

63 
	`°∫˝y
(
img
->
devi˚
, 
vÆue
,

64 (
img
->
devi˚
));

65 i‡(!
	`°rcmp
(
key
, "device"))

66 
	`°∫˝y
(
img
->
devi˚
, 
vÆue
,

67 (
img
->
devi˚
));

68 i‡(!
	`°∫cmp
(
key
, 
off£t
, (offset))) {

69 
	`°∫˝y
(
£ek_°r
, 
vÆue
,

70 (
£ek_°r
));

72 
img
->
£ek
 = 
	`u°πouŒ
(
£ek_°r
, 0);

73 i‡(
î∫o
){

74 
	`ERROR
("offsetárgument: ustrtoull failed");

77 i‡(!
	`°rcmp
(
key
, "script"))

78 
img
->
is_s¸ùt
 = 1;

79 i‡(!
	`°rcmp
(
key
, "path"))

80 
	`°∫˝y
(
img
->
∑th
, 
vÆue
,

81 (
img
->
∑th
));

82 i‡(!
	`°rcmp
(
key
, "sha256"))

83 
	`ascii_to_hash
(
img
->
sha256
, 
vÆue
);

84 i‡(!
	`°rcmp
(
key
, "encrypted"))

85 
img
->
is_í¸y±ed
 = 1;

86 i‡(!
	`°rcmp
(
key
, "compressed"))

87 
img
->
com¥es£d
 = 1;

88 i‡(!
	`°rcmp
(
key
, "installed-directly"))

89 
img
->
ö°Æl_dúe˘ly
 = 1;

90 i‡(!
	`°rcmp
(
key
, "install-if-different"))

91 
img
->
id
.
ö°Æl_if_dif„ª¡
 = 1;

92 
	}
}

94 
	$∑r£_exã∫Æ
(
swupd©e_cfg
 *
so·w¨e
, c⁄° *
fûíame
)

96 
ªt
;

97 
n°ªams
;

98 
img_ty≥
 *
image
;

99 
hw_ty≥
 
h¨dw¨e
;

101 
lua_Sèã
 *
L
 = 
	`luaL_√w°©e
();

102 
	`luaL_›ílibs
(
L
);

104 i‡(
	`luaL_lﬂdfûe
(
L
, 
LUA_PARSER
)) {

105 
	`ERROR
("ERRORÜﬂdög %s", 
LUA_PARSER
);

106 
	`lua_˛o£
(
L
);

110 
ªt
 = 
	`lua_pˇŒ
(
L
, 0, 0, 0);

111 i‡(
ªt
) {

112 
	`LUA°ackDump
(
L
);

113 
	`ERROR
("ERRORÖª∑rög P¨£∏ö Lu®%d", 
ªt
);

118 i‡(-1 =
	`gë_hw_ªvisi⁄
(&
h¨dw¨e
))

120 
	`ERROR
("ERROR getting hwÑevision");

124 
	`lua_gëglobÆ
(
L
, "xmlparser");

127 
	`lua_push°rög
(
L
, 
fûíame
);

128 
	`lua_push°rög
(
L
, 
h¨dw¨e
.
bﬂrd«me
);

129 
	`lua_push°rög
(
L
, 
h¨dw¨e
.
ªvisi⁄
);

131 i‡(
	`lua_pˇŒ
(
L
, 3, 4, 0)) {

132 
	`LUA°ackDump
(
L
);

133 
	`ERROR
("ERROR Calling XML Parser in Lua");

134 
	`lua_˛o£
(
L
);

138 i‡(
	`lua_ty≥
(
L
, 1Ë=
LUA_TSTRING
)

139 
	`°∫˝y
(
so·w¨e
->
«me
, 
	`lua_to°rög
(
L
, 1),

140 (
so·w¨e
->
«me
));

142 i‡(
	`lua_ty≥
(
L
, 2Ë=
LUA_TSTRING
)

143 
	`°∫˝y
(
so·w¨e
->
vîsi⁄
, 
	`lua_to°rög
(
L
, 2),

144 (
so·w¨e
->
vîsi⁄
));

145 
n°ªams
 = 0;

146 
	`lua_pushnû
(
L
);

147 
	`lua_√xt
(
L
, -2) != 0) {

148 
	`¥ötf
("%s - %s\n",

149 
	`lua_ty≥«me
(
L
, 
	`lua_ty≥
(L, -2)),

150 
	`lua_ty≥«me
(
L
, 
	`lua_ty≥
(L, -1)));

152 i‡(
	`lua_ty≥
(
L
, -1Ë=
LUA_TTABLE
) {

153 
	`lua_pushnû
(
L
);

154 
image
 = (
img_ty≥
 *)
	`ˇŒoc
(1, (img_type));

155 i‡(!
image
) {

156 
	`ERROR
( "No memory: malloc failed");

157  -
ENOMEM
;

159 
	`lua_√xt
(
L
, -2) != 0) {

160 
	`sw_≠≥nd_°ªam
(
image
, 
	`lua_to°rög
(
L
, -2),

161 
	`lua_to°rög
(
L
, -1));

163 
	`lua_p›
(
L
, 1);

165 i‡(
image
->
is_s¸ùt
)

166 
	`LIST_INSERT_HEAD
(&
so·w¨e
->
s¸ùts
, 
image
, 
√xt
);

168 
	`LIST_INSERT_HEAD
(&
so·w¨e
->
images
, 
image
, 
√xt
);

169 
n°ªams
++;

173 
	`lua_p›
(
L
, 1);

176 
	`LUA°ackDump
(
L
);

178 
	`lua_˛o£
(
L
);

180 
	`TRACE
("So·w¨e: %†%s", 
so·w¨e
->
«me
, so·w¨e->
vîsi⁄
);

181 
	`LIST_FOREACH
(
image
, &
so·w¨e
->
images
, 
√xt
) {

182 
	`TRACE
("\tName: %†Ty≥: %s", 
image
->
‚ame
,

183 
image
->
ty≥
);

186  !(
n°ªams
 > 0);

187 
	}
}

190 
∑r£_exã∫Æ
(
swupd©e_cfg
 
__©åibuã__
 ((
__unu£d__
)Ë*
so·w¨e
,

191 c⁄° 
__©åibuã__
 ((
__unu£d__
)Ë*
fûíame
)

	@swupdate/parser/parser.c

8 
	~<limôs.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<uni°d.h
>

14 
	~<°dboﬁ.h
>

15 
	~<f˙é.h
>

16 
	~<î∫o.h
>

17 
	~<sys/°©.h
>

18 
	~<as£π.h
>

19 
	~"gíî©ed/autoc⁄f.h
"

20 
	~"bsdqueue.h
"

21 
	~"utû.h
"

22 
	~"swupd©e.h
"

23 
	~"∑r£lib.h
"

24 
	~"∑r£rs.h
"

25 
	~"swupd©e_di˘.h
"

26 
	~"lua_utû.h
"

28 
	#MODULE_NAME
 "PARSER"

	)

30 
	#NODEROOT
 (!
	`°æí
(
CONFIG_PARSERROOT
) ? \

31 "so·w¨e" : 
CONFIG_PARSERROOT
)

	)

33 #i‡
deföed
(
CONFIG_LIBCONFIG
Ë|| deföed(
CONFIG_JSON
)

35 
boﬁ
 
	$∑th_≠≥nd
(c⁄° **
nodes
, c⁄° *
fõld
)

37 
cou¡
 = 0;

39 
cou¡
 = 
	`cou¡_°rög_¨øy
(
nodes
);

41 i‡(
cou¡
 >
MAX_PARSED_NODES
)

42  
Ál£
;

44 
nodes
[
cou¡
++] = 
fõld
;

45 
nodes
[
cou¡
] = 
NULL
;

47  
åue
;

48 
	}
}

50 *
	$föd_node
(
∑r£πy≥
 
p
, *
roŸ
, c⁄° *
fõld
,

51 
swupd©e_cfg
 *
swcfg
)

54 
hw_ty≥
 *
h¨dw¨e
;

55 c⁄° **
nodes
;

56 
i
;

58 i‡(!
fõld
)

59  
NULL
;

61 
h¨dw¨e
 = &
swcfg
->
hw
;

63 
nodes
 = (c⁄° **)
	`ˇŒoc
(
MAX_PARSED_NODES
, (*nodes));

65 
i
 = 0; i < 4; i++) {

66 
nodes
[0] = 
NULL
;

67 
i
) {

69 i‡(
	`°æí
(
swcfg
->
ru¬ög_mode
Ë&& såÀn(swcfg->
so·w¨e_£t
) &&

70 
	`°æí
(
h¨dw¨e
->
bﬂrd«me
)) {

71 
nodes
[0] = 
NODEROOT
;

72 
nodes
[1] = 
h¨dw¨e
->
bﬂrd«me
;

73 
nodes
[2] = 
swcfg
->
so·w¨e_£t
;

74 
nodes
[3] = 
swcfg
->
ru¬ög_mode
;

75 
nodes
[4] = 
NULL
;

80 i‡(
	`°æí
(
swcfg
->
ru¬ög_mode
Ë&& såÀn(swcfg->
so·w¨e_£t
)) {

81 
nodes
[0] = 
NODEROOT
;

82 
nodes
[1] = 
swcfg
->
so·w¨e_£t
;

83 
nodes
[2] = 
swcfg
->
ru¬ög_mode
;

84 
nodes
[3] = 
NULL
;

89 i‡(
	`°æí
(
h¨dw¨e
->
bﬂrd«me
)) {

90 
nodes
[0] = 
NODEROOT
;

91 
nodes
[1] = 
h¨dw¨e
->
bﬂrd«me
;

92 
nodes
[2] = 
NULL
;

97 
nodes
[0] = 
NODEROOT
;

98 
nodes
[1] = 
NULL
;

106 i‡(!
nodes
[0])

115 i‡(
	`föd_roŸ
(
p
, 
roŸ
, 
nodes
)) {

116 *
node
 = 
NULL
;

117 i‡(!
	`∑th_≠≥nd
(
nodes
, 
fõld
))

118  
NULL
;

119 
node
 = 
	`föd_roŸ
(
p
, 
roŸ
, 
nodes
);

121 i‡(
node
) {

122 
	`‰ì
(
nodes
);

123  
node
;

128 
	`‰ì
(
nodes
);

130  
NULL
;

131 
	}
}

133 
boﬁ
 
	$gë_comm⁄_fõlds
(
∑r£πy≥
 
p
, *
cfg
, 
swupd©e_cfg
 *
swcfg
)

136 *
£âög
;

138 if((
£âög
 = 
	`föd_node
(
p
, 
cfg
, "vîsi⁄", 
swcfg
)Ë=
NULL
) {

139 
	`ERROR
("Missing version in configuration file");

140  
Ál£
;

143 
	`GET_FIELD_STRING
(
p
, 
£âög
, 
NULL
, 
swcfg
->
vîsi⁄
);

144 
	`TRACE
("Vîsi⁄ %s", 
swcfg
->
vîsi⁄
);

146 if((
£âög
 = 
	`föd_node
(
p
, 
cfg
, "des¸ùti⁄", 
swcfg
)Ë!
NULL
) {

147 
	`GET_FIELD_STRING
(
p
, 
£âög
, 
NULL
, 
swcfg
->
des¸ùti⁄
);

148 
	`TRACE
("Des¸ùti⁄ %s", 
swcfg
->
des¸ùti⁄
);

151  
åue
;

152 
	}
}

154 
	$add_¥›îtõs_cb
(c⁄° *
«me
, c⁄° *
vÆue
, *
d©a
)

156 
img_ty≥
 *
image
 = (img_ty≥ *)
d©a
;

158 i‡(!
«me
 || !
vÆue
)

161 
	`TRACE
("\t\tPr›îty %s: %s", 
«me
, 
vÆue
);

162 i‡(
	`di˘_ö£π_vÆue
(&
image
->
¥›îtõs
, (*)
«me
, (*)
vÆue
))

163 
	`ERROR
("PropertyÇot stored, skipping...");

164 
	}
}

166 
	$add_¥›îtõs
(
∑r£πy≥
 
p
, *
node
, 
img_ty≥
 *
image
)

168 *
¥›îtõs
;

170 
¥›îtõs
 = 
	`gë_chûd
(
p
, 
node
, "properties");

171 i‡(
¥›îtõs
) {

172 
	`TRACE
("FoundÖr›îtõ†f‹ %s:", 
image
->
‚ame
);

174 
	`ôî©e_fõld
(
p
, 
¥›îtõs
, 
add_¥›îtõs_cb
, 
image
);

176 
	}
}

178 #ifde‡
CONFIG_HW_COMPATIBILITY


182 
	$∑r£_hw_com∑tibûôy
(
∑r£πy≥
 
p
, *
cfg
, 
swupd©e_cfg
 *
swcfg
)

184 *
£âög
, *
hw
;

185 
cou¡
, 
i
;

186 
s
[
SWUPDATE_GENERAL_STRING_SIZE
];

187 
hw_ty≥
 *
hwªv
;

189 
£âög
 = 
	`föd_node
(
p
, 
cfg
, "h¨dw¨e-com∑tibûôy", 
swcfg
);

190 i‡(
£âög
 =
NULL
) {

191 
	`ERROR
("HW compatibilityÇot found");

195 
cou¡
 = 
	`gë_¨øy_Àngth
(
p
, 
£âög
);

197 
i
 = 0; i < 
cou¡
; ++i) {

198 
hw
 = 
	`gë_ñem_‰om_idx
(
p
, 
£âög
, 
i
);

200 i‡(!
hw
)

203 
s
[0] = '\0';

204 
	`GET_FIELD_STRING
(
p
, 
hw
, 
NULL
, 
s
);

205 i‡(!
	`°æí
(
s
))

208 
hwªv
 = (
hw_ty≥
 *)
	`ˇŒoc
(1, (hw_type));

209 i‡(!
hwªv
) {

210 
	`ERROR
("No memory: malloc failed");

214 
	`°∫˝y
(
hwªv
->
ªvisi⁄
, 
s
, (hwrev->revision));

215 
	`LIST_INSERT_HEAD
(&
swcfg
->
h¨dw¨e
, 
hwªv
, 
√xt
);

216 
	`TRACE
("Ac˚±ed Hw Revisi⁄ : %s", 
hwªv
->
ªvisi⁄
);

220 
	}
}

222 
∑r£_hw_com∑tibûôy
(
∑r£πy≥
 
__©åibuã__
 ((
__unu£d__
))
p
,

223 
__©åibuã__
 ((
__unu£d__
)Ë*
cfg
,

224 
swupd©e_cfg
 
__©åibuã__
 ((
__unu£d__
)Ë*
swcfg
)

230 
	$run_embs¸ùt
(
∑r£πy≥
 
p
, *
ñem
, 
img_ty≥
 *
img
,

231 
lua_Sèã
 *
L
, c⁄° *
embs¸ùt
)

233 c⁄° *
embf˙
;

234 i‡(!
embs¸ùt
)

236 i‡(!
	`exi°_fõld_°rög
(
p
, 
ñem
, "hook"))

238 
embf˙
 = 
	`gë_fõld_°rög
(
p
, 
ñem
, "hook");

239  
	`lua_∑r£r_‚
(
L
, 
embf˙
, 
img
);

240 
	}
}

242 
	$∑r£_comm⁄_©åibuãs
(
∑r£πy≥
 
p
, *
ñem
, 
img_ty≥
 *
image
)

244 
£ek_°r
[
MAX_SEEK_STRING_SIZE
];

250 
£ek_°r
[0] = '\0';

252 
	`GET_FIELD_STRING
(
p
, 
ñem
, "«me", 
image
->
id
.
«me
);

253 
	`GET_FIELD_STRING
(
p
, 
ñem
, "vîsi⁄", 
image
->
id
.
vîsi⁄
);

254 
	`GET_FIELD_STRING
(
p
, 
ñem
, "fûíame", 
image
->
‚ame
);

255 
	`GET_FIELD_STRING
(
p
, 
ñem
, "∑th", 
image
->
∑th
);

256 
	`GET_FIELD_STRING
(
p
, 
ñem
, "vﬁume", 
image
->
vﬁ«me
);

257 
	`GET_FIELD_STRING
(
p
, 
ñem
, "devi˚", 
image
->
devi˚
);

258 
	`GET_FIELD_STRING
(
p
, 
ñem
, "mtd«me", 
image
->
∑th
);

259 
	`GET_FIELD_STRING
(
p
, 
ñem
, "fûesy°em", 
image
->
fûesy°em
);

260 
	`GET_FIELD_STRING
(
p
, 
ñem
, "ty≥", 
image
->
ty≥
);

261 
	`GET_FIELD_STRING
(
p
, 
ñem
, "off£t", 
£ek_°r
);

262 
	`GET_FIELD_STRING
(
p
, 
ñem
, "d©a", 
image
->
ty≥_d©a
);

263 
	`gë_hash_vÆue
(
p
, 
ñem
, 
image
->
sha256
);

266 
image
->
£ek
 = 
	`u°πouŒ
(
£ek_°r
, 0);

267 i‡(
î∫o
){

268 
	`ERROR
("offsetárgument: ustrtoull failed");

272 
	`gë_fõld
(
p
, 
ñem
, "com¥es£d", &
image
->
com¥es£d
);

273 
	`gë_fõld
(
p
, 
ñem
, "ö°ÆÀd-dúe˘ly", &
image
->
ö°Æl_dúe˘ly
);

274 
	`gë_fõld
(
p
, 
ñem
, "¥e£rve-©åibuãs", &
image
->
¥e£rve_©åibuãs
);

275 
	`gë_fõld
(
p
, 
ñem
, "ö°Æl-if-dif„ª¡", &
image
->
id
.
ö°Æl_if_dif„ª¡
);

276 
	`gë_fõld
(
p
, 
ñem
, "í¸y±ed", &
image
->
is_í¸y±ed
);

279 
	}
}

281 
	$∑r£_∑πôi⁄s
(
∑r£πy≥
 
p
, *
cfg
, 
swupd©e_cfg
 *
swcfg
)

283 *
£âög
, *
ñem
;

284 
cou¡
, 
i
;

285 
img_ty≥
 *
∑πôi⁄
;

287 
£âög
 = 
	`föd_node
(
p
, 
cfg
, "∑πôi⁄s", 
swcfg
);

289 i‡(
£âög
 =
NULL
)

292 
cou¡
 = 
	`gë_¨øy_Àngth
(
p
, 
£âög
);

297 
i
 = (
cou¡
 - 1); i >= 0; --i) {

298 
ñem
 = 
	`gë_ñem_‰om_idx
(
p
, 
£âög
, 
i
);

300 i‡(!
ñem
)

303 
∑πôi⁄
 = (
img_ty≥
 *)
	`ˇŒoc
(1, (img_type));

304 i‡(!
∑πôi⁄
) {

305 
	`ERROR
("No memory: malloc failed");

306  -
ENOMEM
;

308 i‡(
	`∑r£_comm⁄_©åibuãs
(
p
, 
ñem
, 
∑πôi⁄
) < 0) {

309 
	`‰ì_image
(
∑πôi⁄
);

312 
	`GET_FIELD_STRING
(
p
, 
ñem
, "«me", 
∑πôi⁄
->
vﬁ«me
);

314 i‡(!
	`°æí
(
∑πôi⁄
->
ty≥
))

315 
	`°∫˝y
(
∑πôi⁄
->
ty≥
, "ubipartition", (partition->type));

316 
∑πôi⁄
->
is_∑πôi⁄î
 = 1;

318 
∑πôi⁄
->
¥ovided
 = 1;

320 i‡(!
	`°æí
(
∑πôi⁄
->
vﬁ«me
Ë|| !°æí’¨tôi⁄->
devi˚
)) {

321 
	`ERROR
("Partition incompleted in description file");

322 
	`‰ì_image
(
∑πôi⁄
);

326 
	`gë_fõld
(
p
, 
ñem
, "size", &
∑πôi⁄
->
∑πsize
);

328 
	`TRACE
("Partition: %sÇew size %lld bytes",

329 
∑πôi⁄
->
vﬁ«me
,

330 
∑πôi⁄
->
∑πsize
);

332 
	`LIST_INSERT_HEAD
(&
swcfg
->
images
, 
∑πôi⁄
, 
√xt
);

336 
	}
}

338 
	$∑r£_s¸ùts
(
∑r£πy≥
 
p
, *
cfg
, 
swupd©e_cfg
 *
swcfg
, 
lua_Sèã
 *
L
)

340 *
£âög
, *
ñem
;

341 
cou¡
, 
i
, 
skù
;

342 
img_ty≥
 *
s¸ùt
;

344 
£âög
 = 
	`föd_node
(
p
, 
cfg
, "s¸ùts", 
swcfg
);

346 i‡(
£âög
 =
NULL
)

349 
cou¡
 = 
	`gë_¨øy_Àngth
(
p
, 
£âög
);

354 
i
 = (
cou¡
 - 1); i >= 0; --i) {

355 
ñem
 = 
	`gë_ñem_‰om_idx
(
p
, 
£âög
, 
i
);

357 i‡(!
ñem
)

363 if(!(
	`exi°_fõld_°rög
(
p
, 
ñem
, "filename"))) {

364 
	`TRACE
("ScriptÉntry without filename field, skipping..");

368 
s¸ùt
 = (
img_ty≥
 *)
	`ˇŒoc
(1, (img_type));

369 i‡(!
s¸ùt
) {

370 
	`ERROR
( "No memory: malloc failed");

371  -
ENOMEM
;

374 i‡(
	`∑r£_comm⁄_©åibuãs
(
p
, 
ñem
, 
s¸ùt
) < 0) {

375 
	`‰ì_image
(
s¸ùt
);

380 i‡(!
	`°æí
(
s¸ùt
->
ty≥
)) {

381 
	`°r˝y
(
s¸ùt
->
ty≥
, "lua");

383 
s¸ùt
->
is_s¸ùt
 = 1;

385 
	`add_¥›îtõs
(
p
, 
ñem
, 
s¸ùt
);

387 
skù
 = 
	`run_embs¸ùt
(
p
, 
ñem
, 
s¸ùt
, 
L
, 
swcfg
->
embs¸ùt
);

388 i‡(
skù
 < 0) {

389 
	`‰ì_image
(
s¸ùt
);

393 
	`TRACE
("%s Script: %s",

394 
skù
 ? "Skip" : "Found",

395 
s¸ùt
->
‚ame
);

397 i‡(
skù
) {

398 
	`‰ì_image
(
s¸ùt
);

402 
	`LIST_INSERT_HEAD
(&
swcfg
->
s¸ùts
, 
s¸ùt
, 
√xt
);

405 
	}
}

407 
	$∑r£_boŸlﬂdî
(
∑r£πy≥
 
p
, *
cfg
, 
swupd©e_cfg
 *
swcfg
)

409 *
£âög
, *
ñem
;

410 
cou¡
, 
i
;

411 
img_ty≥
 *
s¸ùt
;

412 
«me
[32];

413 
vÆue
[255];

415 
£âög
 = 
	`föd_node
(
p
, 
cfg
, "uboŸ", 
swcfg
);

417 i‡(
£âög
 =
NULL
) {

418 
£âög
 = 
	`föd_node
(
p
, 
cfg
, "boŸív", 
swcfg
);

419 i‡(
£âög
 =
NULL
)

423 
cou¡
 = 
	`gë_¨øy_Àngth
(
p
, 
£âög
);

424 
i
 = (
cou¡
 - 1); i >= 0; --i) {

425 
ñem
 = 
	`gë_ñem_‰om_idx
(
p
, 
£âög
, 
i
);

427 i‡(!
ñem
)

433 if(
	`exi°_fõld_°rög
(
p
, 
ñem
, "name")) {

438 
	`GET_FIELD_STRING
(
p
, 
ñem
, "«me", 
«me
);

439 
	`GET_FIELD_STRING
(
p
, 
ñem
, "vÆue", 
vÆue
);

440 
	`di˘_£t_vÆue
(&
swcfg
->
boŸlﬂdî
, 
«me
, 
vÆue
);

441 
	`TRACE
("Bootloader var: %s = %s",

442 
«me
,

443 
	`di˘_gë_vÆue
(&
swcfg
->
boŸlﬂdî
, 
«me
));

450 if(!(
	`exi°_fõld_°rög
(
p
, 
ñem
, "filename"))) {

451 
	`TRACE
("bootloaderÉntry isÇeitherá scriptÇorÇame/value.");

454 
s¸ùt
 = (
img_ty≥
 *)
	`ˇŒoc
(1, (img_type));

455 i‡(!
s¸ùt
) {

456 
	`ERROR
( "No memory: malloc failed");

457  -
ENOMEM
;

460 i‡(
	`∑r£_comm⁄_©åibuãs
(
p
, 
ñem
, 
s¸ùt
) < 0) {

461 
	`‰ì_image
(
s¸ùt
);

465 
s¸ùt
->
is_s¸ùt
 = 1;

467 
	`LIST_INSERT_HEAD
(&
swcfg
->
boŸs¸ùts
, 
s¸ùt
, 
√xt
);

469 
	`TRACE
("Found U-Boot Script: %s",

470 
s¸ùt
->
‚ame
);

474 
	}
}

476 
	$∑r£_images
(
∑r£πy≥
 
p
, *
cfg
, 
swupd©e_cfg
 *
swcfg
, 
lua_Sèã
 *
L
)

478 *
£âög
, *
ñem
;

479 
cou¡
, 
i
, 
skù
;

480 
img_ty≥
 *
image
;

482 
£âög
 = 
	`föd_node
(
p
, 
cfg
, "images", 
swcfg
);

484 i‡(
£âög
 =
NULL
)

487 
cou¡
 = 
	`gë_¨øy_Àngth
(
p
, 
£âög
);

489 
i
 = (
cou¡
 - 1); i >= 0; --i) {

490 
ñem
 = 
	`gë_ñem_‰om_idx
(
p
, 
£âög
, 
i
);

492 i‡(!
ñem
)

498 if(!(
	`exi°_fõld_°rög
(
p
, 
ñem
, "filename"))) {

499 
	`TRACE
("ImageÉntry without filename field, skipping..");

503 
image
 = (
img_ty≥
 *)
	`ˇŒoc
(1, (img_type));

504 i‡(!
image
) {

505 
	`ERROR
( "No memory: malloc failed");

506  -
ENOMEM
;

509 i‡(
	`∑r£_comm⁄_©åibuãs
(
p
, 
ñem
, 
image
) < 0) {

510 
	`‰ì_image
(
image
);

515 i‡(!
	`°æí
(
image
->
ty≥
)) {

516 i‡(
	`°æí
(
image
->
vﬁ«me
))

517 
	`°r˝y
(
image
->
ty≥
, "ubivol");

518 i‡(
	`°æí
(
image
->
devi˚
))

519 
	`°r˝y
(
image
->
ty≥
, "raw");

522 
	`add_¥›îtõs
(
p
, 
ñem
, 
image
);

524 
image
->
boŸlﬂdî
 = &
swcfg
->bootloader;

526 
skù
 = 
	`run_embs¸ùt
(
p
, 
ñem
, 
image
, 
L
, 
swcfg
->
embs¸ùt
);

527 i‡(
skù
 < 0) {

528 
	`‰ì_image
(
image
);

532 
	`TRACE
("%s %sImage%s%s%s%s: %s in %s : %s for handler %s%s%s",

533 
skù
 ? "Skip" : "Found",

534 
image
->
com¥es£d
 ? "compressed " : "",

535 
	`°æí
(
image
->
id
.
«me
) ? " " : "", image->id.name,

536 
	`°æí
(
image
->
id
.
vîsi⁄
) ? " " : "", image->id.version,

537 
image
->
‚ame
,

538 
	`°æí
(
image
->
vﬁ«me
) ? "volume" : "device",

539 
	`°æí
(
image
->
vﬁ«me
) ? image->volname :

540 
	`°æí
(
image
->
∑th
Ë? image->∑th : image->
devi˚
,

541 
	`°æí
(
image
->
ty≥
) ? image->type : "NOT FOUND",

542 
image
->
ö°Æl_dúe˘ly
 ? " (installed from stream)" : "",

543 (
	`°æí
(
image
->
id
.
«me
Ë&& image->id.
ö°Æl_if_dif„ª¡
) ?

547 i‡(
skù
) {

548 
	`‰ì_image
(
image
);

552 
	`LIST_INSERT_HEAD
(&
swcfg
->
images
, 
image
, 
√xt
);

556 
	}
}

558 
	$∑r£_fûes
(
∑r£πy≥
 
p
, *
cfg
, 
swupd©e_cfg
 *
swcfg
, 
lua_Sèã
 *
L
)

560 *
£âög
, *
ñem
;

561 
cou¡
, 
i
, 
skù
;

562 
img_ty≥
 *
fûe
;

564 
£âög
 = 
	`föd_node
(
p
, 
cfg
, "fûes", 
swcfg
);

566 i‡(
£âög
 =
NULL
)

569 
cou¡
 = 
	`gë_¨øy_Àngth
(
p
, 
£âög
);

571 
i
 = (
cou¡
 - 1); i >= 0; --i) {

572 
ñem
 = 
	`gë_ñem_‰om_idx
(
p
, 
£âög
, 
i
);

574 i‡(!
ñem
)

580 if(!(
	`exi°_fõld_°rög
(
p
, 
ñem
, "filename"))) {

581 
	`TRACE
("FileÉntry without filename field, skipping..");

585 
fûe
 = (
img_ty≥
 *)
	`ˇŒoc
(1, (img_type));

586 i‡(!
fûe
) {

587 
	`ERROR
( "No memory: malloc failed");

588  -
ENOMEM
;

591 i‡(
	`∑r£_comm⁄_©åibuãs
(
p
, 
ñem
, 
fûe
) < 0) {

592 
	`‰ì_image
(
fûe
);

596 i‡(!
	`°æí
(
fûe
->
ty≥
)) {

597 
	`°r˝y
(
fûe
->
ty≥
, "rawfile");

600 
	`add_¥›îtõs
(
p
, 
ñem
, 
fûe
);

602 
fûe
->
boŸlﬂdî
 = &
swcfg
->bootloader;

604 
skù
 = 
	`run_embs¸ùt
(
p
, 
ñem
, 
fûe
, 
L
, 
swcfg
->
embs¸ùt
);

605 i‡(
skù
 < 0) {

606 
	`‰ì_image
(
fûe
);

610 
	`TRACE
("%s %sFile%s%s%s%s: %s --> %s (%s)%s",

611 
skù
 ? "Skip" : "Found",

612 
fûe
->
com¥es£d
 ? "compressed " : "",

613 
	`°æí
(
fûe
->
id
.
«me
) ? " " : "", file->id.name,

614 
	`°æí
(
fûe
->
id
.
vîsi⁄
) ? " " : "", file->id.version,

615 
fûe
->
‚ame
,

616 
fûe
->
∑th
,

617 
	`°æí
(
fûe
->
devi˚
) ? file->device : "ROOTFS",

618 (
	`°æí
(
fûe
->
id
.
«me
Ë&& fûe->id.
ö°Æl_if_dif„ª¡
) ?

621 i‡(
skù
) {

622 
	`‰ì_image
(
fûe
);

626 
	`LIST_INSERT_HEAD
(&
swcfg
->
images
, 
fûe
, 
√xt
);

630 
	}
}

632 
	$∑r£r
(
∑r£πy≥
 
p
, *
cfg
, 
swupd©e_cfg
 *
swcfg
)

634 *
s¸ùäode
;

635 
lua_Sèã
 *
L
 = 
NULL
;

636 
ªt
;

638 
swcfg
->
embs¸ùt
 = 
NULL
;

639 
s¸ùäode
 = 
	`föd_node
(
p
, 
cfg
, "embedded-s¸ùt", 
swcfg
);

640 i‡(
s¸ùäode
) {

641 
	`TRACE
("Getting script");

642 
swcfg
->
embs¸ùt
 = 
	`gë_fõld_°rög
(
p
, 
s¸ùäode
, 
NULL
);

645 i‡(
swcfg
->
embs¸ùt
) {

646 
	`TRACE
("Found Lu®So·w¨e:\n%s", 
swcfg
->
embs¸ùt
);

647 
L
 = 
	`lua_∑r£r_öô
(
swcfg
->
embs¸ùt
, &swcfg->
boŸlﬂdî
);

648 i‡(!
L
) {

649 
	`ERROR
("RequiredÉmbedded scriptÅhat cannot beÜoaded");

653 
	`gë_hw_ªvisi⁄
(&
swcfg
->
hw
);

656 
ªt
 = 
	`∑r£_hw_com∑tibûôy
(
p
, 
cfg
, 
swcfg
) ||

657 
	`∑r£_fûes
(
p
, 
cfg
, 
swcfg
, 
L
) ||

658 
	`∑r£_images
(
p
, 
cfg
, 
swcfg
, 
L
) ||

659 
	`∑r£_s¸ùts
(
p
, 
cfg
, 
swcfg
, 
L
) ||

660 
	`∑r£_boŸlﬂdî
(
p
, 
cfg
, 
swcfg
);

666 
	`∑r£_∑πôi⁄s
(
p
, 
cfg
, 
swcfg
);

668 i‡(
L
)

669 
	`lua_∑r£r_exô
(
L
);

671 i‡(
	`LIST_EMPTY
(&
swcfg
->
images
) &&

672 
	`LIST_EMPTY
(&
swcfg
->
s¸ùts
) &&

673 
	`LIST_EMPTY
(&
swcfg
->
boŸlﬂdî
)) {

674 
	`ERROR
("FoundÇothingÅo install");

678  
ªt
;

679 
	}
}

682 #ifde‡
CONFIG_LIBCONFIG


683 
	$∑r£_cfg
 (
swupd©e_cfg
 *
swcfg
, c⁄° *
fûíame
)

685 
c⁄fig_t
 
cfg
;

686 
∑r£πy≥
 
p
 = 
LIBCFG_PARSER
;

687 
ªt
;

689 
	`mem£t
(&
cfg
, 0, (cfg));

690 
	`c⁄fig_öô
(&
cfg
);

693 if(
	`c⁄fig_ªad_fûe
(&
cfg
, 
fûíame
Ë!
CONFIG_TRUE
) {

694 
	`¥ötf
("%†", 
	`c⁄fig_îr‹_fûe
(&
cfg
));

695 
	`¥ötf
("%d ", 
	`c⁄fig_îr‹_löe
(&
cfg
));

696 
	`¥ötf
("%†", 
	`c⁄fig_îr‹_ãxt
(&
cfg
));

698 
	`Ârötf
(
°dîr
, "%s:%d - %s\n", 
	`c⁄fig_îr‹_fûe
(&
cfg
),

699 
	`c⁄fig_îr‹_löe
(&
cfg
), 
	`c⁄fig_îr‹_ãxt
(&cfg));

700 
	`c⁄fig_de°roy
(&
cfg
);

701 
	`ERROR
(" ..exiting");

705 i‡(!
	`gë_comm⁄_fõlds
(
p
, &
cfg
, 
swcfg
))

708 
ªt
 = 
	`∑r£r
(
p
, &
cfg
, 
swcfg
);

710 
	`c⁄fig_de°roy
(&
cfg
);

712  
ªt
;

713 
	}
}

715 
∑r£_cfg
 (
swupd©e_cfg
 
__©åibuã__
 ((
__unu£d__
)Ë*
swcfg
,

716 c⁄° 
__©åibuã__
 ((
__unu£d__
)Ë*
fûíame
)

722 #ifde‡
CONFIG_JSON


723 
	$∑r£_js⁄
(
swupd©e_cfg
 *
swcfg
, c⁄° *
fûíame
)

725 
fd
, 
ªt
;

726 
°©
 
°buf
;

727 
size
;

728 *
°rög
;

729 
js⁄_obje˘
 *
cfg
;

730 
∑r£πy≥
 
p
 = 
JSON_PARSER
;

733 
ªt
 = 
	`°©
(
fûíame
, &
°buf
);

735 i‡(
ªt
)

736  -
EBADF
;

738 
size
 = 
°buf
.
°_size
;

739 
°rög
 = (*)
	`mÆloc
(
size
);

740 i‡(!
°rög
)

741  -
ENOMEM
;

743 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

744 i‡(
fd
 < 0) {

745 
	`‰ì
(
°rög
);

746  -
EBADF
;

749 
ªt
 = 
	`ªad
(
fd
, 
°rög
, 
size
);

750 
	`˛o£
(
fd
);

752 
cfg
 = 
	`js⁄_tokíî_∑r£
(
°rög
);

753 i‡(!
cfg
) {

754 
	`ERROR
("JSON File corrupted");

755 
	`‰ì
(
°rög
);

759 i‡(!
	`gë_comm⁄_fõlds
(
p
, 
cfg
, 
swcfg
)) {

760 
	`‰ì
(
°rög
);

764 
ªt
 = 
	`∑r£r
(
p
, 
cfg
, 
swcfg
);

766 
	`js⁄_obje˘_put
(
cfg
);

768 
	`‰ì
(
°rög
);

770  
ªt
;

771 
	}
}

773 
∑r£_js⁄
(
swupd©e_cfg
 
__©åibuã__
 ((
__unu£d__
)Ë*
swcfg
,

774 c⁄° 
__©åibuã__
 ((
__unu£d__
)Ë*
fûíame
)

	@swupdate/scripts/basic/fixdep.c

106 
	~<sys/ty≥s.h
>

107 
	~<sys/°©.h
>

108 
	~<sys/mm™.h
>

109 
	~<uni°d.h
>

110 
	~<f˙é.h
>

111 
	~<°rög.h
>

112 
	~<°dlib.h
>

113 
	~<°dio.h
>

114 
	~<limôs.h
>

115 
	~<˘y≥.h
>

116 
	~<¨∑/öë.h
>

118 
	#INT_CONF
 
	`¡ohl
(0x434f4e46)

	)

119 
	#INT_ONFI
 
	`¡ohl
(0x4f4e4649)

	)

120 
	#INT_NFIG
 
	`¡ohl
(0x4e464947)

	)

121 
	#INT_FIG_
 
	`¡ohl
(0x4649475f)

	)

123 *
	gèrgë
;

124 *
	gdïfûe
;

125 *
	gcmdlöe
;

127 
	$ußge
()

129 
	`Ârötf
(
°dîr
, "Usage: fixdep <depfile> <target> <cmdline>\n");

130 
	`exô
(1);

131 
	}
}

136 
	$¥öt_cmdlöe
()

138 
	`¥ötf
("cmd_%†:%s\n\n", 
èrgë
, 
cmdlöe
);

139 
	}
}

141 
	sôem
 {

142 
ôem
 *
	m√xt
;

143 
	mÀn
;

144 
	mhash
;

145 
	m«me
[0];

148 
	#HASHSZ
 256

	)

149 
ôem
 *
	ghashèb
[
HASHSZ
];

151 
	$°rhash
(c⁄° *
°r
, 
sz
)

154 
i
, 
hash
 = 2166136261U;

156 
i
 = 0; i < 
sz
; i++)

157 
hash
 = (hash ^ 
°r
[
i
]) * 0x01000193;

158  
hash
;

159 
	}
}

164 
	$is_deföed_c⁄fig
(c⁄° *
«me
, 
Àn
, 
hash
)

166 
ôem
 *
aux
;

168 
aux
 = 
hashèb
[
hash
 % 
HASHSZ
];áux;áux =áux->
√xt
) {

169 i‡(
aux
->
hash
 =hash &&áux->
Àn
 ==Üen &&

170 
	`memcmp
(
aux
->
«me
,Çame, 
Àn
) == 0)

174 
	}
}

179 
	$deföe_c⁄fig
(c⁄° *
«me
, 
Àn
, 
hash
)

181 
ôem
 *
aux
 = 
	`mÆloc
((*auxË+ 
Àn
);

183 i‡(!
aux
) {

184 
	`≥º‹
("fixdep:malloc");

185 
	`exô
(1);

187 
	`mem˝y
(
aux
->
«me
,Çame, 
Àn
);

188 
aux
->
Àn
 =Üen;

189 
aux
->
hash
 = hash;

190 
aux
->
√xt
 = 
hashèb
[
hash
 % 
HASHSZ
];

191 
hashèb
[
hash
 % 
HASHSZ
] = 
aux
;

192 
	}
}

197 
	$˛ór_c⁄fig
()

199 
ôem
 *
aux
, *
√xt
;

200 
i
;

202 
i
 = 0; i < 
HASHSZ
; i++) {

203 
aux
 = 
hashèb
[
i
];áux;áux = 
√xt
) {

204 
√xt
 = 
aux
->next;

205 
	`‰ì
(
aux
);

207 
hashèb
[
i
] = 
NULL
;

209 
	}
}

214 
	$u£_c⁄fig
(c⁄° *
m
, 
¶í
)

216 
hash
 = 
	`°rhash
(
m
, 
¶í
);

217 
c
, 
i
;

219 i‡(
	`is_deföed_c⁄fig
(
m
, 
¶í
, 
hash
))

222 
	`deföe_c⁄fig
(
m
, 
¶í
, 
hash
);

224 
	`¥ötf
(" $(wildcard include/config/");

225 
i
 = 0; i < 
¶í
; i++) {

226 
c
 = 
m
[
i
];

227 i‡(
c
 == '_')

228 
c
 = '/';

230 
c
 = 
	`tﬁowî
(c);

231 
	`putch¨
(
c
);

233 
	`¥ötf
(".h) \\\n");

234 
	}
}

236 
	$∑r£_c⁄fig_fûe
(c⁄° *
m≠
, 
size_t
 
Àn
)

238 c⁄° *
íd
 = (c⁄° *Ë(
m≠
 + 
Àn
);

240 c⁄° *
m
 = (c⁄° *Ë
m≠
 + 1;

241 c⁄° *
p
, *
q
;

243 ; 
m
 < 
íd
; m++) {

244 i‡(*
m
 =
INT_CONF
Ë{ 
p
 = (*Ëm ; 
c⁄f
; }

245 i‡(*
m
 =
INT_ONFI
Ë{ 
p
 = (*Ëm-1; 
c⁄f
; }

246 i‡(*
m
 =
INT_NFIG
Ë{ 
p
 = (*Ëm-2; 
c⁄f
; }

247 i‡(*
m
 =
INT_FIG_
Ë{ 
p
 = (*Ëm-3; 
c⁄f
; }

249 
c⁄f
:

250 i‡(
p
 > 
m≠
 + 
Àn
 - 7)

252 i‡(
	`memcmp
(
p
, "CONFIG_", 7))

254 
q
 = 
p
 + 7; q < 
m≠
 + 
Àn
; q++) {

255 i‡(!(
	`iß um
(*
q
) || *q == '_'))

256 
found
;

260 
found
:

261 i‡(!
	`memcmp
(
q
 - 7, "_MODULE", 7))

262 
q
 -= 7;

263 if–(
q
-
p
-7) < 0 )

265 
	`u£_c⁄fig
(
p
+7, 
q
-p-7);

267 
	}
}

270 
	$°ºcmp
(*
s
, *
sub
)

272 
¶í
 = 
	`°æí
(
s
);

273 
subÀn
 = 
	`°æí
(
sub
);

275 i‡(
subÀn
 > 
¶í
)

278  
	`memcmp
(
s
 + 
¶í
 - 
subÀn
, 
sub
, sublen);

279 
	}
}

281 
	$do_c⁄fig_fûe
(c⁄° *
fûíame
)

283 
°©
 
°
;

284 
fd
;

285 *
m≠
;

287 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

288 i‡(
fd
 < 0) {

289 
	`Ârötf
(
°dîr
, "fixdep:Érror opening config file: ");

290 
	`≥º‹
(
fûíame
);

291 
	`exô
(2);

293 
	`f°©
(
fd
, &
°
);

294 i‡(
°
.
°_size
 == 0) {

295 
	`˛o£
(
fd
);

298 
m≠
 = 
	`mm≠
(
NULL
, 
°
.
°_size
, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 0);

299 i‡((Ë
m≠
 == -1) {

300 
	`≥º‹
("fixdep: mmap");

301 
	`˛o£
(
fd
);

305 
	`∑r£_c⁄fig_fûe
(
m≠
, 
°
.
°_size
);

307 
	`munm≠
(
m≠
, 
°
.
°_size
);

309 
	`˛o£
(
fd
);

310 
	}
}

317 
	$∑r£_dï_fûe
(*
m≠
, 
size_t
 
Àn
)

319 *
m
 = 
m≠
;

320 *
íd
 = 
m
 + 
Àn
;

321 *
p
;

322 
s
[
PATH_MAX
];

323 
fú°
;

325 
p
 = 
	`°rchr
(
m
, ':');

326 i‡(!
p
) {

327 
	`Ârötf
(
°dîr
, "fixdep:ÖarseÉrror\n");

328 
	`exô
(1);

330 
	`mem˝y
(
s
, 
m
, 
p
-m); s[p-m] = 0;

331 
m
 = 
p
+1;

333 
	`˛ór_c⁄fig
();

335 
fú°
 = 1;

336 
m
 < 
íd
) {

337 
m
 < 
íd
 && (*m == ' ' || *m == '\\' || *m == '\n'))

338 
m
++;

339 
p
 = 
m
;

340 
p
 < 
íd
 && *p != ' ')Ö++;

341 i‡(
p
 =
íd
) {

342 dÿ
p
--; !
	`iß um
(*p));

343 
p
++;

345 
	`mem˝y
(
s
, 
m
, 
p
-m); s[p-m] = 0;

346 i‡(
	`°ºcmp
(
s
, "include/generated/autoconf.h") &&

347 
	`°ºcmp
(
s
, "arch/um/include/uml-config.h") &&

348 
	`°ºcmp
(
s
, ".ver")) {

355 i‡(
fú°
) {

356 
	`¥ötf
("sour˚_%†:%s\n\n", 
èrgë
, 
s
);

357 
	`¥ötf
("dïs_%†:\\\n", 
èrgë
);

359 
	`¥ötf
(" %†\\\n", 
s
);

360 
	`do_c⁄fig_fûe
(
s
);

362 
fú°
 = 0;

363 
m
 = 
p
 + 1;

365 
	`¥ötf
("\n%s: $(dïs_%s)\n\n", 
èrgë
,Åarget);

366 
	`¥ötf
("$(dïs_%s):\n", 
èrgë
);

367 
	}
}

369 
	$¥öt_dïs
()

371 
°©
 
°
;

372 
fd
;

373 *
m≠
;

375 
fd
 = 
	`›í
(
dïfûe
, 
O_RDONLY
);

376 i‡(
fd
 < 0) {

377 
	`Ârötf
(
°dîr
, "fixdep:Érror opening depfile: ");

378 
	`≥º‹
(
dïfûe
);

379 
	`exô
(2);

381 i‡(
	`f°©
(
fd
, &
°
) < 0) {

382 
	`Ârötf
(
°dîr
, "fixdep:Érror fstat'ing depfile: ");

383 
	`≥º‹
(
dïfûe
);

384 
	`exô
(2);

386 i‡(
°
.
°_size
 == 0) {

387 
	`Ârötf
(
°dîr
,"fixdï: %†i†em±y\n",
dïfûe
);

388 
	`˛o£
(
fd
);

391 
m≠
 = 
	`mm≠
(
NULL
, 
°
.
°_size
, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 0);

392 i‡((Ë
m≠
 == -1) {

393 
	`≥º‹
("fixdep: mmap");

394 
	`˛o£
(
fd
);

398 
	`∑r£_dï_fûe
(
m≠
, 
°
.
°_size
);

400 
	`munm≠
(
m≠
, 
°
.
°_size
);

402 
	`˛o£
(
fd
);

403 
	}
}

405 
	$å≠s
()

407 
ã°
[] 
	`__©åibuã__
((
	`Æig√d
(()))) = "CONF";

408 *
p
 = (*)
ã°
;

410 i‡(*
p
 !
INT_CONF
) {

411 
	`Ârötf
(
°dîr
, "fixdep: sizeof(int) != 4 or wrongÉndianess? %#x\n",

412 *
p
);

413 
	`exô
(2);

415 
	}
}

417 
	$maö
(
¨gc
, *
¨gv
[])

419 
	`å≠s
();

421 i‡(
¨gc
 != 4)

422 
	`ußge
();

424 
dïfûe
 = 
¨gv
[1];

425 
èrgë
 = 
¨gv
[2];

426 
cmdlöe
 = 
¨gv
[3];

428 
	`¥öt_cmdlöe
();

429 
	`¥öt_dïs
();

432 
	}
}

	@swupdate/scripts/kconfig/conf.c

6 
	~<loˇÀ.h
>

7 
	~<˘y≥.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<time.h
>

12 
	~<uni°d.h
>

13 
	~<gë›t.h
>

14 
	~<sys/°©.h
>

15 
	~<sys/time.h
>

16 
	~<î∫o.h
>

18 
	~"lkc.h
"

20 
c⁄f
(
míu
 *menu);

21 
check_c⁄f
(
míu
 *menu);

22 
xfgës
(*
°r
, 
size
, 
FILE
 *
ö
);

24 
	eöput_mode
 {

25 
	mﬁdaskc⁄fig
,

26 
	msûítﬁdc⁄fig
,

27 
	mﬁdc⁄fig
,

28 
	mÆ oc⁄fig
,

29 
	mÆlyesc⁄fig
,

30 
	mÆlmodc⁄fig
,

31 
	mÆldefc⁄fig
,

32 
	møndc⁄fig
,

33 
	mdefc⁄fig
,

34 
	mßvedefc⁄fig
,

35 
	mli°√wc⁄fig
,

36 
	mﬁddefc⁄fig
,

37 } 
	göput_mode
 = 
ﬁdaskc⁄fig
;

39 
	gödít
 = 1;

40 
	gây_°dio
;

41 
	gvÆid_°dö
 = 1;

42 
	gsync_kc⁄fig
;

43 
	gc⁄f_˙t
;

44 
	glöe
[128];

45 
míu
 *
	groŸE¡ry
;

47 
	$¥öt_hñp
(
míu
 *menu)

49 
g°r
 
hñp
 = 
	`°r_√w
();

51 
	`míu_gë_ext_hñp
(
míu
, &
hñp
);

53 
	`¥ötf
("\n%s\n", 
	`°r_gë
(&
hñp
));

54 
	`°r_‰ì
(&
hñp
);

55 
	}
}

57 
	$°rù
(*
°r
)

59 *
p
 = 
°r
;

60 
l
;

62 (
	`is•a˚
(*
p
)))

63 
p
++;

64 
l
 = 
	`°æí
(
p
);

65 i‡(
p
 !
°r
)

66 
	`memmove
(
°r
, 
p
, 
l
 + 1);

67 i‡(!
l
)

69 
p
 = 
°r
 + 
l
 - 1;

70 (
	`is•a˚
(*
p
)))

71 *
p
-- = 0;

72 
	}
}

74 
	$check_°dö
()

76 i‡(!
vÆid_°dö
) {

77 
	`¥ötf
(
	`_
("aborted!\n\n"));

78 
	`¥ötf
(
	`_
("Console input/output isÑedirected. "));

79 
	`¥ötf
(
	`_
("Run 'make oldconfig'Åo update configuration.\n\n"));

80 
	`exô
(1);

82 
	}
}

84 
	$c⁄f_askvÆue
(
symbﬁ
 *
sym
, c⁄° *
def
)

86 
symbﬁ_ty≥
 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

88 i‡(!
	`sym_has_vÆue
(
sym
))

89 
	`¥ötf
(
	`_
("(NEW) "));

91 
löe
[0] = '\n';

92 
löe
[1] = 0;

94 i‡(!
	`sym_is_ch™gabÀ
(
sym
)) {

95 
	`¥ötf
("%s\n", 
def
);

96 
löe
[0] = '\n';

97 
löe
[1] = 0;

101 
öput_mode
) {

102 
ﬁdc⁄fig
:

103 
sûítﬁdc⁄fig
:

104 i‡(
	`sym_has_vÆue
(
sym
)) {

105 
	`¥ötf
("%s\n", 
def
);

108 
	`check_°dö
();

110 
ﬁdaskc⁄fig
:

111 
	`fÊush
(
°dout
);

112 
	`xfgës
(
löe
, 128, 
°dö
);

113 i‡(!
ây_°dio
)

114 
	`¥ötf
("\n");

120 
ty≥
) {

121 
S_INT
:

122 
S_HEX
:

123 
S_STRING
:

124 
	`¥ötf
("%s\n", 
def
);

129 
	`¥ötf
("%s", 
löe
);

131 
	}
}

133 
	$c⁄f_°rög
(
míu
 *menu)

135 
symbﬁ
 *
sym
 = 
míu
->sym;

136 c⁄° *
def
;

139 
	`¥ötf
("%*s%†", 
ödít
 - 1, "", 
	`_
(
míu
->
¥om±
->
ãxt
));

140 
	`¥ötf
("(%sË", 
sym
->
«me
);

141 
def
 = 
	`sym_gë_°rög_vÆue
(
sym
);

142 i‡(
	`sym_gë_°rög_vÆue
(
sym
))

143 
	`¥ötf
("[%s] ", 
def
);

144 i‡(!
	`c⁄f_askvÆue
(
sym
, 
def
))

146 
löe
[0]) {

151 i‡(
löe
[1] == '\n') {

152 
	`¥öt_hñp
(
míu
);

153 
def
 = 
NULL
;

158 
löe
[
	`°æí
(line)-1] = 0;

159 
def
 = 
löe
;

161 i‡(
def
 && 
	`sym_£t_°rög_vÆue
(
sym
, def))

164 
	}
}

166 
	$c⁄f_sym
(
míu
 *menu)

168 
symbﬁ
 *
sym
 = 
míu
->sym;

169 
åi°©e
 
ﬁdvÆ
, 
√wvÆ
;

172 
	`¥ötf
("%*s%†", 
ödít
 - 1, "", 
	`_
(
míu
->
¥om±
->
ãxt
));

173 i‡(
sym
->
«me
)

174 
	`¥ötf
("(%sË", 
sym
->
«me
);

175 
	`putch¨
('[');

176 
ﬁdvÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

177 
ﬁdvÆ
) {

178 
no
:

179 
	`putch¨
('N');

181 
mod
:

182 
	`putch¨
('M');

184 
yes
:

185 
	`putch¨
('Y');

188 i‡(
ﬁdvÆ
 !
no
 && 
	`sym_åi°©e_wôhö_ønge
(
sym
,Ço))

189 
	`¥ötf
("/n");

190 i‡(
ﬁdvÆ
 !
mod
 && 
	`sym_åi°©e_wôhö_ønge
(
sym
, mod))

191 
	`¥ötf
("/m");

192 i‡(
ﬁdvÆ
 !
yes
 && 
	`sym_åi°©e_wôhö_ønge
(
sym
, yes))

193 
	`¥ötf
("/y");

194 i‡(
	`míu_has_hñp
(
míu
))

195 
	`¥ötf
("/?");

196 
	`¥ötf
("] ");

197 i‡(!
	`c⁄f_askvÆue
(
sym
, 
	`sym_gë_°rög_vÆue
(sym)))

199 
	`°rù
(
löe
);

201 
löe
[0]) {

204 
√wvÆ
 = 
no
;

205 i‡(!
löe
[1] || !
	`°rcmp
(&line[1], "o"))

210 
√wvÆ
 = 
mod
;

211 i‡(!
löe
[1])

216 
√wvÆ
 = 
yes
;

217 i‡(!
löe
[1] || !
	`°rcmp
(&line[1], "es"))

221 
√wvÆ
 = 
ﬁdvÆ
;

224 
hñp
;

228 i‡(
	`sym_£t_åi°©e_vÆue
(
sym
, 
√wvÆ
))

230 
hñp
:

231 
	`¥öt_hñp
(
míu
);

233 
	}
}

235 
	$c⁄f_choi˚
(
míu
 *menu)

237 
symbﬁ
 *
sym
, *
def_sym
;

238 
míu
 *
chûd
;

239 
boﬁ
 
is_√w
;

241 
sym
 = 
míu
->sym;

242 
is_√w
 = !
	`sym_has_vÆue
(
sym
);

243 i‡(
	`sym_is_ch™gabÀ
(
sym
)) {

244 
	`c⁄f_sym
(
míu
);

245 
	`sym_ˇlc_vÆue
(
sym
);

246 
	`sym_gë_åi°©e_vÆue
(
sym
)) {

247 
no
:

249 
mod
:

251 
yes
:

255 
	`sym_gë_åi°©e_vÆue
(
sym
)) {

256 
no
:

258 
mod
:

259 
	`¥ötf
("%*s%s\n", 
ödít
 - 1, "", 
	`_
(
	`míu_gë_¥om±
(
míu
)));

261 
yes
:

267 
˙t
, 
def
;

269 
	`¥ötf
("%*s%s\n", 
ödít
 - 1, "", 
	`_
(
	`míu_gë_¥om±
(
míu
)));

270 
def_sym
 = 
	`sym_gë_choi˚_vÆue
(
sym
);

271 
˙t
 = 
def
 = 0;

272 
löe
[0] = 0;

273 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

274 i‡(!
	`míu_is_visibÀ
(
chûd
))

276 i‡(!
chûd
->
sym
) {

277 
	`¥ötf
("%*¯%s\n", 
ödít
, '*', 
	`_
(
	`míu_gë_¥om±
(
chûd
)));

280 
˙t
++;

281 i‡(
chûd
->
sym
 =
def_sym
) {

282 
def
 = 
˙t
;

283 
	`¥ötf
("%*c", 
ödít
, '>');

285 
	`¥ötf
("%*c", 
ödít
, ' ');

286 
	`¥ötf
(" %d. %s", 
˙t
, 
	`_
(
	`míu_gë_¥om±
(
chûd
)));

287 i‡(
chûd
->
sym
->
«me
)

288 
	`¥ötf
(" (%s)", 
chûd
->
sym
->
«me
);

289 i‡(!
	`sym_has_vÆue
(
chûd
->
sym
))

290 
	`¥ötf
(
	`_
(" (NEW)"));

291 
	`¥ötf
("\n");

293 
	`¥ötf
(
	`_
("%*schoi˚"), 
ödít
 - 1, "");

294 i‡(
˙t
 == 1) {

295 
	`¥ötf
("[1]: 1\n");

296 
c⁄f_chûds
;

298 
	`¥ötf
("[1-%d", 
˙t
);

299 i‡(
	`míu_has_hñp
(
míu
))

300 
	`¥ötf
("?");

301 
	`¥ötf
("]: ");

302 
öput_mode
) {

303 
ﬁdc⁄fig
:

304 
sûítﬁdc⁄fig
:

305 i‡(!
is_√w
) {

306 
˙t
 = 
def
;

307 
	`¥ötf
("%d\n", 
˙t
);

310 
	`check_°dö
();

312 
ﬁdaskc⁄fig
:

313 
	`fÊush
(
°dout
);

314 
	`xfgës
(
löe
, 128, 
°dö
);

315 
	`°rù
(
löe
);

316 i‡(
löe
[0] == '?') {

317 
	`¥öt_hñp
(
míu
);

320 i‡(!
löe
[0])

321 
˙t
 = 
def
;

322 i‡(
	`isdigô
(
löe
[0]))

323 
˙t
 = 
	`©oi
(
löe
);

331 
c⁄f_chûds
:

332 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

333 i‡(!
chûd
->
sym
 || !
	`míu_is_visibÀ
(child))

335 i‡(!--
˙t
)

338 i‡(!
chûd
)

340 i‡(
löe
[0] &&Üöe[
	`°æí
(line) - 1] == '?') {

341 
	`¥öt_hñp
(
chûd
);

344 
	`sym_£t_choi˚_vÆue
(
sym
, 
chûd
->sym);

345 
chûd
 = chûd->
li°
; chûd; chûd = chûd->
√xt
) {

346 
ödít
 += 2;

347 
	`c⁄f
(
chûd
);

348 
ödít
 -= 2;

352 
	}
}

354 
	$c⁄f
(
míu
 *menu)

356 
symbﬁ
 *
sym
;

357 
¥›îty
 *
¥›
;

358 
míu
 *
chûd
;

360 i‡(!
	`míu_is_visibÀ
(
míu
))

363 
sym
 = 
míu
->sym;

364 
¥›
 = 
míu
->
¥om±
;

365 i‡(
¥›
) {

366 c⁄° *
¥om±
;

368 
¥›
->
ty≥
) {

369 
P_MENU
:

370 i‡((
öput_mode
 =
sûítﬁdc⁄fig
 ||

371 
öput_mode
 =
li°√wc⁄fig
 ||

372 
öput_mode
 =
ﬁddefc⁄fig
) &&

373 
roŸE¡ry
 !
míu
) {

374 
	`check_c⁄f
(
míu
);

378 
P_COMMENT
:

379 
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

380 i‡(
¥om±
)

381 
	`¥ötf
("%*c\n%*c %s\n%*c\n",

382 
ödít
, '*',

383 
ödít
, '*', 
	`_
(
¥om±
),

384 
ödít
, '*');

390 i‡(!
sym
)

391 
c⁄f_chûds
;

393 i‡(
	`sym_is_choi˚
(
sym
)) {

394 
	`c⁄f_choi˚
(
míu
);

395 i‡(
sym
->
cuº
.
åi
 !
mod
)

397 
c⁄f_chûds
;

400 
sym
->
ty≥
) {

401 
S_INT
:

402 
S_HEX
:

403 
S_STRING
:

404 
	`c⁄f_°rög
(
míu
);

407 
	`c⁄f_sym
(
míu
);

411 
c⁄f_chûds
:

412 i‡(
sym
)

413 
ödít
 += 2;

414 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
)

415 
	`c⁄f
(
chûd
);

416 i‡(
sym
)

417 
ödít
 -= 2;

418 
	}
}

420 
	$check_c⁄f
(
míu
 *menu)

422 
symbﬁ
 *
sym
;

423 
míu
 *
chûd
;

425 i‡(!
	`míu_is_visibÀ
(
míu
))

428 
sym
 = 
míu
->sym;

429 i‡(
sym
 && !
	`sym_has_vÆue
(sym)) {

430 i‡(
	`sym_is_ch™gabÀ
(
sym
) ||

431 (
	`sym_is_choi˚
(
sym
Ë&& 
	`sym_gë_åi°©e_vÆue
(symË=
yes
)) {

432 i‡(
öput_mode
 =
li°√wc⁄fig
) {

433 i‡(
sym
->
«me
 && !
	`sym_is_choi˚_vÆue
(sym)) {

434 
	`¥ötf
("%s%s\n", 
CONFIG_
, 
sym
->
«me
);

436 } i‡(
öput_mode
 !
ﬁddefc⁄fig
) {

437 i‡(!
c⁄f_˙t
++)

438 
	`¥ötf
(
	`_
("*\n* Restart config...\n*\n"));

439 
roŸE¡ry
 = 
	`míu_gë_∑ª¡_míu
(
míu
);

440 
	`c⁄f
(
roŸE¡ry
);

445 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
)

446 
	`check_c⁄f
(
chûd
);

447 
	}
}

449 
›ti⁄
 
	gl⁄g_›ts
[] = {

450 {"ﬁdaskc⁄fig", 
no_¨gumít
, 
NULL
, 
ﬁdaskc⁄fig
},

451 {"ﬁdc⁄fig", 
no_¨gumít
, 
NULL
, 
ﬁdc⁄fig
},

452 {"sûítﬁdc⁄fig", 
no_¨gumít
, 
NULL
, 
sûítﬁdc⁄fig
},

453 {"defc⁄fig", 
›ti⁄Æ_¨gumít
, 
NULL
, 
defc⁄fig
},

454 {"ßvedefc⁄fig", 
ªquúed_¨gumít
, 
NULL
, 
ßvedefc⁄fig
},

455 {"Æ oc⁄fig", 
no_¨gumít
, 
NULL
, 
Æ oc⁄fig
},

456 {"Ælyesc⁄fig", 
no_¨gumít
, 
NULL
, 
Ælyesc⁄fig
},

457 {"Ælmodc⁄fig", 
no_¨gumít
, 
NULL
, 
Ælmodc⁄fig
},

458 {"Ældefc⁄fig", 
no_¨gumít
, 
NULL
, 
Ældefc⁄fig
},

459 {"øndc⁄fig", 
no_¨gumít
, 
NULL
, 
øndc⁄fig
},

460 {"li°√wc⁄fig", 
no_¨gumít
, 
NULL
, 
li°√wc⁄fig
},

461 {"ﬁddefc⁄fig", 
no_¨gumít
, 
NULL
, 
ﬁddefc⁄fig
},

467 {"ﬁdnoc⁄fig", 
no_¨gumít
, 
NULL
, 
ﬁddefc⁄fig
},

468 {
NULL
, 0, NULL, 0}

471 
	$c⁄f_ußge
(c⁄° *
¥og«me
)

474 
	`¥ötf
("Ußge: %†[-s] [›ti⁄] <kc⁄fig-fûe>\n", 
¥og«me
);

475 
	`¥ötf
("[option] is _one_ ofÅhe following:\n");

476 
	`¥ötf
(" --listnewconfig ListÇew options\n");

477 
	`¥ötf
(" --oldaskconfig StartáÇew configuration usingáÜine-orientedÖrogram\n");

478 
	`¥ötf
(" --oldconfig Updateá configuration usingáÖrovided .configás base\n");

479 
	`¥ötf
(" --silentoldconfig Sameás oldconfig, but quietly,ádditionally update deps\n");

480 
	`¥ötf
(" --olddefconfig Sameás silentoldconfig but setsÇew symbolsÅoÅheir default value\n");

481 
	`¥ötf
(" --oldnoconfig Análias of olddefconfig\n");

482 
	`¥ötf
(" --defconfig <file> New config with default defined in <file>\n");

483 
	`¥ötf
(" --savedefconfig <file> SaveÅhe minimal current configurationÅo <file>\n");

484 
	`¥ötf
(" --allnoconfig New config whereáll optionsáreánswered withÇo\n");

485 
	`¥ötf
(" --allyesconfig New config whereáll optionsáreánswered with yes\n");

486 
	`¥ötf
(" --allmodconfig New config whereáll optionsáreánswered with mod\n");

487 
	`¥ötf
(" --alldefconfig New config witháll symbols setÅo default\n");

488 
	`¥ötf
(" --randconfig New config withÑandománswerÅoáll options\n");

489 
	}
}

491 
	$maö
(
ac
, **
av
)

493 c⁄° *
¥og«me
 = 
av
[0];

494 
›t
;

495 c⁄° *
«me
, *
defc⁄fig_fûe
 = 
NULL
 ;

496 
°©
 
tmp°©
;

498 
	`£éoˇÀ
(
LC_ALL
, "");

499 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

500 
	`ãxtdomaö
(
PACKAGE
);

502 
ây_°dio
 = 
	`ißây
(0) && isatty(1) && isatty(2);

504 (
›t
 = 
	`gë›t_l⁄g
(
ac
, 
av
, "s", 
l⁄g_›ts
, 
NULL
)) != -1) {

505 i‡(
›t
 == 's') {

506 
	`c⁄f_£t_mesßge_ˇŒback
(
NULL
);

509 
öput_mode
 = (öput_mode)
›t
;

510 
›t
) {

511 
sûítﬁdc⁄fig
:

512 
sync_kc⁄fig
 = 1;

514 
defc⁄fig
:

515 
ßvedefc⁄fig
:

516 
defc⁄fig_fûe
 = 
›èrg
;

518 
øndc⁄fig
:

520 
timevÆ
 
now
;

521 
£ed
;

522 *
£ed_ív
;

528 
	`gëtimeofday
(&
now
, 
NULL
);

529 
£ed
 = ()((
now
.
tv_£c
 + 1Ë* (now.
tv_u£c
 + 1));

531 
£ed_ív
 = 
	`gëív
("KCONFIG_SEED");

532 if–
£ed_ív
 && *seed_env ) {

533 *
ídp
;

534 
tmp
 = ()
	`°πﬁ
(
£ed_ív
, &
ídp
, 0);

535 i‡(*
ídp
 == '\0') {

536 
£ed
 = 
tmp
;

539 
	`Ârötf
–
°dîr
, "KCONFIG_SEED=0x%X\n", 
£ed
 );

540 
	`§™d
(
£ed
);

543 
ﬁdaskc⁄fig
:

544 
ﬁdc⁄fig
:

545 
Æ oc⁄fig
:

546 
Ælyesc⁄fig
:

547 
Ælmodc⁄fig
:

548 
Ældefc⁄fig
:

549 
li°√wc⁄fig
:

550 
ﬁddefc⁄fig
:

553 
	`c⁄f_ußge
(
¥og«me
);

554 
	`exô
(1);

558 i‡(
ac
 =
›töd
) {

559 
	`¥ötf
(
	`_
("%s: Kc⁄fig fûêmissög\n"), 
av
[0]);

560 
	`c⁄f_ußge
(
¥og«me
);

561 
	`exô
(1);

563 
«me
 = 
av
[
›töd
];

564 
	`c⁄f_∑r£
(
«me
);

566 i‡(
sync_kc⁄fig
) {

567 
«me
 = 
	`c⁄f_gë_c⁄fig«me
();

568 i‡(
	`°©
(
«me
, &
tmp°©
)) {

569 
	`Ârötf
(
°dîr
, 
	`_
("***\n"

574 "***\n"), 
«me
);

575 
	`exô
(1);

579 
öput_mode
) {

580 
defc⁄fig
:

581 i‡(!
defc⁄fig_fûe
)

582 
defc⁄fig_fûe
 = 
	`c⁄f_gë_deÁu…_c⁄‚ame
();

583 i‡(
	`c⁄f_ªad
(
defc⁄fig_fûe
)) {

584 
	`¥ötf
(
	`_
("***\n"

586 "***\n"), 
defc⁄fig_fûe
);

587 
	`exô
(1);

590 
ßvedefc⁄fig
:

591 
sûítﬁdc⁄fig
:

592 
ﬁdaskc⁄fig
:

593 
ﬁdc⁄fig
:

594 
li°√wc⁄fig
:

595 
ﬁddefc⁄fig
:

596 
	`c⁄f_ªad
(
NULL
);

598 
Æ oc⁄fig
:

599 
Ælyesc⁄fig
:

600 
Ælmodc⁄fig
:

601 
Ældefc⁄fig
:

602 
øndc⁄fig
:

603 
«me
 = 
	`gëív
("KCONFIG_ALLCONFIG");

604 i‡(!
«me
)

606 i‡((
	`°rcmp
(
«me
, "") != 0) && (strcmp(name, "1") != 0)) {

607 i‡(
	`c⁄f_ªad_sim∂e
(
«me
, 
S_DEF_USER
)) {

608 
	`Ârötf
(
°dîr
,

609 
	`_
("*** Can'tÑead seed configuration \"%s\"!\n"),

610 
«me
);

611 
	`exô
(1);

615 
öput_mode
) {

616 
Æ oc⁄fig
: 
«me
 = "allno.config"; ;

617 
Ælyesc⁄fig
: 
«me
 = "allyes.config"; ;

618 
Ælmodc⁄fig
: 
«me
 = "allmod.config"; ;

619 
Ældefc⁄fig
: 
«me
 = "alldef.config"; ;

620 
øndc⁄fig
: 
«me
 = "allrandom.config"; ;

623 i‡(
	`c⁄f_ªad_sim∂e
(
«me
, 
S_DEF_USER
) &&

624 
	`c⁄f_ªad_sim∂e
("Æl.c⁄fig", 
S_DEF_USER
)) {

625 
	`Ârötf
(
°dîr
,

626 
	`_
("*** KCONFIG_ALLCONFIG set, butÇo \"%s\" or \"all.config\" file found\n"),

627 
«me
);

628 
	`exô
(1);

635 i‡(
sync_kc⁄fig
) {

636 i‡(
	`c⁄f_gë_ch™ged
()) {

637 
«me
 = 
	`gëív
("KCONFIG_NOSILENTUPDATE");

638 i‡(
«me
 && *name) {

639 
	`Ârötf
(
°dîr
,

640 
	`_
("\n*** The configurationÑequiresÉxplicit update.\n\n"));

644 
vÆid_°dö
 = 
ây_°dio
;

647 
öput_mode
) {

648 
Æ oc⁄fig
:

649 
	`c⁄f_£t_Æl_√w_symbﬁs
(
def_no
);

651 
Ælyesc⁄fig
:

652 
	`c⁄f_£t_Æl_√w_symbﬁs
(
def_yes
);

654 
Ælmodc⁄fig
:

655 
	`c⁄f_£t_Æl_√w_symbﬁs
(
def_mod
);

657 
Ældefc⁄fig
:

658 
	`c⁄f_£t_Æl_√w_symbﬁs
(
def_deÁu…
);

660 
øndc⁄fig
:

662 
	`c⁄f_£t_Æl_√w_symbﬁs
(
def_øndom
)) ;

664 
defc⁄fig
:

665 
	`c⁄f_£t_Æl_√w_symbﬁs
(
def_deÁu…
);

667 
ßvedefc⁄fig
:

669 
ﬁdaskc⁄fig
:

670 
roŸE¡ry
 = &
roŸmíu
;

671 
	`c⁄f
(&
roŸmíu
);

672 
öput_mode
 = 
sûítﬁdc⁄fig
;

674 
ﬁdc⁄fig
:

675 
li°√wc⁄fig
:

676 
ﬁddefc⁄fig
:

677 
sûítﬁdc⁄fig
:

680 
c⁄f_˙t
 = 0;

681 
	`check_c⁄f
(&
roŸmíu
);

682 } 
c⁄f_˙t
 &&

683 (
öput_mode
 !
li°√wc⁄fig
 &&

684 
öput_mode
 !
ﬁddefc⁄fig
));

688 i‡(
sync_kc⁄fig
) {

692 i‡(
	`c⁄f_gë_ch™ged
(Ë&& 
	`c⁄f_wrôe
(
NULL
)) {

693 
	`Ârötf
(
°dîr
, 
	`_
("\n*** Error during writing ofÅhe configuration.\n\n"));

694 
	`exô
(1);

696 i‡(
	`c⁄f_wrôe_autoc⁄f
()) {

697 
	`Ârötf
(
°dîr
, 
	`_
("\n*** Error during update ofÅhe configuration.\n\n"));

700 } i‡(
öput_mode
 =
ßvedefc⁄fig
) {

701 i‡(
	`c⁄f_wrôe_defc⁄fig
(
defc⁄fig_fûe
)) {

702 
	`Ârötf
(
°dîr
, 
	`_
("n*** Error while saving defconfigÅo: %s\n\n"),

703 
defc⁄fig_fûe
);

706 } i‡(
öput_mode
 !
li°√wc⁄fig
) {

707 i‡(
	`c⁄f_wrôe
(
NULL
)) {

708 
	`Ârötf
(
°dîr
, 
	`_
("\n*** Error during writing ofÅhe configuration.\n\n"));

709 
	`exô
(1);

713 
	}
}

718 
	$xfgës
(*
°r
, 
size
, 
FILE
 *
ö
)

720 i‡(
	`fgës
(
°r
, 
size
, 
ö
Ë=
NULL
)

721 
	`Ârötf
(
°dîr
, "\nError inÑeading orÉnd of file.\n");

722 
	}
}

	@swupdate/scripts/kconfig/confdata.c

6 
	~<sys/°©.h
>

7 
	~<˘y≥.h
>

8 
	~<î∫o.h
>

9 
	~<f˙é.h
>

10 
	~<°d¨g.h
>

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<time.h
>

15 
	~<uni°d.h
>

17 
	~"lkc.h
"

19 
	sc⁄f_¥öãr
 {

20 (*
	m¥öt_symbﬁ
)(
	mFILE
 *, 
	msymbﬁ
 *, const *, *);

21 (*
	m¥öt_commít
)(
	mFILE
 *, const *, *);

24 
	$c⁄f_w¨nög
(c⁄° *
fmt
, ...)

25 
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 1, 2)));

27 
	$c⁄f_mesßge
(c⁄° *
fmt
, ...)

28 
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 1, 2)));

30 c⁄° *
c⁄f_fûíame
;

31 
c⁄f_löío
, 
c⁄f_w¨nögs
, 
c⁄f_unßved
;

33 c⁄° 
c⁄f_de‚ame
[] = "defconfig";

35 
	$c⁄f_w¨nög
(c⁄° *
fmt
, ...)

37 
va_li°
 
≠
;

38 
	`va_°¨t
(
≠
, 
fmt
);

39 
	`Ârötf
(
°dîr
, "%s:%d:w¨nög: ", 
c⁄f_fûíame
, 
c⁄f_löío
);

40 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

41 
	`Ârötf
(
°dîr
, "\n");

42 
	`va_íd
(
≠
);

43 
c⁄f_w¨nögs
++;

44 
	}
}

46 
	$c⁄f_deÁu…_mesßge_ˇŒback
(c⁄° *
fmt
, 
va_li°
 
≠
)

48 
	`¥ötf
("#\n# ");

49 
	`v¥ötf
(
fmt
, 
≠
);

50 
	`¥ötf
("\n#\n");

51 
	}
}

53 (*
c⁄f_mesßge_ˇŒback
Ë(c⁄° *
fmt
, 
va_li°
 
≠
) =

54 
c⁄f_deÁu…_mesßge_ˇŒback
;

55 
	$c⁄f_£t_mesßge_ˇŒback
((*
‚
Ë(c⁄° *
fmt
, 
va_li°
 
≠
))

57 
c⁄f_mesßge_ˇŒback
 = 
‚
;

58 
	}
}

60 
	$c⁄f_mesßge
(c⁄° *
fmt
, ...)

62 
va_li°
 
≠
;

64 
	`va_°¨t
(
≠
, 
fmt
);

65 i‡(
c⁄f_mesßge_ˇŒback
)

66 
	`c⁄f_mesßge_ˇŒback
(
fmt
, 
≠
);

67 
	`va_íd
(
≠
);

68 
	}
}

70 c⁄° *
	$c⁄f_gë_c⁄fig«me
()

72 *
«me
 = 
	`gëív
("KCONFIG_CONFIG");

74  
«me
 ?Çame : ".config";

75 
	}
}

77 c⁄° *
	$c⁄f_gë_autoc⁄fig_«me
()

79 *
«me
 = 
	`gëív
("KCONFIG_AUTOCONFIG");

81  
«me
 ?Çame : "include/config/auto.conf";

82 
	}
}

84 *
	$c⁄f_ex∑nd_vÆue
(c⁄° *
ö
)

86 
symbﬁ
 *
sym
;

87 c⁄° *
§c
;

88 
ªs_vÆue
[
SYMBOL_MAXLENGTH
];

89 *
d°
, 
«me
[
SYMBOL_MAXLENGTH
];

91 
ªs_vÆue
[0] = 0;

92 
d°
 = 
«me
;

93 (
§c
 = 
	`°rchr
(
ö
, '$'))) {

94 
	`°∫ˇt
(
ªs_vÆue
, 
ö
, 
§c
 - in);

95 
§c
++;

96 
d°
 = 
«me
;

97 
	`iß um
(*
§c
) || *src == '_')

98 *
d°
++ = *
§c
++;

99 *
d°
 = 0;

100 
sym
 = 
	`sym_lookup
(
«me
, 0);

101 
	`sym_ˇlc_vÆue
(
sym
);

102 
	`°rˇt
(
ªs_vÆue
, 
	`sym_gë_°rög_vÆue
(
sym
));

103 
ö
 = 
§c
;

105 
	`°rˇt
(
ªs_vÆue
, 
ö
);

107  
ªs_vÆue
;

108 
	}
}

110 *
	$c⁄f_gë_deÁu…_c⁄‚ame
()

112 
°©
 
buf
;

113 
fuŒ«me
[
PATH_MAX
+1];

114 *
ív
, *
«me
;

116 
«me
 = 
	`c⁄f_ex∑nd_vÆue
(
c⁄f_de‚ame
);

117 
ív
 = 
	`gëív
(
SRCTREE
);

118 i‡(
ív
) {

119 
	`•rötf
(
fuŒ«me
, "%s/%s", 
ív
, 
«me
);

120 i‡(!
	`°©
(
fuŒ«me
, &
buf
))

121  
fuŒ«me
;

123  
«me
;

124 
	}
}

126 
	$c⁄f_£t_sym_vÆ
(
symbﬁ
 *
sym
, 
def
, 
def_Êags
, *
p
)

128 *
p2
;

130 
sym
->
ty≥
) {

131 
S_TRISTATE
:

132 i‡(
p
[0] == 'm') {

133 
sym
->
def
[def].
åi
 = 
mod
;

134 
sym
->
Êags
 |
def_Êags
;

138 
S_BOOLEAN
:

139 i‡(
p
[0] == 'y') {

140 
sym
->
def
[def].
åi
 = 
yes
;

141 
sym
->
Êags
 |
def_Êags
;

144 i‡(
p
[0] == 'n') {

145 
sym
->
def
[def].
åi
 = 
no
;

146 
sym
->
Êags
 |
def_Êags
;

149 i‡(
def
 !
S_DEF_AUTO
)

150 
	`c⁄f_w¨nög
("symbol value '%s' invalid for %s",

151 
p
, 
sym
->
«me
);

153 
S_OTHER
:

154 i‡(*
p
 != '"') {

155 
p2
 = 
p
; *p2 && !
	`is•a˚
(*p2);Ö2++)

157 
sym
->
ty≥
 = 
S_STRING
;

158 
d⁄e
;

161 
S_STRING
:

162 i‡(*
p
++ != '"')

164 
p2
 = 
p
; (p2 = 
	`°Ωbrk
(p2, "\"\\"));Ö2++) {

165 i‡(*
p2
 == '"') {

166 *
p2
 = 0;

169 
	`memmove
(
p2
,Ö2 + 1, 
	`°æí
(p2));

171 i‡(!
p2
) {

172 i‡(
def
 !
S_DEF_AUTO
)

173 
	`c⁄f_w¨nög
("invalid string found");

177 
S_INT
:

178 
S_HEX
:

179 
d⁄e
:

180 i‡(
	`sym_°rög_vÆid
(
sym
, 
p
)) {

181 
sym
->
def
[def].
vÆ
 = 
	`°rdup
(
p
);

182 
sym
->
Êags
 |
def_Êags
;

184 i‡(
def
 !
S_DEF_AUTO
)

185 
	`c⁄f_w¨nög
("symbol value '%s' invalid for %s",

186 
p
, 
sym
->
«me
);

194 
	}
}

196 
	#LINE_GROWTH
 16

	)

197 
	$add_byã
(
c
, **
löïå
, 
size_t
 
¶í
, size_à*
n
)

199 *
∆öe
;

200 
size_t
 
√w_size
 = 
¶í
 + 1;

201 i‡(
√w_size
 > *
n
) {

202 
√w_size
 +
LINE_GROWTH
 - 1;

203 
√w_size
 *= 2;

204 
∆öe
 = 
	`ªÆloc
(*
löïå
, 
√w_size
);

205 i‡(!
∆öe
)

208 *
löïå
 = 
∆öe
;

209 *
n
 = 
√w_size
;

212 (*
löïå
)[
¶í
] = 
c
;

215 
	}
}

217 
ssize_t
 
	$com∑t_gëlöe
(**
löïå
, 
size_t
 *
n
, 
FILE
 *
°ªam
)

219 *
löe
 = *
löïå
;

220 
size_t
 
¶í
 = 0;

223 
c
 = 
	`gëc
(
°ªam
);

225 
c
) {

227 i‡(
	`add_byã
(
c
, &
löe
, 
¶í
, 
n
) < 0)

228 
e_out
;

229 
¶í
++;

231 
EOF
:

232 i‡(
	`add_byã
('\0', &
löe
, 
¶í
, 
n
) < 0)

233 
e_out
;

234 *
löïå
 = 
löe
;

235 i‡(
¶í
 == 0)

237  
¶í
;

239 i‡(
	`add_byã
(
c
, &
löe
, 
¶í
, 
n
) < 0)

240 
e_out
;

241 
¶í
++;

245 
e_out
:

246 
löe
[
¶í
-1] = '\0';

247 *
löïå
 = 
löe
;

249 
	}
}

251 
	$c⁄f_ªad_sim∂e
(c⁄° *
«me
, 
def
)

253 
FILE
 *
ö
 = 
NULL
;

254 *
löe
 = 
NULL
;

255 
size_t
 
löe_asize
 = 0;

256 *
p
, *
p2
;

257 
symbﬁ
 *
sym
;

258 
i
, 
def_Êags
;

260 i‡(
«me
) {

261 
ö
 = 
	`zc⁄f_f›í
(
«me
);

263 
¥›îty
 *
¥›
;

265 
«me
 = 
	`c⁄f_gë_c⁄fig«me
();

266 
ö
 = 
	`zc⁄f_f›í
(
«me
);

267 i‡(
ö
)

268 
lﬂd
;

269 
	`sym_add_ch™ge_cou¡
(1);

270 i‡(!
sym_defc⁄fig_li°
) {

271 i‡(
moduÀs_sym
)

272 
	`sym_ˇlc_vÆue
(
moduÀs_sym
);

276 
	`f‹_Æl_deÁu…s
(
sym_defc⁄fig_li°
, 
¥›
) {

277 i‡(
	`ex¥_ˇlc_vÆue
(
¥›
->
visibÀ
.
ex¥
Ë=
no
 ||

278 
¥›
->
ex¥
->
ty≥
 !
E_SYMBOL
)

280 
«me
 = 
	`c⁄f_ex∑nd_vÆue
(
¥›
->
ex¥
->
À·
.
sym
->name);

281 
ö
 = 
	`zc⁄f_f›í
(
«me
);

282 i‡(
ö
) {

283 
	`c⁄f_mesßge
(
	`_
("using defaults found in %s"),

284 
«me
);

285 
lﬂd
;

289 i‡(!
ö
)

292 
lﬂd
:

293 
c⁄f_fûíame
 = 
«me
;

294 
c⁄f_löío
 = 0;

295 
c⁄f_w¨nögs
 = 0;

296 
c⁄f_unßved
 = 0;

298 
def_Êags
 = 
SYMBOL_DEF
 << 
def
;

299 
	`f‹_Æl_symbﬁs
(
i
, 
sym
) {

300 
sym
->
Êags
 |
SYMBOL_CHANGED
;

301 
sym
->
Êags
 &~(
def_Êags
|
SYMBOL_VALID
);

302 i‡(
	`sym_is_choi˚
(
sym
))

303 
sym
->
Êags
 |
def_Êags
;

304 
sym
->
ty≥
) {

305 
S_INT
:

306 
S_HEX
:

307 
S_STRING
:

308 i‡(
sym
->
def
[def].
vÆ
)

309 
	`‰ì
(
sym
->
def
[def].
vÆ
);

312 
sym
->
def
[def].
vÆ
 = 
NULL
;

313 
sym
->
def
[def].
åi
 = 
no
;

317 
	`com∑t_gëlöe
(&
löe
, &
löe_asize
, 
ö
) != -1) {

318 
c⁄f_löío
++;

319 
sym
 = 
NULL
;

320 i‡(
löe
[0] == '#') {

321 i‡(
	`memcmp
(
löe
 + 2, 
CONFIG_
, 
	`°æí
(CONFIG_)))

323 
p
 = 
	`°rchr
(
löe
 + 2 + 
	`°æí
(
CONFIG_
), ' ');

324 i‡(!
p
)

326 *
p
++ = 0;

327 i‡(
	`°∫cmp
(
p
, "isÇot set", 10))

329 i‡(
def
 =
S_DEF_USER
) {

330 
sym
 = 
	`sym_föd
(
löe
 + 2 + 
	`°æí
(
CONFIG_
));

331 i‡(!
sym
) {

332 
	`sym_add_ch™ge_cou¡
(1);

333 
£tsym
;

336 
sym
 = 
	`sym_lookup
(
löe
 + 2 + 
	`°æí
(
CONFIG_
), 0);

337 i‡(
sym
->
ty≥
 =
S_UNKNOWN
)

338 
sym
->
ty≥
 = 
S_BOOLEAN
;

340 i‡(
sym
->
Êags
 & 
def_Êags
) {

341 
	`c⁄f_w¨nög
("ovîride:ÑóssignögÅÿsymbﬁ %s", 
sym
->
«me
);

343 
sym
->
ty≥
) {

344 
S_BOOLEAN
:

345 
S_TRISTATE
:

346 
sym
->
def
[def].
åi
 = 
no
;

347 
sym
->
Êags
 |
def_Êags
;

352 } i‡(
	`memcmp
(
löe
, 
CONFIG_
, 
	`°æí
(CONFIG_)) == 0) {

353 
p
 = 
	`°rchr
(
löe
 + 
	`°æí
(
CONFIG_
), '=');

354 i‡(!
p
)

356 *
p
++ = 0;

357 
p2
 = 
	`°rchr
(
p
, '\n');

358 i‡(
p2
) {

359 *
p2
-- = 0;

360 i‡(*
p2
 == '\r')

361 *
p2
 = 0;

363 i‡(
def
 =
S_DEF_USER
) {

364 
sym
 = 
	`sym_föd
(
löe
 + 
	`°æí
(
CONFIG_
));

365 i‡(!
sym
) {

366 
	`sym_add_ch™ge_cou¡
(1);

367 
£tsym
;

370 
sym
 = 
	`sym_lookup
(
löe
 + 
	`°æí
(
CONFIG_
), 0);

371 i‡(
sym
->
ty≥
 =
S_UNKNOWN
)

372 
sym
->
ty≥
 = 
S_OTHER
;

374 i‡(
sym
->
Êags
 & 
def_Êags
) {

375 
	`c⁄f_w¨nög
("ovîride:ÑóssignögÅÿsymbﬁ %s", 
sym
->
«me
);

377 i‡(
	`c⁄f_£t_sym_vÆ
(
sym
, 
def
, 
def_Êags
, 
p
))

380 i‡(
löe
[0] != '\r' &&Üine[0] != '\n')

381 
	`c⁄f_w¨nög
("unexpected data");

384 
£tsym
:

385 i‡(
sym
 && 
	`sym_is_choi˚_vÆue
(sym)) {

386 
symbﬁ
 *
cs
 = 
	`¥›_gë_symbﬁ
(
	`sym_gë_choi˚_¥›
(
sym
));

387 
sym
->
def
[def].
åi
) {

388 
no
:

390 
mod
:

391 i‡(
cs
->
def
[def].
åi
 =
yes
) {

392 
	`c⁄f_w¨nög
("%†¸óã†öc⁄si°íàchoi˚ sèã", 
sym
->
«me
);

393 
cs
->
Êags
 &~
def_Êags
;

396 
yes
:

397 i‡(
cs
->
def
[def].
åi
 !
no
)

398 
	`c⁄f_w¨nög
("ovîride: %†ch™ge†choi˚ sèã", 
sym
->
«me
);

399 
cs
->
def
[def].
vÆ
 = 
sym
;

402 
cs
->
def
[def].
åi
 = 
	`EXPR_OR
(cs->def[def].åi, 
sym
->def[def].tri);

405 
	`‰ì
(
löe
);

406 
	`f˛o£
(
ö
);

408 i‡(
moduÀs_sym
)

409 
	`sym_ˇlc_vÆue
(
moduÀs_sym
);

411 
	}
}

413 
	$c⁄f_ªad
(c⁄° *
«me
)

415 
symbﬁ
 *
sym
;

416 
i
;

418 
	`sym_£t_ch™ge_cou¡
(0);

420 i‡(
	`c⁄f_ªad_sim∂e
(
«me
, 
S_DEF_USER
))

423 
	`f‹_Æl_symbﬁs
(
i
, 
sym
) {

424 
	`sym_ˇlc_vÆue
(
sym
);

425 i‡(
	`sym_is_choi˚
(
sym
Ë|| (sym->
Êags
 & 
SYMBOL_AUTO
))

427 i‡(
	`sym_has_vÆue
(
sym
Ë&& (sym->
Êags
 & 
SYMBOL_WRITE
)) {

429 
sym
->
ty≥
) {

430 
S_BOOLEAN
:

431 
S_TRISTATE
:

432 i‡(
sym
->
def
[
S_DEF_USER
].
åi
 !
	`sym_gë_åi°©e_vÆue
(sym))

434 i‡(!
	`sym_is_choi˚
(
sym
))

438 i‡(!
	`°rcmp
(
sym
->
cuº
.
vÆ
, sym->
def
[
S_DEF_USER
].val))

442 } i‡(!
	`sym_has_vÆue
(
sym
Ë&& !(sym->
Êags
 & 
SYMBOL_WRITE
))

445 
c⁄f_unßved
++;

449 
	`f‹_Æl_symbﬁs
(
i
, 
sym
) {

450 i‡(
	`sym_has_vÆue
(
sym
Ë&& !
	`sym_is_choi˚_vÆue
(sym)) {

456 i‡(
sym
->
visibÀ
 =
no
 && !
c⁄f_unßved
)

457 
sym
->
Êags
 &~
SYMBOL_DEF_USER
;

458 
sym
->
ty≥
) {

459 
S_STRING
:

460 
S_INT
:

461 
S_HEX
:

463 i‡(
	`sym_°rög_wôhö_ønge
(
sym
, sym->
def
[
S_DEF_USER
].
vÆ
))

465 
sym
->
Êags
 &~(
SYMBOL_VALID
|
SYMBOL_DEF_USER
);

466 
c⁄f_unßved
++;

474 
	`sym_add_ch™ge_cou¡
(
c⁄f_w¨nögs
 || 
c⁄f_unßved
);

477 
	}
}

488 
	$kc⁄fig_¥öt_symbﬁ
(
FILE
 *
Â
, 
symbﬁ
 *
sym
, c⁄° *
vÆue
, *
¨g
)

491 
sym
->
ty≥
) {

492 
S_BOOLEAN
:

493 
S_TRISTATE
:

494 i‡(*
vÆue
 == 'n') {

495 
boﬁ
 
skù_un£t
 = (
¨g
 !
NULL
);

497 i‡(!
skù_un£t
)

498 
	`Ârötf
(
Â
, "# %s%s isÇot set\n",

499 
CONFIG_
, 
sym
->
«me
);

507 
	`Ârötf
(
Â
, "%s%s=%s\n", 
CONFIG_
, 
sym
->
«me
, 
vÆue
);

508 
	}
}

511 
	$kc⁄fig_¥öt_commít
(
FILE
 *
Â
, c⁄° *
vÆue
, *
¨g
)

513 c⁄° *
p
 = 
vÆue
;

514 
size_t
 
l
;

517 
l
 = 
	`°rc•n
(
p
, "\n");

518 
	`Ârötf
(
Â
, "#");

519 i‡(
l
) {

520 
	`Ârötf
(
Â
, " ");

521 
	`xfwrôe
(
p
, 
l
, 1, 
Â
);

522 
p
 +
l
;

524 
	`Ârötf
(
Â
, "\n");

525 i‡(*
p
++ == '\0')

528 
	}
}

530 
c⁄f_¥öãr
 
	gkc⁄fig_¥öãr_cb
 =

532 .
¥öt_symbﬁ
 = 
kc⁄fig_¥öt_symbﬁ
,

533 .
	g¥öt_commít
 = 
kc⁄fig_¥öt_commít
,

542 
	$hódî_¥öt_symbﬁ
(
FILE
 *
Â
, 
symbﬁ
 *
sym
, c⁄° *
vÆue
, *
¨g
)

545 
sym
->
ty≥
) {

546 
S_BOOLEAN
:

547 
S_TRISTATE
: {

548 c⁄° *
suffix
 = "";

550 *
vÆue
) {

554 
suffix
 = "_MODULE";

557 
	`Ârötf
(
Â
, "#define %s%s%s 1\n",

558 
CONFIG_
, 
sym
->
«me
, 
suffix
);

562 
S_HEX
: {

563 c⁄° *
¥efix
 = "";

565 i‡(
vÆue
[0] != '0' || (value[1] != 'x' && value[1] != 'X'))

566 
¥efix
 = "0x";

567 
	`Ârötf
(
Â
, "#define %s%s %s%s\n",

568 
CONFIG_
, 
sym
->
«me
, 
¥efix
, 
vÆue
);

571 
S_STRING
:

572 
S_INT
:

573 
	`Ârötf
(
Â
, "#define %s%s %s\n",

574 
CONFIG_
, 
sym
->
«me
, 
vÆue
);

580 
	}
}

583 
	$hódî_¥öt_commít
(
FILE
 *
Â
, c⁄° *
vÆue
, *
¨g
)

585 c⁄° *
p
 = 
vÆue
;

586 
size_t
 
l
;

588 
	`Ârötf
(
Â
, "/*\n");

590 
l
 = 
	`°rc•n
(
p
, "\n");

591 
	`Ârötf
(
Â
, " *");

592 i‡(
l
) {

593 
	`Ârötf
(
Â
, " ");

594 
	`xfwrôe
(
p
, 
l
, 1, 
Â
);

595 
p
 +
l
;

597 
	`Ârötf
(
Â
, "\n");

598 i‡(*
p
++ == '\0')

601 
	`Ârötf
(
Â
, " */\n");

602 
	}
}

604 
c⁄f_¥öãr
 
	ghódî_¥öãr_cb
 =

606 .
¥öt_symbﬁ
 = 
hódî_¥öt_symbﬁ
,

607 .
	g¥öt_commít
 = 
hódî_¥öt_commít
,

616 
	$åi°©e_¥öt_symbﬁ
(
FILE
 *
Â
, 
symbﬁ
 *
sym
, c⁄° *
vÆue
, *
¨g
)

619 i‡(
sym
->
ty≥
 =
S_TRISTATE
 && *
vÆue
 != 'n')

620 
	`Ârötf
(
Â
, "%s%s=%c\n", 
CONFIG_
, 
sym
->
«me
, ()
	`touµî
(*
vÆue
));

621 
	}
}

623 
c⁄f_¥öãr
 
	gåi°©e_¥öãr_cb
 =

625 .
¥öt_symbﬁ
 = 
åi°©e_¥öt_symbﬁ
,

626 .
	g¥öt_commít
 = 
kc⁄fig_¥öt_commít
,

629 
	$c⁄f_wrôe_symbﬁ
(
FILE
 *
Â
, 
symbﬁ
 *
sym
,

630 
c⁄f_¥öãr
 *
¥öãr
, *
¥öãr_¨g
)

632 c⁄° *
°r
;

634 
sym
->
ty≥
) {

635 
S_OTHER
:

636 
S_UNKNOWN
:

638 
S_STRING
:

639 
°r
 = 
	`sym_gë_°rög_vÆue
(
sym
);

640 
°r
 = 
	`sym_esˇ≥_°rög_vÆue
(str);

641 
¥öãr
->
	`¥öt_symbﬁ
(
Â
, 
sym
, 
°r
, 
¥öãr_¨g
);

642 
	`‰ì
((*)
°r
);

645 
°r
 = 
	`sym_gë_°rög_vÆue
(
sym
);

646 
¥öãr
->
	`¥öt_symbﬁ
(
Â
, 
sym
, 
°r
, 
¥öãr_¨g
);

648 
	}
}

651 
	$c⁄f_wrôe_hódög
(
FILE
 *
Â
, 
c⁄f_¥öãr
 *
¥öãr
, *
¥öãr_¨g
)

653 
buf
[256];

655 
	`¢¥ötf
(
buf
, (buf),

659 
roŸmíu
.
¥om±
->
ãxt
);

661 
¥öãr
->
	`¥öt_commít
(
Â
, 
buf
, 
¥öãr_¨g
);

662 
	}
}

668 
	$c⁄f_wrôe_defc⁄fig
(c⁄° *
fûíame
)

670 
symbﬁ
 *
sym
;

671 
míu
 *menu;

672 
FILE
 *
out
;

674 
out
 = 
	`f›í
(
fûíame
, "w");

675 i‡(!
out
)

678 
	`sym_˛ór_Æl_vÆid
();

681 
míu
 = 
roŸmíu
.
li°
;

683 
míu
 !
NULL
)

685 
sym
 = 
míu
->sym;

686 i‡(
sym
 =
NULL
) {

687 i‡(!
	`míu_is_visibÀ
(
míu
))

688 
√xt_míu
;

689 } i‡(!
	`sym_is_choi˚
(
sym
)) {

690 
	`sym_ˇlc_vÆue
(
sym
);

691 i‡(!(
sym
->
Êags
 & 
SYMBOL_WRITE
))

692 
√xt_míu
;

693 
sym
->
Êags
 &~
SYMBOL_WRITE
;

695 i‡(!
	`sym_is_ch™gabÀ
(
sym
))

696 
√xt_míu
;

698 i‡(
	`°rcmp
(
	`sym_gë_°rög_vÆue
(
sym
), 
	`sym_gë_°rög_deÁu…
(sym)) == 0)

699 
√xt_míu
;

708 i‡(
	`sym_is_choi˚_vÆue
(
sym
)) {

709 
symbﬁ
 *
cs
;

710 
symbﬁ
 *
ds
;

712 
cs
 = 
	`¥›_gë_symbﬁ
(
	`sym_gë_choi˚_¥›
(
sym
));

713 
ds
 = 
	`sym_choi˚_deÁu…
(
cs
);

714 i‡(!
	`sym_is_›ti⁄Æ
(
cs
Ë&& 
sym
 =
ds
) {

715 i‡((
sym
->
ty≥
 =
S_BOOLEAN
) &&

716 
	`sym_gë_åi°©e_vÆue
(
sym
Ë=
yes
)

717 
√xt_míu
;

720 
	`c⁄f_wrôe_symbﬁ
(
out
, 
sym
, &
kc⁄fig_¥öãr_cb
, 
NULL
);

722 
√xt_míu
:

723 i‡(
míu
->
li°
 !
NULL
) {

724 
míu
 = míu->
li°
;

726 i‡(
míu
->
√xt
 !
NULL
) {

727 
míu
 = míu->
√xt
;

729 (
míu
 = míu->
∑ª¡
)) {

730 i‡(
míu
->
√xt
 !
NULL
) {

731 
míu
 = míu->
√xt
;

737 
	`f˛o£
(
out
);

739 
	}
}

741 
	$c⁄f_wrôe
(c⁄° *
«me
)

743 
FILE
 *
out
;

744 
symbﬁ
 *
sym
;

745 
míu
 *menu;

746 c⁄° *
ba£«me
;

747 c⁄° *
°r
;

748 
dú«me
[
PATH_MAX
+1], 
tm≤ame
[PATH_MAX+1], 
√w«me
[PATH_MAX+1];

749 *
ív
;

751 
dú«me
[0] = 0;

752 i‡(
«me
 &&Çame[0]) {

753 
°©
 
°
;

754 *
¶ash
;

756 i‡(!
	`°©
(
«me
, &
°
Ë&& 
	`S_ISDIR
(°.
°_mode
)) {

757 
	`°r˝y
(
dú«me
, 
«me
);

758 
	`°rˇt
(
dú«me
, "/");

759 
ba£«me
 = 
	`c⁄f_gë_c⁄fig«me
();

760 } i‡((
¶ash
 = 
	`°ºchr
(
«me
, '/'))) {

761 
size
 = 
¶ash
 - 
«me
 + 1;

762 
	`mem˝y
(
dú«me
, 
«me
, 
size
);

763 
dú«me
[
size
] = 0;

764 i‡(
¶ash
[1])

765 
ba£«me
 = 
¶ash
 + 1;

767 
ba£«me
 = 
	`c⁄f_gë_c⁄fig«me
();

769 
ba£«me
 = 
«me
;

771 
ba£«me
 = 
	`c⁄f_gë_c⁄fig«me
();

773 
	`•rötf
(
√w«me
, "%s%s", 
dú«me
, 
ba£«me
);

774 
ív
 = 
	`gëív
("KCONFIG_OVERWRITECONFIG");

775 i‡(!
ív
 || !*env) {

776 
	`•rötf
(
tm≤ame
, "%s.tmpc⁄fig.%d", 
dú«me
, ()
	`gëpid
());

777 
out
 = 
	`f›í
(
tm≤ame
, "w");

779 *
tm≤ame
 = 0;

780 
out
 = 
	`f›í
(
√w«me
, "w");

782 i‡(!
out
)

785 
	`c⁄f_wrôe_hódög
(
out
, &
kc⁄fig_¥öãr_cb
, 
NULL
);

787 i‡(!
	`c⁄f_gë_ch™ged
())

788 
	`sym_˛ór_Æl_vÆid
();

790 
míu
 = 
roŸmíu
.
li°
;

791 
míu
) {

792 
sym
 = 
míu
->sym;

793 i‡(!
sym
) {

794 i‡(!
	`míu_is_visibÀ
(
míu
))

795 
√xt
;

796 
°r
 = 
	`míu_gë_¥om±
(
míu
);

797 
	`Ârötf
(
out
, "\n"

800 "#\n", 
°r
);

801 } i‡(!(
sym
->
Êags
 & 
SYMBOL_CHOICE
)) {

802 
	`sym_ˇlc_vÆue
(
sym
);

803 i‡(!(
sym
->
Êags
 & 
SYMBOL_WRITE
))

804 
√xt
;

805 
sym
->
Êags
 &~
SYMBOL_WRITE
;

807 
	`c⁄f_wrôe_symbﬁ
(
out
, 
sym
, &
kc⁄fig_¥öãr_cb
, 
NULL
);

810 
√xt
:

811 i‡(
míu
->
li°
) {

812 
míu
 = míu->
li°
;

815 i‡(
míu
->
√xt
)

816 
míu
 = míu->
√xt
;

817 (
míu
 = míu->
∑ª¡
)) {

818 i‡(
míu
->
√xt
) {

819 
míu
 = míu->
√xt
;

824 
	`f˛o£
(
out
);

826 i‡(*
tm≤ame
) {

827 
	`°rˇt
(
dú«me
, 
ba£«me
);

828 
	`°rˇt
(
dú«me
, ".old");

829 
	`ª«me
(
√w«me
, 
dú«me
);

830 i‡(
	`ª«me
(
tm≤ame
, 
√w«me
))

834 
	`c⁄f_mesßge
(
	`_
("c⁄figuøti⁄ wrôã¿tÿ%s"), 
√w«me
);

836 
	`sym_£t_ch™ge_cou¡
(0);

839 
	}
}

841 
	$c⁄f_•lô_c⁄fig
()

843 c⁄° *
«me
;

844 
∑th
[
PATH_MAX
+1];

845 *
s
, *
d
, 
c
;

846 
symbﬁ
 *
sym
;

847 
°©
 
sb
;

848 
ªs
, 
i
, 
fd
;

850 
«me
 = 
	`c⁄f_gë_autoc⁄fig_«me
();

851 
	`c⁄f_ªad_sim∂e
(
«me
, 
S_DEF_AUTO
);

853 i‡(
	`chdú
("include/config"))

856 
ªs
 = 0;

857 
	`f‹_Æl_symbﬁs
(
i
, 
sym
) {

858 
	`sym_ˇlc_vÆue
(
sym
);

859 i‡((
sym
->
Êags
 & 
SYMBOL_AUTO
Ë|| !sym->
«me
)

861 i‡(
sym
->
Êags
 & 
SYMBOL_WRITE
) {

862 i‡(
sym
->
Êags
 & 
SYMBOL_DEF_AUTO
) {

867 
sym
->
ty≥
) {

868 
S_BOOLEAN
:

869 
S_TRISTATE
:

870 i‡(
	`sym_gë_åi°©e_vÆue
(
sym
) ==

871 
sym
->
def
[
S_DEF_AUTO
].
åi
)

874 
S_STRING
:

875 
S_HEX
:

876 
S_INT
:

877 i‡(!
	`°rcmp
(
	`sym_gë_°rög_vÆue
(
sym
),

878 
sym
->
def
[
S_DEF_AUTO
].
vÆ
))

889 
sym
->
ty≥
) {

890 
S_BOOLEAN
:

891 
S_TRISTATE
:

892 i‡(
	`sym_gë_åi°©e_vÆue
(
sym
Ë=
no
)

899 } i‡(!(
sym
->
Êags
 & 
SYMBOL_DEF_AUTO
))

909 
s
 = 
sym
->
«me
;

910 
d
 = 
∑th
;

911 (
c
 = *
s
++)) {

912 
c
 = 
	`tﬁowî
(c);

913 *
d
++ = (
c
 == '_') ? '/' : c;

915 
	`°r˝y
(
d
, ".h");

918 
fd
 = 
	`›í
(
∑th
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0644);

919 i‡(
fd
 == -1) {

920 i‡(
î∫o
 !
ENOENT
) {

921 
ªs
 = 1;

928 
d
 = 
∑th
;

929 (
d
 = 
	`°rchr
(d, '/'))) {

930 *
d
 = 0;

931 i‡(
	`°©
(
∑th
, &
sb
Ë&& 
	`mkdú
(path, 0755)) {

932 
ªs
 = 1;

933 
out
;

935 *
d
++ = '/';

938 
fd
 = 
	`›í
(
∑th
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0644);

939 i‡(
fd
 == -1) {

940 
ªs
 = 1;

944 
	`˛o£
(
fd
);

946 
out
:

947 i‡(
	`chdú
("../.."))

950  
ªs
;

951 
	}
}

953 
	$c⁄f_wrôe_autoc⁄f
()

955 
symbﬁ
 *
sym
;

956 c⁄° *
«me
;

957 
FILE
 *
out
, *
åi°©e
, *
out_h
;

958 
i
;

960 
	`sym_˛ór_Æl_vÆid
();

962 
	`fûe_wrôe_dï
("include/config/auto.conf.cmd");

964 i‡(
	`c⁄f_•lô_c⁄fig
())

967 
out
 = 
	`f›í
(".tmpconfig", "w");

968 i‡(!
out
)

971 
åi°©e
 = 
	`f›í
(".tmpconfig_tristate", "w");

972 i‡(!
åi°©e
) {

973 
	`f˛o£
(
out
);

977 
out_h
 = 
	`f›í
(".tmpconfig.h", "w");

978 i‡(!
out_h
) {

979 
	`f˛o£
(
out
);

980 
	`f˛o£
(
åi°©e
);

984 
	`c⁄f_wrôe_hódög
(
out
, &
kc⁄fig_¥öãr_cb
, 
NULL
);

986 
	`c⁄f_wrôe_hódög
(
åi°©e
, &
åi°©e_¥öãr_cb
, 
NULL
);

988 
	`c⁄f_wrôe_hódög
(
out_h
, &
hódî_¥öãr_cb
, 
NULL
);

990 
	`f‹_Æl_symbﬁs
(
i
, 
sym
) {

991 
	`sym_ˇlc_vÆue
(
sym
);

992 i‡(!(
sym
->
Êags
 & 
SYMBOL_WRITE
Ë|| !sym->
«me
)

996 
	`c⁄f_wrôe_symbﬁ
(
out
, 
sym
, &
kc⁄fig_¥öãr_cb
, (*)1);

998 
	`c⁄f_wrôe_symbﬁ
(
åi°©e
, 
sym
, &
åi°©e_¥öãr_cb
, (*)1);

1000 
	`c⁄f_wrôe_symbﬁ
(
out_h
, 
sym
, &
hódî_¥öãr_cb
, 
NULL
);

1002 
	`f˛o£
(
out
);

1003 
	`f˛o£
(
åi°©e
);

1004 
	`f˛o£
(
out_h
);

1006 
«me
 = 
	`gëív
("KCONFIG_AUTOHEADER");

1007 i‡(!
«me
)

1008 
«me
 = "include/generated/autoconf.h";

1009 i‡(
	`ª«me
(".tmpc⁄fig.h", 
«me
))

1011 
«me
 = 
	`gëív
("KCONFIG_TRISTATE");

1012 i‡(!
«me
)

1013 
«me
 = "include/config/tristate.conf";

1014 i‡(
	`ª«me
(".tmpc⁄fig_åi°©e", 
«me
))

1016 
«me
 = 
	`c⁄f_gë_autoc⁄fig_«me
();

1021 i‡(
	`ª«me
(".tmpc⁄fig", 
«me
))

1025 
	}
}

1027 
	gsym_ch™ge_cou¡
;

1028 (*
c⁄f_ch™ged_ˇŒback
)();

1030 
	$sym_£t_ch™ge_cou¡
(
cou¡
)

1032 
_sym_ch™ge_cou¡
 = 
sym_ch™ge_cou¡
;

1033 
sym_ch™ge_cou¡
 = 
cou¡
;

1034 i‡(
c⁄f_ch™ged_ˇŒback
 &&

1035 (
boﬁ
)
_sym_ch™ge_cou¡
 !(boﬁ)
cou¡
)

1036 
	`c⁄f_ch™ged_ˇŒback
();

1037 
	}
}

1039 
	$sym_add_ch™ge_cou¡
(
cou¡
)

1041 
	`sym_£t_ch™ge_cou¡
(
cou¡
 + 
sym_ch™ge_cou¡
);

1042 
	}
}

1044 
boﬁ
 
	$c⁄f_gë_ch™ged
()

1046  
sym_ch™ge_cou¡
;

1047 
	}
}

1049 
	$c⁄f_£t_ch™ged_ˇŒback
((*
‚
)())

1051 
c⁄f_ch™ged_ˇŒback
 = 
‚
;

1052 
	}
}

1054 
boﬁ
 
	$øndomize_choi˚_vÆues
(
symbﬁ
 *
csym
)

1056 
¥›îty
 *
¥›
;

1057 
symbﬁ
 *
sym
;

1058 
ex¥
 *
e
;

1059 
˙t
, 
def
;

1066 i‡(
csym
->
cuº
.
åi
 !
yes
)

1067  
Ál£
;

1069 
¥›
 = 
	`sym_gë_choi˚_¥›
(
csym
);

1072 
˙t
 = 0;

1073 
	`ex¥_li°_f‹_óch_sym
(
¥›
->
ex¥
, 
e
, 
sym
)

1074 
˙t
++;

1080 
def
 = (
	`ønd
(Ë% 
˙t
);

1082 
˙t
 = 0;

1083 
	`ex¥_li°_f‹_óch_sym
(
¥›
->
ex¥
, 
e
, 
sym
) {

1084 i‡(
def
 =
˙t
++) {

1085 
sym
->
def
[
S_DEF_USER
].
åi
 = 
yes
;

1086 
csym
->
def
[
S_DEF_USER
].
vÆ
 = 
sym
;

1089 
sym
->
def
[
S_DEF_USER
].
åi
 = 
no
;

1091 
sym
->
Êags
 |
SYMBOL_DEF_USER
;

1093 
sym
->
Êags
 &~
SYMBOL_VALID
;

1095 
csym
->
Êags
 |
SYMBOL_DEF_USER
;

1097 
csym
->
Êags
 &~(
SYMBOL_VALID
);

1099  
åue
;

1100 
	}
}

1102 
	$£t_Æl_choi˚_vÆues
(
symbﬁ
 *
csym
)

1104 
¥›îty
 *
¥›
;

1105 
symbﬁ
 *
sym
;

1106 
ex¥
 *
e
;

1108 
¥›
 = 
	`sym_gë_choi˚_¥›
(
csym
);

1113 
	`ex¥_li°_f‹_óch_sym
(
¥›
->
ex¥
, 
e
, 
sym
) {

1114 i‡(!
	`sym_has_vÆue
(
sym
))

1115 
sym
->
def
[
S_DEF_USER
].
åi
 = 
no
;

1117 
csym
->
Êags
 |
SYMBOL_DEF_USER
;

1119 
csym
->
Êags
 &~(
SYMBOL_VALID
 | 
SYMBOL_NEED_SET_CHOICE_VALUES
);

1120 
	}
}

1122 
boﬁ
 
	$c⁄f_£t_Æl_√w_symbﬁs
(
c⁄f_def_mode
 
mode
)

1124 
symbﬁ
 *
sym
, *
csym
;

1125 
i
, 
˙t
, 
pby
, 
±y
, 
±m
;

1130 
pby
 = 50; 
±y
 = 
±m
 = 33;

1133 i‡(
mode
 =
def_øndom
) {

1134 
n
, 
p
[3];

1135 *
ív
 = 
	`gëív
("KCONFIG_PROBABILITY");

1136 
n
 = 0;

1137  
ív
 && *env ) {

1138 *
ídp
;

1139 
tmp
 = 
	`°πﬁ
–
ív
, &
ídp
, 10 );

1140 if–
tmp
 >= 0 &&Åmp <= 100 ) {

1141 
p
[
n
++] = 
tmp
;

1143 
î∫o
 = 
ERANGE
;

1144 
	`≥º‹
( "KCONFIG_PROBABILITY" );

1145 
	`exô
( 1 );

1147 
ív
 = (*
ídp
 == ':') ?Éndp+1 :Éndp;

1148 if–
n
 >=3 ) {

1152  
n
 ) {

1154 
pby
 = 
p
[0]; 
±m
 =Öby/2; 
±y
 =Öby-ptm;

1157 
±y
 = 
p
[0]; 
±m
 =Ö[1]; 
pby
 =Öty +Ötm;

1160 
pby
 = 
p
[0]; 
±y
 =Ö[1]; 
±m
 =Ö[2];

1164 if–
±y
+
±m
 > 100 ) {

1165 
î∫o
 = 
ERANGE
;

1166 
	`≥º‹
( "KCONFIG_PROBABILITY" );

1167 
	`exô
( 1 );

1170 
boﬁ
 
has_ch™ged
 = 
Ál£
;

1172 
	`f‹_Æl_symbﬁs
(
i
, 
sym
) {

1173 i‡(
	`sym_has_vÆue
(
sym
Ë|| (sym->
Êags
 & 
SYMBOL_VALID
))

1175 
	`sym_gë_ty≥
(
sym
)) {

1176 
S_BOOLEAN
:

1177 
S_TRISTATE
:

1178 
has_ch™ged
 = 
åue
;

1179 
mode
) {

1180 
def_yes
:

1181 
sym
->
def
[
S_DEF_USER
].
åi
 = 
yes
;

1183 
def_mod
:

1184 
sym
->
def
[
S_DEF_USER
].
åi
 = 
mod
;

1186 
def_no
:

1187 i‡(
sym
->
Êags
 & 
SYMBOL_ALLNOCONFIG_Y
)

1188 
sym
->
def
[
S_DEF_USER
].
åi
 = 
yes
;

1190 
sym
->
def
[
S_DEF_USER
].
åi
 = 
no
;

1192 
def_øndom
:

1193 
sym
->
def
[
S_DEF_USER
].
åi
 = 
no
;

1194 
˙t
 = 
	`ønd
() % 100;

1195 i‡(
sym
->
ty≥
 =
S_TRISTATE
) {

1196 i‡(
˙t
 < 
±y
)

1197 
sym
->
def
[
S_DEF_USER
].
åi
 = 
yes
;

1198 i‡(
˙t
 < (
±y
+
±m
))

1199 
sym
->
def
[
S_DEF_USER
].
åi
 = 
mod
;

1200 } i‡(
˙t
 < 
pby
)

1201 
sym
->
def
[
S_DEF_USER
].
åi
 = 
yes
;

1206 i‡(!(
	`sym_is_choi˚
(
sym
Ë&& 
mode
 =
def_øndom
))

1207 
sym
->
Êags
 |
SYMBOL_DEF_USER
;

1215 
	`sym_˛ór_Æl_vÆid
();

1226 i‡(
mode
 !
def_øndom
) {

1227 
	`f‹_Æl_symbﬁs
(
i
, 
csym
) {

1228 i‡((
	`sym_is_choi˚
(
csym
Ë&& !
	`sym_has_vÆue
(csym)) ||

1229 
	`sym_is_choi˚_vÆue
(
csym
))

1230 
csym
->
Êags
 |
SYMBOL_NEED_SET_CHOICE_VALUES
;

1234 
	`f‹_Æl_symbﬁs
(
i
, 
csym
) {

1235 i‡(
	`sym_has_vÆue
(
csym
Ë|| !
	`sym_is_choi˚
(csym))

1238 
	`sym_ˇlc_vÆue
(
csym
);

1239 i‡(
mode
 =
def_øndom
)

1240 
has_ch™ged
 = 
	`øndomize_choi˚_vÆues
(
csym
);

1242 
	`£t_Æl_choi˚_vÆues
(
csym
);

1243 
has_ch™ged
 = 
åue
;

1247  
has_ch™ged
;

1248 
	}
}

	@swupdate/scripts/kconfig/expr.c

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

10 
	~"lkc.h
"

12 
	#DEBUG_EXPR
 0

	)

14 
ex¥_eq
(
ex¥
 *
e1
, ex¥ *
e2
);

15 
ex¥
 *
ex¥_ñimö©e_yn
(ex¥ *
e
);

17 
ex¥
 *
	$ex¥_Æloc_symbﬁ
(
symbﬁ
 *
sym
)

19 
ex¥
 *
e
 = 
	`xˇŒoc
(1, (*e));

20 
e
->
ty≥
 = 
E_SYMBOL
;

21 
e
->
À·
.
sym
 = sym;

22  
e
;

23 
	}
}

25 
ex¥
 *
	$ex¥_Æloc_⁄e
(
ex¥_ty≥
 
ty≥
, 
ex¥
 *
˚
)

27 
ex¥
 *
e
 = 
	`xˇŒoc
(1, (*e));

28 
e
->
ty≥
 =Åype;

29 
e
->
À·
.
ex¥
 = 
˚
;

30  
e
;

31 
	}
}

33 
ex¥
 *
	$ex¥_Æloc_two
(
ex¥_ty≥
 
ty≥
, 
ex¥
 *
e1
, ex¥ *
e2
)

35 
ex¥
 *
e
 = 
	`xˇŒoc
(1, (*e));

36 
e
->
ty≥
 =Åype;

37 
e
->
À·
.
ex¥
 = 
e1
;

38 
e
->
right
.
ex¥
 = 
e2
;

39  
e
;

40 
	}
}

42 
ex¥
 *
	$ex¥_Æloc_comp
(
ex¥_ty≥
 
ty≥
, 
symbﬁ
 *
s1
, symbﬁ *
s2
)

44 
ex¥
 *
e
 = 
	`xˇŒoc
(1, (*e));

45 
e
->
ty≥
 =Åype;

46 
e
->
À·
.
sym
 = 
s1
;

47 
e
->
right
.
sym
 = 
s2
;

48  
e
;

49 
	}
}

51 
ex¥
 *
	$ex¥_Æloc_™d
(
ex¥
 *
e1
, ex¥ *
e2
)

53 i‡(!
e1
)

54  
e2
;

55  
e2
 ? 
	`ex¥_Æloc_two
(
E_AND
, 
e1
,É2) :É1;

56 
	}
}

58 
ex¥
 *
	$ex¥_Æloc_‹
(
ex¥
 *
e1
, ex¥ *
e2
)

60 i‡(!
e1
)

61  
e2
;

62  
e2
 ? 
	`ex¥_Æloc_two
(
E_OR
, 
e1
,É2) :É1;

63 
	}
}

65 
ex¥
 *
	$ex¥_c›y
(c⁄° 
ex¥
 *
‹g
)

67 
ex¥
 *
e
;

69 i‡(!
‹g
)

70  
NULL
;

72 
e
 = 
	`xmÆloc
((*
‹g
));

73 
	`mem˝y
(
e
, 
‹g
, (*org));

74 
‹g
->
ty≥
) {

75 
E_SYMBOL
:

76 
e
->
À·
 = 
‹g
->left;

78 
E_NOT
:

79 
e
->
À·
.
ex¥
 = 
	`ex¥_c›y
(
‹g
->left.expr);

81 
E_EQUAL
:

82 
E_GEQ
:

83 
E_GTH
:

84 
E_LEQ
:

85 
E_LTH
:

86 
E_UNEQUAL
:

87 
e
->
À·
.
sym
 = 
‹g
->left.sym;

88 
e
->
right
.
sym
 = 
‹g
->right.sym;

90 
E_AND
:

91 
E_OR
:

92 
E_LIST
:

93 
e
->
À·
.
ex¥
 = 
	`ex¥_c›y
(
‹g
->left.expr);

94 
e
->
right
.
ex¥
 = 
	`ex¥_c›y
(
‹g
->right.expr);

97 
	`¥ötf
("ˇn'àc›yÅy≥ %d\n", 
e
->
ty≥
);

98 
	`‰ì
(
e
);

99 
e
 = 
NULL
;

103  
e
;

104 
	}
}

106 
	$ex¥_‰ì
(
ex¥
 *
e
)

108 i‡(!
e
)

111 
e
->
ty≥
) {

112 
E_SYMBOL
:

114 
E_NOT
:

115 
	`ex¥_‰ì
(
e
->
À·
.
ex¥
);

117 
E_EQUAL
:

118 
E_GEQ
:

119 
E_GTH
:

120 
E_LEQ
:

121 
E_LTH
:

122 
E_UNEQUAL
:

124 
E_OR
:

125 
E_AND
:

126 
	`ex¥_‰ì
(
e
->
À·
.
ex¥
);

127 
	`ex¥_‰ì
(
e
->
right
.
ex¥
);

130 
	`¥ötf
("howÅÿ‰ìÅy≥ %d?\n", 
e
->
ty≥
);

133 
	`‰ì
(
e
);

134 
	}
}

136 
	gå™s_cou¡
;

138 
	#e1
 (*
ï1
)

	)

139 
	#e2
 (*
ï2
)

	)

141 
	$__ex¥_ñimö©e_eq
(
ex¥_ty≥
 
ty≥
, 
ex¥
 **
ï1
, ex¥ **
ï2
)

143 i‡(
e1
->
ty≥
 ==Åype) {

144 
	`__ex¥_ñimö©e_eq
(
ty≥
, &
e1
->
À·
.
ex¥
, &
e2
);

145 
	`__ex¥_ñimö©e_eq
(
ty≥
, &
e1
->
right
.
ex¥
, &
e2
);

148 i‡(
e2
->
ty≥
 ==Åype) {

149 
	`__ex¥_ñimö©e_eq
(
ty≥
, &
e1
, &
e2
->
À·
.
ex¥
);

150 
	`__ex¥_ñimö©e_eq
(
ty≥
, &
e1
, &
e2
->
right
.
ex¥
);

153 i‡(
e1
->
ty≥
 =
E_SYMBOL
 && 
e2
->type == E_SYMBOL &&

154 
e1
->
À·
.
sym
 =
e2
->left.sym &&

155 (
e1
->
À·
.
sym
 =&
symbﬁ_yes
 ||É1->À·.sym =&
symbﬁ_no
))

157 i‡(!
	`ex¥_eq
(
e1
, 
e2
))

159 
å™s_cou¡
++;

160 
	`ex¥_‰ì
(
e1
);Éx¥_‰ì(
e2
);

161 
ty≥
) {

162 
E_OR
:

163 
e1
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

164 
e2
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

166 
E_AND
:

167 
e1
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_yes
);

168 
e2
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_yes
);

173 
	}
}

175 
	$ex¥_ñimö©e_eq
(
ex¥
 **
ï1
, ex¥ **
ï2
)

177 i‡(!
e1
 || !
e2
)

179 
e1
->
ty≥
) {

180 
E_OR
:

181 
E_AND
:

182 
	`__ex¥_ñimö©e_eq
(
e1
->
ty≥
, 
ï1
, 
ï2
);

186 i‡(
e1
->
ty≥
 !
e2
->type) e2->type) {

187 
E_OR
:

188 
E_AND
:

189 
	`__ex¥_ñimö©e_eq
(
e2
->
ty≥
, 
ï1
, 
ï2
);

193 
e1
 = 
	`ex¥_ñimö©e_yn
(e1);

194 
e2
 = 
	`ex¥_ñimö©e_yn
(e2);

195 
	}
}

197 #unde‡
e1


198 #unde‡
e2


200 
	$ex¥_eq
(
ex¥
 *
e1
, ex¥ *
e2
)

202 
ªs
, 
ﬁd_cou¡
;

204 i‡(
e1
->
ty≥
 !
e2
->type)

206 
e1
->
ty≥
) {

207 
E_EQUAL
:

208 
E_GEQ
:

209 
E_GTH
:

210 
E_LEQ
:

211 
E_LTH
:

212 
E_UNEQUAL
:

213  
e1
->
À·
.
sym
 =
e2
->À·.sym &&É1->
right
.sym ==É2->right.sym;

214 
E_SYMBOL
:

215  
e1
->
À·
.
sym
 =
e2
->left.sym;

216 
E_NOT
:

217  
	`ex¥_eq
(
e1
->
À·
.
ex¥
, 
e2
->left.expr);

218 
E_AND
:

219 
E_OR
:

220 
e1
 = 
	`ex¥_c›y
(e1);

221 
e2
 = 
	`ex¥_c›y
(e2);

222 
ﬁd_cou¡
 = 
å™s_cou¡
;

223 
	`ex¥_ñimö©e_eq
(&
e1
, &
e2
);

224 
ªs
 = (
e1
->
ty≥
 =
E_SYMBOL
 && 
e2
->type == E_SYMBOL &&

225 
e1
->
À·
.
sym
 =
e2
->left.sym);

226 
	`ex¥_‰ì
(
e1
);

227 
	`ex¥_‰ì
(
e2
);

228 
å™s_cou¡
 = 
ﬁd_cou¡
;

229  
ªs
;

230 
E_LIST
:

231 
E_RANGE
:

232 
E_NONE
:

236 i‡(
DEBUG_EXPR
) {

237 
	`ex¥_Âröt
(
e1
, 
°dout
);

238 
	`¥ötf
(" = ");

239 
	`ex¥_Âröt
(
e2
, 
°dout
);

240 
	`¥ötf
(" ?\n");

244 
	}
}

246 
ex¥
 *
	$ex¥_ñimö©e_yn
(
ex¥
 *
e
)

248 
ex¥
 *
tmp
;

250 i‡(
e
Ëe->
ty≥
) {

251 
E_AND
:

252 
e
->
À·
.
ex¥
 = 
	`ex¥_ñimö©e_yn
(e->left.expr);

253 
e
->
right
.
ex¥
 = 
	`ex¥_ñimö©e_yn
(e->right.expr);

254 i‡(
e
->
À·
.
ex¥
->
ty≥
 =
E_SYMBOL
) {

255 i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_no
) {

256 
	`ex¥_‰ì
(
e
->
À·
.
ex¥
);

257 
	`ex¥_‰ì
(
e
->
right
.
ex¥
);

258 
e
->
ty≥
 = 
E_SYMBOL
;

259 
e
->
À·
.
sym
 = &
symbﬁ_no
;

260 
e
->
right
.
ex¥
 = 
NULL
;

261  
e
;

262 } i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_yes
) {

263 
	`‰ì
(
e
->
À·
.
ex¥
);

264 
tmp
 = 
e
->
right
.
ex¥
;

265 *
e
 = *”->
right
.
ex¥
);

266 
	`‰ì
(
tmp
);

267  
e
;

270 i‡(
e
->
right
.
ex¥
->
ty≥
 =
E_SYMBOL
) {

271 i‡(
e
->
right
.
ex¥
->
À·
.
sym
 =&
symbﬁ_no
) {

272 
	`ex¥_‰ì
(
e
->
À·
.
ex¥
);

273 
	`ex¥_‰ì
(
e
->
right
.
ex¥
);

274 
e
->
ty≥
 = 
E_SYMBOL
;

275 
e
->
À·
.
sym
 = &
symbﬁ_no
;

276 
e
->
right
.
ex¥
 = 
NULL
;

277  
e
;

278 } i‡(
e
->
right
.
ex¥
->
À·
.
sym
 =&
symbﬁ_yes
) {

279 
	`‰ì
(
e
->
right
.
ex¥
);

280 
tmp
 = 
e
->
À·
.
ex¥
;

281 *
e
 = *”->
À·
.
ex¥
);

282 
	`‰ì
(
tmp
);

283  
e
;

287 
E_OR
:

288 
e
->
À·
.
ex¥
 = 
	`ex¥_ñimö©e_yn
(e->left.expr);

289 
e
->
right
.
ex¥
 = 
	`ex¥_ñimö©e_yn
(e->right.expr);

290 i‡(
e
->
À·
.
ex¥
->
ty≥
 =
E_SYMBOL
) {

291 i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_no
) {

292 
	`‰ì
(
e
->
À·
.
ex¥
);

293 
tmp
 = 
e
->
right
.
ex¥
;

294 *
e
 = *”->
right
.
ex¥
);

295 
	`‰ì
(
tmp
);

296  
e
;

297 } i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_yes
) {

298 
	`ex¥_‰ì
(
e
->
À·
.
ex¥
);

299 
	`ex¥_‰ì
(
e
->
right
.
ex¥
);

300 
e
->
ty≥
 = 
E_SYMBOL
;

301 
e
->
À·
.
sym
 = &
symbﬁ_yes
;

302 
e
->
right
.
ex¥
 = 
NULL
;

303  
e
;

306 i‡(
e
->
right
.
ex¥
->
ty≥
 =
E_SYMBOL
) {

307 i‡(
e
->
right
.
ex¥
->
À·
.
sym
 =&
symbﬁ_no
) {

308 
	`‰ì
(
e
->
right
.
ex¥
);

309 
tmp
 = 
e
->
À·
.
ex¥
;

310 *
e
 = *”->
À·
.
ex¥
);

311 
	`‰ì
(
tmp
);

312  
e
;

313 } i‡(
e
->
right
.
ex¥
->
À·
.
sym
 =&
symbﬁ_yes
) {

314 
	`ex¥_‰ì
(
e
->
À·
.
ex¥
);

315 
	`ex¥_‰ì
(
e
->
right
.
ex¥
);

316 
e
->
ty≥
 = 
E_SYMBOL
;

317 
e
->
À·
.
sym
 = &
symbﬁ_yes
;

318 
e
->
right
.
ex¥
 = 
NULL
;

319  
e
;

326  
e
;

327 
	}
}

332 
ex¥
 *
	$ex¥_å™s_boﬁ
(
ex¥
 *
e
)

334 i‡(!
e
)

335  
NULL
;

336 
e
->
ty≥
) {

337 
E_AND
:

338 
E_OR
:

339 
E_NOT
:

340 
e
->
À·
.
ex¥
 = 
	`ex¥_å™s_boﬁ
(e->left.expr);

341 
e
->
right
.
ex¥
 = 
	`ex¥_å™s_boﬁ
(e->right.expr);

343 
E_UNEQUAL
:

345 i‡(
e
->
À·
.
sym
->
ty≥
 =
S_TRISTATE
) {

346 i‡(
e
->
right
.
sym
 =&
symbﬁ_no
) {

347 
e
->
ty≥
 = 
E_SYMBOL
;

348 
e
->
right
.
sym
 = 
NULL
;

355  
e
;

356 
	}
}

361 
ex¥
 *
	$ex¥_joö_‹
(
ex¥
 *
e1
, ex¥ *
e2
)

363 
ex¥
 *
tmp
;

364 
symbﬁ
 *
sym1
, *
sym2
;

366 i‡(
	`ex¥_eq
(
e1
, 
e2
))

367  
	`ex¥_c›y
(
e1
);

368 i‡(
e1
->
ty≥
 !
E_EQUAL
 &&É1->ty≥ !
E_UNEQUAL
 &&É1->ty≥ !
E_SYMBOL
 &&É1->ty≥ !
E_NOT
)

369  
NULL
;

370 i‡(
e2
->
ty≥
 !
E_EQUAL
 &&É2->ty≥ !
E_UNEQUAL
 &&É2->ty≥ !
E_SYMBOL
 &&É2->ty≥ !
E_NOT
)

371  
NULL
;

372 i‡(
e1
->
ty≥
 =
E_NOT
) {

373 
tmp
 = 
e1
->
À·
.
ex¥
;

374 i‡(
tmp
->
ty≥
 !
E_EQUAL
 &&Åmp->ty≥ !
E_UNEQUAL
 &&Åmp->ty≥ !
E_SYMBOL
)

375  
NULL
;

376 
sym1
 = 
tmp
->
À·
.
sym
;

378 
sym1
 = 
e1
->
À·
.
sym
;

379 i‡(
e2
->
ty≥
 =
E_NOT
) {

380 i‡(
e2
->
À·
.
ex¥
->
ty≥
 !
E_SYMBOL
)

381  
NULL
;

382 
sym2
 = 
e2
->
À·
.
ex¥
->À·.
sym
;

384 
sym2
 = 
e2
->
À·
.
sym
;

385 i‡(
sym1
 !
sym2
)

386  
NULL
;

387 i‡(
sym1
->
ty≥
 !
S_BOOLEAN
 && sym1->ty≥ !
S_TRISTATE
)

388  
NULL
;

389 i‡(
sym1
->
ty≥
 =
S_TRISTATE
) {

390 i‡(
e1
->
ty≥
 =
E_EQUAL
 && 
e2
->type == E_EQUAL &&

391 ((
e1
->
right
.
sym
 =&
symbﬁ_yes
 && 
e2
->right.sym =&
symbﬁ_mod
) ||

392 (
e1
->
right
.
sym
 =&
symbﬁ_mod
 && 
e2
->right.sym =&
symbﬁ_yes
))) {

394  
	`ex¥_Æloc_comp
(
E_UNEQUAL
, 
sym1
, &
symbﬁ_no
);

396 i‡(
e1
->
ty≥
 =
E_EQUAL
 && 
e2
->type == E_EQUAL &&

397 ((
e1
->
right
.
sym
 =&
symbﬁ_yes
 && 
e2
->right.sym =&
symbﬁ_no
) ||

398 (
e1
->
right
.
sym
 =&
symbﬁ_no
 && 
e2
->right.sym =&
symbﬁ_yes
))) {

400  
	`ex¥_Æloc_comp
(
E_UNEQUAL
, 
sym1
, &
symbﬁ_mod
);

402 i‡(
e1
->
ty≥
 =
E_EQUAL
 && 
e2
->type == E_EQUAL &&

403 ((
e1
->
right
.
sym
 =&
symbﬁ_mod
 && 
e2
->right.sym =&
symbﬁ_no
) ||

404 (
e1
->
right
.
sym
 =&
symbﬁ_no
 && 
e2
->right.sym =&
symbﬁ_mod
))) {

406  
	`ex¥_Æloc_comp
(
E_UNEQUAL
, 
sym1
, &
symbﬁ_yes
);

409 i‡(
sym1
->
ty≥
 =
S_BOOLEAN
 && sym1 =
sym2
) {

410 i‡((
e1
->
ty≥
 =
E_NOT
 &&É1->
À·
.
ex¥
->ty≥ =
E_SYMBOL
 && 
e2
->type == E_SYMBOL) ||

411 (
e2
->
ty≥
 =
E_NOT
 &&É2->
À·
.
ex¥
->ty≥ =
E_SYMBOL
 && 
e1
->type == E_SYMBOL))

412  
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_yes
);

415 i‡(
DEBUG_EXPR
) {

416 
	`¥ötf
("optimize (");

417 
	`ex¥_Âröt
(
e1
, 
°dout
);

418 
	`¥ötf
(") || (");

419 
	`ex¥_Âröt
(
e2
, 
°dout
);

420 
	`¥ötf
(")?\n");

422  
NULL
;

423 
	}
}

425 
ex¥
 *
	$ex¥_joö_™d
(
ex¥
 *
e1
, ex¥ *
e2
)

427 
ex¥
 *
tmp
;

428 
symbﬁ
 *
sym1
, *
sym2
;

430 i‡(
	`ex¥_eq
(
e1
, 
e2
))

431  
	`ex¥_c›y
(
e1
);

432 i‡(
e1
->
ty≥
 !
E_EQUAL
 &&É1->ty≥ !
E_UNEQUAL
 &&É1->ty≥ !
E_SYMBOL
 &&É1->ty≥ !
E_NOT
)

433  
NULL
;

434 i‡(
e2
->
ty≥
 !
E_EQUAL
 &&É2->ty≥ !
E_UNEQUAL
 &&É2->ty≥ !
E_SYMBOL
 &&É2->ty≥ !
E_NOT
)

435  
NULL
;

436 i‡(
e1
->
ty≥
 =
E_NOT
) {

437 
tmp
 = 
e1
->
À·
.
ex¥
;

438 i‡(
tmp
->
ty≥
 !
E_EQUAL
 &&Åmp->ty≥ !
E_UNEQUAL
 &&Åmp->ty≥ !
E_SYMBOL
)

439  
NULL
;

440 
sym1
 = 
tmp
->
À·
.
sym
;

442 
sym1
 = 
e1
->
À·
.
sym
;

443 i‡(
e2
->
ty≥
 =
E_NOT
) {

444 i‡(
e2
->
À·
.
ex¥
->
ty≥
 !
E_SYMBOL
)

445  
NULL
;

446 
sym2
 = 
e2
->
À·
.
ex¥
->À·.
sym
;

448 
sym2
 = 
e2
->
À·
.
sym
;

449 i‡(
sym1
 !
sym2
)

450  
NULL
;

451 i‡(
sym1
->
ty≥
 !
S_BOOLEAN
 && sym1->ty≥ !
S_TRISTATE
)

452  
NULL
;

454 i‡((
e1
->
ty≥
 =
E_SYMBOL
 && 
e2
->ty≥ =
E_EQUAL
 &&É2->
right
.
sym
 =&
symbﬁ_yes
) ||

455 (
e2
->
ty≥
 =
E_SYMBOL
 && 
e1
->ty≥ =
E_EQUAL
 &&É1->
right
.
sym
 =&
symbﬁ_yes
))

457  
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym1
, &
symbﬁ_yes
);

459 i‡((
e1
->
ty≥
 =
E_SYMBOL
 && 
e2
->ty≥ =
E_UNEQUAL
 &&É2->
right
.
sym
 =&
symbﬁ_no
) ||

460 (
e2
->
ty≥
 =
E_SYMBOL
 && 
e1
->ty≥ =
E_UNEQUAL
 &&É1->
right
.
sym
 =&
symbﬁ_no
))

462  
	`ex¥_Æloc_symbﬁ
(
sym1
);

464 i‡((
e1
->
ty≥
 =
E_SYMBOL
 && 
e2
->ty≥ =
E_UNEQUAL
 &&É2->
right
.
sym
 =&
symbﬁ_mod
) ||

465 (
e2
->
ty≥
 =
E_SYMBOL
 && 
e1
->ty≥ =
E_UNEQUAL
 &&É1->
right
.
sym
 =&
symbﬁ_mod
))

467  
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym1
, &
symbﬁ_yes
);

469 i‡(
sym1
->
ty≥
 =
S_TRISTATE
) {

470 i‡(
e1
->
ty≥
 =
E_EQUAL
 && 
e2
->ty≥ =
E_UNEQUAL
) {

472 
sym2
 = 
e1
->
right
.
sym
;

473 i‡((
e2
->
right
.
sym
->
Êags
 & 
SYMBOL_CONST
Ë&& (
sym2
->flags & SYMBOL_CONST))

474  
sym2
 !
e2
->
right
.
sym
 ? 
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym1
, sym2)

475 : 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

477 i‡(
e1
->
ty≥
 =
E_UNEQUAL
 && 
e2
->ty≥ =
E_EQUAL
) {

479 
sym2
 = 
e2
->
right
.
sym
;

480 i‡((
e1
->
right
.
sym
->
Êags
 & 
SYMBOL_CONST
Ë&& (
sym2
->flags & SYMBOL_CONST))

481  
sym2
 !
e1
->
right
.
sym
 ? 
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym1
, sym2)

482 : 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

484 i‡(
e1
->
ty≥
 =
E_UNEQUAL
 && 
e2
->type == E_UNEQUAL &&

485 ((
e1
->
right
.
sym
 =&
symbﬁ_yes
 && 
e2
->right.sym =&
symbﬁ_no
) ||

486 (
e1
->
right
.
sym
 =&
symbﬁ_no
 && 
e2
->right.sym =&
symbﬁ_yes
)))

488  
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym1
, &
symbﬁ_mod
);

490 i‡(
e1
->
ty≥
 =
E_UNEQUAL
 && 
e2
->type == E_UNEQUAL &&

491 ((
e1
->
right
.
sym
 =&
symbﬁ_yes
 && 
e2
->right.sym =&
symbﬁ_mod
) ||

492 (
e1
->
right
.
sym
 =&
symbﬁ_mod
 && 
e2
->right.sym =&
symbﬁ_yes
)))

494  
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym1
, &
symbﬁ_no
);

496 i‡(
e1
->
ty≥
 =
E_UNEQUAL
 && 
e2
->type == E_UNEQUAL &&

497 ((
e1
->
right
.
sym
 =&
symbﬁ_mod
 && 
e2
->right.sym =&
symbﬁ_no
) ||

498 (
e1
->
right
.
sym
 =&
symbﬁ_no
 && 
e2
->right.sym =&
symbﬁ_mod
)))

500  
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym1
, &
symbﬁ_yes
);

502 i‡((
e1
->
ty≥
 =
E_SYMBOL
 && 
e2
->ty≥ =
E_EQUAL
 &&É2->
right
.
sym
 =&
symbﬁ_mod
) ||

503 (
e2
->
ty≥
 =
E_SYMBOL
 && 
e1
->ty≥ =
E_EQUAL
 &&É1->
right
.
sym
 =&
symbﬁ_mod
) ||

504 (
e1
->
ty≥
 =
E_SYMBOL
 && 
e2
->ty≥ =
E_UNEQUAL
 &&É2->
right
.
sym
 =&
symbﬁ_yes
) ||

505 (
e2
->
ty≥
 =
E_SYMBOL
 && 
e1
->ty≥ =
E_UNEQUAL
 &&É1->
right
.
sym
 =&
symbﬁ_yes
))

506  
NULL
;

509 i‡(
DEBUG_EXPR
) {

510 
	`¥ötf
("optimize (");

511 
	`ex¥_Âröt
(
e1
, 
°dout
);

512 
	`¥ötf
(") && (");

513 
	`ex¥_Âröt
(
e2
, 
°dout
);

514 
	`¥ötf
(")?\n");

516  
NULL
;

517 
	}
}

519 
	$ex¥_ñimö©e_dups1
(
ex¥_ty≥
 
ty≥
, 
ex¥
 **
ï1
, ex¥ **
ï2
)

521 
	#e1
 (*
ï1
)

	)

522 
	#e2
 (*
ï2
)

	)

523 
ex¥
 *
tmp
;

525 i‡(
e1
->
ty≥
 ==Åype) {

526 
	`ex¥_ñimö©e_dups1
(
ty≥
, &
e1
->
À·
.
ex¥
, &
e2
);

527 
	`ex¥_ñimö©e_dups1
(
ty≥
, &
e1
->
right
.
ex¥
, &
e2
);

530 i‡(
e2
->
ty≥
 ==Åype) {

531 
	`ex¥_ñimö©e_dups1
(
ty≥
, &
e1
, &
e2
->
À·
.
ex¥
);

532 
	`ex¥_ñimö©e_dups1
(
ty≥
, &
e1
, &
e2
->
right
.
ex¥
);

535 i‡(
e1
 =
e2
)

538 
e1
->
ty≥
) {

539 
E_OR
: 
E_AND
:

540 
	`ex¥_ñimö©e_dups1
(
e1
->
ty≥
, &e1, &e1);

545 
ty≥
) {

546 
E_OR
:

547 
tmp
 = 
	`ex¥_joö_‹
(
e1
, 
e2
);

548 i‡(
tmp
) {

549 
	`ex¥_‰ì
(
e1
);Éx¥_‰ì(
e2
);

550 
e1
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

551 
e2
 = 
tmp
;

552 
å™s_cou¡
++;

555 
E_AND
:

556 
tmp
 = 
	`ex¥_joö_™d
(
e1
, 
e2
);

557 i‡(
tmp
) {

558 
	`ex¥_‰ì
(
e1
);Éx¥_‰ì(
e2
);

559 
e1
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_yes
);

560 
e2
 = 
tmp
;

561 
å™s_cou¡
++;

567 #unde‡
e1


568 #unde‡
e2


569 
	}
}

571 
ex¥
 *
	$ex¥_ñimö©e_dups
(
ex¥
 *
e
)

573 
ﬁdcou¡
;

574 i‡(!
e
)

575  
e
;

577 
ﬁdcou¡
 = 
å™s_cou¡
;

579 
å™s_cou¡
 = 0;

580 
e
->
ty≥
) {

581 
E_OR
: 
E_AND
:

582 
	`ex¥_ñimö©e_dups1
(
e
->
ty≥
, &e, &e);

586 i‡(!
å™s_cou¡
)

588 
e
 = 
	`ex¥_ñimö©e_yn
(e);

590 
å™s_cou¡
 = 
ﬁdcou¡
;

591  
e
;

592 
	}
}

594 
ex¥
 *
	$ex¥_å™sf‹m
(
ex¥
 *
e
)

596 
ex¥
 *
tmp
;

598 i‡(!
e
)

599  
NULL
;

600 
e
->
ty≥
) {

601 
E_EQUAL
:

602 
E_GEQ
:

603 
E_GTH
:

604 
E_LEQ
:

605 
E_LTH
:

606 
E_UNEQUAL
:

607 
E_SYMBOL
:

608 
E_LIST
:

611 
e
->
À·
.
ex¥
 = 
	`ex¥_å™sf‹m
(e->left.expr);

612 
e
->
right
.
ex¥
 = 
	`ex¥_å™sf‹m
(e->right.expr);

615 
e
->
ty≥
) {

616 
E_EQUAL
:

617 i‡(
e
->
À·
.
sym
->
ty≥
 !
S_BOOLEAN
)

619 i‡(
e
->
right
.
sym
 =&
symbﬁ_no
) {

620 
e
->
ty≥
 = 
E_NOT
;

621 
e
->
À·
.
ex¥
 = 
	`ex¥_Æloc_symbﬁ
”->À·.
sym
);

622 
e
->
right
.
sym
 = 
NULL
;

625 i‡(
e
->
right
.
sym
 =&
symbﬁ_mod
) {

626 
	`¥ötf
("boﬁó¿symbﬁ %†ã°ed f‹ 'm'?Åe° f‹˚dÅÿ'n'\n", 
e
->
À·
.
sym
->
«me
);

627 
e
->
ty≥
 = 
E_SYMBOL
;

628 
e
->
À·
.
sym
 = &
symbﬁ_no
;

629 
e
->
right
.
sym
 = 
NULL
;

632 i‡(
e
->
right
.
sym
 =&
symbﬁ_yes
) {

633 
e
->
ty≥
 = 
E_SYMBOL
;

634 
e
->
right
.
sym
 = 
NULL
;

638 
E_UNEQUAL
:

639 i‡(
e
->
À·
.
sym
->
ty≥
 !
S_BOOLEAN
)

641 i‡(
e
->
right
.
sym
 =&
symbﬁ_no
) {

642 
e
->
ty≥
 = 
E_SYMBOL
;

643 
e
->
right
.
sym
 = 
NULL
;

646 i‡(
e
->
right
.
sym
 =&
symbﬁ_mod
) {

647 
	`¥ötf
("boﬁó¿symbﬁ %†ã°ed f‹ 'm'?Åe° f‹˚dÅÿ'y'\n", 
e
->
À·
.
sym
->
«me
);

648 
e
->
ty≥
 = 
E_SYMBOL
;

649 
e
->
À·
.
sym
 = &
symbﬁ_yes
;

650 
e
->
right
.
sym
 = 
NULL
;

653 i‡(
e
->
right
.
sym
 =&
symbﬁ_yes
) {

654 
e
->
ty≥
 = 
E_NOT
;

655 
e
->
À·
.
ex¥
 = 
	`ex¥_Æloc_symbﬁ
”->À·.
sym
);

656 
e
->
right
.
sym
 = 
NULL
;

660 
E_NOT
:

661 
e
->
À·
.
ex¥
->
ty≥
) {

662 
E_NOT
:

664 
tmp
 = 
e
->
À·
.
ex¥
->left.expr;

665 
	`‰ì
(
e
->
À·
.
ex¥
);

666 
	`‰ì
(
e
);

667 
e
 = 
tmp
;

668 
e
 = 
	`ex¥_å™sf‹m
(e);

670 
E_EQUAL
:

671 
E_UNEQUAL
:

673 
tmp
 = 
e
->
À·
.
ex¥
;

674 
	`‰ì
(
e
);

675 
e
 = 
tmp
;

676 
e
->
ty≥
 =É->ty≥ =
E_EQUAL
 ? 
E_UNEQUAL
 : E_EQUAL;

678 
E_LEQ
:

679 
E_GEQ
:

681 
tmp
 = 
e
->
À·
.
ex¥
;

682 
	`‰ì
(
e
);

683 
e
 = 
tmp
;

684 
e
->
ty≥
 =É->ty≥ =
E_LEQ
 ? 
E_GTH
 : 
E_LTH
;

686 
E_LTH
:

687 
E_GTH
:

689 
tmp
 = 
e
->
À·
.
ex¥
;

690 
	`‰ì
(
e
);

691 
e
 = 
tmp
;

692 
e
->
ty≥
 =É->ty≥ =
E_LTH
 ? 
E_GEQ
 : 
E_LEQ
;

694 
E_OR
:

696 
tmp
 = 
e
->
À·
.
ex¥
;

697 
e
->
ty≥
 = 
E_AND
;

698 
e
->
right
.
ex¥
 = 
	`ex¥_Æloc_⁄e
(
E_NOT
, 
tmp
->right.expr);

699 
tmp
->
ty≥
 = 
E_NOT
;

700 
tmp
->
right
.
ex¥
 = 
NULL
;

701 
e
 = 
	`ex¥_å™sf‹m
(e);

703 
E_AND
:

705 
tmp
 = 
e
->
À·
.
ex¥
;

706 
e
->
ty≥
 = 
E_OR
;

707 
e
->
right
.
ex¥
 = 
	`ex¥_Æloc_⁄e
(
E_NOT
, 
tmp
->right.expr);

708 
tmp
->
ty≥
 = 
E_NOT
;

709 
tmp
->
right
.
ex¥
 = 
NULL
;

710 
e
 = 
	`ex¥_å™sf‹m
(e);

712 
E_SYMBOL
:

713 i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_yes
) {

715 
tmp
 = 
e
->
À·
.
ex¥
;

716 
	`‰ì
(
e
);

717 
e
 = 
tmp
;

718 
e
->
ty≥
 = 
E_SYMBOL
;

719 
e
->
À·
.
sym
 = &
symbﬁ_no
;

722 i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_mod
) {

724 
tmp
 = 
e
->
À·
.
ex¥
;

725 
	`‰ì
(
e
);

726 
e
 = 
tmp
;

727 
e
->
ty≥
 = 
E_SYMBOL
;

728 
e
->
À·
.
sym
 = &
symbﬁ_mod
;

731 i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_no
) {

733 
tmp
 = 
e
->
À·
.
ex¥
;

734 
	`‰ì
(
e
);

735 
e
 = 
tmp
;

736 
e
->
ty≥
 = 
E_SYMBOL
;

737 
e
->
À·
.
sym
 = &
symbﬁ_yes
;

748  
e
;

749 
	}
}

751 
	$ex¥_c⁄èös_symbﬁ
(
ex¥
 *
dï
, 
symbﬁ
 *
sym
)

753 i‡(!
dï
)

756 
dï
->
ty≥
) {

757 
E_AND
:

758 
E_OR
:

759  
	`ex¥_c⁄èös_symbﬁ
(
dï
->
À·
.
ex¥
, 
sym
) ||

760 
	`ex¥_c⁄èös_symbﬁ
(
dï
->
right
.
ex¥
, 
sym
);

761 
E_SYMBOL
:

762  
dï
->
À·
.
sym
 == sym;

763 
E_EQUAL
:

764 
E_GEQ
:

765 
E_GTH
:

766 
E_LEQ
:

767 
E_LTH
:

768 
E_UNEQUAL
:

769  
dï
->
À·
.
sym
 == sym ||

770 
dï
->
right
.
sym
 == sym;

771 
E_NOT
:

772  
	`ex¥_c⁄èös_symbﬁ
(
dï
->
À·
.
ex¥
, 
sym
);

777 
	}
}

779 
boﬁ
 
	$ex¥_dïíds_symbﬁ
(
ex¥
 *
dï
, 
symbﬁ
 *
sym
)

781 i‡(!
dï
)

782  
Ál£
;

784 
dï
->
ty≥
) {

785 
E_AND
:

786  
	`ex¥_dïíds_symbﬁ
(
dï
->
À·
.
ex¥
, 
sym
) ||

787 
	`ex¥_dïíds_symbﬁ
(
dï
->
right
.
ex¥
, 
sym
);

788 
E_SYMBOL
:

789  
dï
->
À·
.
sym
 == sym;

790 
E_EQUAL
:

791 i‡(
dï
->
À·
.
sym
 == sym) {

792 i‡(
dï
->
right
.
sym
 =&
symbﬁ_yes
 || dï->right.sym =&
symbﬁ_mod
)

793  
åue
;

796 
E_UNEQUAL
:

797 i‡(
dï
->
À·
.
sym
 == sym) {

798 i‡(
dï
->
right
.
sym
 =&
symbﬁ_no
)

799  
åue
;

805  
Ál£
;

806 
	}
}

808 
ex¥
 *
	$ex¥_å™s_com∑ª
(
ex¥
 *
e
, 
ex¥_ty≥
 
ty≥
, 
symbﬁ
 *
sym
)

810 
ex¥
 *
e1
, *
e2
;

812 i‡(!
e
) {

813 
e
 = 
	`ex¥_Æloc_symbﬁ
(
sym
);

814 i‡(
ty≥
 =
E_UNEQUAL
)

815 
e
 = 
	`ex¥_Æloc_⁄e
(
E_NOT
,É);

816  
e
;

818 
e
->
ty≥
) {

819 
E_AND
:

820 
e1
 = 
	`ex¥_å™s_com∑ª
(
e
->
À·
.
ex¥
, 
E_EQUAL
, 
sym
);

821 
e2
 = 
	`ex¥_å™s_com∑ª
(
e
->
right
.
ex¥
, 
E_EQUAL
, 
sym
);

822 i‡(
sym
 =&
symbﬁ_yes
)

823 
e
 = 
	`ex¥_Æloc_two
(
E_AND
, 
e1
, 
e2
);

824 i‡(
sym
 =&
symbﬁ_no
)

825 
e
 = 
	`ex¥_Æloc_two
(
E_OR
, 
e1
, 
e2
);

826 i‡(
ty≥
 =
E_UNEQUAL
)

827 
e
 = 
	`ex¥_Æloc_⁄e
(
E_NOT
,É);

828  
e
;

829 
E_OR
:

830 
e1
 = 
	`ex¥_å™s_com∑ª
(
e
->
À·
.
ex¥
, 
E_EQUAL
, 
sym
);

831 
e2
 = 
	`ex¥_å™s_com∑ª
(
e
->
right
.
ex¥
, 
E_EQUAL
, 
sym
);

832 i‡(
sym
 =&
symbﬁ_yes
)

833 
e
 = 
	`ex¥_Æloc_two
(
E_OR
, 
e1
, 
e2
);

834 i‡(
sym
 =&
symbﬁ_no
)

835 
e
 = 
	`ex¥_Æloc_two
(
E_AND
, 
e1
, 
e2
);

836 i‡(
ty≥
 =
E_UNEQUAL
)

837 
e
 = 
	`ex¥_Æloc_⁄e
(
E_NOT
,É);

838  
e
;

839 
E_NOT
:

840  
	`ex¥_å™s_com∑ª
(
e
->
À·
.
ex¥
, 
ty≥
 =
E_EQUAL
 ? 
E_UNEQUAL
 : E_EQUAL, 
sym
);

841 
E_UNEQUAL
:

842 
E_LTH
:

843 
E_LEQ
:

844 
E_GTH
:

845 
E_GEQ
:

846 
E_EQUAL
:

847 i‡(
ty≥
 =
E_EQUAL
) {

848 i‡(
sym
 =&
symbﬁ_yes
)

849  
	`ex¥_c›y
(
e
);

850 i‡(
sym
 =&
symbﬁ_mod
)

851  
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

852 i‡(
sym
 =&
symbﬁ_no
)

853  
	`ex¥_Æloc_⁄e
(
E_NOT
, 
	`ex¥_c›y
(
e
));

855 i‡(
sym
 =&
symbﬁ_yes
)

856  
	`ex¥_Æloc_⁄e
(
E_NOT
, 
	`ex¥_c›y
(
e
));

857 i‡(
sym
 =&
symbﬁ_mod
)

858  
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_yes
);

859 i‡(
sym
 =&
symbﬁ_no
)

860  
	`ex¥_c›y
(
e
);

863 
E_SYMBOL
:

864  
	`ex¥_Æloc_comp
(
ty≥
, 
e
->
À·
.
sym
, sym);

865 
E_LIST
:

866 
E_RANGE
:

867 
E_NONE
:

870  
NULL
;

871 
	}
}

873 
	e°rög_vÆue_köd
 {

874 
	mk_°rög
,

875 
	mk_sig√d
,

876 
	mk_unsig√d
,

877 
	mk_övÆid


880 
	u°rög_vÆue
 {

881 
	mu
;

882 sig√d 
	ms
;

885 
°rög_vÆue_köd
 
	$ex¥_∑r£_°rög
(c⁄° *
°r
,

886 
symbﬁ_ty≥
 
ty≥
,

887 
°rög_vÆue
 *
vÆ
)

889 *
èû
;

890 
°rög_vÆue_köd
 
köd
;

892 
î∫o
 = 0;

893 
ty≥
) {

894 
S_BOOLEAN
:

895 
S_TRISTATE
:

896  
k_°rög
;

897 
S_INT
:

898 
vÆ
->
s
 = 
	`°πﬁl
(
°r
, &
èû
, 10);

899 
köd
 = 
k_sig√d
;

901 
S_HEX
:

902 
vÆ
->
u
 = 
	`°πouŒ
(
°r
, &
èû
, 16);

903 
köd
 = 
k_unsig√d
;

905 
S_STRING
:

906 
S_UNKNOWN
:

907 
vÆ
->
s
 = 
	`°πﬁl
(
°r
, &
èû
, 0);

908 
köd
 = 
k_sig√d
;

911  
k_övÆid
;

913  !
î∫o
 && !*
èû
 &&Åaû > 
°r
 && 
	`isxdigô
(tail[-1])

914 ? 
köd
 : 
k_°rög
;

915 
	}
}

917 
åi°©e
 
	$ex¥_ˇlc_vÆue
(
ex¥
 *
e
)

919 
åi°©e
 
vÆ1
, 
vÆ2
;

920 c⁄° *
°r1
, *
°r2
;

921 
°rög_vÆue_köd
 
k1
 = 
k_°rög
, 
k2
 = k_string;

922 
°rög_vÆue
 
lvÆ
 = {}, 
rvÆ
 = {};

923 
ªs
;

925 i‡(!
e
)

926  
yes
;

928 
e
->
ty≥
) {

929 
E_SYMBOL
:

930 
	`sym_ˇlc_vÆue
(
e
->
À·
.
sym
);

931  
e
->
À·
.
sym
->
cuº
.
åi
;

932 
E_AND
:

933 
vÆ1
 = 
	`ex¥_ˇlc_vÆue
(
e
->
À·
.
ex¥
);

934 
vÆ2
 = 
	`ex¥_ˇlc_vÆue
(
e
->
right
.
ex¥
);

935  
	`EXPR_AND
(
vÆ1
, 
vÆ2
);

936 
E_OR
:

937 
vÆ1
 = 
	`ex¥_ˇlc_vÆue
(
e
->
À·
.
ex¥
);

938 
vÆ2
 = 
	`ex¥_ˇlc_vÆue
(
e
->
right
.
ex¥
);

939  
	`EXPR_OR
(
vÆ1
, 
vÆ2
);

940 
E_NOT
:

941 
vÆ1
 = 
	`ex¥_ˇlc_vÆue
(
e
->
À·
.
ex¥
);

942  
	`EXPR_NOT
(
vÆ1
);

943 
E_EQUAL
:

944 
E_GEQ
:

945 
E_GTH
:

946 
E_LEQ
:

947 
E_LTH
:

948 
E_UNEQUAL
:

951 
	`¥ötf
("ex¥_ˇlc_vÆue: %d?\n", 
e
->
ty≥
);

952  
no
;

955 
	`sym_ˇlc_vÆue
(
e
->
À·
.
sym
);

956 
	`sym_ˇlc_vÆue
(
e
->
right
.
sym
);

957 
°r1
 = 
	`sym_gë_°rög_vÆue
(
e
->
À·
.
sym
);

958 
°r2
 = 
	`sym_gë_°rög_vÆue
(
e
->
right
.
sym
);

960 i‡(
e
->
À·
.
sym
->
ty≥
 !
S_STRING
 ||É->
right
.sym->type != S_STRING) {

961 
k1
 = 
	`ex¥_∑r£_°rög
(
°r1
, 
e
->
À·
.
sym
->
ty≥
, &
lvÆ
);

962 
k2
 = 
	`ex¥_∑r£_°rög
(
°r2
, 
e
->
right
.
sym
->
ty≥
, &
rvÆ
);

965 i‡(
k1
 =
k_°rög
 || 
k2
 == k_string)

966 
ªs
 = 
	`°rcmp
(
°r1
, 
°r2
);

967 i‡(
k1
 =
k_övÆid
 || 
k2
 == k_invalid) {

968 i‡(
e
->
ty≥
 !
E_EQUAL
 &&É->ty≥ !
E_UNEQUAL
) {

969 
	`¥ötf
("C™nŸ com∑ª \"%s\"ánd \"%s\"\n", 
°r1
, 
°r2
);

970  
no
;

972 
ªs
 = 
	`°rcmp
(
°r1
, 
°r2
);

973 } i‡(
k1
 =
k_unsig√d
 || 
k2
 == k_unsigned)

974 
ªs
 = (
lvÆ
.
u
 > 
rvÆ
.u) - (lval.u <Ñval.u);

976 
ªs
 = (
lvÆ
.
s
 > 
rvÆ
.s) - (lval.s <Ñval.s);

978 
e
->
ty≥
) {

979 
E_EQUAL
:

980  
ªs
 ? 
no
 : 
yes
;

981 
E_GEQ
:

982  
ªs
 >0 ? 
yes
 : 
no
;

983 
E_GTH
:

984  
ªs
 > 0 ? 
yes
 : 
no
;

985 
E_LEQ
:

986  
ªs
 <0 ? 
yes
 : 
no
;

987 
E_LTH
:

988  
ªs
 < 0 ? 
yes
 : 
no
;

989 
E_UNEQUAL
:

990  
ªs
 ? 
yes
 : 
no
;

992 
	`¥ötf
("ex¥_ˇlc_vÆue:Ññ©i⁄ %d?\n", 
e
->
ty≥
);

993  
no
;

995 
	}
}

997 
	$ex¥_com∑ª_ty≥
(
ex¥_ty≥
 
t1
, ex¥_ty≥ 
t2
)

999 i‡(
t1
 =
t2
)

1001 
t1
) {

1002 
E_LEQ
:

1003 
E_LTH
:

1004 
E_GEQ
:

1005 
E_GTH
:

1006 i‡(
t2
 =
E_EQUAL
 ||Å2 =
E_UNEQUAL
)

1008 
E_EQUAL
:

1009 
E_UNEQUAL
:

1010 i‡(
t2
 =
E_NOT
)

1012 
E_NOT
:

1013 i‡(
t2
 =
E_AND
)

1015 
E_AND
:

1016 i‡(
t2
 =
E_OR
)

1018 
E_OR
:

1019 i‡(
t2
 =
E_LIST
)

1021 
E_LIST
:

1022 i‡(
t2
 == 0)

1027 
	`¥ötf
("[%dgt%d?]", 
t1
, 
t2
);

1029 
	}
}

1031 
ölöe
 
ex¥
 *

1032 
	$ex¥_gë_À·mo°_symbﬁ
(c⁄° 
ex¥
 *
e
)

1035 i‡(
e
 =
NULL
)

1036  
NULL
;

1038 
e
->
ty≥
 !
E_SYMBOL
)

1039 
e
 =É->
À·
.
ex¥
;

1041  
	`ex¥_c›y
(
e
);

1042 
	}
}

1048 
ex¥
 *
	$ex¥_sim∂ify_unmë_dï
(
ex¥
 *
e1
, ex¥ *
e2
)

1050 
ex¥
 *
ªt
;

1052 
e1
->
ty≥
) {

1053 
E_OR
:

1054  
	`ex¥_Æloc_™d
(

1055 
	`ex¥_sim∂ify_unmë_dï
(
e1
->
À·
.
ex¥
, 
e2
),

1056 
	`ex¥_sim∂ify_unmë_dï
(
e1
->
right
.
ex¥
, 
e2
));

1057 
E_AND
: {

1058 
ex¥
 *
e
;

1059 
e
 = 
	`ex¥_Æloc_™d
(
	`ex¥_c›y
(
e1
),Éx¥_c›y(
e2
));

1060 
e
 = 
	`ex¥_ñimö©e_dups
(e);

1061 
ªt
 = (!
	`ex¥_eq
(
e
, 
e1
)Ë?É1 : 
NULL
;

1062 
	`ex¥_‰ì
(
e
);

1066 
ªt
 = 
e1
;

1070  
	`ex¥_gë_À·mo°_symbﬁ
(
ªt
);

1071 
	}
}

1073 
	$ex¥_¥öt
(
ex¥
 *
e
, (*
‚
)(*, 
symbﬁ
 *, c⁄° *), *
d©a
, 
¥evtokí
)

1075 i‡(!
e
) {

1076 
	`‚
(
d©a
, 
NULL
, "y");

1080 i‡(
	`ex¥_com∑ª_ty≥
(
¥evtokí
, 
e
->
ty≥
) > 0)

1081 
	`‚
(
d©a
, 
NULL
, "(");

1082 
e
->
ty≥
) {

1083 
E_SYMBOL
:

1084 i‡(
e
->
À·
.
sym
->
«me
)

1085 
	`‚
(
d©a
, 
e
->
À·
.
sym
,É->À·.sym->
«me
);

1087 
	`‚
(
d©a
, 
NULL
, "<choice>");

1089 
E_NOT
:

1090 
	`‚
(
d©a
, 
NULL
, "!");

1091 
	`ex¥_¥öt
(
e
->
À·
.
ex¥
, 
‚
, 
d©a
, 
E_NOT
);

1093 
E_EQUAL
:

1094 i‡(
e
->
À·
.
sym
->
«me
)

1095 
	`‚
(
d©a
, 
e
->
À·
.
sym
,É->À·.sym->
«me
);

1097 
	`‚
(
d©a
, 
NULL
, "<choice>");

1098 
	`‚
(
d©a
, 
NULL
, "=");

1099 
	`‚
(
d©a
, 
e
->
right
.
sym
,É->right.sym->
«me
);

1101 
E_LEQ
:

1102 
E_LTH
:

1103 i‡(
e
->
À·
.
sym
->
«me
)

1104 
	`‚
(
d©a
, 
e
->
À·
.
sym
,É->À·.sym->
«me
);

1106 
	`‚
(
d©a
, 
NULL
, "<choice>");

1107 
	`‚
(
d©a
, 
NULL
, 
e
->
ty≥
 =
E_LEQ
 ? "<=" : "<");

1108 
	`‚
(
d©a
, 
e
->
right
.
sym
,É->right.sym->
«me
);

1110 
E_GEQ
:

1111 
E_GTH
:

1112 i‡(
e
->
À·
.
sym
->
«me
)

1113 
	`‚
(
d©a
, 
e
->
À·
.
sym
,É->À·.sym->
«me
);

1115 
	`‚
(
d©a
, 
NULL
, "<choice>");

1116 
	`‚
(
d©a
, 
NULL
, 
e
->
ty≥
 =
E_LEQ
 ? ">=" : ">");

1117 
	`‚
(
d©a
, 
e
->
right
.
sym
,É->right.sym->
«me
);

1119 
E_UNEQUAL
:

1120 i‡(
e
->
À·
.
sym
->
«me
)

1121 
	`‚
(
d©a
, 
e
->
À·
.
sym
,É->À·.sym->
«me
);

1123 
	`‚
(
d©a
, 
NULL
, "<choice>");

1124 
	`‚
(
d©a
, 
NULL
, "!=");

1125 
	`‚
(
d©a
, 
e
->
right
.
sym
,É->right.sym->
«me
);

1127 
E_OR
:

1128 
	`ex¥_¥öt
(
e
->
À·
.
ex¥
, 
‚
, 
d©a
, 
E_OR
);

1129 
	`‚
(
d©a
, 
NULL
, " || ");

1130 
	`ex¥_¥öt
(
e
->
right
.
ex¥
, 
‚
, 
d©a
, 
E_OR
);

1132 
E_AND
:

1133 
	`ex¥_¥öt
(
e
->
À·
.
ex¥
, 
‚
, 
d©a
, 
E_AND
);

1134 
	`‚
(
d©a
, 
NULL
, " && ");

1135 
	`ex¥_¥öt
(
e
->
right
.
ex¥
, 
‚
, 
d©a
, 
E_AND
);

1137 
E_LIST
:

1138 
	`‚
(
d©a
, 
e
->
right
.
sym
,É->right.sym->
«me
);

1139 i‡(
e
->
À·
.
ex¥
) {

1140 
	`‚
(
d©a
, 
NULL
, " ^ ");

1141 
	`ex¥_¥öt
(
e
->
À·
.
ex¥
, 
‚
, 
d©a
, 
E_LIST
);

1144 
E_RANGE
:

1145 
	`‚
(
d©a
, 
NULL
, "[");

1146 
	`‚
(
d©a
, 
e
->
À·
.
sym
,É->À·.sym->
«me
);

1147 
	`‚
(
d©a
, 
NULL
, " ");

1148 
	`‚
(
d©a
, 
e
->
right
.
sym
,É->right.sym->
«me
);

1149 
	`‚
(
d©a
, 
NULL
, "]");

1153 
buf
[32];

1154 
	`•rötf
(
buf
, "<unknow¿ty≥ %d>", 
e
->
ty≥
);

1155 
	`‚
(
d©a
, 
NULL
, 
buf
);

1159 i‡(
	`ex¥_com∑ª_ty≥
(
¥evtokí
, 
e
->
ty≥
) > 0)

1160 
	`‚
(
d©a
, 
NULL
, ")");

1161 
	}
}

1163 
	$ex¥_¥öt_fûe_hñ≥r
(*
d©a
, 
symbﬁ
 *
sym
, c⁄° *
°r
)

1165 
	`xfwrôe
(
°r
, 
	`°æí
(°r), 1, 
d©a
);

1166 
	}
}

1168 
	$ex¥_Âröt
(
ex¥
 *
e
, 
FILE
 *
out
)

1170 
	`ex¥_¥öt
(
e
, 
ex¥_¥öt_fûe_hñ≥r
, 
out
, 
E_NONE
);

1171 
	}
}

1173 
	$ex¥_¥öt_g°r_hñ≥r
(*
d©a
, 
symbﬁ
 *
sym
, c⁄° *
°r
)

1175 
g°r
 *
gs
 = (g°r*)
d©a
;

1176 c⁄° *
sym_°r
 = 
NULL
;

1178 i‡(
sym
)

1179 
sym_°r
 = 
	`sym_gë_°rög_vÆue
(
sym
);

1181 i‡(
gs
->
max_width
) {

1182 
exåa_Àngth
 = 
	`°æí
(
°r
);

1183 c⁄° *
œ°_¸
 = 
	`°ºchr
(
gs
->
s
, '\n');

1184 
œ°_löe_Àngth
;

1186 i‡(
sym_°r
)

1187 
exåa_Àngth
 +4 + 
	`°æí
(
sym_°r
);

1189 i‡(!
œ°_¸
)

1190 
œ°_¸
 = 
gs
->
s
;

1192 
œ°_löe_Àngth
 = 
	`°æí
(
gs
->
s
Ë- (
œ°_¸
 - gs->s);

1194 i‡((
œ°_löe_Àngth
 + 
exåa_Àngth
Ë> 
gs
->
max_width
)

1195 
	`°r_≠≥nd
(
gs
, "\\\n");

1198 
	`°r_≠≥nd
(
gs
, 
°r
);

1199 i‡(
sym
 && sym->
ty≥
 !
S_UNKNOWN
)

1200 
	`°r_¥ötf
(
gs
, " [=%s]", 
sym_°r
);

1201 
	}
}

1203 
	$ex¥_g°r_¥öt
(
ex¥
 *
e
, 
g°r
 *
gs
)

1205 
	`ex¥_¥öt
(
e
, 
ex¥_¥öt_g°r_hñ≥r
, 
gs
, 
E_NONE
);

1206 
	}
}

	@swupdate/scripts/kconfig/expr.h

6 #i‚de‡
EXPR_H


7 
	#EXPR_H


	)

9 #ifde‡
__˝lu•lus


13 
	~<as£π.h
>

14 
	~<°dio.h
>

15 
	~"li°.h
"

16 #i‚de‡
__˝lu•lus


17 
	~<°dboﬁ.h
>

20 
	sfûe
 {

21 
fûe
 *
√xt
;

22 
fûe
 *
∑ª¡
;

23 c⁄° *
«me
;

24 
löío
;

27 
	eåi°©e
 {

28 
no
, 
mod
, 
yes


29 } 
	tåi°©e
;

31 
	eex¥_ty≥
 {

32 
E_NONE
, 
E_OR
, 
E_AND
, 
E_NOT
,

33 
E_EQUAL
, 
E_UNEQUAL
, 
E_LTH
, 
E_LEQ
, 
E_GTH
, 
E_GEQ
,

34 
E_LIST
, 
E_SYMBOL
, 
E_RANGE


37 
	uex¥_d©a
 {

38 
ex¥
 *expr;

39 
symbﬁ
 *
sym
;

42 
	sex¥
 {

43 
ex¥_ty≥
 
ty≥
;

44 
ex¥_d©a
 
À·
, 
right
;

47 
	#EXPR_OR
(
dï1
, 
dï2
Ë(((dï1)>(dï2))?(dï1):(dï2))

	)

48 
	#EXPR_AND
(
dï1
, 
dï2
Ë(((dï1)<(dï2))?(dï1):(dï2))

	)

49 
	#EXPR_NOT
(
dï
Ë(2-(dï))

	)

51 
	#ex¥_li°_f‹_óch_sym
(
l
, 
e
, 
s
) \

52 
e
 = (
l
);É && (
s
 =É->
right
.
sym
);É =É->
À·
.
ex¥
)

	)

54 
	sex¥_vÆue
 {

55 
ex¥
 *expr;

56 
åi°©e
 
åi
;

59 
	ssymbﬁ_vÆue
 {

60 *
vÆ
;

61 
åi°©e
 
åi
;

64 
	esymbﬁ_ty≥
 {

65 
S_UNKNOWN
, 
S_BOOLEAN
, 
S_TRISTATE
, 
S_INT
, 
S_HEX
, 
S_STRING
, 
S_OTHER


70 
S_DEF_USER
,

71 
S_DEF_AUTO
,

72 
S_DEF_DEF3
,

73 
S_DEF_DEF4
,

74 
S_DEF_COUNT


77 
	ssymbﬁ
 {

78 
symbﬁ
 *
√xt
;

79 *
«me
;

80 
symbﬁ_ty≥
 
ty≥
;

81 
symbﬁ_vÆue
 
cuº
;

82 
symbﬁ_vÆue
 
def
[
S_DEF_COUNT
];

83 
åi°©e
 
visibÀ
;

84 
Êags
;

85 
¥›îty
 *
¥›
;

86 
ex¥_vÆue
 
dú_dï
;

87 
ex¥_vÆue
 
ªv_dï
;

90 
	#f‹_Æl_symbﬁs
(
i
, 
sym
Ëò0; i < 
SYMBOL_HASHSIZE
; i++Ësym = 
symbﬁ_hash
[i]; sym; sym = sym->
√xt
Ëi‡(sym->
ty≥
 !
S_OTHER
)

	)

92 
	#SYMBOL_CONST
 0x0001

	)

93 
	#SYMBOL_CHECK
 0x0008

	)

94 
	#SYMBOL_CHOICE
 0x0010

	)

95 
	#SYMBOL_CHOICEVAL
 0x0020

	)

96 
	#SYMBOL_VALID
 0x0080

	)

97 
	#SYMBOL_OPTIONAL
 0x0100

	)

98 
	#SYMBOL_WRITE
 0x0200

	)

99 
	#SYMBOL_CHANGED
 0x0400

	)

100 
	#SYMBOL_AUTO
 0x1000

	)

101 
	#SYMBOL_CHECKED
 0x2000

	)

102 
	#SYMBOL_WARNED
 0x8000

	)

105 
	#SYMBOL_DEF
 0x10000

	)

106 
	#SYMBOL_DEF_USER
 0x10000

	)

107 
	#SYMBOL_DEF_AUTO
 0x20000

	)

108 
	#SYMBOL_DEF3
 0x40000

	)

109 
	#SYMBOL_DEF4
 0x80000

	)

112 
	#SYMBOL_NEED_SET_CHOICE_VALUES
 0x100000

	)

115 
	#SYMBOL_ALLNOCONFIG_Y
 0x200000

	)

117 
	#SYMBOL_MAXLENGTH
 256

	)

118 
	#SYMBOL_HASHSIZE
 9973

	)

131 
	e¥›_ty≥
 {

132 
P_UNKNOWN
,

133 
P_PROMPT
,

134 
P_COMMENT
,

135 
P_MENU
,

136 
P_DEFAULT
,

137 
P_CHOICE
,

138 
P_SELECT
,

139 
P_RANGE
,

140 
P_ENV
,

141 
P_SYMBOL
,

144 
	s¥›îty
 {

145 
¥›îty
 *
√xt
;

146 
symbﬁ
 *
sym
;

147 
¥›_ty≥
 
ty≥
;

148 c⁄° *
ãxt
;

149 
ex¥_vÆue
 
visibÀ
;

150 
ex¥
 *expr;

151 
míu
 *menu;

154 
fûe
 *file;

155 
löío
;

158 
	#f‹_Æl_¥›îtõs
(
sym
, 
°
, 
tok
) \

159 
°
 = 
sym
->
¥›
; st; sà°->
√xt
) \

160 i‡(
°
->
ty≥
 =(
tok
))

	)

161 
	#f‹_Æl_deÁu…s
(
sym
, 
°
Ë
	`f‹_Æl_¥›îtõs
(sym, st, 
P_DEFAULT
)

	)

162 
	#f‹_Æl_choi˚s
(
sym
, 
°
Ë
	`f‹_Æl_¥›îtõs
(sym, st, 
P_CHOICE
)

	)

163 
	#f‹_Æl_¥om±s
(
sym
, 
°
) \

164 
°
 = 
sym
->
¥›
; st; sà°->
√xt
) \

165 i‡(
°
->
ãxt
)

	)

167 
	smíu
 {

168 
míu
 *
√xt
;

169 
míu
 *
∑ª¡
;

170 
míu
 *
li°
;

171 
symbﬁ
 *
sym
;

172 
¥›îty
 *
¥om±
;

173 
ex¥
 *
visibûôy
;

174 
ex¥
 *
dï
;

175 
Êags
;

176 *
hñp
;

177 
fûe
 *file;

178 
löío
;

179 *
d©a
;

182 
	#MENU_CHANGED
 0x0001

	)

183 
	#MENU_ROOT
 0x0002

	)

185 
	sjump_key
 {

186 
li°_hód
 
íåõs
;

187 
size_t
 
off£t
;

188 
míu
 *
èrgë
;

189 
ödex
;

192 
	#JUMP_NB
 9

	)

194 
fûe
 *
fûe_li°
;

195 
fûe
 *
cuºít_fûe
;

196 
fûe
 *
lookup_fûe
(c⁄° *
«me
);

198 
symbﬁ
 
symbﬁ_yes
, 
symbﬁ_no
, 
symbﬁ_mod
;

199 
symbﬁ
 *
moduÀs_sym
;

200 
symbﬁ
 *
sym_defc⁄fig_li°
;

201 
cdebug
;

202 
ex¥
 *
ex¥_Æloc_symbﬁ
(
symbﬁ
 *
sym
);

203 
ex¥
 *
ex¥_Æloc_⁄e
(
ex¥_ty≥
 
ty≥
, ex¥ *
˚
);

204 
ex¥
 *
ex¥_Æloc_two
(
ex¥_ty≥
 
ty≥
, ex¥ *
e1
, ex¥ *
e2
);

205 
ex¥
 *
ex¥_Æloc_comp
(
ex¥_ty≥
 
ty≥
, 
symbﬁ
 *
s1
, symbﬁ *
s2
);

206 
ex¥
 *
ex¥_Æloc_™d
(ex¥ *
e1
, ex¥ *
e2
);

207 
ex¥
 *
ex¥_Æloc_‹
(ex¥ *
e1
, ex¥ *
e2
);

208 
ex¥
 *
ex¥_c›y
(c⁄° ex¥ *
‹g
);

209 
ex¥_‰ì
(
ex¥
 *
e
);

210 
ex¥_ñimö©e_eq
(
ex¥
 **
ï1
, ex¥ **
ï2
);

211 
åi°©e
 
ex¥_ˇlc_vÆue
(
ex¥
 *
e
);

212 
ex¥
 *
ex¥_å™s_boﬁ
(ex¥ *
e
);

213 
ex¥
 *
ex¥_ñimö©e_dups
(ex¥ *
e
);

214 
ex¥
 *
ex¥_å™sf‹m
(ex¥ *
e
);

215 
ex¥_c⁄èös_symbﬁ
(
ex¥
 *
dï
, 
symbﬁ
 *
sym
);

216 
boﬁ
 
ex¥_dïíds_symbﬁ
(
ex¥
 *
dï
, 
symbﬁ
 *
sym
);

217 
ex¥
 *
ex¥_å™s_com∑ª
(ex¥ *
e
, 
ex¥_ty≥
 
ty≥
, 
symbﬁ
 *
sym
);

218 
ex¥
 *
ex¥_sim∂ify_unmë_dï
(ex¥ *
e1
, ex¥ *
e2
);

220 
ex¥_Âröt
(
ex¥
 *
e
, 
FILE
 *
out
);

221 
	gg°r
;

222 
ex¥_g°r_¥öt
(
ex¥
 *
e
, 
g°r
 *
gs
);

224 
ölöe
 
ex¥_is_yes
(
ex¥
 *
e
)

226  !
	ge
 || (e->
	gty≥
 =
E_SYMBOL
 && 
e
->
À·
.
sym
 =&
symbﬁ_yes
);

229 
ölöe
 
ex¥_is_no
(
ex¥
 *
e
)

231  
	ge
 && (e->
	gty≥
 =
E_SYMBOL
 && 
e
->
À·
.
sym
 =&
symbﬁ_no
);

234 #ifde‡
__˝lu•lus


	@swupdate/scripts/kconfig/gconf.c

9 #ifde‡
HAVE_CONFIG_H


10 
	~<c⁄fig.h
>

13 
	~<°dlib.h
>

14 
	~"lkc.h
"

15 
	~"images.c
"

17 
	~<gœde/gœde.h
>

18 
	~<gtk/gtk.h
>

19 
	~<glib.h
>

20 
	~<gdk/gdkkeysyms.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<uni°d.h
>

25 
	~<time.h
>

30 
	mSINGLE_VIEW
, 
	mSPLIT_VIEW
, 
	mFULL_VIEW


34 
	mOPT_NORMAL
, 
	mOPT_ALL
, 
	mOPT_PROMPT


37 
göt
 
	gvõw_mode
 = 
FULL_VIEW
;

38 
gboﬁón
 
	gshow_«me
 = 
TRUE
;

39 
gboﬁón
 
	gshow_ønge
 = 
TRUE
;

40 
gboﬁón
 
	gshow_vÆue
 = 
TRUE
;

41 
gboﬁón
 
	gªsizóbÀ
 = 
FALSE
;

42 
	g›t_mode
 = 
OPT_NORMAL
;

44 
GtkWidgë
 *
	gmaö_wnd
 = 
NULL
;

45 
GtkWidgë
 *
	gåì1_w
 = 
NULL
;

46 
GtkWidgë
 *
	gåì2_w
 = 
NULL
;

47 
GtkWidgë
 *
	gãxt_w
 = 
NULL
;

48 
GtkWidgë
 *
	gh∑√d
 = 
NULL
;

49 
GtkWidgë
 *
	gv∑√d
 = 
NULL
;

50 
GtkWidgë
 *
	gback_bä
 = 
NULL
;

51 
GtkWidgë
 *
	gßve_bä
 = 
NULL
;

52 
GtkWidgë
 *
	gßve_míu_ôem
 = 
NULL
;

54 
GtkTextTag
 *
	gèg1
, *
	gèg2
;

55 
GdkCﬁ‹
 
	gcﬁ‹
;

57 
GtkTªeSt‹e
 *
	gåì1
, *
	gåì2
, *
	gåì
;

58 
GtkTªeModñ
 *
	gmodñ1
, *
	gmodñ2
;

59 
GtkTªeIãr
 *
	g∑ª¡s
[256];

60 
göt
 
	gödít
;

62 
míu
 *
	gcuºít
;

63 
míu
 *
	gbrow£d
;

66 
	mCOL_OPTION
, 
	mCOL_NAME
, 
	mCOL_NO
, 
	mCOL_MOD
, 
	mCOL_YES
, 
	mCOL_VALUE
,

67 
	mCOL_MENU
, 
	mCOL_COLOR
, 
	mCOL_EDIT
, 
	mCOL_PIXBUF
,

68 
	mCOL_PIXVIS
, 
	mCOL_BTNVIS
, 
	mCOL_BTNACT
, 
	mCOL_BTNINC
, 
	mCOL_BTNRAD
,

69 
	mCOL_NUMBER


72 
di•œy_li°
();

73 
di•œy_åì
(
míu
 *menu);

74 
di•œy_åì_∑π
();

75 
upd©e_åì
(
míu
 *
§c
, 
GtkTªeIãr
 * 
d°
);

76 
£t_node
(
GtkTªeIãr
 * 
node
, 
míu
 *míu, 
gch¨
 ** 
row
);

77 
gch¨
 **
fûl_row
(
míu
 *menu);

78 
c⁄f_ch™ged
();

82 c⁄° *
	$dbg_sym_Êags
(
vÆ
)

84 
buf
[256];

86 
	`bzîo
(
buf
, 256);

88 i‡(
vÆ
 & 
SYMBOL_CONST
)

89 
	`°rˇt
(
buf
, "const/");

90 i‡(
vÆ
 & 
SYMBOL_CHECK
)

91 
	`°rˇt
(
buf
, "check/");

92 i‡(
vÆ
 & 
SYMBOL_CHOICE
)

93 
	`°rˇt
(
buf
, "choice/");

94 i‡(
vÆ
 & 
SYMBOL_CHOICEVAL
)

95 
	`°rˇt
(
buf
, "choiceval/");

96 i‡(
vÆ
 & 
SYMBOL_VALID
)

97 
	`°rˇt
(
buf
, "valid/");

98 i‡(
vÆ
 & 
SYMBOL_OPTIONAL
)

99 
	`°rˇt
(
buf
, "optional/");

100 i‡(
vÆ
 & 
SYMBOL_WRITE
)

101 
	`°rˇt
(
buf
, "write/");

102 i‡(
vÆ
 & 
SYMBOL_CHANGED
)

103 
	`°rˇt
(
buf
, "changed/");

104 i‡(
vÆ
 & 
SYMBOL_AUTO
)

105 
	`°rˇt
(
buf
, "auto/");

107 
buf
[
	`°æí
(buf) - 1] = '\0';

109  
buf
;

110 
	}
}

112 
	$ª∂a˚_buâ⁄_ic⁄
(
GœdeXML
 * 
xml
, 
GdkDøwabÀ
 * 
wödow
,

113 
GtkStyÀ
 * 
°yÀ
, 
gch¨
 * 
bä_«me
, gch¨ ** 
xpm
)

115 
GdkPixm≠
 *
pixm≠
;

116 
GdkBôm≠
 *
mask
;

117 
GtkToﬁBuâ⁄
 *
buâ⁄
;

118 
GtkWidgë
 *
image
;

120 
pixm≠
 = 
	`gdk_pixm≠_¸óã_‰om_xpm_d
(
wödow
, &
mask
,

121 &
°yÀ
->
bg
[
GTK_STATE_NORMAL
],

122 
xpm
);

124 
buâ⁄
 = 
	`GTK_TOOL_BUTTON
(
	`gœde_xml_gë_widgë
(
xml
, 
bä_«me
));

125 
image
 = 
	`gtk_image_√w_‰om_pixm≠
(
pixm≠
, 
mask
);

126 
	`gtk_widgë_show
(
image
);

127 
	`gtk_toﬁ_buâ⁄_£t_ic⁄_widgë
(
buâ⁄
, 
image
);

128 
	}
}

131 
	$öô_maö_wödow
(c⁄° 
gch¨
 * 
gœde_fûe
)

133 
GœdeXML
 *
xml
;

134 
GtkWidgë
 *
widgë
;

135 
GtkTextBuf„r
 *
txtbuf
;

136 
GtkStyÀ
 *
°yÀ
;

138 
xml
 = 
	`gœde_xml_√w
(
gœde_fûe
, "wödow1", 
NULL
);

139 i‡(!
xml
)

140 
	`g_îr‹
(
	`_
("GUIÜoading failed !\n"));

141 
	`gœde_xml_sig«l_autoc⁄√˘
(
xml
);

143 
maö_wnd
 = 
	`gœde_xml_gë_widgë
(
xml
, "window1");

144 
h∑√d
 = 
	`gœde_xml_gë_widgë
(
xml
, "hpaned1");

145 
v∑√d
 = 
	`gœde_xml_gë_widgë
(
xml
, "vpaned1");

146 
åì1_w
 = 
	`gœde_xml_gë_widgë
(
xml
, "treeview1");

147 
åì2_w
 = 
	`gœde_xml_gë_widgë
(
xml
, "treeview2");

148 
ãxt_w
 = 
	`gœde_xml_gë_widgë
(
xml
, "textview3");

150 
back_bä
 = 
	`gœde_xml_gë_widgë
(
xml
, "button1");

151 
	`gtk_widgë_£t_£nsôive
(
back_bä
, 
FALSE
);

153 
widgë
 = 
	`gœde_xml_gë_widgë
(
xml
, "show_name1");

154 
	`gtk_check_míu_ôem_£t_a˘ive
((
GtkCheckMíuIãm
 *Ë
widgë
,

155 
show_«me
);

157 
widgë
 = 
	`gœde_xml_gë_widgë
(
xml
, "show_range1");

158 
	`gtk_check_míu_ôem_£t_a˘ive
((
GtkCheckMíuIãm
 *Ë
widgë
,

159 
show_ønge
);

161 
widgë
 = 
	`gœde_xml_gë_widgë
(
xml
, "show_data1");

162 
	`gtk_check_míu_ôem_£t_a˘ive
((
GtkCheckMíuIãm
 *Ë
widgë
,

163 
show_vÆue
);

165 
ßve_bä
 = 
	`gœde_xml_gë_widgë
(
xml
, "button3");

166 
ßve_míu_ôem
 = 
	`gœde_xml_gë_widgë
(
xml
, "save1");

167 
	`c⁄f_£t_ch™ged_ˇŒback
(
c⁄f_ch™ged
);

169 
°yÀ
 = 
	`gtk_widgë_gë_°yÀ
(
maö_wnd
);

170 
widgë
 = 
	`gœde_xml_gë_widgë
(
xml
, "toolbar1");

172 
	`ª∂a˚_buâ⁄_ic⁄
(
xml
, 
maö_wnd
->
wödow
, 
°yÀ
,

173 "buâ⁄4", (
gch¨
 **Ë
xpm_sögÀ_võw
);

174 
	`ª∂a˚_buâ⁄_ic⁄
(
xml
, 
maö_wnd
->
wödow
, 
°yÀ
,

175 "buâ⁄5", (
gch¨
 **Ë
xpm_•lô_võw
);

176 
	`ª∂a˚_buâ⁄_ic⁄
(
xml
, 
maö_wnd
->
wödow
, 
°yÀ
,

177 "buâ⁄6", (
gch¨
 **Ë
xpm_åì_võw
);

179 
txtbuf
 = 
	`gtk_ãxt_võw_gë_buf„r
(
	`GTK_TEXT_VIEW
(
ãxt_w
));

180 
èg1
 = 
	`gtk_ãxt_buf„r_¸óã_èg
(
txtbuf
, "mytag1",

182 "weight", 
PANGO_WEIGHT_BOLD
,

183 
NULL
);

184 
èg2
 = 
	`gtk_ãxt_buf„r_¸óã_èg
(
txtbuf
, "mytag2",

186 
NULL
);

188 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
maö_wnd
), 
roŸmíu
.
¥om±
->
ãxt
);

190 
	`gtk_widgë_show
(
maö_wnd
);

191 
	}
}

193 
	$öô_åì_modñ
()

195 
göt
 
i
;

197 
åì
 = 
åì2
 = 
	`gtk_åì_°‹e_√w
(
COL_NUMBER
,

198 
G_TYPE_STRING
, G_TYPE_STRING,

199 
G_TYPE_STRING
, G_TYPE_STRING,

200 
G_TYPE_STRING
, G_TYPE_STRING,

201 
G_TYPE_POINTER
, 
GDK_TYPE_COLOR
,

202 
G_TYPE_BOOLEAN
, 
GDK_TYPE_PIXBUF
,

203 
G_TYPE_BOOLEAN
, G_TYPE_BOOLEAN,

204 
G_TYPE_BOOLEAN
, G_TYPE_BOOLEAN,

205 
G_TYPE_BOOLEAN
);

206 
modñ2
 = 
	`GTK_TREE_MODEL
(
åì2
);

208 
∑ª¡s
[0] = 
NULL
, 
i
 = 1; i < 256; i++)

209 
∑ª¡s
[
i
] = (
GtkTªeIãr
 *Ë
	`g_mÆloc
((GtkTreeIter));

211 
åì1
 = 
	`gtk_åì_°‹e_√w
(
COL_NUMBER
,

212 
G_TYPE_STRING
, G_TYPE_STRING,

213 
G_TYPE_STRING
, G_TYPE_STRING,

214 
G_TYPE_STRING
, G_TYPE_STRING,

215 
G_TYPE_POINTER
, 
GDK_TYPE_COLOR
,

216 
G_TYPE_BOOLEAN
, 
GDK_TYPE_PIXBUF
,

217 
G_TYPE_BOOLEAN
, G_TYPE_BOOLEAN,

218 
G_TYPE_BOOLEAN
, G_TYPE_BOOLEAN,

219 
G_TYPE_BOOLEAN
);

220 
modñ1
 = 
	`GTK_TREE_MODEL
(
åì1
);

221 
	}
}

223 
	$öô_À·_åì
()

225 
GtkTªeVõw
 *
võw
 = 
	`GTK_TREE_VIEW
(
åì1_w
);

226 
GtkCñlRídîî
 *
ªndîî
;

227 
GtkTªeSñe˘i⁄
 *
£l
;

228 
GtkTªeVõwCﬁumn
 *
cﬁumn
;

230 
	`gtk_åì_võw_£t_modñ
(
võw
, 
modñ1
);

231 
	`gtk_åì_võw_£t_hódîs_visibÀ
(
võw
, 
TRUE
);

232 
	`gtk_åì_võw_£t_ruÀs_höt
(
võw
, 
TRUE
);

234 
cﬁumn
 = 
	`gtk_åì_võw_cﬁumn_√w
();

235 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
võw
, 
cﬁumn
);

236 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
(
cﬁumn
, 
	`_
("Options"));

238 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_toggÀ_√w
();

239 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

240 
ªndîî
, 
FALSE
);

241 
	`gtk_åì_võw_cﬁumn_£t_©åibuãs
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

242 
ªndîî
,

243 "a˘ive", 
COL_BTNACT
,

244 "öc⁄si°ít", 
COL_BTNINC
,

245 "visibÀ", 
COL_BTNVIS
,

246 "ødio", 
COL_BTNRAD
, 
NULL
);

247 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

248 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

249 
ªndîî
, 
FALSE
);

250 
	`gtk_åì_võw_cﬁumn_£t_©åibuãs
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

251 
ªndîî
,

252 "ãxt", 
COL_OPTION
,

254 
COL_COLOR
, 
NULL
);

256 
£l
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
võw
);

257 
	`gtk_åì_£À˘i⁄_£t_mode
(
£l
, 
GTK_SELECTION_SINGLE
);

258 
	`gtk_widgë_ªÆize
(
åì1_w
);

259 
	}
}

261 
ªndîî_edôed
(
GtkCñlRídîîText
 * 
˚Œ
,

262 c⁄° 
gch¨
 * 
∑th_°rög
,

263 c⁄° 
gch¨
 * 
√w_ãxt
, 
gpoöãr
 
u£r_d©a
);

265 
	$öô_right_åì
()

267 
GtkTªeVõw
 *
võw
 = 
	`GTK_TREE_VIEW
(
åì2_w
);

268 
GtkCñlRídîî
 *
ªndîî
;

269 
GtkTªeSñe˘i⁄
 *
£l
;

270 
GtkTªeVõwCﬁumn
 *
cﬁumn
;

271 
göt
 
i
;

273 
	`gtk_åì_võw_£t_modñ
(
võw
, 
modñ2
);

274 
	`gtk_åì_võw_£t_hódîs_visibÀ
(
võw
, 
TRUE
);

275 
	`gtk_åì_võw_£t_ruÀs_höt
(
võw
, 
TRUE
);

277 
cﬁumn
 = 
	`gtk_åì_võw_cﬁumn_√w
();

278 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
võw
, 
cﬁumn
);

279 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
(
cﬁumn
, 
	`_
("Options"));

281 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_pixbuf_√w
();

282 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

283 
ªndîî
, 
FALSE
);

284 
	`gtk_åì_võw_cﬁumn_£t_©åibuãs
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

285 
ªndîî
,

286 "pixbuf", 
COL_PIXBUF
,

287 "visibÀ", 
COL_PIXVIS
, 
NULL
);

288 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_toggÀ_√w
();

289 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

290 
ªndîî
, 
FALSE
);

291 
	`gtk_åì_võw_cﬁumn_£t_©åibuãs
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

292 
ªndîî
,

293 "a˘ive", 
COL_BTNACT
,

294 "öc⁄si°ít", 
COL_BTNINC
,

295 "visibÀ", 
COL_BTNVIS
,

296 "ødio", 
COL_BTNRAD
, 
NULL
);

297 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

298 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

299 
ªndîî
, 
FALSE
);

300 
	`gtk_åì_võw_cﬁumn_£t_©åibuãs
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

301 
ªndîî
,

302 "ãxt", 
COL_OPTION
,

304 
COL_COLOR
, 
NULL
);

306 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

307 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
(
võw
, -1,

308 
	`_
("Name"), 
ªndîî
,

309 "ãxt", 
COL_NAME
,

311 
COL_COLOR
, 
NULL
);

312 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

313 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
(
võw
, -1,

314 "N", 
ªndîî
,

315 "ãxt", 
COL_NO
,

317 
COL_COLOR
, 
NULL
);

318 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

319 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
(
võw
, -1,

320 "M", 
ªndîî
,

321 "ãxt", 
COL_MOD
,

323 
COL_COLOR
, 
NULL
);

324 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

325 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
(
võw
, -1,

326 "Y", 
ªndîî
,

327 "ãxt", 
COL_YES
,

329 
COL_COLOR
, 
NULL
);

330 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

331 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
(
võw
, -1,

332 
	`_
("VÆue"), 
ªndîî
,

333 "ãxt", 
COL_VALUE
,

335 
COL_EDIT
,

337 
COL_COLOR
, 
NULL
);

338 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ªndîî
), "edited",

339 
	`G_CALLBACK
(
ªndîî_edôed
), 
NULL
);

341 
cﬁumn
 = 
	`gtk_åì_võw_gë_cﬁumn
(
võw
, 
COL_NAME
);

342 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁumn
, 
show_«me
);

343 
cﬁumn
 = 
	`gtk_åì_võw_gë_cﬁumn
(
võw
, 
COL_NO
);

344 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁumn
, 
show_ønge
);

345 
cﬁumn
 = 
	`gtk_åì_võw_gë_cﬁumn
(
võw
, 
COL_MOD
);

346 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁumn
, 
show_ønge
);

347 
cﬁumn
 = 
	`gtk_åì_võw_gë_cﬁumn
(
võw
, 
COL_YES
);

348 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁumn
, 
show_ønge
);

349 
cﬁumn
 = 
	`gtk_åì_võw_gë_cﬁumn
(
võw
, 
COL_VALUE
);

350 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁumn
, 
show_vÆue
);

352 i‡(
ªsizóbÀ
) {

353 
i
 = 0; i < 
COL_VALUE
; i++) {

354 
cﬁumn
 = 
	`gtk_åì_võw_gë_cﬁumn
(
võw
, 
i
);

355 
	`gtk_åì_võw_cﬁumn_£t_ªsizabÀ
(
cﬁumn
, 
TRUE
);

359 
£l
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
võw
);

360 
	`gtk_åì_£À˘i⁄_£t_mode
(
£l
, 
GTK_SELECTION_SINGLE
);

361 
	}
}

367 
	$ãxt_ö£π_hñp
(
míu
 *menu)

369 
GtkTextBuf„r
 *
buf„r
;

370 
GtkTextIãr
 
°¨t
, 
íd
;

371 c⁄° *
¥om±
 = 
	`_
(
	`míu_gë_¥om±
(
míu
));

372 
g°r
 
hñp
 = 
	`°r_√w
();

374 
	`míu_gë_ext_hñp
(
míu
, &
hñp
);

376 
buf„r
 = 
	`gtk_ãxt_võw_gë_buf„r
(
	`GTK_TEXT_VIEW
(
ãxt_w
));

377 
	`gtk_ãxt_buf„r_gë_bounds
(
buf„r
, &
°¨t
, &
íd
);

378 
	`gtk_ãxt_buf„r_dñëe
(
buf„r
, &
°¨t
, &
íd
);

379 
	`gtk_ãxt_võw_£t_À·_m¨gö
(
	`GTK_TEXT_VIEW
(
ãxt_w
), 15);

381 
	`gtk_ãxt_buf„r_gë_íd_ôî
(
buf„r
, &
íd
);

382 
	`gtk_ãxt_buf„r_ö£π_wôh_ègs
(
buf„r
, &
íd
, 
¥om±
, -1, 
èg1
,

383 
NULL
);

384 
	`gtk_ãxt_buf„r_ö£π_©_curs‹
(
buf„r
, "\n\n", 2);

385 
	`gtk_ãxt_buf„r_gë_íd_ôî
(
buf„r
, &
íd
);

386 
	`gtk_ãxt_buf„r_ö£π_wôh_ègs
(
buf„r
, &
íd
, 
	`°r_gë
(&
hñp
), -1, 
èg2
,

387 
NULL
);

388 
	`°r_‰ì
(&
hñp
);

389 
	}
}

392 
	$ãxt_ö£π_msg
(c⁄° *
tôÀ
, c⁄° *
mesßge
)

394 
GtkTextBuf„r
 *
buf„r
;

395 
GtkTextIãr
 
°¨t
, 
íd
;

396 c⁄° *
msg
 = 
mesßge
;

398 
buf„r
 = 
	`gtk_ãxt_võw_gë_buf„r
(
	`GTK_TEXT_VIEW
(
ãxt_w
));

399 
	`gtk_ãxt_buf„r_gë_bounds
(
buf„r
, &
°¨t
, &
íd
);

400 
	`gtk_ãxt_buf„r_dñëe
(
buf„r
, &
°¨t
, &
íd
);

401 
	`gtk_ãxt_võw_£t_À·_m¨gö
(
	`GTK_TEXT_VIEW
(
ãxt_w
), 15);

403 
	`gtk_ãxt_buf„r_gë_íd_ôî
(
buf„r
, &
íd
);

404 
	`gtk_ãxt_buf„r_ö£π_wôh_ègs
(
buf„r
, &
íd
, 
tôÀ
, -1, 
èg1
,

405 
NULL
);

406 
	`gtk_ãxt_buf„r_ö£π_©_curs‹
(
buf„r
, "\n\n", 2);

407 
	`gtk_ãxt_buf„r_gë_íd_ôî
(
buf„r
, &
íd
);

408 
	`gtk_ãxt_buf„r_ö£π_wôh_ègs
(
buf„r
, &
íd
, 
msg
, -1, 
èg2
,

409 
NULL
);

410 
	}
}

415 
⁄_ßve_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
);

416 
gboﬁón
 
	$⁄_wödow1_dñëe_evít
(
GtkWidgë
 * 
widgë
, 
GdkEvít
 * 
evít
,

417 
gpoöãr
 
u£r_d©a
)

419 
GtkWidgë
 *
dülog
, *
œbñ
;

420 
göt
 
ªsu…
;

422 i‡(!
	`c⁄f_gë_ch™ged
())

423  
FALSE
;

425 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
(
	`_
("Warning !"),

426 
	`GTK_WINDOW
(
maö_wnd
),

427 (
GtkDülogFœgs
)

428 (
GTK_DIALOG_MODAL
 |

429 
GTK_DIALOG_DESTROY_WITH_PARENT
),

430 
GTK_STOCK_OK
,

431 
GTK_RESPONSE_YES
,

432 
GTK_STOCK_NO
,

433 
GTK_RESPONSE_NO
,

434 
GTK_STOCK_CANCEL
,

435 
GTK_RESPONSE_CANCEL
, 
NULL
);

436 
	`gtk_dülog_£t_deÁu…_ª•⁄£
(
	`GTK_DIALOG
(
dülog
),

437 
GTK_RESPONSE_CANCEL
);

439 
œbñ
 = 
	`gtk_œbñ_√w
(
	`_
("\nSave configuration ?\n"));

440 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
	`GTK_DIALOG
(
dülog
)->
vbox
), 
œbñ
);

441 
	`gtk_widgë_show
(
œbñ
);

443 
ªsu…
 = 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
));

444 
ªsu…
) {

445 
GTK_RESPONSE_YES
:

446 
	`⁄_ßve_a˘iv©e
(
NULL
, NULL);

447  
FALSE
;

448 
GTK_RESPONSE_NO
:

449  
FALSE
;

450 
GTK_RESPONSE_CANCEL
:

451 
GTK_RESPONSE_DELETE_EVENT
:

453 
	`gtk_widgë_de°roy
(
dülog
);

454  
TRUE
;

457  
FALSE
;

458 
	}
}

461 
	$⁄_wödow1_de°roy
(
GtkObje˘
 * 
obje˘
, 
gpoöãr
 
u£r_d©a
)

463 
	`gtk_maö_quô
();

464 
	}
}

468 
	$⁄_wödow1_size_ªque°
(
GtkWidgë
 * 
widgë
,

469 
GtkRequisôi⁄
 * 
ªquisôi⁄
, 
gpoöãr
 
u£r_d©a
)

471 
göt
 
ﬁd_h
;

472 
göt
 
w
, 
h
;

474 i‡(
widgë
->
wödow
 =
NULL
)

475 
	`gtk_wödow_gë_deÁu…_size
(
	`GTK_WINDOW
(
maö_wnd
), &
w
, &
h
);

477 
	`gdk_wödow_gë_size
(
widgë
->
wödow
, &
w
, &
h
);

479 i‡(
h
 =
ﬁd_h
)

481 
ﬁd_h
 = 
h
;

483 
	`gtk_∑√d_£t_posôi⁄
(
	`GTK_PANED
(
v∑√d
), 2 * 
h
 / 3);

484 
	}
}

491 
	$lﬂd_fûíame
(
GtkFûeSñe˘i⁄
 * 
fûe_£À˘‹
, 
gpoöãr
 
u£r_d©a
)

493 c⁄° 
gch¨
 *
‚
;

495 
‚
 = 
	`gtk_fûe_£À˘i⁄_gë_fûíame
(
GTK_FILE_SELECTION


496 (
u£r_d©a
));

498 i‡(
	`c⁄f_ªad
(
‚
))

499 
	`ãxt_ö£π_msg
(
	`_
("Error"), _("UnableÅoÜoad configuration !"));

501 
	`di•œy_åì
(&
roŸmíu
);

502 
	}
}

504 
	$⁄_lﬂd1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

506 
GtkWidgë
 *
fs
;

508 
fs
 = 
	`gtk_fûe_£À˘i⁄_√w
(
	`_
("Load file..."));

509 
	`g_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
	`GTK_FILE_SELECTION
(
fs
)->
ok_buâ⁄
),

511 
	`G_CALLBACK
(
lﬂd_fûíame
), (
gpoöãr
Ë
fs
);

512 
	`g_sig«l_c⁄√˘_sw≠≥d
(
GTK_OBJECT


513 (
	`GTK_FILE_SELECTION
(
fs
)->
ok_buâ⁄
),

514 "˛icked", 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

515 (
gpoöãr
Ë
fs
);

516 
	`g_sig«l_c⁄√˘_sw≠≥d
(
GTK_OBJECT


517 (
	`GTK_FILE_SELECTION
(
fs
)->
ˇn˚l_buâ⁄
),

518 "˛icked", 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

519 (
gpoöãr
Ë
fs
);

520 
	`gtk_widgë_show
(
fs
);

521 
	}
}

524 
	$⁄_ßve_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

526 i‡(
	`c⁄f_wrôe
(
NULL
))

527 
	`ãxt_ö£π_msg
(
	`_
("Error"), _("UnableÅo save configuration !"));

528 
	}
}

532 
	$°‹e_fûíame
(
GtkFûeSñe˘i⁄
 * 
fûe_£À˘‹
, 
gpoöãr
 
u£r_d©a
)

534 c⁄° 
gch¨
 *
‚
;

536 
‚
 = 
	`gtk_fûe_£À˘i⁄_gë_fûíame
(
GTK_FILE_SELECTION


537 (
u£r_d©a
));

539 i‡(
	`c⁄f_wrôe
(
‚
))

540 
	`ãxt_ö£π_msg
(
	`_
("Error"), _("UnableÅo save configuration !"));

542 
	`gtk_widgë_de°roy
(
	`GTK_WIDGET
(
u£r_d©a
));

543 
	}
}

545 
	$⁄_ßve_as1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

547 
GtkWidgë
 *
fs
;

549 
fs
 = 
	`gtk_fûe_£À˘i⁄_√w
(
	`_
("Save fileás..."));

550 
	`g_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
	`GTK_FILE_SELECTION
(
fs
)->
ok_buâ⁄
),

552 
	`G_CALLBACK
(
°‹e_fûíame
), (
gpoöãr
Ë
fs
);

553 
	`g_sig«l_c⁄√˘_sw≠≥d
(
GTK_OBJECT


554 (
	`GTK_FILE_SELECTION
(
fs
)->
ok_buâ⁄
),

555 "˛icked", 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

556 (
gpoöãr
Ë
fs
);

557 
	`g_sig«l_c⁄√˘_sw≠≥d
(
GTK_OBJECT


558 (
	`GTK_FILE_SELECTION
(
fs
)->
ˇn˚l_buâ⁄
),

559 "˛icked", 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

560 (
gpoöãr
Ë
fs
);

561 
	`gtk_widgë_show
(
fs
);

562 
	}
}

565 
	$⁄_quô1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

567 i‡(!
	`⁄_wödow1_dñëe_evít
(
NULL
, NULL, NULL))

568 
	`gtk_widgë_de°roy
(
	`GTK_WIDGET
(
maö_wnd
));

569 
	}
}

572 
	$⁄_show_«me1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

574 
GtkTªeVõwCﬁumn
 *
cﬁ
;

576 
show_«me
 = 
	`GTK_CHECK_MENU_ITEM
(
míuôem
)->
a˘ive
;

577 
cﬁ
 = 
	`gtk_åì_võw_gë_cﬁumn
(
	`GTK_TREE_VIEW
(
åì2_w
), 
COL_NAME
);

578 i‡(
cﬁ
)

579 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁ
, 
show_«me
);

580 
	}
}

583 
	$⁄_show_ønge1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

585 
GtkTªeVõwCﬁumn
 *
cﬁ
;

587 
show_ønge
 = 
	`GTK_CHECK_MENU_ITEM
(
míuôem
)->
a˘ive
;

588 
cﬁ
 = 
	`gtk_åì_võw_gë_cﬁumn
(
	`GTK_TREE_VIEW
(
åì2_w
), 
COL_NO
);

589 i‡(
cﬁ
)

590 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁ
, 
show_ønge
);

591 
cﬁ
 = 
	`gtk_åì_võw_gë_cﬁumn
(
	`GTK_TREE_VIEW
(
åì2_w
), 
COL_MOD
);

592 i‡(
cﬁ
)

593 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁ
, 
show_ønge
);

594 
cﬁ
 = 
	`gtk_åì_võw_gë_cﬁumn
(
	`GTK_TREE_VIEW
(
åì2_w
), 
COL_YES
);

595 i‡(
cﬁ
)

596 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁ
, 
show_ønge
);

598 
	}
}

601 
	$⁄_show_d©a1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

603 
GtkTªeVõwCﬁumn
 *
cﬁ
;

605 
show_vÆue
 = 
	`GTK_CHECK_MENU_ITEM
(
míuôem
)->
a˘ive
;

606 
cﬁ
 = 
	`gtk_åì_võw_gë_cﬁumn
(
	`GTK_TREE_VIEW
(
åì2_w
), 
COL_VALUE
);

607 i‡(
cﬁ
)

608 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁ
, 
show_vÆue
);

609 
	}
}

613 
	$⁄_£t_›ti⁄_mode1_a˘iv©e
(
GtkMíuIãm
 *
míuôem
, 
gpoöãr
 
u£r_d©a
)

615 
›t_mode
 = 
OPT_NORMAL
;

616 
	`gtk_åì_°‹e_˛ór
(
åì2
);

617 
	`di•œy_åì
(&
roŸmíu
);

618 
	}
}

622 
	$⁄_£t_›ti⁄_mode2_a˘iv©e
(
GtkMíuIãm
 *
míuôem
, 
gpoöãr
 
u£r_d©a
)

624 
›t_mode
 = 
OPT_ALL
;

625 
	`gtk_åì_°‹e_˛ór
(
åì2
);

626 
	`di•œy_åì
(&
roŸmíu
);

627 
	}
}

631 
	$⁄_£t_›ti⁄_mode3_a˘iv©e
(
GtkMíuIãm
 *
míuôem
, 
gpoöãr
 
u£r_d©a
)

633 
›t_mode
 = 
OPT_PROMPT
;

634 
	`gtk_åì_°‹e_˛ór
(
åì2
);

635 
	`di•œy_åì
(&
roŸmíu
);

636 
	}
}

639 
	$⁄_öåodu˘i⁄1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

641 
GtkWidgë
 *
dülog
;

642 c⁄° 
gch¨
 *
öåo_ãxt
 = 
	`_
(

659 
dülog
 = 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
maö_wnd
),

660 
GTK_DIALOG_DESTROY_WITH_PARENT
,

661 
GTK_MESSAGE_INFO
,

662 
GTK_BUTTONS_CLOSE
, "%s", 
öåo_ãxt
);

663 
	`g_sig«l_c⁄√˘_sw≠≥d
(
	`GTK_OBJECT
(
dülog
), "response",

664 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

665 
	`GTK_OBJECT
(
dülog
));

666 
	`gtk_widgë_show_Æl
(
dülog
);

667 
	}
}

670 
	$⁄_about1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

672 
GtkWidgë
 *
dülog
;

673 c⁄° 
gch¨
 *
about_ãxt
 =

674 
	`_
("gkc is copyright (c) 2002 Romain Lievin <roms@lpg.ticalc.org>.\n"

677 
dülog
 = 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
maö_wnd
),

678 
GTK_DIALOG_DESTROY_WITH_PARENT
,

679 
GTK_MESSAGE_INFO
,

680 
GTK_BUTTONS_CLOSE
, "%s", 
about_ãxt
);

681 
	`g_sig«l_c⁄√˘_sw≠≥d
(
	`GTK_OBJECT
(
dülog
), "response",

682 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

683 
	`GTK_OBJECT
(
dülog
));

684 
	`gtk_widgë_show_Æl
(
dülog
);

685 
	}
}

688 
	$⁄_li˚n£1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

690 
GtkWidgë
 *
dülog
;

691 c⁄° 
gch¨
 *
li˚n£_ãxt
 =

692 
	`_
("gkc isÑeleased underÅheÅerms ofÅhe GNU GPL v2.\n"

696 
dülog
 = 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
maö_wnd
),

697 
GTK_DIALOG_DESTROY_WITH_PARENT
,

698 
GTK_MESSAGE_INFO
,

699 
GTK_BUTTONS_CLOSE
, "%s", 
li˚n£_ãxt
);

700 
	`g_sig«l_c⁄√˘_sw≠≥d
(
	`GTK_OBJECT
(
dülog
), "response",

701 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

702 
	`GTK_OBJECT
(
dülog
));

703 
	`gtk_widgë_show_Æl
(
dülog
);

704 
	}
}

707 
	$⁄_back_˛icked
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

709 
¥›_ty≥
 
±y≥
;

711 
cuºít
 = cuºít->
∑ª¡
;

712 
±y≥
 = 
cuºít
->
¥om±
 ? cuºít->¥om±->
ty≥
 : 
P_UNKNOWN
;

713 i‡(
±y≥
 !
P_MENU
)

714 
cuºít
 = cuºít->
∑ª¡
;

715 
	`di•œy_åì_∑π
();

717 i‡(
cuºít
 =&
roŸmíu
)

718 
	`gtk_widgë_£t_£nsôive
(
back_bä
, 
FALSE
);

719 
	}
}

722 
	$⁄_lﬂd_˛icked
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

724 
	`⁄_lﬂd1_a˘iv©e
(
NULL
, 
u£r_d©a
);

725 
	}
}

728 
	$⁄_sögÀ_˛icked
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

730 
võw_mode
 = 
SINGLE_VIEW
;

731 
	`gtk_widgë_hide
(
åì1_w
);

732 
cuºít
 = &
roŸmíu
;

733 
	`di•œy_åì_∑π
();

734 
	}
}

737 
	$⁄_•lô_˛icked
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

739 
göt
 
w
, 
h
;

740 
võw_mode
 = 
SPLIT_VIEW
;

741 
	`gtk_widgë_show
(
åì1_w
);

742 
	`gtk_wödow_gë_deÁu…_size
(
	`GTK_WINDOW
(
maö_wnd
), &
w
, &
h
);

743 
	`gtk_∑√d_£t_posôi⁄
(
	`GTK_PANED
(
h∑√d
), 
w
 / 2);

744 i‡(
åì2
)

745 
	`gtk_åì_°‹e_˛ór
(
åì2
);

746 
	`di•œy_li°
();

749 
	`gtk_widgë_£t_£nsôive
(
back_bä
, 
FALSE
);

750 
	}
}

753 
	$⁄_fuŒ_˛icked
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

755 
võw_mode
 = 
FULL_VIEW
;

756 
	`gtk_widgë_hide
(
åì1_w
);

757 i‡(
åì2
)

758 
	`gtk_åì_°‹e_˛ór
(
åì2
);

759 
	`di•œy_åì
(&
roŸmíu
);

760 
	`gtk_widgë_£t_£nsôive
(
back_bä
, 
FALSE
);

761 
	}
}

764 
	$⁄_cﬁœp£_˛icked
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

766 
	`gtk_åì_võw_cﬁœp£_Æl
(
	`GTK_TREE_VIEW
(
åì2_w
));

767 
	}
}

770 
	$⁄_ex∑nd_˛icked
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

772 
	`gtk_åì_võw_ex∑nd_Æl
(
	`GTK_TREE_VIEW
(
åì2_w
));

773 
	}
}

779 
	$ªndîî_edôed
(
GtkCñlRídîîText
 * 
˚Œ
,

780 c⁄° 
gch¨
 * 
∑th_°rög
,

781 c⁄° 
gch¨
 * 
√w_ãxt
, 
gpoöãr
 
u£r_d©a
)

783 
GtkTªeP©h
 *
∑th
 = 
	`gtk_åì_∑th_√w_‰om_°rög
(
∑th_°rög
);

784 
GtkTªeIãr
 
ôî
;

785 c⁄° *
ﬁd_def
, *
√w_def
;

786 
míu
 *menu;

787 
symbﬁ
 *
sym
;

789 i‡(!
	`gtk_åì_modñ_gë_ôî
(
modñ2
, &
ôî
, 
∑th
))

792 
	`gtk_åì_modñ_gë
(
modñ2
, &
ôî
, 
COL_MENU
, &
míu
, -1);

793 
sym
 = 
míu
->sym;

795 
	`gtk_åì_modñ_gë
(
modñ2
, &
ôî
, 
COL_VALUE
, &
ﬁd_def
, -1);

796 
√w_def
 = 
√w_ãxt
;

798 
	`sym_£t_°rög_vÆue
(
sym
, 
√w_def
);

800 
	`upd©e_åì
(&
roŸmíu
, 
NULL
);

802 
	`gtk_åì_∑th_‰ì
(
∑th
);

803 
	}
}

806 
	$ch™ge_sym_vÆue
(
míu
 *míu, 
göt
 
cﬁ
)

808 
symbﬁ
 *
sym
 = 
míu
->sym;

809 
åi°©e
 
√wvÆ
;

811 i‡(!
sym
)

814 i‡(
cﬁ
 =
COL_NO
)

815 
√wvÆ
 = 
no
;

816 i‡(
cﬁ
 =
COL_MOD
)

817 
√wvÆ
 = 
mod
;

818 i‡(
cﬁ
 =
COL_YES
)

819 
√wvÆ
 = 
yes
;

823 
	`sym_gë_ty≥
(
sym
)) {

824 
S_BOOLEAN
:

825 
S_TRISTATE
:

826 i‡(!
	`sym_åi°©e_wôhö_ønge
(
sym
, 
√wvÆ
))

827 
√wvÆ
 = 
yes
;

828 
	`sym_£t_åi°©e_vÆue
(
sym
, 
√wvÆ
);

829 i‡(
võw_mode
 =
FULL_VIEW
)

830 
	`upd©e_åì
(&
roŸmíu
, 
NULL
);

831 i‡(
võw_mode
 =
SPLIT_VIEW
) {

832 
	`upd©e_åì
(
brow£d
, 
NULL
);

833 
	`di•œy_li°
();

835 i‡(
võw_mode
 =
SINGLE_VIEW
)

836 
	`di•œy_åì_∑π
();

838 
S_INT
:

839 
S_HEX
:

840 
S_STRING
:

844 
	}
}

846 
	$toggÀ_sym_vÆue
(
míu
 *menu)

848 i‡(!
míu
->
sym
)

851 
	`sym_toggÀ_åi°©e_vÆue
(
míu
->
sym
);

852 i‡(
võw_mode
 =
FULL_VIEW
)

853 
	`upd©e_åì
(&
roŸmíu
, 
NULL
);

854 i‡(
võw_mode
 =
SPLIT_VIEW
) {

855 
	`upd©e_åì
(
brow£d
, 
NULL
);

856 
	`di•œy_li°
();

858 i‡(
võw_mode
 =
SINGLE_VIEW
)

859 
	`di•œy_åì_∑π
();

860 
	}
}

862 
göt
 
	$cﬁumn2ödex
(
GtkTªeVõwCﬁumn
 * 
cﬁumn
)

864 
göt
 
i
;

866 
i
 = 0; i < 
COL_NUMBER
; i++) {

867 
GtkTªeVõwCﬁumn
 *
cﬁ
;

869 
cﬁ
 = 
	`gtk_åì_võw_gë_cﬁumn
(
	`GTK_TREE_VIEW
(
åì2_w
), 
i
);

870 i‡(
cﬁ
 =
cﬁumn
)

871  
i
;

875 
	}
}

879 
gboﬁón


880 
	$⁄_åìvõw2_buâ⁄_¥ess_evít
(
GtkWidgë
 * 
widgë
,

881 
GdkEvítBuâ⁄
 * 
evít
, 
gpoöãr
 
u£r_d©a
)

883 
GtkTªeVõw
 *
võw
 = 
	`GTK_TREE_VIEW
(
widgë
);

884 
GtkTªeP©h
 *
∑th
;

885 
GtkTªeVõwCﬁumn
 *
cﬁumn
;

886 
GtkTªeIãr
 
ôî
;

887 
míu
 *menu;

888 
göt
 
cﬁ
;

890 #i‡
	`GTK_CHECK_VERSION
(2,1,4)

891 
göt
 
tx
 = (götË
evít
->
x
;

892 
göt
 
ty
 = (götË
evít
->
y
;

893 
göt
 
cx
, 
cy
;

895 
	`gtk_åì_võw_gë_∑th_©_pos
(
võw
, 
tx
, 
ty
, &
∑th
, &
cﬁumn
, &
cx
,

896 &
cy
);

898 
	`gtk_åì_võw_gë_curs‹
(
võw
, &
∑th
, &
cﬁumn
);

900 i‡(
∑th
 =
NULL
)

901  
FALSE
;

903 i‡(!
	`gtk_åì_modñ_gë_ôî
(
modñ2
, &
ôî
, 
∑th
))

904  
FALSE
;

905 
	`gtk_åì_modñ_gë
(
modñ2
, &
ôî
, 
COL_MENU
, &
míu
, -1);

907 
cﬁ
 = 
	`cﬁumn2ödex
(
cﬁumn
);

908 i‡(
evít
->
ty≥
 =
GDK_2BUTTON_PRESS
) {

909 
¥›_ty≥
 
±y≥
;

910 
±y≥
 = 
míu
->
¥om±
 ? míu->¥om±->
ty≥
 : 
P_UNKNOWN
;

912 i‡(
±y≥
 =
P_MENU
 && 
võw_mode
 !
FULL_VIEW
 && 
cﬁ
 =
COL_OPTION
) {

914 
cuºít
 = 
míu
;

915 
	`di•œy_åì_∑π
();

916 
	`gtk_widgë_£t_£nsôive
(
back_bä
, 
TRUE
);

917 } i‡((
cﬁ
 =
COL_OPTION
)) {

918 
	`toggÀ_sym_vÆue
(
míu
);

919 
	`gtk_åì_võw_ex∑nd_row
(
võw
, 
∑th
, 
TRUE
);

922 i‡(
cﬁ
 =
COL_VALUE
) {

923 
	`toggÀ_sym_vÆue
(
míu
);

924 
	`gtk_åì_võw_ex∑nd_row
(
võw
, 
∑th
, 
TRUE
);

925 } i‡(
cﬁ
 =
COL_NO
 || cﬁ =
COL_MOD


926 || 
cﬁ
 =
COL_YES
) {

927 
	`ch™ge_sym_vÆue
(
míu
, 
cﬁ
);

928 
	`gtk_åì_võw_ex∑nd_row
(
võw
, 
∑th
, 
TRUE
);

932  
FALSE
;

933 
	}
}

936 
gboﬁón


937 
	$⁄_åìvõw2_key_¥ess_evít
(
GtkWidgë
 * 
widgë
,

938 
GdkEvítKey
 * 
evít
, 
gpoöãr
 
u£r_d©a
)

940 
GtkTªeVõw
 *
võw
 = 
	`GTK_TREE_VIEW
(
widgë
);

941 
GtkTªeP©h
 *
∑th
;

942 
GtkTªeVõwCﬁumn
 *
cﬁumn
;

943 
GtkTªeIãr
 
ôî
;

944 
míu
 *menu;

945 
göt
 
cﬁ
;

947 
	`gtk_åì_võw_gë_curs‹
(
võw
, &
∑th
, &
cﬁumn
);

948 i‡(
∑th
 =
NULL
)

949  
FALSE
;

951 i‡(
evít
->
keyvÆ
 =
GDK_•a˚
) {

952 i‡(
	`gtk_åì_võw_row_ex∑nded
(
võw
, 
∑th
))

953 
	`gtk_åì_võw_cﬁœp£_row
(
võw
, 
∑th
);

955 
	`gtk_åì_võw_ex∑nd_row
(
võw
, 
∑th
, 
FALSE
);

956  
TRUE
;

958 i‡(
evít
->
keyvÆ
 =
GDK_KP_E¡î
) {

960 i‡(
widgë
 =
åì1_w
)

961  
FALSE
;

963 
	`gtk_åì_modñ_gë_ôî
(
modñ2
, &
ôî
, 
∑th
);

964 
	`gtk_åì_modñ_gë
(
modñ2
, &
ôî
, 
COL_MENU
, &
míu
, -1);

966 i‡(!
	`°rˇ£cmp
(
evít
->
°rög
, "n"))

967 
cﬁ
 = 
COL_NO
;

968 i‡(!
	`°rˇ£cmp
(
evít
->
°rög
, "m"))

969 
cﬁ
 = 
COL_MOD
;

970 i‡(!
	`°rˇ£cmp
(
evít
->
°rög
, "y"))

971 
cﬁ
 = 
COL_YES
;

973 
cﬁ
 = -1;

974 
	`ch™ge_sym_vÆue
(
míu
, 
cﬁ
);

976  
FALSE
;

977 
	}
}

982 
	$⁄_åìvõw2_curs‹_ch™ged
(
GtkTªeVõw
 * 
åìvõw
, 
gpoöãr
 
u£r_d©a
)

984 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

985 
GtkTªeIãr
 
ôî
;

986 
míu
 *menu;

988 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
åìvõw
);

989 i‡(
	`gtk_åì_£À˘i⁄_gë_£À˘ed
(
£À˘i⁄
, &
modñ2
, &
ôî
)) {

990 
	`gtk_åì_modñ_gë
(
modñ2
, &
ôî
, 
COL_MENU
, &
míu
, -1);

991 
	`ãxt_ö£π_hñp
(
míu
);

993 
	}
}

997 
gboﬁón


998 
	$⁄_åìvõw1_buâ⁄_¥ess_evít
(
GtkWidgë
 * 
widgë
,

999 
GdkEvítBuâ⁄
 * 
evít
, 
gpoöãr
 
u£r_d©a
)

1001 
GtkTªeVõw
 *
võw
 = 
	`GTK_TREE_VIEW
(
widgë
);

1002 
GtkTªeP©h
 *
∑th
;

1003 
GtkTªeVõwCﬁumn
 *
cﬁumn
;

1004 
GtkTªeIãr
 
ôî
;

1005 
míu
 *menu;

1007 
göt
 
tx
 = (götË
evít
->
x
;

1008 
göt
 
ty
 = (götË
evít
->
y
;

1009 
göt
 
cx
, 
cy
;

1011 
	`gtk_åì_võw_gë_∑th_©_pos
(
võw
, 
tx
, 
ty
, &
∑th
, &
cﬁumn
, &
cx
,

1012 &
cy
);

1013 i‡(
∑th
 =
NULL
)

1014  
FALSE
;

1016 
	`gtk_åì_modñ_gë_ôî
(
modñ1
, &
ôî
, 
∑th
);

1017 
	`gtk_åì_modñ_gë
(
modñ1
, &
ôî
, 
COL_MENU
, &
míu
, -1);

1019 i‡(
evít
->
ty≥
 =
GDK_2BUTTON_PRESS
) {

1020 
	`toggÀ_sym_vÆue
(
míu
);

1021 
cuºít
 = 
míu
;

1022 
	`di•œy_åì_∑π
();

1024 
brow£d
 = 
míu
;

1025 
	`di•œy_åì_∑π
();

1028 
	`gtk_widgë_ªÆize
(
åì2_w
);

1029 
	`gtk_åì_võw_£t_curs‹
(
võw
, 
∑th
, 
NULL
, 
FALSE
);

1030 
	`gtk_widgë_gøb_focus
(
åì2_w
);

1032  
FALSE
;

1033 
	}
}

1037 
gch¨
 **
	$fûl_row
(
míu
 *menu)

1039 
gch¨
 *
row
[
COL_NUMBER
];

1040 
symbﬁ
 *
sym
 = 
míu
->sym;

1041 c⁄° *
def
;

1042 
°y≥
;

1043 
åi°©e
 
vÆ
;

1044 
¥›_ty≥
 
±y≥
;

1045 
i
;

1047 
i
 = 
COL_OPTION
; i <
COL_COLOR
; i++)

1048 
	`g_‰ì
(
row
[
i
]);

1049 
	`bzîo
(
row
, (row));

1051 
row
[
COL_OPTION
] =

1052 
	`g_°rdup_¥ötf
("%†%s", 
	`_
(
	`míu_gë_¥om±
(
míu
)),

1053 
sym
 && !
	`sym_has_vÆue
(sym) ? "(NEW)" : "");

1055 i‡(
›t_mode
 =
OPT_ALL
 && !
	`míu_is_visibÀ
(
míu
))

1056 
row
[
COL_COLOR
] = 
	`g_°rdup
("DarkGray");

1057 i‡(
›t_mode
 =
OPT_PROMPT
 &&

1058 
	`míu_has_¥om±
(
míu
Ë&& !
	`míu_is_visibÀ
(menu))

1059 
row
[
COL_COLOR
] = 
	`g_°rdup
("DarkGray");

1061 
row
[
COL_COLOR
] = 
	`g_°rdup
("Black");

1063 
±y≥
 = 
míu
->
¥om±
 ? míu->¥om±->
ty≥
 : 
P_UNKNOWN
;

1064 
±y≥
) {

1065 
P_MENU
:

1066 
row
[
COL_PIXBUF
] = (
gch¨
 *Ë
xpm_míu
;

1067 i‡(
võw_mode
 =
SINGLE_VIEW
)

1068 
row
[
COL_PIXVIS
] = 
	`GINT_TO_POINTER
(
TRUE
);

1069 
row
[
COL_BTNVIS
] = 
	`GINT_TO_POINTER
(
FALSE
);

1071 
P_COMMENT
:

1072 
row
[
COL_PIXBUF
] = (
gch¨
 *Ë
xpm_void
;

1073 
row
[
COL_PIXVIS
] = 
	`GINT_TO_POINTER
(
FALSE
);

1074 
row
[
COL_BTNVIS
] = 
	`GINT_TO_POINTER
(
FALSE
);

1077 
row
[
COL_PIXBUF
] = (
gch¨
 *Ë
xpm_void
;

1078 
row
[
COL_PIXVIS
] = 
	`GINT_TO_POINTER
(
FALSE
);

1079 
row
[
COL_BTNVIS
] = 
	`GINT_TO_POINTER
(
TRUE
);

1083 i‡(!
sym
)

1084  
row
;

1085 
row
[
COL_NAME
] = 
	`g_°rdup
(
sym
->
«me
);

1087 
	`sym_ˇlc_vÆue
(
sym
);

1088 
sym
->
Êags
 &~
SYMBOL_CHANGED
;

1090 i‡(
	`sym_is_choi˚
(
sym
)) {

1091 
míu
 *
chûd
;

1092 
symbﬁ
 *
def_sym
 = 
	`sym_gë_choi˚_vÆue
(
sym
);

1093 
míu
 *
def_míu
 = 
NULL
;

1095 
row
[
COL_BTNVIS
] = 
	`GINT_TO_POINTER
(
FALSE
);

1097 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

1098 i‡(
	`míu_is_visibÀ
(
chûd
)

1099 && 
chûd
->
sym
 =
def_sym
)

1100 
def_míu
 = 
chûd
;

1103 i‡(
def_míu
)

1104 
row
[
COL_VALUE
] =

1105 
	`g_°rdup
(
	`_
(
	`míu_gë_¥om±
(
def_míu
)));

1107 i‡(
sym
->
Êags
 & 
SYMBOL_CHOICEVAL
)

1108 
row
[
COL_BTNRAD
] = 
	`GINT_TO_POINTER
(
TRUE
);

1110 
°y≥
 = 
	`sym_gë_ty≥
(
sym
);

1111 
°y≥
) {

1112 
S_BOOLEAN
:

1113 i‡(
	`GPOINTER_TO_INT
(
row
[
COL_PIXVIS
]Ë=
FALSE
)

1114 
row
[
COL_BTNVIS
] = 
	`GINT_TO_POINTER
(
TRUE
);

1115 i‡(
	`sym_is_choi˚
(
sym
))

1118 
S_TRISTATE
:

1119 
vÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

1120 
vÆ
) {

1121 
no
:

1122 
row
[
COL_NO
] = 
	`g_°rdup
("N");

1123 
row
[
COL_VALUE
] = 
	`g_°rdup
("N");

1124 
row
[
COL_BTNACT
] = 
	`GINT_TO_POINTER
(
FALSE
);

1125 
row
[
COL_BTNINC
] = 
	`GINT_TO_POINTER
(
FALSE
);

1127 
mod
:

1128 
row
[
COL_MOD
] = 
	`g_°rdup
("M");

1129 
row
[
COL_VALUE
] = 
	`g_°rdup
("M");

1130 
row
[
COL_BTNINC
] = 
	`GINT_TO_POINTER
(
TRUE
);

1132 
yes
:

1133 
row
[
COL_YES
] = 
	`g_°rdup
("Y");

1134 
row
[
COL_VALUE
] = 
	`g_°rdup
("Y");

1135 
row
[
COL_BTNACT
] = 
	`GINT_TO_POINTER
(
TRUE
);

1136 
row
[
COL_BTNINC
] = 
	`GINT_TO_POINTER
(
FALSE
);

1140 i‡(
vÆ
 !
no
 && 
	`sym_åi°©e_wôhö_ønge
(
sym
,Ço))

1141 
row
[
COL_NO
] = 
	`g_°rdup
("_");

1142 i‡(
vÆ
 !
mod
 && 
	`sym_åi°©e_wôhö_ønge
(
sym
, mod))

1143 
row
[
COL_MOD
] = 
	`g_°rdup
("_");

1144 i‡(
vÆ
 !
yes
 && 
	`sym_åi°©e_wôhö_ønge
(
sym
, yes))

1145 
row
[
COL_YES
] = 
	`g_°rdup
("_");

1147 
S_INT
:

1148 
S_HEX
:

1149 
S_STRING
:

1150 
def
 = 
	`sym_gë_°rög_vÆue
(
sym
);

1151 
row
[
COL_VALUE
] = 
	`g_°rdup
(
def
);

1152 
row
[
COL_EDIT
] = 
	`GINT_TO_POINTER
(
TRUE
);

1153 
row
[
COL_BTNVIS
] = 
	`GINT_TO_POINTER
(
FALSE
);

1157  
row
;

1158 
	}
}

1162 
	$£t_node
(
GtkTªeIãr
 * 
node
, 
míu
 *míu, 
gch¨
 ** 
row
)

1164 
GdkCﬁ‹
 
cﬁ‹
;

1165 
gboﬁón
 
suc˚ss
;

1166 
GdkPixbuf
 *
pix
;

1168 
pix
 = 
	`gdk_pixbuf_√w_‰om_xpm_d©a
((const **)

1169 
row
[
COL_PIXBUF
]);

1171 
	`gdk_cﬁ‹_∑r£
(
row
[
COL_COLOR
], &
cﬁ‹
);

1172 
	`gdk_cﬁ‹m≠_Æloc_cﬁ‹s
(
	`gdk_cﬁ‹m≠_gë_sy°em
(), &
cﬁ‹
, 1,

1173 
FALSE
, FALSE, &
suc˚ss
);

1175 
	`gtk_åì_°‹e_£t
(
åì
, 
node
,

1176 
COL_OPTION
, 
row
[COL_OPTION],

1177 
COL_NAME
, 
row
[COL_NAME],

1178 
COL_NO
, 
row
[COL_NO],

1179 
COL_MOD
, 
row
[COL_MOD],

1180 
COL_YES
, 
row
[COL_YES],

1181 
COL_VALUE
, 
row
[COL_VALUE],

1182 
COL_MENU
, (
gpoöãr
Ë
míu
,

1183 
COL_COLOR
, &
cﬁ‹
,

1184 
COL_EDIT
, 
	`GPOINTER_TO_INT
(
row
[COL_EDIT]),

1185 
COL_PIXBUF
, 
pix
,

1186 
COL_PIXVIS
, 
	`GPOINTER_TO_INT
(
row
[COL_PIXVIS]),

1187 
COL_BTNVIS
, 
	`GPOINTER_TO_INT
(
row
[COL_BTNVIS]),

1188 
COL_BTNACT
, 
	`GPOINTER_TO_INT
(
row
[COL_BTNACT]),

1189 
COL_BTNINC
, 
	`GPOINTER_TO_INT
(
row
[COL_BTNINC]),

1190 
COL_BTNRAD
, 
	`GPOINTER_TO_INT
(
row
[COL_BTNRAD]),

1193 
	`g_obje˘_uƒef
(
pix
);

1194 
	}
}

1198 
	$∂a˚_node
(
míu
 *míu, **
row
)

1200 
GtkTªeIãr
 *
∑ª¡
 = 
∑ª¡s
[
ödít
 - 1];

1201 
GtkTªeIãr
 *
node
 = 
∑ª¡s
[
ödít
];

1203 
	`gtk_åì_°‹e_≠≥nd
(
åì
, 
node
, 
∑ª¡
);

1204 
	`£t_node
(
node
, 
míu
, 
row
);

1205 
	}
}

1209 
GtkTªeIãr
 
	gfound
;

1214 
GtkTªeIãr
 *
	$gtkåì_ôî_föd_node
(
GtkTªeIãr
 * 
∑ª¡
,

1215 
míu
 *
toföd
)

1217 
GtkTªeIãr
 
ôî
;

1218 
GtkTªeIãr
 *
chûd
 = &
ôî
;

1219 
gboﬁón
 
vÆid
;

1220 
GtkTªeIãr
 *
ªt
;

1222 
vÆid
 = 
	`gtk_åì_modñ_ôî_chûdªn
(
modñ2
, 
chûd
, 
∑ª¡
);

1223 
vÆid
) {

1224 
míu
 *menu;

1226 
	`gtk_åì_modñ_gë
(
modñ2
, 
chûd
, 6, &
míu
, -1);

1228 i‡(
míu
 =
toföd
) {

1229 
	`mem˝y
(&
found
, 
chûd
, (
GtkTªeIãr
));

1230  &
found
;

1233 
ªt
 = 
	`gtkåì_ôî_föd_node
(
chûd
, 
toföd
);

1234 i‡(
ªt
)

1235  
ªt
;

1237 
vÆid
 = 
	`gtk_åì_modñ_ôî_√xt
(
modñ2
, 
chûd
);

1240  
NULL
;

1241 
	}
}

1248 
	$upd©e_åì
(
míu
 *
§c
, 
GtkTªeIãr
 * 
d°
)

1250 
míu
 *
chûd1
;

1251 
GtkTªeIãr
 
ôî
, 
tmp
;

1252 
GtkTªeIãr
 *
chûd2
 = &
ôî
;

1253 
gboﬁón
 
vÆid
;

1254 
GtkTªeIãr
 *
siblög
;

1255 
symbﬁ
 *
sym
;

1256 
míu
 *
míu1
, *
míu2
;

1258 i‡(
§c
 =&
roŸmíu
)

1259 
ödít
 = 1;

1261 
vÆid
 = 
	`gtk_åì_modñ_ôî_chûdªn
(
modñ2
, 
chûd2
, 
d°
);

1262 
chûd1
 = 
§c
->
li°
; chûd1; chûd1 = chûd1->
√xt
) {

1264 
sym
 = 
chûd1
->sym;

1266 
ª∑r£
:

1267 
míu1
 = 
chûd1
;

1268 i‡(
vÆid
)

1269 
	`gtk_åì_modñ_gë
(
modñ2
, 
chûd2
, 
COL_MENU
,

1270 &
míu2
, -1);

1272 
míu2
 = 
NULL
;

1274 #ifde‡
DEBUG


1275 
	`¥ötf
("%*c%†| %s\n", 
ödít
, ' ',

1276 
míu1
 ? 
	`míu_gë_¥om±
(menu1) : "nil",

1277 
míu2
 ? 
	`míu_gë_¥om±
(menu2) : "nil");

1280 i‡((
›t_mode
 =
OPT_NORMAL
 && !
	`míu_is_visibÀ
(
chûd1
)) ||

1281 (
›t_mode
 =
OPT_PROMPT
 && !
	`míu_has_¥om±
(
chûd1
)) ||

1282 (
›t_mode
 =
OPT_ALL
 && !
	`míu_gë_¥om±
(
chûd1
))) {

1285 i‡(
	`gtkåì_ôî_föd_node
(
d°
, 
míu1
Ë!
NULL
) {

1286 
	`mem˝y
(&
tmp
, 
chûd2
, (
GtkTªeIãr
));

1287 
vÆid
 = 
	`gtk_åì_modñ_ôî_√xt
(
modñ2
,

1288 
chûd2
);

1289 
	`gtk_åì_°‹e_ªmove
(
åì2
, &
tmp
);

1290 i‡(!
vÆid
)

1293 
ª∑r£
;

1298 i‡(
míu1
 !
míu2
) {

1299 i‡(
	`gtkåì_ôî_föd_node
(
d°
, 
míu1
Ë=
NULL
) {

1300 i‡(!
vÆid
 && !
míu2
)

1301 
siblög
 = 
NULL
;

1303 
siblög
 = 
chûd2
;

1304 
	`gtk_åì_°‹e_ö£π_bef‹e
(
åì2
,

1305 
chûd2
,

1306 
d°
, 
siblög
);

1307 
	`£t_node
(
chûd2
, 
míu1
, 
	`fûl_row
(menu1));

1308 i‡(
míu2
 =
NULL
)

1309 
vÆid
 = 
TRUE
;

1311 
	`mem˝y
(&
tmp
, 
chûd2
, (
GtkTªeIãr
));

1312 
vÆid
 = 
	`gtk_åì_modñ_ôî_√xt
(
modñ2
,

1313 
chûd2
);

1314 
	`gtk_åì_°‹e_ªmove
(
åì2
, &
tmp
);

1315 i‡(!
vÆid
)

1318 
ª∑r£
;

1320 } i‡(
sym
 && (sym->
Êags
 & 
SYMBOL_CHANGED
)) {

1321 
	`£t_node
(
chûd2
, 
míu1
, 
	`fûl_row
(menu1));

1324 
ödít
++;

1325 
	`upd©e_åì
(
chûd1
, 
chûd2
);

1326 
ödít
--;

1328 
vÆid
 = 
	`gtk_åì_modñ_ôî_√xt
(
modñ2
, 
chûd2
);

1330 
	}
}

1334 
	$di•œy_åì
(
míu
 *menu)

1336 
symbﬁ
 *
sym
;

1337 
¥›îty
 *
¥›
;

1338 
míu
 *
chûd
;

1339 
¥›_ty≥
 
±y≥
;

1341 i‡(
míu
 =&
roŸmíu
) {

1342 
ödít
 = 1;

1343 
cuºít
 = &
roŸmíu
;

1346 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

1347 
¥›
 = 
chûd
->
¥om±
;

1348 
sym
 = 
chûd
->sym;

1349 
±y≥
 = 
¥›
 ?Ör›->
ty≥
 : 
P_UNKNOWN
;

1351 i‡(
sym
)

1352 
sym
->
Êags
 &~
SYMBOL_CHANGED
;

1354 i‡((
võw_mode
 =
SPLIT_VIEW
)

1355 && !(
chûd
->
Êags
 & 
MENU_ROOT
Ë&& (
åì
 =
åì1
))

1358 i‡((
võw_mode
 =
SPLIT_VIEW
Ë&& (
chûd
->
Êags
 & 
MENU_ROOT
)

1359 && (
åì
 =
åì2
))

1362 i‡((
›t_mode
 =
OPT_NORMAL
 && 
	`míu_is_visibÀ
(
chûd
)) ||

1363 (
›t_mode
 =
OPT_PROMPT
 && 
	`míu_has_¥om±
(
chûd
)) ||

1364 (
›t_mode
 =
OPT_ALL
 && 
	`míu_gë_¥om±
(
chûd
)))

1365 
	`∂a˚_node
(
chûd
, 
	`fûl_row
(child));

1366 #ifde‡
DEBUG


1367 
	`¥ötf
("%*c%s: ", 
ödít
, ' ', 
	`míu_gë_¥om±
(
chûd
));

1368 
	`¥ötf
("%s", 
chûd
->
Êags
 & 
MENU_ROOT
 ? "rootmenu | " : "");

1369 
	`¥ötf
("%s", 
	`¥›_gë_ty≥_«me
(
±y≥
));

1370 
	`¥ötf
(" | ");

1371 i‡(
sym
) {

1372 
	`¥ötf
("%s", 
	`sym_ty≥_«me
(
sym
->
ty≥
));

1373 
	`¥ötf
(" | ");

1374 
	`¥ötf
("%s", 
	`dbg_sym_Êags
(
sym
->
Êags
));

1375 
	`¥ötf
("\n");

1377 
	`¥ötf
("\n");

1379 i‡((
võw_mode
 !
FULL_VIEW
Ë&& (
±y≥
 =
P_MENU
)

1380 && (
åì
 =
åì2
))

1388 i‡(
võw_mode
 =
SINGLE_VIEW
 || võw_modê=
FULL_VIEW
) {

1389 
	`gtk_∑√d_£t_posôi⁄
(
	`GTK_PANED
(
h∑√d
), 0);

1392 i‡(((
võw_mode
 =
SINGLE_VIEW
Ë&& (
míu
->
Êags
 & 
MENU_ROOT
))

1393 || (
võw_mode
 =
FULL_VIEW
)

1394 || (
võw_mode
 =
SPLIT_VIEW
)) {

1395 
ödít
++;

1396 
	`di•œy_åì
(
chûd
);

1397 
ödít
--;

1400 
	}
}

1403 
	$di•œy_åì_∑π
()

1405 i‡(
åì2
)

1406 
	`gtk_åì_°‹e_˛ór
(
åì2
);

1407 i‡(
võw_mode
 =
SINGLE_VIEW
)

1408 
	`di•œy_åì
(
cuºít
);

1409 i‡(
võw_mode
 =
SPLIT_VIEW
)

1410 
	`di•œy_åì
(
brow£d
);

1411 
	`gtk_åì_võw_ex∑nd_Æl
(
	`GTK_TREE_VIEW
(
åì2_w
));

1412 
	}
}

1415 
	$di•œy_li°
()

1417 i‡(
åì1
)

1418 
	`gtk_åì_°‹e_˛ór
(
åì1
);

1420 
åì
 = 
åì1
;

1421 
	`di•œy_åì
(&
roŸmíu
);

1422 
	`gtk_åì_võw_ex∑nd_Æl
(
	`GTK_TREE_VIEW
(
åì1_w
));

1423 
åì
 = 
åì2
;

1424 
	}
}

1426 
	$fixup_roŸmíu
(
míu
 *menu)

1428 
míu
 *
chûd
;

1429 
míu_˙t
 = 0;

1431 
míu
->
Êags
 |
MENU_ROOT
;

1432 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

1433 i‡(
chûd
->
¥om±
 && chûd->¥om±->
ty≥
 =
P_MENU
) {

1434 
míu_˙t
++;

1435 
	`fixup_roŸmíu
(
chûd
);

1436 
míu_˙t
--;

1437 } i‡(!
míu_˙t
)

1438 
	`fixup_roŸmíu
(
chûd
);

1440 
	}
}

1444 
	$maö
(
ac
, *
av
[])

1446 c⁄° *
«me
;

1447 *
ív
;

1448 
gch¨
 *
gœde_fûe
;

1450 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

1451 
	`böd_ãxtdomaö_code£t
(
PACKAGE
, "UTF-8");

1452 
	`ãxtdomaö
(
PACKAGE
);

1455 
	`gtk_£t_loˇÀ
();

1456 
	`gtk_öô
(&
ac
, &
av
);

1457 
	`gœde_öô
();

1463 
ív
 = 
	`gëív
(
SRCTREE
);

1464 i‡(
ív
)

1465 
gœde_fûe
 = 
	`g_°rc⁄ˇt
(
ív
, "/s¸ùts/kc⁄fig/gc⁄f.gœde", 
NULL
);

1466 i‡(
av
[0][0] == '/')

1467 
gœde_fûe
 = 
	`g_°rc⁄ˇt
(
av
[0], ".gœde", 
NULL
);

1469 
gœde_fûe
 = 
	`g_°rc⁄ˇt
(
	`g_gë_cuºít_dú
(), "/", 
av
[0], ".gœde", 
NULL
);

1472 i‡(
ac
 > 1 && 
av
[1][0] == '-') {

1473 
av
[1][1]) {

1478 
	`c⁄f_£t_mesßge_ˇŒback
(
NULL
);

1482 
	`¥ötf
("%†[-s] <c⁄fig>\n", 
av
[0]);

1483 
	`exô
(0);

1485 
«me
 = 
av
[2];

1487 
«me
 = 
av
[1];

1489 
	`c⁄f_∑r£
(
«me
);

1490 
	`fixup_roŸmíu
(&
roŸmíu
);

1491 
	`c⁄f_ªad
(
NULL
);

1494 
	`öô_maö_wödow
(
gœde_fûe
);

1495 
	`öô_åì_modñ
();

1496 
	`öô_À·_åì
();

1497 
	`öô_right_åì
();

1499 
võw_mode
) {

1500 
SINGLE_VIEW
:

1501 
	`di•œy_åì_∑π
();

1503 
SPLIT_VIEW
:

1504 
	`di•œy_li°
();

1506 
FULL_VIEW
:

1507 
	`di•œy_åì
(&
roŸmíu
);

1511 
	`gtk_maö
();

1514 
	}
}

1516 
	$c⁄f_ch™ged
()

1518 
boﬁ
 
ch™ged
 = 
	`c⁄f_gë_ch™ged
();

1519 
	`gtk_widgë_£t_£nsôive
(
ßve_bä
, 
ch™ged
);

1520 
	`gtk_widgë_£t_£nsôive
(
ßve_míu_ôem
, 
ch™ged
);

1521 
	}
}

	@swupdate/scripts/kconfig/images.c

6 c⁄° *
	gxpm_lﬂd
[] = {

36 c⁄° *
	gxpm_ßve
[] = {

66 c⁄° *
	gxpm_back
[] = {

94 c⁄° *
	gxpm_åì_võw
[] = {

121 c⁄° *
	gxpm_sögÀ_võw
[] = {

148 c⁄° *
	gxpm_•lô_võw
[] = {

175 c⁄° *
	gxpm_symbﬁ_no
[] = {

192 c⁄° *
	gxpm_symbﬁ_mod
[] = {

209 c⁄° *
	gxpm_symbﬁ_yes
[] = {

226 c⁄° *
	gxpm_choi˚_no
[] = {

243 c⁄° *
	gxpm_choi˚_yes
[] = {

260 c⁄° *
	gxpm_míu
[] = {

277 c⁄° *
	gxpm_míu_öv
[] = {

294 c⁄° *
	gxpm_míuback
[] = {

311 c⁄° *
	gxpm_void
[] = {

	@swupdate/scripts/kconfig/kxgettext.c

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

10 
	~"lkc.h
"

12 *
	$esˇ≥
(c⁄° * 
ãxt
, *
bf
, 
Àn
)

14 *
bÂ
 = 
bf
;

15 
mu…ûöe
 = 
	`°rchr
(
ãxt
, '\n'Ë!
NULL
;

16 
eﬁ
 = 0;

17 
ãxéí
 = 
	`°æí
(
ãxt
);

19 i‡((
ãxéí
 > 0Ë&& (
ãxt
[textlen-1] == '\n'))

20 
eﬁ
 = 1;

22 *
bÂ
++ = '"';

23 --
Àn
;

25 i‡(
mu…ûöe
) {

26 *
bÂ
++ = '"';

27 *
bÂ
++ = '\n';

28 *
bÂ
++ = '"';

29 
Àn
 -= 3;

32 *
ãxt
 !'\0' && 
Àn
 > 1) {

33 i‡(*
ãxt
 == '"')

34 *
bÂ
++ = '\\';

35 i‡(*
ãxt
 == '\n') {

36 *
bÂ
++ = '\\';

37 *
bÂ
++ = 'n';

38 *
bÂ
++ = '"';

39 *
bÂ
++ = '\n';

40 *
bÂ
++ = '"';

41 
Àn
 -= 5;

42 ++
ãxt
;

43 
√xt
;

45 i‡(*
ãxt
 == '\\') {

46 *
bÂ
++ = '\\';

47 
Àn
--;

49 *
bÂ
++ = *
ãxt
++;

50 
√xt
:

51 --
Àn
;

54 i‡(
mu…ûöe
 && 
eﬁ
)

55 
bÂ
 -= 3;

57 *
bÂ
++ = '"';

58 *
bÂ
 = '\0';

60  
bf
;

61 
	}
}

63 
	sfûe_löe
 {

64 
fûe_löe
 *
	m√xt
;

65 c⁄° *
	mfûe
;

66 
	mlöío
;

69 
fûe_löe
 *
	$fûe_löe__√w
(c⁄° *
fûe
, 
löío
)

71 
fûe_löe
 *
£lf
 = 
	`mÆloc
((*self));

73 i‡(
£lf
 =
NULL
)

74 
out
;

76 
£lf
->
fûe
 = file;

77 
£lf
->
löío
 =Üineno;

78 
£lf
->
√xt
 = 
NULL
;

79 
out
:

80  
£lf
;

81 
	}
}

83 
	smesßge
 {

84 c⁄° *
	mmsg
;

85 c⁄° *
	m›ti⁄
;

86 
mesßge
 *
	m√xt
;

87 
fûe_löe
 *
	mfûes
;

90 
mesßge
 *
	gmesßge__li°
;

92 
mesßge
 *
	$mesßge__√w
(c⁄° *
msg
, *
›ti⁄
,

93 c⁄° *
fûe
, 
löío
)

95 
mesßge
 *
£lf
 = 
	`mÆloc
((*self));

97 i‡(
£lf
 =
NULL
)

98 
out
;

100 
£lf
->
fûes
 = 
	`fûe_löe__√w
(
fûe
, 
löío
);

101 i‡(
£lf
->
fûes
 =
NULL
)

102 
out_Áû
;

104 
£lf
->
msg
 = 
	`°rdup
(msg);

105 i‡(
£lf
->
msg
 =
NULL
)

106 
out_Áû_msg
;

108 
£lf
->
›ti⁄
 = option;

109 
£lf
->
√xt
 = 
NULL
;

110 
out
:

111  
£lf
;

112 
out_Áû_msg
:

113 
	`‰ì
(
£lf
->
fûes
);

114 
out_Áû
:

115 
	`‰ì
(
£lf
);

116 
£lf
 = 
NULL
;

117 
out
;

118 
	}
}

120 
mesßge
 *
	$meßge__föd
(c⁄° *
msg
)

122 
mesßge
 *
m
 = 
mesßge__li°
;

124 
m
 !
NULL
) {

125 i‡(
	`°rcmp
(
m
->
msg
, msg) == 0)

127 
m
 = m->
√xt
;

130  
m
;

131 
	}
}

133 
	$mesßge__add_fûe_löe
(
mesßge
 *
£lf
, c⁄° *
fûe
,

134 
löío
)

136 
rc
 = -1;

137 
fûe_löe
 *
Ê
 = 
	`fûe_löe__√w
(
fûe
, 
löío
);

139 i‡(
Ê
 =
NULL
)

140 
out
;

142 
Ê
->
√xt
 = 
£lf
->
fûes
;

143 
£lf
->
fûes
 = 
Ê
;

144 
rc
 = 0;

145 
out
:

146  
rc
;

147 
	}
}

149 
	$mesßge__add
(c⁄° *
msg
, *
›ti⁄
, c⁄° *
fûe
,

150 
löío
)

152 
rc
 = 0;

153 
bf
[16384];

154 *
esˇ≥d
 = 
	`esˇ≥
(
msg
, 
bf
, (bf));

155 
mesßge
 *
m
 = 
	`meßge__föd
(
esˇ≥d
);

157 i‡(
m
 !
NULL
)

158 
rc
 = 
	`mesßge__add_fûe_löe
(
m
, 
fûe
, 
löío
);

160 
m
 = 
	`mesßge__√w
(
esˇ≥d
, 
›ti⁄
, 
fûe
, 
löío
);

162 i‡(
m
 !
NULL
) {

163 
m
->
√xt
 = 
mesßge__li°
;

164 
mesßge__li°
 = 
m
;

166 
rc
 = -1;

168  
rc
;

169 
	}
}

171 
	$míu_buûd_mesßge_li°
(
míu
 *menu)

173 
míu
 *
chûd
;

175 
	`mesßge__add
(
	`míu_gë_¥om±
(
míu
), 
NULL
,

176 
míu
->
fûe
 =
NULL
 ? "RoŸ Míu" : míu->fûe->
«me
,

177 
míu
->
löío
);

179 i‡(
míu
->
sym
 !
NULL
 && 
	`míu_has_hñp
(menu))

180 
	`mesßge__add
(
	`míu_gë_hñp
(
míu
), míu->
sym
->
«me
,

181 
míu
->
fûe
 =
NULL
 ? "RoŸ Míu" : míu->fûe->
«me
,

182 
míu
->
löío
);

184 
chûd
 = 
míu
->
li°
; chûd !
NULL
; chûd = chûd->
√xt
)

185 i‡(
chûd
->
¥om±
 !
NULL
)

186 
	`míu_buûd_mesßge_li°
(
chûd
);

187 
	}
}

189 
	$mesßge__¥öt_fûe_löío
(
mesßge
 *
£lf
)

191 
fûe_löe
 *
Ê
 = 
£lf
->
fûes
;

193 
	`putch¨
('\n');

194 i‡(
£lf
->
›ti⁄
 !
NULL
)

195 
	`¥ötf
("# %s:00000\n", 
£lf
->
›ti⁄
);

197 
	`¥ötf
("#: %s:%d", 
Ê
->
fûe
, fl->
löío
);

198 
Ê
 = fl->
√xt
;

200 
Ê
 !
NULL
) {

201 
	`¥ötf
(", %s:%d", 
Ê
->
fûe
, fl->
löío
);

202 
Ê
 = fl->
√xt
;

205 
	`putch¨
('\n');

206 
	}
}

208 
	$mesßge__¥öt_gëãxt_msgid_msg°r
(
mesßge
 *
£lf
)

210 
	`mesßge__¥öt_fûe_löío
(
£lf
);

212 
	`¥ötf
("msgid %s\n"

213 "msg°∏\"\"\n", 
£lf
->
msg
);

214 
	}
}

216 
	$míu__xgëãxt
()

218 
mesßge
 *
m
 = 
mesßge__li°
;

220 
m
 !
NULL
) {

222 i‡(
	`°æí
(
m
->
msg
) > ("\"\""))

223 
	`mesßge__¥öt_gëãxt_msgid_msg°r
(
m
);

224 
m
 = m->
√xt
;

226 
	}
}

228 
	$maö
(
ac
, **
av
)

230 
	`c⁄f_∑r£
(
av
[1]);

232 
	`míu_buûd_mesßge_li°
(
	`míu_gë_roŸ_míu
(
NULL
));

233 
	`míu__xgëãxt
();

235 
	}
}

	@swupdate/scripts/kconfig/list.h

1 #i‚de‡
LIST_H


2 
	#LIST_H


	)

8 #unde‡
off£tof


9 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

18 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

19 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

20 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

23 
	sli°_hód
 {

24 
li°_hód
 *
	m√xt
, *
	m¥ev
;

28 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

30 
	#LIST_HEAD
(
«me
) \

31 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

39 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

40 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

48 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

49 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

50 &
pos
->
membî
 !(
hód
); \

51 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

60 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

61 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

62 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

63 &
pos
->
membî
 !(
hód
); \

64 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

70 
ölöe
 
	$li°_em±y
(c⁄° 
li°_hód
 *
hód
)

72  
hód
->
√xt
 == head;

73 
	}
}

81 
ölöe
 
	$__li°_add
(
li°_hód
 *
_√w
,

82 
li°_hód
 *
¥ev
,

83 
li°_hód
 *
√xt
)

85 
√xt
->
¥ev
 = 
_√w
;

86 
_√w
->
√xt
 =Çext;

87 
_√w
->
¥ev
 =Örev;

88 
¥ev
->
√xt
 = 
_√w
;

89 
	}
}

99 
ölöe
 
	$li°_add_èû
(
li°_hód
 *
_√w
, li°_hód *
hód
)

101 
	`__li°_add
(
_√w
, 
hód
->
¥ev
, head);

102 
	}
}

111 
ölöe
 
	$__li°_dñ
(
li°_hód
 *
¥ev
, li°_hód *
√xt
)

113 
√xt
->
¥ev
 =Örev;

114 
¥ev
->
√xt
 =Çext;

115 
	}
}

117 
	#LIST_POISON1
 ((*Ë0x00100100)

	)

118 
	#LIST_POISON2
 ((*Ë0x00200200)

	)

125 
ölöe
 
	$li°_dñ
(
li°_hód
 *
íåy
)

127 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

128 
íåy
->
√xt
 = (
li°_hód
*)
LIST_POISON1
;

129 
íåy
->
¥ev
 = (
li°_hód
*)
LIST_POISON2
;

130 
	}
}

	@swupdate/scripts/kconfig/lkc.h

6 #i‚de‡
LKC_H


7 
	#LKC_H


	)

9 
	~"ex¥.h
"

11 #i‚de‡
KBUILD_NO_NLS


12 
	~<liböé.h
>

14 
ölöe
 c⁄° *
	$gëãxt
(c⁄° *
txt
Ë{ Åxt; 
	}
}

15 
ölöe
 
	$ãxtdomaö
(c⁄° *
domaö«me
Ë{
	}
}

16 
ölöe
 
	$bödãxtdomaö
(c⁄° *
«me
, c⁄° *
dú
Ë{
	}
}

17 
ölöe
 *
	$böd_ãxtdomaö_code£t
(c⁄° *
dn
, *
c
Ë{  c; 
	}
}

20 #ifde‡
__˝lu•lus


24 
	~"lkc_¥Ÿo.h
"

26 
	#SRCTREE
 "§˘ªe"

	)

28 #i‚de‡
PACKAGE


29 
	#PACKAGE
 "löux"

	)

32 
	#LOCALEDIR
 "/u§/sh¨e/loˇÀ"

	)

34 
	#_
(
ãxt
Ë
	`gëãxt
—ext)

	)

35 
	#N_
(
ãxt
Ë—ext)

	)

37 #i‚de‡
CONFIG_


38 
	#CONFIG_
 "CONFIG_"

	)

40 
ölöe
 c⁄° *
CONFIG_¥efix
()

42  
gëív
–"CONFIG_" ) ?: 
CONFIG_
;

44 #unde‡
CONFIG_


45 
	#CONFIG_
 
	`CONFIG_¥efix
()

	)

47 
	#TF_COMMAND
 0x0001

	)

48 
	#TF_PARAM
 0x0002

	)

49 
	#TF_OPTION
 0x0004

	)

51 
	ec⁄f_def_mode
 {

52 
def_deÁu…
,

53 
def_yes
,

54 
def_mod
,

55 
def_no
,

56 
def_øndom


59 
	#T_OPT_MODULES
 1

	)

60 
	#T_OPT_DEFCONFIG_LIST
 2

	)

61 
	#T_OPT_ENV
 3

	)

62 
	#T_OPT_ALLNOCONFIG_Y
 4

	)

64 
	skc⁄f_id
 {

65 
«me
;

66 
tokí
;

67 
Êags
;

68 
symbﬁ_ty≥
 
°y≥
;

71 
zc⁄fdump
(
FILE
 *
out
);

72 
zc⁄f_°¨thñp
();

73 
FILE
 *
zc⁄f_f›í
(c⁄° *
«me
);

74 
zc⁄f_öôsˇn
(c⁄° *
«me
);

75 
zc⁄f_√xtfûe
(c⁄° *
«me
);

76 
zc⁄f_löío
();

77 c⁄° *
zc⁄f_cu∫ame
();

80 c⁄° *
c⁄f_gë_c⁄fig«me
();

81 c⁄° *
c⁄f_gë_autoc⁄fig_«me
();

82 *
c⁄f_gë_deÁu…_c⁄‚ame
();

83 
sym_£t_ch™ge_cou¡
(
cou¡
);

84 
sym_add_ch™ge_cou¡
(
cou¡
);

85 
boﬁ
 
c⁄f_£t_Æl_√w_symbﬁs
(
c⁄f_def_mode
 
mode
);

86 
£t_Æl_choi˚_vÆues
(
symbﬁ
 *
csym
);

89 
ölöe
 
xfwrôe
(c⁄° *
°r
, 
size_t
 
Àn
, size_à
cou¡
, 
FILE
 *
out
)

91 
as£π
(
Àn
 != 0);

93 i‡(
fwrôe
(
°r
, 
Àn
, 
cou¡
, 
out
) != count)

94 
Ârötf
(
°dîr
, "Error in writing orÉnd of file.\n");

98 
_míu_öô
();

99 
míu_w¨n
(
míu
 *míu, c⁄° *
fmt
, ...);

100 
míu
 *
míu_add_míu
();

101 
míu_íd_míu
();

102 
míu_add_íåy
(
symbﬁ
 *
sym
);

103 
míu_íd_íåy
();

104 
míu_add_dï
(
ex¥
 *
dï
);

105 
míu_add_visibûôy
(
ex¥
 *
dï
);

106 
¥›îty
 *
míu_add_¥om±
(
¥›_ty≥
 
ty≥
, *
¥om±
, 
ex¥
 *
dï
);

107 
míu_add_ex¥
(
¥›_ty≥
 
ty≥
, 
ex¥
 *ex¥, ex¥ *
dï
);

108 
míu_add_symbﬁ
(
¥›_ty≥
 
ty≥
, 
symbﬁ
 *
sym
, 
ex¥
 *
dï
);

109 
míu_add_›ti⁄
(
tokí
, *
¨g
);

110 
míu_föÆize
(
míu
 *
∑ª¡
);

111 
míu_£t_ty≥
(
ty≥
);

114 
fûe
 *
fûe_lookup
(c⁄° *
«me
);

115 
fûe_wrôe_dï
(c⁄° *
«me
);

116 *
xmÆloc
(
size_t
 
size
);

117 *
xˇŒoc
(
size_t
 
nmemb
, size_à
size
);

119 
	sg°r
 {

120 
size_t
 
Àn
;

121 *
s
;

126 
max_width
;

128 
g°r
 
°r_√w
();

129 
°r_‰ì
(
g°r
 *
gs
);

130 
°r_≠≥nd
(
g°r
 *
gs
, c⁄° *
s
);

131 
°r_¥ötf
(
g°r
 *
gs
, c⁄° *
fmt
, ...);

132 c⁄° *
°r_gë
(
g°r
 *
gs
);

135 
ex¥
 *
sym_ív_li°
;

137 
sym_öô
();

138 
sym_˛ór_Æl_vÆid
();

139 
symbﬁ
 *
sym_choi˚_deÁu…
(symbﬁ *
sym
);

140 c⁄° *
sym_gë_°rög_deÁu…
(
symbﬁ
 *
sym
);

141 
symbﬁ
 *
sym_check_dïs
(symbﬁ *
sym
);

142 
¥›îty
 *
¥›_Æloc
(
¥›_ty≥
 
ty≥
, 
symbﬁ
 *
sym
);

143 
symbﬁ
 *
¥›_gë_symbﬁ
(
¥›îty
 *
¥›
);

144 
¥›îty
 *
sym_gë_ív_¥›
(
symbﬁ
 *
sym
);

146 
ölöe
 
åi°©e
 
sym_gë_åi°©e_vÆue
(
symbﬁ
 *
sym
)

148  
	gsym
->
	gcuº
.
	gåi
;

152 
ölöe
 
symbﬁ
 *
sym_gë_choi˚_vÆue
(symbﬁ *
sym
)

154  (
	gsymbﬁ
 *)
	gsym
->
	gcuº
.
	gvÆ
;

157 
ölöe
 
boﬁ
 
sym_£t_choi˚_vÆue
(
symbﬁ
 *
ch
, symbﬁ *
chvÆ
)

159  
sym_£t_åi°©e_vÆue
(
chvÆ
, 
yes
);

162 
ölöe
 
boﬁ
 
sym_is_choi˚
(
symbﬁ
 *
sym
)

164  
	gsym
->
	gÊags
 & 
	gSYMBOL_CHOICE
 ? 
	gåue
 : 
Ál£
;

167 
ölöe
 
boﬁ
 
sym_is_choi˚_vÆue
(
symbﬁ
 *
sym
)

169  
	gsym
->
	gÊags
 & 
	gSYMBOL_CHOICEVAL
 ? 
	gåue
 : 
Ál£
;

172 
ölöe
 
boﬁ
 
sym_is_›ti⁄Æ
(
symbﬁ
 *
sym
)

174  
	gsym
->
	gÊags
 & 
	gSYMBOL_OPTIONAL
 ? 
	gåue
 : 
Ál£
;

177 
ölöe
 
boﬁ
 
sym_has_vÆue
(
symbﬁ
 *
sym
)

179  
	gsym
->
	gÊags
 & 
	gSYMBOL_DEF_USER
 ? 
	gåue
 : 
Ál£
;

182 #ifde‡
__˝lu•lus


	@swupdate/scripts/kconfig/lkc_defs.h

1 
	~<°d¨g.h
>

4 
	#c⁄f_∑r£
 (*
c⁄f_∑r£_p
)

	)

5 
	#c⁄f_ªad
 (*
c⁄f_ªad_p
)

	)

6 
	#c⁄f_ªad_sim∂e
 (*
c⁄f_ªad_sim∂e_p
)

	)

7 
	#c⁄f_wrôe_defc⁄fig
 (*
c⁄f_wrôe_defc⁄fig_p
)

	)

8 
	#c⁄f_wrôe
 (*
c⁄f_wrôe_p
)

	)

9 
	#c⁄f_wrôe_autoc⁄f
 (*
c⁄f_wrôe_autoc⁄f_p
)

	)

10 
	#c⁄f_gë_ch™ged
 (*
c⁄f_gë_ch™ged_p
)

	)

11 
	#c⁄f_£t_ch™ged_ˇŒback
 (*
c⁄f_£t_ch™ged_ˇŒback_p
)

	)

12 
	#c⁄f_£t_mesßge_ˇŒback
 (*
c⁄f_£t_mesßge_ˇŒback_p
)

	)

15 
	#roŸmíu
 (*
roŸmíu_p
)

	)

17 
	#míu_is_visibÀ
 (*
míu_is_visibÀ_p
)

	)

18 
	#míu_has_¥om±
 (*
míu_has_¥om±_p
)

	)

19 
	#míu_gë_¥om±
 (*
míu_gë_¥om±_p
)

	)

20 
	#míu_gë_roŸ_míu
 (*
míu_gë_roŸ_míu_p
)

	)

21 
	#míu_gë_∑ª¡_míu
 (*
míu_gë_∑ª¡_míu_p
)

	)

22 
	#míu_has_hñp
 (*
míu_has_hñp_p
)

	)

23 
	#míu_gë_hñp
 (*
míu_gë_hñp_p
)

	)

24 
	#gë_symbﬁ_°r
 (*
gë_symbﬁ_°r_p
)

	)

25 
	#gë_ªœti⁄s_°r
 (*
gë_ªœti⁄s_°r_p
)

	)

26 
	#míu_gë_ext_hñp
 (*
míu_gë_ext_hñp_p
)

	)

29 
	#symbﬁ_hash
 (*
symbﬁ_hash_p
)

	)

31 
	#sym_lookup
 (*
sym_lookup_p
)

	)

32 
	#sym_föd
 (*
sym_föd_p
)

	)

33 
	#sym_ex∑nd_°rög_vÆue
 (*
sym_ex∑nd_°rög_vÆue_p
)

	)

34 
	#sym_ª_£¨ch
 (*
sym_ª_£¨ch_p
)

	)

35 
	#sym_ty≥_«me
 (*
sym_ty≥_«me_p
)

	)

36 
	#sym_ˇlc_vÆue
 (*
sym_ˇlc_vÆue_p
)

	)

37 
	#sym_gë_ty≥
 (*
sym_gë_ty≥_p
)

	)

38 
	#sym_åi°©e_wôhö_ønge
 (*
sym_åi°©e_wôhö_ønge_p
)

	)

39 
	#sym_£t_åi°©e_vÆue
 (*
sym_£t_åi°©e_vÆue_p
)

	)

40 
	#sym_toggÀ_åi°©e_vÆue
 (*
sym_toggÀ_åi°©e_vÆue_p
)

	)

41 
	#sym_°rög_vÆid
 (*
sym_°rög_vÆid_p
)

	)

42 
	#sym_°rög_wôhö_ønge
 (*
sym_°rög_wôhö_ønge_p
)

	)

43 
	#sym_£t_°rög_vÆue
 (*
sym_£t_°rög_vÆue_p
)

	)

44 
	#sym_is_ch™gabÀ
 (*
sym_is_ch™gabÀ_p
)

	)

45 
	#sym_gë_choi˚_¥›
 (*
sym_gë_choi˚_¥›_p
)

	)

46 
	#sym_gë_deÁu…_¥›
 (*
sym_gë_deÁu…_¥›_p
)

	)

47 
	#sym_gë_°rög_vÆue
 (*
sym_gë_°rög_vÆue_p
)

	)

49 
	#¥›_gë_ty≥_«me
 (*
¥›_gë_ty≥_«me_p
)

	)

52 
	#ex¥_com∑ª_ty≥
 (*
ex¥_com∑ª_ty≥_p
)

	)

53 
	#ex¥_¥öt
 (*
ex¥_¥öt_p
)

	)

	@swupdate/scripts/kconfig/lkc_proto.h

1 
	~<°d¨g.h
>

4 
c⁄f_∑r£
(c⁄° *
«me
);

5 
c⁄f_ªad
(c⁄° *
«me
);

6 
c⁄f_ªad_sim∂e
(c⁄° *
«me
, );

7 
c⁄f_wrôe_defc⁄fig
(c⁄° *
«me
);

8 
c⁄f_wrôe
(c⁄° *
«me
);

9 
c⁄f_wrôe_autoc⁄f
();

10 
boﬁ
 
c⁄f_gë_ch™ged
();

11 
c⁄f_£t_ch™ged_ˇŒback
((*
‚
)());

12 
	`c⁄f_£t_mesßge_ˇŒback
((*
‚
)(c⁄° *
fmt
, 
va_li°
 
≠
));

15 
míu
 
roŸmíu
;

17 
boﬁ
 
	`míu_is_em±y
(
míu
 *menu);

18 
boﬁ
 
	`míu_is_visibÀ
(
míu
 *menu);

19 
boﬁ
 
	`míu_has_¥om±
(
míu
 *menu);

20 c⁄° * 
	`míu_gë_¥om±
(
míu
 *menu);

21 
míu
 * 
	`míu_gë_roŸ_míu
(menu *menu);

22 
míu
 * 
	`míu_gë_∑ª¡_míu
(menu *menu);

23 
boﬁ
 
	`míu_has_hñp
(
míu
 *menu);

24 c⁄° * 
	`míu_gë_hñp
(
míu
 *menu);

25 
g°r
 
	`gë_ªœti⁄s_°r
(
symbﬁ
 **
sym_¨r
, 
li°_hód
 *
hód
);

26 
	`míu_gë_ext_hñp
(
míu
 *míu, 
g°r
 *
hñp
);

29 
symbﬁ
 * 
symbﬁ_hash
[
SYMBOL_HASHSIZE
];

31 
symbﬁ
 * 
	`sym_lookup
(c⁄° *
«me
, 
Êags
);

32 
symbﬁ
 * 
	`sym_föd
(c⁄° *
«me
);

33 c⁄° * 
	`sym_ex∑nd_°rög_vÆue
(c⁄° *
ö
);

34 c⁄° * 
	`sym_esˇ≥_°rög_vÆue
(c⁄° *
ö
);

35 
symbﬁ
 ** 
	`sym_ª_£¨ch
(c⁄° *
∑âîn
);

36 c⁄° * 
	`sym_ty≥_«me
(
symbﬁ_ty≥
 
ty≥
);

37 
	`sym_ˇlc_vÆue
(
symbﬁ
 *
sym
);

38 
symbﬁ_ty≥
 
	`sym_gë_ty≥
(
symbﬁ
 *
sym
);

39 
boﬁ
 
	`sym_åi°©e_wôhö_ønge
(
symbﬁ
 *
sym
,
åi°©e
 
åi
);

40 
boﬁ
 
	`sym_£t_åi°©e_vÆue
(
symbﬁ
 *
sym
,
åi°©e
 
åi
);

41 
åi°©e
 
	`sym_toggÀ_åi°©e_vÆue
(
symbﬁ
 *
sym
);

42 
boﬁ
 
	`sym_°rög_vÆid
(
symbﬁ
 *
sym
, c⁄° *
√wvÆ
);

43 
boﬁ
 
	`sym_°rög_wôhö_ønge
(
symbﬁ
 *
sym
, c⁄° *
°r
);

44 
boﬁ
 
	`sym_£t_°rög_vÆue
(
symbﬁ
 *
sym
, c⁄° *
√wvÆ
);

45 
boﬁ
 
	`sym_is_ch™gabÀ
(
symbﬁ
 *
sym
);

46 
¥›îty
 * 
	`sym_gë_choi˚_¥›
(
symbﬁ
 *
sym
);

47 c⁄° * 
	`sym_gë_°rög_vÆue
(
symbﬁ
 *
sym
);

49 c⁄° * 
	`¥›_gë_ty≥_«me
(
¥›_ty≥
 
ty≥
);

52 
	`ex¥_¥öt
(
ex¥
 *
e
, (*
‚
)(*, 
symbﬁ
 *, c⁄° *), *
d©a
, 
¥evtokí
);

	@swupdate/scripts/kconfig/lxdialog/checklist.c

24 
	~"dülog.h
"

26 
	gli°_width
, 
	gcheck_x
, 
	gôem_x
;

31 
	$¥öt_ôem
(
WINDOW
 * 
wö
, 
choi˚
, 
£À˘ed
)

33 
i
;

34 *
li°_ôem
 = 
	`mÆloc
(
li°_width
 + 1);

36 
	`°∫˝y
(
li°_ôem
, 
	`ôem_°r
(), 
li°_width
 - 
ôem_x
);

37 
li°_ôem
[
li°_width
 - 
ôem_x
] = '\0';

40 
	`w©å£t
(
wö
, 
dlg
.
míubox
.
©r
);

41 
	`wmove
(
wö
, 
choi˚
, 0);

42 
i
 = 0; i < 
li°_width
; i++)

43 
	`waddch
(
wö
, ' ');

45 
	`wmove
(
wö
, 
choi˚
, 
check_x
);

46 
	`w©å£t
(
wö
, 
£À˘ed
 ? 
dlg
.
check_£À˘ed
.
©r


47 : 
dlg
.
check
.
©r
);

48 i‡(!
	`ôem_is_èg
(':'))

49 
	`w¥ötw
(
wö
, "(%c)", 
	`ôem_is_èg
('X') ? 'X' : ' ');

51 
	`w©å£t
(
wö
, 
£À˘ed
 ? 
dlg
.
èg_£À˘ed
.
©r
 : dlg.
èg
.atr);

52 
	`mvwaddch
(
wö
, 
choi˚
, 
ôem_x
, 
li°_ôem
[0]);

53 
	`w©å£t
(
wö
, 
£À˘ed
 ? 
dlg
.
ôem_£À˘ed
.
©r
 : dlg.
ôem
.atr);

54 
	`wadd°r
(
wö
, 
li°_ôem
 + 1);

55 i‡(
£À˘ed
) {

56 
	`wmove
(
wö
, 
choi˚
, 
check_x
 + 1);

57 
	`wª‰esh
(
wö
);

59 
	`‰ì
(
li°_ôem
);

60 
	}
}

65 
	$¥öt_¨rows
(
WINDOW
 * 
wö
, 
choi˚
, 
ôem_no
, 
s¸ﬁl
,

66 
y
, 
x
, 
height
)

68 
	`wmove
(
wö
, 
y
, 
x
);

70 i‡(
s¸ﬁl
 > 0) {

71 
	`w©å£t
(
wö
, 
dlg
.
u¨row
.
©r
);

72 
	`waddch
(
wö
, 
ACS_UARROW
);

73 
	`wadd°r
(
wö
, "(-)");

75 
	`w©å£t
(
wö
, 
dlg
.
míubox
.
©r
);

76 
	`waddch
(
wö
, 
ACS_HLINE
);

77 
	`waddch
(
wö
, 
ACS_HLINE
);

78 
	`waddch
(
wö
, 
ACS_HLINE
);

79 
	`waddch
(
wö
, 
ACS_HLINE
);

82 
y
 = y + 
height
 + 1;

83 
	`wmove
(
wö
, 
y
, 
x
);

85 i‡((
height
 < 
ôem_no
Ë&& (
s¸ﬁl
 + 
choi˚
 < item_no - 1)) {

86 
	`w©å£t
(
wö
, 
dlg
.
d¨row
.
©r
);

87 
	`waddch
(
wö
, 
ACS_DARROW
);

88 
	`wadd°r
(
wö
, "(+)");

90 
	`w©å£t
(
wö
, 
dlg
.
míubox_b‹dî
.
©r
);

91 
	`waddch
(
wö
, 
ACS_HLINE
);

92 
	`waddch
(
wö
, 
ACS_HLINE
);

93 
	`waddch
(
wö
, 
ACS_HLINE
);

94 
	`waddch
(
wö
, 
ACS_HLINE
);

96 
	}
}

101 
	$¥öt_buâ⁄s
(
WINDOW
 * 
dülog
, 
height
, 
width
, 
£À˘ed
)

103 
x
 = 
width
 / 2 - 11;

104 
y
 = 
height
 - 2;

106 
	`¥öt_buâ⁄
(
dülog
, 
	`gëãxt
("Sñe˘"), 
y
, 
x
, 
£À˘ed
 == 0);

107 
	`¥öt_buâ⁄
(
dülog
, 
	`gëãxt
(" Hñ∞"), 
y
, 
x
 + 14, 
£À˘ed
 == 1);

109 
	`wmove
(
dülog
, 
y
, 
x
 + 1 + 14 * 
£À˘ed
);

110 
	`wª‰esh
(
dülog
);

111 
	}
}

117 
	$dülog_checkli°
(c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
,

118 
width
, 
li°_height
)

120 
i
, 
x
, 
y
, 
box_x
, 
box_y
;

121 
key
 = 0, 
buâ⁄
 = 0, 
choi˚
 = 0, 
s¸ﬁl
 = 0, 
max_choi˚
;

122 
WINDOW
 *
dülog
, *
li°
;

125 
	`ôem_f‹óch
() {

126 i‡(
	`ôem_is_èg
('X'))

127 
choi˚
 = 
	`ôem_n
();

128 i‡(
	`ôem_is_£À˘ed
()) {

129 
choi˚
 = 
	`ôem_n
();

134 
do_ªsize
:

135 i‡(
	`gëmaxy
(
°ds¸
Ë< (
height
 + 
CHECKLIST_HEIGTH_MIN
))

136  -
ERRDISPLAYTOOSMALL
;

137 i‡(
	`gëmaxx
(
°ds¸
Ë< (
width
 + 
CHECKLIST_WIDTH_MIN
))

138  -
ERRDISPLAYTOOSMALL
;

140 
max_choi˚
 = 
	`MIN
(
li°_height
, 
	`ôem_cou¡
());

143 
x
 = (
	`gëmaxx
(
°ds¸
Ë- 
width
) / 2;

144 
y
 = (
	`gëmaxy
(
°ds¸
Ë- 
height
) / 2;

146 
	`døw_shadow
(
°ds¸
, 
y
, 
x
, 
height
, 
width
);

148 
dülog
 = 
	`√wwö
(
height
, 
width
, 
y
, 
x
);

149 
	`key∑d
(
dülog
, 
TRUE
);

151 
	`døw_box
(
dülog
, 0, 0, 
height
, 
width
,

152 
dlg
.
dülog
.
©r
, dlg.
b‹dî
.atr);

153 
	`w©å£t
(
dülog
, 
dlg
.
b‹dî
.
©r
);

154 
	`mvwaddch
(
dülog
, 
height
 - 3, 0, 
ACS_LTEE
);

155 
i
 = 0; i < 
width
 - 2; i++)

156 
	`waddch
(
dülog
, 
ACS_HLINE
);

157 
	`w©å£t
(
dülog
, 
dlg
.dülog.
©r
);

158 
	`waddch
(
dülog
, 
ACS_RTEE
);

160 
	`¥öt_tôÀ
(
dülog
, 
tôÀ
, 
width
);

162 
	`w©å£t
(
dülog
, 
dlg
.dülog.
©r
);

163 
	`¥öt_autowøp
(
dülog
, 
¥om±
, 
width
 - 2, 1, 3);

165 
li°_width
 = 
width
 - 6;

166 
box_y
 = 
height
 - 
li°_height
 - 5;

167 
box_x
 = (
width
 - 
li°_width
) / 2 - 1;

170 
li°
 = 
	`subwö
(
dülog
, 
li°_height
, 
li°_width
, 
y
 + 
box_y
 + 1,

171 
x
 + 
box_x
 + 1);

173 
	`key∑d
(
li°
, 
TRUE
);

176 
	`døw_box
(
dülog
, 
box_y
, 
box_x
, 
li°_height
 + 2, 
li°_width
 + 2,

177 
dlg
.
míubox_b‹dî
.
©r
, dlg.
míubox
.atr);

180 
check_x
 = 0;

181 
	`ôem_f‹óch
()

182 
check_x
 = 
	`MAX
(check_x, 
	`°æí
(
	`ôem_°r
()) + 4);

183 
check_x
 = 
	`MIN
(check_x, 
li°_width
);

185 
check_x
 = (
li°_width
 - check_x) / 2;

186 
ôem_x
 = 
check_x
 + 4;

188 i‡(
choi˚
 >
li°_height
) {

189 
s¸ﬁl
 = 
choi˚
 - 
li°_height
 + 1;

190 
choi˚
 -
s¸ﬁl
;

194 
i
 = 0; i < 
max_choi˚
; i++) {

195 
	`ôem_£t
(
s¸ﬁl
 + 
i
);

196 
	`¥öt_ôem
(
li°
, 
i
, i =
choi˚
);

199 
	`¥öt_¨rows
(
dülog
, 
choi˚
, 
	`ôem_cou¡
(), 
s¸ﬁl
,

200 
box_y
, 
box_x
 + 
check_x
 + 5, 
li°_height
);

202 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

204 
	`wnouåe‰esh
(
dülog
);

205 
	`wnouåe‰esh
(
li°
);

206 
	`doupd©e
();

208 
key
 !
KEY_ESC
) {

209 
key
 = 
	`wgëch
(
dülog
);

211 
i
 = 0; i < 
max_choi˚
; i++) {

212 
	`ôem_£t
(
i
 + 
s¸ﬁl
);

213 i‡(
	`touµî
(
key
Ë=touµî(
	`ôem_°r
()[0]))

217 i‡(
i
 < 
max_choi˚
 || 
key
 =
KEY_UP
 || key =
KEY_DOWN
 ||

218 
key
 == '+' || key == '-') {

219 i‡(
key
 =
KEY_UP
 || key == '-') {

220 i‡(!
choi˚
) {

221 i‡(!
s¸ﬁl
)

224 i‡(
li°_height
 > 1) {

226 
	`ôem_£t
(
s¸ﬁl
);

227 
	`¥öt_ôem
(
li°
, 0, 
FALSE
);

228 
	`s¸ﬁlok
(
li°
, 
TRUE
);

229 
	`ws¸l
(
li°
, -1);

230 
	`s¸ﬁlok
(
li°
, 
FALSE
);

232 
s¸ﬁl
--;

233 
	`ôem_£t
(
s¸ﬁl
);

234 
	`¥öt_ôem
(
li°
, 0, 
TRUE
);

235 
	`¥öt_¨rows
(
dülog
, 
choi˚
, 
	`ôem_cou¡
(),

236 
s¸ﬁl
, 
box_y
, 
box_x
 + 
check_x
 + 5, 
li°_height
);

238 
	`wnouåe‰esh
(
dülog
);

239 
	`wª‰esh
(
li°
);

243 
i
 = 
choi˚
 - 1;

244 } i‡(
key
 =
KEY_DOWN
 || key == '+') {

245 i‡(
choi˚
 =
max_choi˚
 - 1) {

246 i‡(
s¸ﬁl
 + 
choi˚
 >
	`ôem_cou¡
() - 1)

249 i‡(
li°_height
 > 1) {

251 
	`ôem_£t
(
s¸ﬁl
 + 
max_choi˚
 - 1);

252 
	`¥öt_ôem
(
li°
,

253 
max_choi˚
 - 1,

254 
FALSE
);

255 
	`s¸ﬁlok
(
li°
, 
TRUE
);

256 
	`ws¸l
(
li°
, 1);

257 
	`s¸ﬁlok
(
li°
, 
FALSE
);

259 
s¸ﬁl
++;

260 
	`ôem_£t
(
s¸ﬁl
 + 
max_choi˚
 - 1);

261 
	`¥öt_ôem
(
li°
, 
max_choi˚
 - 1, 
TRUE
);

263 
	`¥öt_¨rows
(
dülog
, 
choi˚
, 
	`ôem_cou¡
(),

264 
s¸ﬁl
, 
box_y
, 
box_x
 + 
check_x
 + 5, 
li°_height
);

266 
	`wnouåe‰esh
(
dülog
);

267 
	`wª‰esh
(
li°
);

271 
i
 = 
choi˚
 + 1;

273 i‡(
i
 !
choi˚
) {

275 
	`ôem_£t
(
s¸ﬁl
 + 
choi˚
);

276 
	`¥öt_ôem
(
li°
, 
choi˚
, 
FALSE
);

278 
choi˚
 = 
i
;

279 
	`ôem_£t
(
s¸ﬁl
 + 
choi˚
);

280 
	`¥öt_ôem
(
li°
, 
choi˚
, 
TRUE
);

281 
	`wnouåe‰esh
(
dülog
);

282 
	`wª‰esh
(
li°
);

286 
key
) {

290 
buâ⁄
 = 1;

296 
	`ôem_f‹óch
()

297 
	`ôem_£t_£À˘ed
(0);

298 
	`ôem_£t
(
s¸ﬁl
 + 
choi˚
);

299 
	`ôem_£t_£À˘ed
(1);

300 
	`dñwö
(
li°
);

301 
	`dñwö
(
dülog
);

302  
buâ⁄
;

303 
TAB
:

304 
KEY_LEFT
:

305 
KEY_RIGHT
:

306 
buâ⁄
 = ((
key
 =
KEY_LEFT
 ? --button : ++button) < 0)

307 ? 1 : (
buâ⁄
 > 1 ? 0 : button);

309 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 
buâ⁄
);

310 
	`wª‰esh
(
dülog
);

314 
key
 = 
KEY_ESC
;

316 
KEY_ESC
:

317 
key
 = 
	`⁄_key_esc
(
dülog
);

319 
KEY_RESIZE
:

320 
	`dñwö
(
li°
);

321 
	`dñwö
(
dülog
);

322 
	`⁄_key_ªsize
();

323 
do_ªsize
;

327 
	`doupd©e
();

329 
	`dñwö
(
li°
);

330 
	`dñwö
(
dülog
);

331  
key
;

332 
	}
}

	@swupdate/scripts/kconfig/lxdialog/dialog.h

21 
	~<sys/ty≥s.h
>

22 
	~<f˙é.h
>

23 
	~<uni°d.h
>

24 
	~<˘y≥.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<°dboﬁ.h
>

29 #i‚de‡
KBUILD_NO_NLS


30 
	~<liböé.h
>

32 
	#gëãxt
(
Msgid
Ë((c⁄° *Ë(Msgid))

	)

35 #ifde‡
__sun__


36 
	#CURS_MACROS


	)

38 #ö˛udê
CURSES_LOC


48 #i‡
deföed
(
NCURSES_VERSION
Ë&& deföed(
_NEED_WRAP
Ë&& !deföed(
GCC_PRINTFLIKE
)

49 
	#OLD_NCURSES
 1

	)

50 #unde‡
wbkgd£t


51 
	#wbkgd£t
(
w
,
p
Ë

	)

53 
	#OLD_NCURSES
 0

	)

56 
	#TR
(
∑øms
Ë
_åa˚f
 
	)
params

58 
	#KEY_ESC
 27

	)

59 
	#TAB
 9

	)

60 
	#MAX_LEN
 2048

	)

61 
	#BUF_SIZE
 (10*1024)

	)

62 
	#MIN
(
x
,
y
Ë(x < y ? x : y)

	)

63 
	#MAX
(
x
,
y
Ë(x > y ? x : y)

	)

65 #i‚de‡
ACS_ULCORNER


66 
	#ACS_ULCORNER
 '+'

	)

68 #i‚de‡
ACS_LLCORNER


69 
	#ACS_LLCORNER
 '+'

	)

71 #i‚de‡
ACS_URCORNER


72 
	#ACS_URCORNER
 '+'

	)

74 #i‚de‡
ACS_LRCORNER


75 
	#ACS_LRCORNER
 '+'

	)

77 #i‚de‡
ACS_HLINE


78 
	#ACS_HLINE
 '-'

	)

80 #i‚de‡
ACS_VLINE


81 
	#ACS_VLINE
 '|'

	)

83 #i‚de‡
ACS_LTEE


84 
	#ACS_LTEE
 '+'

	)

86 #i‚de‡
ACS_RTEE


87 
	#ACS_RTEE
 '+'

	)

89 #i‚de‡
ACS_UARROW


90 
	#ACS_UARROW
 '^'

	)

92 #i‚de‡
ACS_DARROW


93 
	#ACS_DARROW
 'v'

	)

97 
	#ERRDISPLAYTOOSMALL
 (
KEY_MAX
 + 1)

	)

102 
	sdülog_cﬁ‹
 {

103 
chty≥
 
	m©r
;

104 
	mfg
;

105 
	mbg
;

106 
	mhl
;

109 
	ssubtôÀ_li°
 {

110 
subtôÀ_li°
 *
	m√xt
;

111 c⁄° *
	mãxt
;

114 
	sdülog_öfo
 {

115 c⁄° *
	mbacktôÀ
;

116 
subtôÀ_li°
 *
	msubtôÀs
;

117 
dülog_cﬁ‹
 
	ms¸ìn
;

118 
dülog_cﬁ‹
 
	mshadow
;

119 
dülog_cﬁ‹
 
	mdülog
;

120 
dülog_cﬁ‹
 
	mtôÀ
;

121 
dülog_cﬁ‹
 
	mb‹dî
;

122 
dülog_cﬁ‹
 
	mbuâ⁄_a˘ive
;

123 
dülog_cﬁ‹
 
	mbuâ⁄_öa˘ive
;

124 
dülog_cﬁ‹
 
	mbuâ⁄_key_a˘ive
;

125 
dülog_cﬁ‹
 
	mbuâ⁄_key_öa˘ive
;

126 
dülog_cﬁ‹
 
	mbuâ⁄_œbñ_a˘ive
;

127 
dülog_cﬁ‹
 
	mbuâ⁄_œbñ_öa˘ive
;

128 
dülog_cﬁ‹
 
	möputbox
;

129 
dülog_cﬁ‹
 
	möputbox_b‹dî
;

130 
dülog_cﬁ‹
 
	m£¨chbox
;

131 
dülog_cﬁ‹
 
	m£¨chbox_tôÀ
;

132 
dülog_cﬁ‹
 
	m£¨chbox_b‹dî
;

133 
dülog_cﬁ‹
 
	mposôi⁄_ödiˇt‹
;

134 
dülog_cﬁ‹
 
	mmíubox
;

135 
dülog_cﬁ‹
 
	mmíubox_b‹dî
;

136 
dülog_cﬁ‹
 
	môem
;

137 
dülog_cﬁ‹
 
	môem_£À˘ed
;

138 
dülog_cﬁ‹
 
	mèg
;

139 
dülog_cﬁ‹
 
	mèg_£À˘ed
;

140 
dülog_cﬁ‹
 
	mèg_key
;

141 
dülog_cﬁ‹
 
	mèg_key_£À˘ed
;

142 
dülog_cﬁ‹
 
	mcheck
;

143 
dülog_cﬁ‹
 
	mcheck_£À˘ed
;

144 
dülog_cﬁ‹
 
	mu¨row
;

145 
dülog_cﬁ‹
 
	md¨row
;

151 
dülog_öfo
 
dlg
;

152 
dülog_öput_ªsu…
[];

153 
ßved_x
, 
ßved_y
;

160 
ôem_ª£t
();

161 
ôem_make
(c⁄° *
fmt
, ...);

162 
ôem_add_°r
(c⁄° *
fmt
, ...);

163 
ôem_£t_èg
(
èg
);

164 
ôem_£t_d©a
(*
p
);

165 
ôem_£t_£À˘ed
(
vÆ
);

166 
ôem_a˘iv©e_£À˘ed
();

167 *
ôem_d©a
();

168 
ôem_èg
();

171 
	#MAXITEMSTR
 200

	)

172 
	sdülog_ôem
 {

173 
	m°r
[
MAXITEMSTR
];

174 
	mèg
;

175 *
	md©a
;

176 
	m£À˘ed
;

180 
	sdülog_li°
 {

181 
dülog_ôem
 
	mnode
;

182 
dülog_li°
 *
	m√xt
;

185 
dülog_li°
 *
ôem_cur
;

186 
dülog_li°
 
ôem_nû
;

187 
dülog_li°
 *
ôem_hód
;

189 
ôem_cou¡
();

190 
ôem_£t
(
n
);

191 
ôem_n
();

192 c⁄° *
ôem_°r
();

193 
ôem_is_£À˘ed
();

194 
ôem_is_èg
(
èg
);

195 
	#ôem_f‹óch
() \

196 
ôem_cur
 = 
ôem_hód
 ? item_head: item_cur; \

197 
ôem_cur
 && (ôem_cu∏!&
ôem_nû
); iãm_cu∏ôem_cur->
√xt
)

	)

200 
⁄_key_esc
(
WINDOW
 *
wö
);

201 
⁄_key_ªsize
();

204 
	#CHECKLIST_HEIGTH_MIN
 6

	)

205 
	#CHECKLIST_WIDTH_MIN
 6

	)

206 
	#INPUTBOX_HEIGTH_MIN
 2

	)

207 
	#INPUTBOX_WIDTH_MIN
 2

	)

208 
	#MENUBOX_HEIGTH_MIN
 15

	)

209 
	#MENUBOX_WIDTH_MIN
 65

	)

210 
	#TEXTBOX_HEIGTH_MIN
 8

	)

211 
	#TEXTBOX_WIDTH_MIN
 8

	)

212 
	#YESNO_HEIGTH_MIN
 4

	)

213 
	#YESNO_WIDTH_MIN
 4

	)

214 
	#WINDOW_HEIGTH_MIN
 19

	)

215 
	#WINDOW_WIDTH_MIN
 80

	)

217 
öô_dülog
(c⁄° *
backtôÀ
);

218 
£t_dülog_backtôÀ
(c⁄° *
backtôÀ
);

219 
£t_dülog_subtôÀs
(
subtôÀ_li°
 *
subtôÀs
);

220 
íd_dülog
(
x
, 
y
);

221 
©å_˛ór
(
WINDOW
 * 
wö
, 
height
, 
width
, 
chty≥
 
©å
);

222 
dülog_˛ór
();

223 
¥öt_autowøp
(
WINDOW
 * 
wö
, c⁄° *
¥om±
, 
width
, 
y
, 
x
);

224 
¥öt_buâ⁄
(
WINDOW
 * 
wö
, c⁄° *
œbñ
, 
y
, 
x
, 
£À˘ed
);

225 
¥öt_tôÀ
(
WINDOW
 *
dülog
, c⁄° *
tôÀ
, 
width
);

226 
døw_box
(
WINDOW
 * 
wö
, 
y
, 
x
, 
height
, 
width
, 
chty≥
 
box
,

227 
chty≥
 
b‹dî
);

228 
døw_shadow
(
WINDOW
 * 
wö
, 
y
, 
x
, 
height
, 
width
);

230 
fú°_Æpha
(c⁄° *
°rög
, c⁄° *
exem±
);

231 
dülog_ye¢o
(c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
);

232 
dülog_msgbox
(c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
,

233 
width
, 
∑u£
);

236 (*
	tupd©e_ãxt_‚
)(*
	tbuf
, 
	tsize_t
 
	t°¨t
, size_à
	tíd
, 

237 *
	t_d©a
);

238 
	`dülog_ãxtbox
(c⁄° *
tôÀ
, *
tbuf
, 
öôül_height
,

239 
öôül_width
, *
keys
, *
_vs¸ﬁl
, *
_hs¸ﬁl
,

240 
upd©e_ãxt_‚
 
upd©e_ãxt
, *
d©a
);

241 
	`dülog_míu
(c⁄° *
tôÀ
, c⁄° *
¥om±
,

242 c⁄° *
£À˘ed
, *
s_s¸ﬁl
);

243 
	`dülog_checkli°
(c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
,

244 
width
, 
li°_height
);

245 
	`dülog_öputbox
(c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
,

246 
width
, c⁄° *
öô
);

257 
	#M_EVENT
 (
KEY_MAX
+1)

	)

	@swupdate/scripts/kconfig/lxdialog/inputbox.c

22 
	~"dülog.h
"

24 
	gdülog_öput_ªsu…
[
MAX_LEN
 + 1];

29 
	$¥öt_buâ⁄s
(
WINDOW
 * 
dülog
, 
height
, 
width
, 
£À˘ed
)

31 
x
 = 
width
 / 2 - 11;

32 
y
 = 
height
 - 2;

34 
	`¥öt_buâ⁄
(
dülog
, 
	`gëãxt
(" Ok "), 
y
, 
x
, 
£À˘ed
 == 0);

35 
	`¥öt_buâ⁄
(
dülog
, 
	`gëãxt
(" Hñ∞"), 
y
, 
x
 + 14, 
£À˘ed
 == 1);

37 
	`wmove
(
dülog
, 
y
, 
x
 + 1 + 14 * 
£À˘ed
);

38 
	`wª‰esh
(
dülog
);

39 
	}
}

44 
	$dülog_öputbox
(c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
,

45 c⁄° *
öô
)

47 
i
, 
x
, 
y
, 
box_y
, 
box_x
, 
box_width
;

48 
öput_x
 = 0, 
key
 = 0, 
buâ⁄
 = -1;

49 
show_x
, 
Àn
, 
pos
;

50 *
ö°r
 = 
dülog_öput_ªsu…
;

51 
WINDOW
 *
dülog
;

53 i‡(!
öô
)

54 
ö°r
[0] = '\0';

56 
	`°r˝y
(
ö°r
, 
öô
);

58 
do_ªsize
:

59 i‡(
	`gëmaxy
(
°ds¸
Ë<(
height
 - 
INPUTBOX_HEIGTH_MIN
))

60  -
ERRDISPLAYTOOSMALL
;

61 i‡(
	`gëmaxx
(
°ds¸
Ë<(
width
 - 
INPUTBOX_WIDTH_MIN
))

62  -
ERRDISPLAYTOOSMALL
;

65 
x
 = (
	`gëmaxx
(
°ds¸
Ë- 
width
) / 2;

66 
y
 = (
	`gëmaxy
(
°ds¸
Ë- 
height
) / 2;

68 
	`døw_shadow
(
°ds¸
, 
y
, 
x
, 
height
, 
width
);

70 
dülog
 = 
	`√wwö
(
height
, 
width
, 
y
, 
x
);

71 
	`key∑d
(
dülog
, 
TRUE
);

73 
	`døw_box
(
dülog
, 0, 0, 
height
, 
width
,

74 
dlg
.
dülog
.
©r
, dlg.
b‹dî
.atr);

75 
	`w©å£t
(
dülog
, 
dlg
.
b‹dî
.
©r
);

76 
	`mvwaddch
(
dülog
, 
height
 - 3, 0, 
ACS_LTEE
);

77 
i
 = 0; i < 
width
 - 2; i++)

78 
	`waddch
(
dülog
, 
ACS_HLINE
);

79 
	`w©å£t
(
dülog
, 
dlg
.dülog.
©r
);

80 
	`waddch
(
dülog
, 
ACS_RTEE
);

82 
	`¥öt_tôÀ
(
dülog
, 
tôÀ
, 
width
);

84 
	`w©å£t
(
dülog
, 
dlg
.dülog.
©r
);

85 
	`¥öt_autowøp
(
dülog
, 
¥om±
, 
width
 - 2, 1, 3);

88 
box_width
 = 
width
 - 6;

89 
	`gëyx
(
dülog
, 
y
, 
x
);

90 
box_y
 = 
y
 + 2;

91 
box_x
 = (
width
 - 
box_width
) / 2;

92 
	`døw_box
(
dülog
, 
y
 + 1, 
box_x
 - 1, 3, 
box_width
 + 2,

93 
dlg
.
dülog
.
©r
, dlg.
b‹dî
.atr);

95 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

98 
	`wmove
(
dülog
, 
box_y
, 
box_x
);

99 
	`w©å£t
(
dülog
, 
dlg
.
öputbox
.
©r
);

101 
Àn
 = 
	`°æí
(
ö°r
);

102 
pos
 = 
Àn
;

104 i‡(
Àn
 >
box_width
) {

105 
show_x
 = 
Àn
 - 
box_width
 + 1;

106 
öput_x
 = 
box_width
 - 1;

107 
i
 = 0; i < 
box_width
 - 1; i++)

108 
	`waddch
(
dülog
, 
ö°r
[
show_x
 + 
i
]);

110 
show_x
 = 0;

111 
öput_x
 = 
Àn
;

112 
	`wadd°r
(
dülog
, 
ö°r
);

115 
	`wmove
(
dülog
, 
box_y
, 
box_x
 + 
öput_x
);

117 
	`wª‰esh
(
dülog
);

119 
key
 !
KEY_ESC
) {

120 
key
 = 
	`wgëch
(
dülog
);

122 i‡(
buâ⁄
 == -1) {

123 
key
) {

124 
TAB
:

125 
KEY_UP
:

126 
KEY_DOWN
:

128 
KEY_BACKSPACE
:

130 i‡(
pos
) {

131 
	`w©å£t
(
dülog
, 
dlg
.
öputbox
.
©r
);

132 i‡(
öput_x
 == 0) {

133 
show_x
--;

135 
öput_x
--;

137 i‡(
pos
 < 
Àn
) {

138 
i
 = 
pos
 - 1; i < 
Àn
; i++) {

139 
ö°r
[
i
] = instr[i+1];

143 
pos
--;

144 
Àn
--;

145 
ö°r
[
Àn
] = '\0';

146 
	`wmove
(
dülog
, 
box_y
, 
box_x
);

147 
i
 = 0; i < 
box_width
; i++) {

148 i‡(!
ö°r
[
show_x
 + 
i
]) {

149 
	`waddch
(
dülog
, ' ');

152 
	`waddch
(
dülog
, 
ö°r
[
show_x
 + 
i
]);

154 
	`wmove
(
dülog
, 
box_y
, 
öput_x
 + 
box_x
);

155 
	`wª‰esh
(
dülog
);

158 
KEY_LEFT
:

159 i‡(
pos
 > 0) {

160 i‡(
öput_x
 > 0) {

161 
	`wmove
(
dülog
, 
box_y
, --
öput_x
 + 
box_x
);

162 } i‡(
öput_x
 == 0) {

163 
show_x
--;

164 
	`wmove
(
dülog
, 
box_y
, 
box_x
);

165 
i
 = 0; i < 
box_width
; i++) {

166 i‡(!
ö°r
[
show_x
 + 
i
]) {

167 
	`waddch
(
dülog
, ' ');

170 
	`waddch
(
dülog
, 
ö°r
[
show_x
 + 
i
]);

172 
	`wmove
(
dülog
, 
box_y
, 
box_x
);

174 
pos
--;

177 
KEY_RIGHT
:

178 i‡(
pos
 < 
Àn
) {

179 i‡(
öput_x
 < 
box_width
 - 1) {

180 
	`wmove
(
dülog
, 
box_y
, ++
öput_x
 + 
box_x
);

181 } i‡(
öput_x
 =
box_width
 - 1) {

182 
show_x
++;

183 
	`wmove
(
dülog
, 
box_y
, 
box_x
);

184 
i
 = 0; i < 
box_width
; i++) {

185 i‡(!
ö°r
[
show_x
 + 
i
]) {

186 
	`waddch
(
dülog
, ' ');

189 
	`waddch
(
dülog
, 
ö°r
[
show_x
 + 
i
]);

191 
	`wmove
(
dülog
, 
box_y
, 
öput_x
 + 
box_x
);

193 
pos
++;

197 i‡(
key
 < 0x100 && 
	`i•röt
(key)) {

198 i‡(
Àn
 < 
MAX_LEN
) {

199 
	`w©å£t
(
dülog
, 
dlg
.
öputbox
.
©r
);

200 i‡(
pos
 < 
Àn
) {

201 
i
 = 
Àn
; i > 
pos
; i--)

202 
ö°r
[
i
] = instr[i-1];

203 
ö°r
[
pos
] = 
key
;

205 
ö°r
[
Àn
] = 
key
;

207 
pos
++;

208 
Àn
++;

209 
ö°r
[
Àn
] = '\0';

211 i‡(
öput_x
 =
box_width
 - 1) {

212 
show_x
++;

214 
öput_x
++;

217 
	`wmove
(
dülog
, 
box_y
, 
box_x
);

218 
i
 = 0; i < 
box_width
; i++) {

219 i‡(!
ö°r
[
show_x
 + 
i
]) {

220 
	`waddch
(
dülog
, ' ');

223 
	`waddch
(
dülog
, 
ö°r
[
show_x
 + 
i
]);

225 
	`wmove
(
dülog
, 
box_y
, 
öput_x
 + 
box_x
);

226 
	`wª‰esh
(
dülog
);

228 
	`Êash
();

233 
key
) {

236 
	`dñwö
(
dülog
);

240 
	`dñwö
(
dülog
);

242 
KEY_UP
:

243 
KEY_LEFT
:

244 
buâ⁄
) {

246 
buâ⁄
 = 1;

247 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 1);

250 
buâ⁄
 = -1;

251 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

252 
	`wmove
(
dülog
, 
box_y
, 
box_x
 + 
öput_x
);

253 
	`wª‰esh
(
dülog
);

256 
buâ⁄
 = 0;

257 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

261 
TAB
:

262 
KEY_DOWN
:

263 
KEY_RIGHT
:

264 
buâ⁄
) {

266 
buâ⁄
 = 0;

267 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

270 
buâ⁄
 = 1;

271 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 1);

274 
buâ⁄
 = -1;

275 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

276 
	`wmove
(
dülog
, 
box_y
, 
box_x
 + 
öput_x
);

277 
	`wª‰esh
(
dülog
);

283 
	`dñwö
(
dülog
);

284  (
buâ⁄
 == -1 ? 0 : button);

287 
key
 = 
KEY_ESC
;

289 
KEY_ESC
:

290 
key
 = 
	`⁄_key_esc
(
dülog
);

292 
KEY_RESIZE
:

293 
	`dñwö
(
dülog
);

294 
	`⁄_key_ªsize
();

295 
do_ªsize
;

299 
	`dñwö
(
dülog
);

300  
KEY_ESC
;

301 
	}
}

	@swupdate/scripts/kconfig/lxdialog/menubox.c

59 
	~"dülog.h
"

61 
	gmíu_width
, 
	gôem_x
;

66 
	$do_¥öt_ôem
(
WINDOW
 * 
wö
, c⁄° *
ôem
, 
löe_y
,

67 
£À˘ed
, 
hŸkey
)

69 
j
;

70 *
míu_ôem
 = 
	`mÆloc
(
míu_width
 + 1);

72 
	`°∫˝y
(
míu_ôem
, 
ôem
, 
míu_width
 - 
ôem_x
);

73 
míu_ôem
[
míu_width
 - 
ôem_x
] = '\0';

74 
j
 = 
	`fú°_Æpha
(
míu_ôem
, "YyNnMmHh");

77 
	`w©å£t
(
wö
, 
dlg
.
míubox
.
©r
);

78 
	`wmove
(
wö
, 
löe_y
, 0);

79 #i‡
OLD_NCURSES


81 
i
;

82 
i
 = 0; i < 
míu_width
; i++)

83 
	`waddch
(
wö
, ' ');

86 
	`w˛π€ﬁ
(
wö
);

88 
	`w©å£t
(
wö
, 
£À˘ed
 ? 
dlg
.
ôem_£À˘ed
.
©r
 : dlg.
ôem
.atr);

89 
	`mvwadd°r
(
wö
, 
löe_y
, 
ôem_x
, 
míu_ôem
);

90 i‡(
hŸkey
) {

91 
	`w©å£t
(
wö
, 
£À˘ed
 ? 
dlg
.
èg_key_£À˘ed
.
©r


92 : 
dlg
.
èg_key
.
©r
);

93 
	`mvwaddch
(
wö
, 
löe_y
, 
ôem_x
 + 
j
, 
míu_ôem
[j]);

95 i‡(
£À˘ed
) {

96 
	`wmove
(
wö
, 
löe_y
, 
ôem_x
 + 1);

98 
	`‰ì
(
míu_ôem
);

99 
	`wª‰esh
(
wö
);

100 
	}
}

102 
	#¥öt_ôem
(
ödex
, 
choi˚
, 
£À˘ed
) \

104 
	`ôem_£t
(
ödex
); \

105 
	`do_¥öt_ôem
(
míu
, 
	`ôem_°r
(), 
choi˚
, 
£À˘ed
, !
	`ôem_is_èg
(':')); \

106 } 0)

	)

111 
	$¥öt_¨rows
(
WINDOW
 * 
wö
, 
ôem_no
, 
s¸ﬁl
, 
y
, 
x
,

112 
height
)

114 
cur_y
, 
cur_x
;

116 
	`gëyx
(
wö
, 
cur_y
, 
cur_x
);

118 
	`wmove
(
wö
, 
y
, 
x
);

120 i‡(
s¸ﬁl
 > 0) {

121 
	`w©å£t
(
wö
, 
dlg
.
u¨row
.
©r
);

122 
	`waddch
(
wö
, 
ACS_UARROW
);

123 
	`wadd°r
(
wö
, "(-)");

125 
	`w©å£t
(
wö
, 
dlg
.
míubox
.
©r
);

126 
	`waddch
(
wö
, 
ACS_HLINE
);

127 
	`waddch
(
wö
, 
ACS_HLINE
);

128 
	`waddch
(
wö
, 
ACS_HLINE
);

129 
	`waddch
(
wö
, 
ACS_HLINE
);

132 
y
 = y + 
height
 + 1;

133 
	`wmove
(
wö
, 
y
, 
x
);

134 
	`wª‰esh
(
wö
);

136 i‡((
height
 < 
ôem_no
Ë&& (
s¸ﬁl
 + height < item_no)) {

137 
	`w©å£t
(
wö
, 
dlg
.
d¨row
.
©r
);

138 
	`waddch
(
wö
, 
ACS_DARROW
);

139 
	`wadd°r
(
wö
, "(+)");

141 
	`w©å£t
(
wö
, 
dlg
.
míubox_b‹dî
.
©r
);

142 
	`waddch
(
wö
, 
ACS_HLINE
);

143 
	`waddch
(
wö
, 
ACS_HLINE
);

144 
	`waddch
(
wö
, 
ACS_HLINE
);

145 
	`waddch
(
wö
, 
ACS_HLINE
);

148 
	`wmove
(
wö
, 
cur_y
, 
cur_x
);

149 
	`wª‰esh
(
wö
);

150 
	}
}

155 
	$¥öt_buâ⁄s
(
WINDOW
 * 
wö
, 
height
, 
width
, 
£À˘ed
)

157 
x
 = 
width
 / 2 - 28;

158 
y
 = 
height
 - 2;

160 
	`¥öt_buâ⁄
(
wö
, 
	`gëãxt
("Sñe˘"), 
y
, 
x
, 
£À˘ed
 == 0);

161 
	`¥öt_buâ⁄
(
wö
, 
	`gëãxt
(" Exô "), 
y
, 
x
 + 12, 
£À˘ed
 == 1);

162 
	`¥öt_buâ⁄
(
wö
, 
	`gëãxt
(" Hñ∞"), 
y
, 
x
 + 24, 
£À˘ed
 == 2);

163 
	`¥öt_buâ⁄
(
wö
, 
	`gëãxt
(" Savê"), 
y
, 
x
 + 36, 
£À˘ed
 == 3);

164 
	`¥öt_buâ⁄
(
wö
, 
	`gëãxt
(" Lﬂd "), 
y
, 
x
 + 48, 
£À˘ed
 == 4);

166 
	`wmove
(
wö
, 
y
, 
x
 + 1 + 12 * 
£À˘ed
);

167 
	`wª‰esh
(
wö
);

168 
	}
}

171 
	$do_s¸ﬁl
(
WINDOW
 *
wö
, *
s¸ﬁl
, 
n
)

174 
	`s¸ﬁlok
(
wö
, 
TRUE
);

175 
	`ws¸l
(
wö
, 
n
);

176 
	`s¸ﬁlok
(
wö
, 
FALSE
);

177 *
s¸ﬁl
 = *s¸ﬁ»+ 
n
;

178 
	`wª‰esh
(
wö
);

179 
	}
}

184 
	$dülog_míu
(c⁄° *
tôÀ
, c⁄° *
¥om±
,

185 c⁄° *
£À˘ed
, *
s_s¸ﬁl
)

187 
i
, 
j
, 
x
, 
y
, 
box_x
, 
box_y
;

188 
height
, 
width
, 
míu_height
;

189 
key
 = 0, 
buâ⁄
 = 0, 
s¸ﬁl
 = 0, 
choi˚
 = 0;

190 
fú°_ôem
 = 0, 
max_choi˚
;

191 
WINDOW
 *
dülog
, *
míu
;

193 
do_ªsize
:

194 
height
 = 
	`gëmaxy
(
°ds¸
);

195 
width
 = 
	`gëmaxx
(
°ds¸
);

196 i‡(
height
 < 
MENUBOX_HEIGTH_MIN
 || 
width
 < 
MENUBOX_WIDTH_MIN
)

197  -
ERRDISPLAYTOOSMALL
;

199 
height
 -= 4;

200 
width
 -= 5;

201 
míu_height
 = 
height
 - 10;

203 
max_choi˚
 = 
	`MIN
(
míu_height
, 
	`ôem_cou¡
());

206 
x
 = (
	`gëmaxx
(
°ds¸
Ë- 
width
) / 2;

207 
y
 = (
	`gëmaxy
(
°ds¸
Ë- 
height
) / 2;

209 
	`døw_shadow
(
°ds¸
, 
y
, 
x
, 
height
, 
width
);

211 
dülog
 = 
	`√wwö
(
height
, 
width
, 
y
, 
x
);

212 
	`key∑d
(
dülog
, 
TRUE
);

214 
	`døw_box
(
dülog
, 0, 0, 
height
, 
width
,

215 
dlg
.
dülog
.
©r
, dlg.
b‹dî
.atr);

216 
	`w©å£t
(
dülog
, 
dlg
.
b‹dî
.
©r
);

217 
	`mvwaddch
(
dülog
, 
height
 - 3, 0, 
ACS_LTEE
);

218 
i
 = 0; i < 
width
 - 2; i++)

219 
	`waddch
(
dülog
, 
ACS_HLINE
);

220 
	`w©å£t
(
dülog
, 
dlg
.dülog.
©r
);

221 
	`wbkgd£t
(
dülog
, 
dlg
.dülog.
©r
 & 
A_COLOR
);

222 
	`waddch
(
dülog
, 
ACS_RTEE
);

224 
	`¥öt_tôÀ
(
dülog
, 
tôÀ
, 
width
);

226 
	`w©å£t
(
dülog
, 
dlg
.dülog.
©r
);

227 
	`¥öt_autowøp
(
dülog
, 
¥om±
, 
width
 - 2, 1, 3);

229 
míu_width
 = 
width
 - 6;

230 
box_y
 = 
height
 - 
míu_height
 - 5;

231 
box_x
 = (
width
 - 
míu_width
) / 2 - 1;

234 
míu
 = 
	`subwö
(
dülog
, 
míu_height
, 
míu_width
,

235 
y
 + 
box_y
 + 1, 
x
 + 
box_x
 + 1);

236 
	`key∑d
(
míu
, 
TRUE
);

239 
	`døw_box
(
dülog
, 
box_y
, 
box_x
, 
míu_height
 + 2, 
míu_width
 + 2,

240 
dlg
.
míubox_b‹dî
.
©r
, dlg.
míubox
.atr);

242 i‡(
míu_width
 >= 80)

243 
ôem_x
 = (
míu_width
 - 70) / 2;

245 
ôem_x
 = 4;

248 
	`ôem_f‹óch
()

249 i‡(
£À˘ed
 && (£À˘ed =
	`ôem_d©a
()))

250 
choi˚
 = 
	`ôem_n
();

252 
s¸ﬁl
 = *
s_s¸ﬁl
;

253 i‡((
s¸ﬁl
 <
choi˚
Ë&& (s¸ﬁ»+ 
max_choi˚
 > choice) &&

254 (
s¸ﬁl
 >0Ë&& (s¸ﬁ»+ 
max_choi˚
 <
	`ôem_cou¡
())) {

255 
fú°_ôem
 = 
s¸ﬁl
;

256 
choi˚
 = choi˚ - 
s¸ﬁl
;

258 
s¸ﬁl
 = 0;

260 i‡((
choi˚
 >
max_choi˚
)) {

261 i‡(
choi˚
 >
	`ôem_cou¡
(Ë- 
max_choi˚
 / 2)

262 
s¸ﬁl
 = 
fú°_ôem
 = 
	`ôem_cou¡
(Ë- 
max_choi˚
;

264 
s¸ﬁl
 = 
fú°_ôem
 = 
choi˚
 - 
max_choi˚
 / 2;

265 
choi˚
 = choi˚ - 
s¸ﬁl
;

269 
i
 = 0; i < 
max_choi˚
; i++) {

270 
	`¥öt_ôem
(
fú°_ôem
 + 
i
, i, i =
choi˚
);

273 
	`wnouåe‰esh
(
míu
);

275 
	`¥öt_¨rows
(
dülog
, 
	`ôem_cou¡
(), 
s¸ﬁl
,

276 
box_y
, 
box_x
 + 
ôem_x
 + 1, 
míu_height
);

278 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

279 
	`wmove
(
míu
, 
choi˚
, 
ôem_x
 + 1);

280 
	`wª‰esh
(
míu
);

282 
key
 !
KEY_ESC
) {

283 
key
 = 
	`wgëch
(
míu
);

285 i‡(
key
 < 256 && 
	`ißÕha
(key))

286 
key
 = 
	`tﬁowî
(key);

288 i‡(
	`°rchr
("ynmh", 
key
))

289 
i
 = 
max_choi˚
;

291 
i
 = 
choi˚
 + 1; i < 
max_choi˚
; i++) {

292 
	`ôem_£t
(
s¸ﬁl
 + 
i
);

293 
j
 = 
	`fú°_Æpha
(
	`ôem_°r
(), "YyNnMmHh");

294 i‡(
key
 =
	`tﬁowî
(
	`ôem_°r
()[
j
]))

297 i‡(
i
 =
max_choi˚
)

298 
i
 = 0; i < 
max_choi˚
; i++) {

299 
	`ôem_£t
(
s¸ﬁl
 + 
i
);

300 
j
 = 
	`fú°_Æpha
(
	`ôem_°r
(), "YyNnMmHh");

301 i‡(
key
 =
	`tﬁowî
(
	`ôem_°r
()[
j
]))

306 i‡(
	`ôem_cou¡
() != 0 &&

307 (
i
 < 
max_choi˚
 ||

308 
key
 =
KEY_UP
 || key =
KEY_DOWN
 ||

309 
key
 == '-' || key == '+' ||

310 
key
 =
KEY_PPAGE
 || key =
KEY_NPAGE
)) {

312 
	`¥öt_ôem
(
s¸ﬁl
 + 
choi˚
, choi˚, 
FALSE
);

314 i‡(
key
 =
KEY_UP
 || key == '-') {

315 i‡(
choi˚
 < 2 && 
s¸ﬁl
) {

317 
	`do_s¸ﬁl
(
míu
, &
s¸ﬁl
, -1);

319 
	`¥öt_ôem
(
s¸ﬁl
, 0, 
FALSE
);

321 
choi˚
 = 
	`MAX
(choice - 1, 0);

323 } i‡(
key
 =
KEY_DOWN
 || key == '+') {

324 
	`¥öt_ôem
(
s¸ﬁl
+
choi˚
, choi˚, 
FALSE
);

326 i‡((
choi˚
 > 
max_choi˚
 - 3) &&

327 (
s¸ﬁl
 + 
max_choi˚
 < 
	`ôem_cou¡
())) {

329 
	`do_s¸ﬁl
(
míu
, &
s¸ﬁl
, 1);

331 
	`¥öt_ôem
(
s¸ﬁl
+
max_choi˚
 - 1,

332 
max_choi˚
 - 1, 
FALSE
);

334 
choi˚
 = 
	`MIN
(choi˚ + 1, 
max_choi˚
 - 1);

336 } i‡(
key
 =
KEY_PPAGE
) {

337 
	`s¸ﬁlok
(
míu
, 
TRUE
);

338 
i
 = 0; (ò< 
max_choi˚
); i++) {

339 i‡(
s¸ﬁl
 > 0) {

340 
	`do_s¸ﬁl
(
míu
, &
s¸ﬁl
, -1);

341 
	`¥öt_ôem
(
s¸ﬁl
, 0, 
FALSE
);

343 i‡(
choi˚
 > 0)

344 
choi˚
--;

348 } i‡(
key
 =
KEY_NPAGE
) {

349 
i
 = 0; (ò< 
max_choi˚
); i++) {

350 i‡(
s¸ﬁl
 + 
max_choi˚
 < 
	`ôem_cou¡
()) {

351 
	`do_s¸ﬁl
(
míu
, &
s¸ﬁl
, 1);

352 
	`¥öt_ôem
(
s¸ﬁl
+
max_choi˚
-1,

353 
max_choi˚
 - 1, 
FALSE
);

355 i‡(
choi˚
 + 1 < 
max_choi˚
)

356 
choi˚
++;

360 
choi˚
 = 
i
;

362 
	`¥öt_ôem
(
s¸ﬁl
 + 
choi˚
, choi˚, 
TRUE
);

364 
	`¥öt_¨rows
(
dülog
, 
	`ôem_cou¡
(), 
s¸ﬁl
,

365 
box_y
, 
box_x
 + 
ôem_x
 + 1, 
míu_height
);

367 
	`wnouåe‰esh
(
dülog
);

368 
	`wª‰esh
(
míu
);

373 
key
) {

374 
KEY_LEFT
:

375 
TAB
:

376 
KEY_RIGHT
:

377 
buâ⁄
 = ((
key
 =
KEY_LEFT
 ? --button : ++button) < 0)

378 ? 4 : (
buâ⁄
 > 4 ? 0 : button);

380 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 
buâ⁄
);

381 
	`wª‰esh
(
míu
);

394 *
s_s¸ﬁl
 = 
s¸ﬁl
;

395 
	`dñwö
(
míu
);

396 
	`dñwö
(
dülog
);

397 
	`ôem_£t
(
s¸ﬁl
 + 
choi˚
);

398 
	`ôem_£t_£À˘ed
(1);

399 
key
) {

417  
buâ⁄
;

422 
key
 = 
KEY_ESC
;

424 
KEY_ESC
:

425 
key
 = 
	`⁄_key_esc
(
míu
);

427 
KEY_RESIZE
:

428 
	`⁄_key_ªsize
();

429 
	`dñwö
(
míu
);

430 
	`dñwö
(
dülog
);

431 
do_ªsize
;

434 
	`dñwö
(
míu
);

435 
	`dñwö
(
dülog
);

436  
key
;

437 
	}
}

	@swupdate/scripts/kconfig/lxdialog/textbox.c

22 
	~"dülog.h
"

24 
back_löes
(
n
);

25 
¥öt_∑ge
(
WINDOW
 *
wö
, 
height
, 
width
, 
upd©e_ãxt_‚


26 
upd©e_ãxt
, *
d©a
);

27 
¥öt_löe
(
WINDOW
 *
wö
, 
row
, 
width
);

28 *
gë_löe
();

29 
¥öt_posôi⁄
(
WINDOW
 * 
wö
);

31 
	ghs¸ﬁl
;

32 
	gbegö_ªached
, 
	gíd_ªached
, 
	g∑ge_Àngth
;

33 *
	gbuf
;

34 *
	g∑ge
;

39 
	$ª‰esh_ãxt_box
(
WINDOW
 *
dülog
, WINDOW *
box
, 
boxh
, 
boxw
,

40 
cur_y
, 
cur_x
, 
upd©e_ãxt_‚
 
upd©e_ãxt
,

41 *
d©a
)

43 
	`¥öt_∑ge
(
box
, 
boxh
, 
boxw
, 
upd©e_ãxt
, 
d©a
);

44 
	`¥öt_posôi⁄
(
dülog
);

45 
	`wmove
(
dülog
, 
cur_y
, 
cur_x
);

46 
	`wª‰esh
(
dülog
);

47 
	}
}

56 
	$dülog_ãxtbox
(c⁄° *
tôÀ
, *
tbuf
, 
öôül_height
,

57 
öôül_width
, *
keys
, *
_vs¸ﬁl
, *
_hs¸ﬁl
,

58 
upd©e_ãxt_‚
 
upd©e_ãxt
, *
d©a
)

60 
i
, 
x
, 
y
, 
cur_x
, 
cur_y
, 
key
 = 0;

61 
height
, 
width
, 
boxh
, 
boxw
;

62 
WINDOW
 *
dülog
, *
box
;

63 
boﬁ
 
d⁄e
 = 
Ál£
;

65 
begö_ªached
 = 1;

66 
íd_ªached
 = 0;

67 
∑ge_Àngth
 = 0;

68 
hs¸ﬁl
 = 0;

69 
buf
 = 
tbuf
;

70 
∑ge
 = 
buf
;

72 i‡(
_vs¸ﬁl
 && *_vscroll) {

73 
begö_ªached
 = 0;

75 
i
 = 0; i < *
_vs¸ﬁl
; i++)

76 
	`gë_löe
();

78 i‡(
_hs¸ﬁl
)

79 
hs¸ﬁl
 = *
_hs¸ﬁl
;

81 
do_ªsize
:

82 
	`gëmaxyx
(
°ds¸
, 
height
, 
width
);

83 i‡(
height
 < 
TEXTBOX_HEIGTH_MIN
 || 
width
 < 
TEXTBOX_WIDTH_MIN
)

84  -
ERRDISPLAYTOOSMALL
;

85 i‡(
öôül_height
 != 0)

86 
height
 = 
öôül_height
;

88 i‡(
height
 > 4)

89 
height
 -= 4;

91 
height
 = 0;

92 i‡(
öôül_width
 != 0)

93 
width
 = 
öôül_width
;

95 i‡(
width
 > 5)

96 
width
 -= 5;

98 
width
 = 0;

101 
x
 = (
	`gëmaxx
(
°ds¸
Ë- 
width
) / 2;

102 
y
 = (
	`gëmaxy
(
°ds¸
Ë- 
height
) / 2;

104 
	`døw_shadow
(
°ds¸
, 
y
, 
x
, 
height
, 
width
);

106 
dülog
 = 
	`√wwö
(
height
, 
width
, 
y
, 
x
);

107 
	`key∑d
(
dülog
, 
TRUE
);

110 
boxh
 = 
height
 - 4;

111 
boxw
 = 
width
 - 2;

112 
box
 = 
	`subwö
(
dülog
, 
boxh
, 
boxw
, 
y
 + 1, 
x
 + 1);

113 
	`w©å£t
(
box
, 
dlg
.
dülog
.
©r
);

114 
	`wbkgd£t
(
box
, 
dlg
.
dülog
.
©r
 & 
A_COLOR
);

116 
	`key∑d
(
box
, 
TRUE
);

119 
	`døw_box
(
dülog
, 0, 0, 
height
, 
width
,

120 
dlg
.
dülog
.
©r
, dlg.
b‹dî
.atr);

122 
	`w©å£t
(
dülog
, 
dlg
.
b‹dî
.
©r
);

123 
	`mvwaddch
(
dülog
, 
height
 - 3, 0, 
ACS_LTEE
);

124 
i
 = 0; i < 
width
 - 2; i++)

125 
	`waddch
(
dülog
, 
ACS_HLINE
);

126 
	`w©å£t
(
dülog
, 
dlg
.dülog.
©r
);

127 
	`wbkgd£t
(
dülog
, 
dlg
.dülog.
©r
 & 
A_COLOR
);

128 
	`waddch
(
dülog
, 
ACS_RTEE
);

130 
	`¥öt_tôÀ
(
dülog
, 
tôÀ
, 
width
);

132 
	`¥öt_buâ⁄
(
dülog
, 
	`gëãxt
(" Exô "), 
height
 - 2, 
width
 / 2 - 4, 
TRUE
);

133 
	`wnouåe‰esh
(
dülog
);

134 
	`gëyx
(
dülog
, 
cur_y
, 
cur_x
);

137 
	`©å_˛ór
(
box
, 
boxh
, 
boxw
, 
dlg
.
dülog
.
©r
);

138 
	`ª‰esh_ãxt_box
(
dülog
, 
box
, 
boxh
, 
boxw
, 
cur_y
, 
cur_x
, 
upd©e_ãxt
,

139 
d©a
);

141 !
d⁄e
) {

142 
key
 = 
	`wgëch
(
dülog
);

143 
key
) {

150 
d⁄e
 = 
åue
;

153 
KEY_HOME
:

154 i‡(!
begö_ªached
) {

155 
begö_ªached
 = 1;

156 
∑ge
 = 
buf
;

157 
	`ª‰esh_ãxt_box
(
dülog
, 
box
, 
boxh
, 
boxw
,

158 
cur_y
, 
cur_x
, 
upd©e_ãxt
,

159 
d©a
);

163 
KEY_END
:

165 
íd_ªached
 = 1;

167 
∑ge
 = 
buf
 + 
	`°æí
(buf);

168 
	`back_löes
(
boxh
);

169 
	`ª‰esh_ãxt_box
(
dülog
, 
box
, 
boxh
, 
boxw
, 
cur_y
,

170 
cur_x
, 
upd©e_ãxt
, 
d©a
);

174 
KEY_UP
:

175 i‡(
begö_ªached
)

178 
	`back_löes
(
∑ge_Àngth
 + 1);

179 
	`ª‰esh_ãxt_box
(
dülog
, 
box
, 
boxh
, 
boxw
, 
cur_y
,

180 
cur_x
, 
upd©e_ãxt
, 
d©a
);

185 
KEY_PPAGE
:

186 i‡(
begö_ªached
)

188 
	`back_löes
(
∑ge_Àngth
 + 
boxh
);

189 
	`ª‰esh_ãxt_box
(
dülog
, 
box
, 
boxh
, 
boxw
, 
cur_y
,

190 
cur_x
, 
upd©e_ãxt
, 
d©a
);

194 
KEY_DOWN
:

195 i‡(
íd_ªached
)

198 
	`back_löes
(
∑ge_Àngth
 - 1);

199 
	`ª‰esh_ãxt_box
(
dülog
, 
box
, 
boxh
, 
boxw
, 
cur_y
,

200 
cur_x
, 
upd©e_ãxt
, 
d©a
);

202 
KEY_NPAGE
:

205 i‡(
íd_ªached
)

208 
begö_ªached
 = 0;

209 
	`ª‰esh_ãxt_box
(
dülog
, 
box
, 
boxh
, 
boxw
, 
cur_y
,

210 
cur_x
, 
upd©e_ãxt
, 
d©a
);

215 
KEY_LEFT
:

216 i‡(
hs¸ﬁl
 <= 0)

219 i‡(
key
 == '0')

220 
hs¸ﬁl
 = 0;

222 
hs¸ﬁl
--;

224 
	`back_löes
(
∑ge_Àngth
);

225 
	`ª‰esh_ãxt_box
(
dülog
, 
box
, 
boxh
, 
boxw
, 
cur_y
,

226 
cur_x
, 
upd©e_ãxt
, 
d©a
);

230 
KEY_RIGHT
:

231 i‡(
hs¸ﬁl
 >
MAX_LEN
)

233 
hs¸ﬁl
++;

235 
	`back_löes
(
∑ge_Àngth
);

236 
	`ª‰esh_ãxt_box
(
dülog
, 
box
, 
boxh
, 
boxw
, 
cur_y
,

237 
cur_x
, 
upd©e_ãxt
, 
d©a
);

239 
KEY_ESC
:

240 i‡(
	`⁄_key_esc
(
dülog
Ë=
KEY_ESC
)

241 
d⁄e
 = 
åue
;

243 
KEY_RESIZE
:

244 
	`back_löes
(
height
);

245 
	`dñwö
(
box
);

246 
	`dñwö
(
dülog
);

247 
	`⁄_key_ªsize
();

248 
do_ªsize
;

250 
i
 = 0; 
keys
[i]; i++) {

251 i‡(
key
 =
keys
[
i
]) {

252 
d⁄e
 = 
åue
;

258 
	`dñwö
(
box
);

259 
	`dñwö
(
dülog
);

260 i‡(
_vs¸ﬁl
) {

261 c⁄° *
s
;

263 
s
 = 
buf
;

264 *
_vs¸ﬁl
 = 0;

265 
	`back_löes
(
∑ge_Àngth
);

266 
s
 < 
∑ge
 && (†
	`°rchr
(s, '\n'))) {

267 (*
_vs¸ﬁl
)++;

268 
s
++;

271 i‡(
_hs¸ﬁl
)

272 *
_hs¸ﬁl
 = 
hs¸ﬁl
;

273  
key
;

274 
	}
}

280 
	$back_löes
(
n
)

282 
i
;

284 
begö_ªached
 = 0;

286 
i
 = 0; i < 
n
; i++) {

287 i‡(*
∑ge
 == '\0') {

288 i‡(
íd_ªached
) {

289 
íd_ªached
 = 0;

293 i‡(
∑ge
 =
buf
) {

294 
begö_ªached
 = 1;

297 
∑ge
--;

299 i‡(
∑ge
 =
buf
) {

300 
begö_ªached
 = 1;

303 
∑ge
--;

304 } *
∑ge
 != '\n');

305 
∑ge
++;

307 
	}
}

312 
	$¥öt_∑ge
(
WINDOW
 *
wö
, 
height
, 
width
, 
upd©e_ãxt_‚


313 
upd©e_ãxt
, *
d©a
)

315 
i
, 
∑s£d_íd
 = 0;

317 i‡(
upd©e_ãxt
) {

318 *
íd
;

320 
i
 = 0; i < 
height
; i++)

321 
	`gë_löe
();

322 
íd
 = 
∑ge
;

323 
	`back_löes
(
height
);

324 
	`upd©e_ãxt
(
buf
, 
∑ge
 - buf, 
íd
 - buf, 
d©a
);

327 
∑ge_Àngth
 = 0;

328 
i
 = 0; i < 
height
; i++) {

329 
	`¥öt_löe
(
wö
, 
i
, 
width
);

330 i‡(!
∑s£d_íd
)

331 
∑ge_Àngth
++;

332 i‡(
íd_ªached
 && !
∑s£d_íd
)

333 
∑s£d_íd
 = 1;

335 
	`wnouåe‰esh
(
wö
);

336 
	}
}

341 
	$¥öt_löe
(
WINDOW
 * 
wö
, 
row
, 
width
)

343 *
löe
;

345 
löe
 = 
	`gë_löe
();

346 
löe
 +
	`MIN
(
	`°æí
÷öe), 
hs¸ﬁl
);

347 
	`wmove
(
wö
, 
row
, 0);

348 
	`waddch
(
wö
, ' ');

349 
	`waddn°r
(
wö
, 
löe
, 
	`MIN
(
	`°æí
÷öe), 
width
 - 2));

352 #i‡
OLD_NCURSES


354 
x
 = 
	`gëcurx
(
wö
);

355 
i
;

356 
i
 = 0; i < 
width
 - 
x
; i++)

357 
	`waddch
(
wö
, ' ');

360 
	`w˛π€ﬁ
(
wö
);

362 
	}
}

369 *
	$gë_löe
()

371 
i
 = 0;

372 
löe
[
MAX_LEN
 + 1];

374 
íd_ªached
 = 0;

375 *
∑ge
 != '\n') {

376 i‡(*
∑ge
 == '\0') {

377 
íd_ªached
 = 1;

379 } i‡(
i
 < 
MAX_LEN
)

380 
löe
[
i
++] = *(
∑ge
++);

383 i‡(
i
 =
MAX_LEN
)

384 
löe
[
i
++] = '\0';

385 
∑ge
++;

388 i‡(
i
 <
MAX_LEN
)

389 
löe
[
i
] = '\0';

390 i‡(!
íd_ªached
)

391 
∑ge
++;

393  
löe
;

394 
	}
}

399 
	$¥öt_posôi⁄
(
WINDOW
 * 
wö
)

401 
≥r˚¡
;

403 
	`w©å£t
(
wö
, 
dlg
.
posôi⁄_ödiˇt‹
.
©r
);

404 
	`wbkgd£t
(
wö
, 
dlg
.
posôi⁄_ödiˇt‹
.
©r
 & 
A_COLOR
);

405 
≥r˚¡
 = (
∑ge
 - 
buf
Ë* 100 / 
	`°æí
(buf);

406 
	`wmove
(
wö
, 
	`gëmaxy
(wöË- 3, 
	`gëmaxx
(win) - 9);

407 
	`w¥ötw
(
wö
, "(%3d%%)", 
≥r˚¡
);

408 
	}
}

	@swupdate/scripts/kconfig/lxdialog/util.c

22 
	~<°d¨g.h
>

24 
	~"dülog.h
"

27 
	gßved_x
, 
	gßved_y
;

29 
dülog_öfo
 
	gdlg
;

31 
	$£t_m⁄o_theme
()

33 
dlg
.
s¸ìn
.
©r
 = 
A_NORMAL
;

34 
dlg
.
shadow
.
©r
 = 
A_NORMAL
;

35 
dlg
.
dülog
.
©r
 = 
A_NORMAL
;

36 
dlg
.
tôÀ
.
©r
 = 
A_BOLD
;

37 
dlg
.
b‹dî
.
©r
 = 
A_NORMAL
;

38 
dlg
.
buâ⁄_a˘ive
.
©r
 = 
A_REVERSE
;

39 
dlg
.
buâ⁄_öa˘ive
.
©r
 = 
A_DIM
;

40 
dlg
.
buâ⁄_key_a˘ive
.
©r
 = 
A_REVERSE
;

41 
dlg
.
buâ⁄_key_öa˘ive
.
©r
 = 
A_BOLD
;

42 
dlg
.
buâ⁄_œbñ_a˘ive
.
©r
 = 
A_REVERSE
;

43 
dlg
.
buâ⁄_œbñ_öa˘ive
.
©r
 = 
A_NORMAL
;

44 
dlg
.
öputbox
.
©r
 = 
A_NORMAL
;

45 
dlg
.
öputbox_b‹dî
.
©r
 = 
A_NORMAL
;

46 
dlg
.
£¨chbox
.
©r
 = 
A_NORMAL
;

47 
dlg
.
£¨chbox_tôÀ
.
©r
 = 
A_BOLD
;

48 
dlg
.
£¨chbox_b‹dî
.
©r
 = 
A_NORMAL
;

49 
dlg
.
posôi⁄_ödiˇt‹
.
©r
 = 
A_BOLD
;

50 
dlg
.
míubox
.
©r
 = 
A_NORMAL
;

51 
dlg
.
míubox_b‹dî
.
©r
 = 
A_NORMAL
;

52 
dlg
.
ôem
.
©r
 = 
A_NORMAL
;

53 
dlg
.
ôem_£À˘ed
.
©r
 = 
A_REVERSE
;

54 
dlg
.
èg
.
©r
 = 
A_BOLD
;

55 
dlg
.
èg_£À˘ed
.
©r
 = 
A_REVERSE
;

56 
dlg
.
èg_key
.
©r
 = 
A_BOLD
;

57 
dlg
.
èg_key_£À˘ed
.
©r
 = 
A_REVERSE
;

58 
dlg
.
check
.
©r
 = 
A_BOLD
;

59 
dlg
.
check_£À˘ed
.
©r
 = 
A_REVERSE
;

60 
dlg
.
u¨row
.
©r
 = 
A_BOLD
;

61 
dlg
.
d¨row
.
©r
 = 
A_BOLD
;

62 
	}
}

64 
	#DLG_COLOR
(
dülog
, 
f
, 
b
, 
h
) \

66 
dlg
.
dülog
.
fg
 = (
f
); \

67 
dlg
.
dülog
.
bg
 = (
b
); \

68 
dlg
.
dülog
.
hl
 = (
h
); \

69 } 0)

	)

71 
	$£t_˛assic_theme
()

73 
	`DLG_COLOR
(
s¸ìn
, 
COLOR_CYAN
, 
COLOR_BLUE
, 
åue
);

74 
	`DLG_COLOR
(
shadow
, 
COLOR_BLACK
, COLOR_BLACK, 
åue
);

75 
	`DLG_COLOR
(
dülog
, 
COLOR_BLACK
, 
COLOR_WHITE
, 
Ál£
);

76 
	`DLG_COLOR
(
tôÀ
, 
COLOR_YELLOW
, 
COLOR_WHITE
, 
åue
);

77 
	`DLG_COLOR
(
b‹dî
, 
COLOR_WHITE
, COLOR_WHITE, 
åue
);

78 
	`DLG_COLOR
(
buâ⁄_a˘ive
, 
COLOR_WHITE
, 
COLOR_BLUE
, 
åue
);

79 
	`DLG_COLOR
(
buâ⁄_öa˘ive
, 
COLOR_BLACK
, 
COLOR_WHITE
, 
Ál£
);

80 
	`DLG_COLOR
(
buâ⁄_key_a˘ive
, 
COLOR_WHITE
, 
COLOR_BLUE
, 
åue
);

81 
	`DLG_COLOR
(
buâ⁄_key_öa˘ive
, 
COLOR_RED
, 
COLOR_WHITE
, 
Ál£
);

82 
	`DLG_COLOR
(
buâ⁄_œbñ_a˘ive
, 
COLOR_YELLOW
, 
COLOR_BLUE
, 
åue
);

83 
	`DLG_COLOR
(
buâ⁄_œbñ_öa˘ive
, 
COLOR_BLACK
, 
COLOR_WHITE
, 
åue
);

84 
	`DLG_COLOR
(
öputbox
, 
COLOR_BLACK
, 
COLOR_WHITE
, 
Ál£
);

85 
	`DLG_COLOR
(
öputbox_b‹dî
, 
COLOR_BLACK
, 
COLOR_WHITE
, 
Ál£
);

86 
	`DLG_COLOR
(
£¨chbox
, 
COLOR_BLACK
, 
COLOR_WHITE
, 
Ál£
);

87 
	`DLG_COLOR
(
£¨chbox_tôÀ
, 
COLOR_YELLOW
, 
COLOR_WHITE
, 
åue
);

88 
	`DLG_COLOR
(
£¨chbox_b‹dî
, 
COLOR_WHITE
, COLOR_WHITE, 
åue
);

89 
	`DLG_COLOR
(
posôi⁄_ödiˇt‹
, 
COLOR_YELLOW
, 
COLOR_WHITE
, 
åue
);

90 
	`DLG_COLOR
(
míubox
, 
COLOR_BLACK
, 
COLOR_WHITE
, 
Ál£
);

91 
	`DLG_COLOR
(
míubox_b‹dî
, 
COLOR_WHITE
, COLOR_WHITE, 
åue
);

92 
	`DLG_COLOR
(
ôem
, 
COLOR_BLACK
, 
COLOR_WHITE
, 
Ál£
);

93 
	`DLG_COLOR
(
ôem_£À˘ed
, 
COLOR_WHITE
, 
COLOR_BLUE
, 
åue
);

94 
	`DLG_COLOR
(
èg
, 
COLOR_YELLOW
, 
COLOR_WHITE
, 
åue
);

95 
	`DLG_COLOR
(
èg_£À˘ed
, 
COLOR_YELLOW
, 
COLOR_BLUE
, 
åue
);

96 
	`DLG_COLOR
(
èg_key
, 
COLOR_YELLOW
, 
COLOR_WHITE
, 
åue
);

97 
	`DLG_COLOR
(
èg_key_£À˘ed
, 
COLOR_YELLOW
, 
COLOR_BLUE
, 
åue
);

98 
	`DLG_COLOR
(
check
, 
COLOR_BLACK
, 
COLOR_WHITE
, 
Ál£
);

99 
	`DLG_COLOR
(
check_£À˘ed
, 
COLOR_WHITE
, 
COLOR_BLUE
, 
åue
);

100 
	`DLG_COLOR
(
u¨row
, 
COLOR_GREEN
, 
COLOR_WHITE
, 
åue
);

101 
	`DLG_COLOR
(
d¨row
, 
COLOR_GREEN
, 
COLOR_WHITE
, 
åue
);

102 
	}
}

104 
	$£t_bœckbg_theme
()

106 
	`DLG_COLOR
(
s¸ìn
, 
COLOR_RED
, 
COLOR_BLACK
, 
åue
);

107 
	`DLG_COLOR
(
shadow
, 
COLOR_BLACK
, COLOR_BLACK, 
Ál£
);

108 
	`DLG_COLOR
(
dülog
, 
COLOR_WHITE
, 
COLOR_BLACK
, 
Ál£
);

109 
	`DLG_COLOR
(
tôÀ
, 
COLOR_RED
, 
COLOR_BLACK
, 
Ál£
);

110 
	`DLG_COLOR
(
b‹dî
, 
COLOR_BLACK
, COLOR_BLACK, 
åue
);

112 
	`DLG_COLOR
(
buâ⁄_a˘ive
, 
COLOR_YELLOW
, 
COLOR_RED
, 
Ál£
);

113 
	`DLG_COLOR
(
buâ⁄_öa˘ive
, 
COLOR_YELLOW
, 
COLOR_BLACK
, 
Ál£
);

114 
	`DLG_COLOR
(
buâ⁄_key_a˘ive
, 
COLOR_YELLOW
, 
COLOR_RED
, 
åue
);

115 
	`DLG_COLOR
(
buâ⁄_key_öa˘ive
, 
COLOR_RED
, 
COLOR_BLACK
, 
Ál£
);

116 
	`DLG_COLOR
(
buâ⁄_œbñ_a˘ive
, 
COLOR_WHITE
, 
COLOR_RED
, 
Ál£
);

117 
	`DLG_COLOR
(
buâ⁄_œbñ_öa˘ive
, 
COLOR_BLACK
, COLOR_BLACK, 
åue
);

119 
	`DLG_COLOR
(
öputbox
, 
COLOR_YELLOW
, 
COLOR_BLACK
, 
Ál£
);

120 
	`DLG_COLOR
(
öputbox_b‹dî
, 
COLOR_YELLOW
, 
COLOR_BLACK
, 
Ál£
);

122 
	`DLG_COLOR
(
£¨chbox
, 
COLOR_YELLOW
, 
COLOR_BLACK
, 
Ál£
);

123 
	`DLG_COLOR
(
£¨chbox_tôÀ
, 
COLOR_YELLOW
, 
COLOR_BLACK
, 
åue
);

124 
	`DLG_COLOR
(
£¨chbox_b‹dî
, 
COLOR_BLACK
, COLOR_BLACK, 
åue
);

126 
	`DLG_COLOR
(
posôi⁄_ödiˇt‹
, 
COLOR_RED
, 
COLOR_BLACK
, 
Ál£
);

128 
	`DLG_COLOR
(
míubox
, 
COLOR_YELLOW
, 
COLOR_BLACK
, 
Ál£
);

129 
	`DLG_COLOR
(
míubox_b‹dî
, 
COLOR_BLACK
, COLOR_BLACK, 
åue
);

131 
	`DLG_COLOR
(
ôem
, 
COLOR_WHITE
, 
COLOR_BLACK
, 
Ál£
);

132 
	`DLG_COLOR
(
ôem_£À˘ed
, 
COLOR_WHITE
, 
COLOR_RED
, 
Ál£
);

134 
	`DLG_COLOR
(
èg
, 
COLOR_RED
, 
COLOR_BLACK
, 
Ál£
);

135 
	`DLG_COLOR
(
èg_£À˘ed
, 
COLOR_YELLOW
, 
COLOR_RED
, 
åue
);

136 
	`DLG_COLOR
(
èg_key
, 
COLOR_RED
, 
COLOR_BLACK
, 
Ál£
);

137 
	`DLG_COLOR
(
èg_key_£À˘ed
, 
COLOR_YELLOW
, 
COLOR_RED
, 
åue
);

139 
	`DLG_COLOR
(
check
, 
COLOR_YELLOW
, 
COLOR_BLACK
, 
Ál£
);

140 
	`DLG_COLOR
(
check_£À˘ed
, 
COLOR_YELLOW
, 
COLOR_RED
, 
åue
);

142 
	`DLG_COLOR
(
u¨row
, 
COLOR_RED
, 
COLOR_BLACK
, 
Ál£
);

143 
	`DLG_COLOR
(
d¨row
, 
COLOR_RED
, 
COLOR_BLACK
, 
Ál£
);

144 
	}
}

146 
	$£t_bluëôÀ_theme
()

148 
	`£t_˛assic_theme
();

149 
	`DLG_COLOR
(
tôÀ
, 
COLOR_BLUE
, 
COLOR_WHITE
, 
åue
);

150 
	`DLG_COLOR
(
buâ⁄_key_a˘ive
, 
COLOR_YELLOW
, 
COLOR_BLUE
, 
åue
);

151 
	`DLG_COLOR
(
buâ⁄_œbñ_a˘ive
, 
COLOR_WHITE
, 
COLOR_BLUE
, 
åue
);

152 
	`DLG_COLOR
(
£¨chbox_tôÀ
, 
COLOR_BLUE
, 
COLOR_WHITE
, 
åue
);

153 
	`DLG_COLOR
(
posôi⁄_ödiˇt‹
, 
COLOR_BLUE
, 
COLOR_WHITE
, 
åue
);

154 
	`DLG_COLOR
(
èg
, 
COLOR_BLUE
, 
COLOR_WHITE
, 
åue
);

155 
	`DLG_COLOR
(
èg_key
, 
COLOR_BLUE
, 
COLOR_WHITE
, 
åue
);

157 
	}
}

162 
	$£t_theme
(c⁄° *
theme
)

164 
u£_cﬁ‹
 = 1;

165 i‡(!
theme
)

166 
	`£t_bluëôÀ_theme
();

167 i‡(
	`°rcmp
(
theme
, "classic") == 0)

168 
	`£t_˛assic_theme
();

169 i‡(
	`°rcmp
(
theme
, "bluetitle") == 0)

170 
	`£t_bluëôÀ_theme
();

171 i‡(
	`°rcmp
(
theme
, "blackbg") == 0)

172 
	`£t_bœckbg_theme
();

173 i‡(
	`°rcmp
(
theme
, "mono") == 0)

174 
u£_cﬁ‹
 = 0;

176  
u£_cﬁ‹
;

177 
	}
}

179 
	$öô_⁄e_cﬁ‹
(
dülog_cﬁ‹
 *
cﬁ‹
)

181 
∑ú
 = 0;

183 
∑ú
++;

184 
	`öô_∑ú
(
∑ú
, 
cﬁ‹
->
fg
, cﬁ‹->
bg
);

185 i‡(
cﬁ‹
->
hl
)

186 
cﬁ‹
->
©r
 = 
A_BOLD
 | 
	`COLOR_PAIR
(
∑ú
);

188 
cﬁ‹
->
©r
 = 
	`COLOR_PAIR
(
∑ú
);

189 
	}
}

191 
	$öô_dülog_cﬁ‹s
()

193 
	`öô_⁄e_cﬁ‹
(&
dlg
.
s¸ìn
);

194 
	`öô_⁄e_cﬁ‹
(&
dlg
.
shadow
);

195 
	`öô_⁄e_cﬁ‹
(&
dlg
.
dülog
);

196 
	`öô_⁄e_cﬁ‹
(&
dlg
.
tôÀ
);

197 
	`öô_⁄e_cﬁ‹
(&
dlg
.
b‹dî
);

198 
	`öô_⁄e_cﬁ‹
(&
dlg
.
buâ⁄_a˘ive
);

199 
	`öô_⁄e_cﬁ‹
(&
dlg
.
buâ⁄_öa˘ive
);

200 
	`öô_⁄e_cﬁ‹
(&
dlg
.
buâ⁄_key_a˘ive
);

201 
	`öô_⁄e_cﬁ‹
(&
dlg
.
buâ⁄_key_öa˘ive
);

202 
	`öô_⁄e_cﬁ‹
(&
dlg
.
buâ⁄_œbñ_a˘ive
);

203 
	`öô_⁄e_cﬁ‹
(&
dlg
.
buâ⁄_œbñ_öa˘ive
);

204 
	`öô_⁄e_cﬁ‹
(&
dlg
.
öputbox
);

205 
	`öô_⁄e_cﬁ‹
(&
dlg
.
öputbox_b‹dî
);

206 
	`öô_⁄e_cﬁ‹
(&
dlg
.
£¨chbox
);

207 
	`öô_⁄e_cﬁ‹
(&
dlg
.
£¨chbox_tôÀ
);

208 
	`öô_⁄e_cﬁ‹
(&
dlg
.
£¨chbox_b‹dî
);

209 
	`öô_⁄e_cﬁ‹
(&
dlg
.
posôi⁄_ödiˇt‹
);

210 
	`öô_⁄e_cﬁ‹
(&
dlg
.
míubox
);

211 
	`öô_⁄e_cﬁ‹
(&
dlg
.
míubox_b‹dî
);

212 
	`öô_⁄e_cﬁ‹
(&
dlg
.
ôem
);

213 
	`öô_⁄e_cﬁ‹
(&
dlg
.
ôem_£À˘ed
);

214 
	`öô_⁄e_cﬁ‹
(&
dlg
.
èg
);

215 
	`öô_⁄e_cﬁ‹
(&
dlg
.
èg_£À˘ed
);

216 
	`öô_⁄e_cﬁ‹
(&
dlg
.
èg_key
);

217 
	`öô_⁄e_cﬁ‹
(&
dlg
.
èg_key_£À˘ed
);

218 
	`öô_⁄e_cﬁ‹
(&
dlg
.
check
);

219 
	`öô_⁄e_cﬁ‹
(&
dlg
.
check_£À˘ed
);

220 
	`öô_⁄e_cﬁ‹
(&
dlg
.
u¨row
);

221 
	`öô_⁄e_cﬁ‹
(&
dlg
.
d¨row
);

222 
	}
}

227 
	$cﬁ‹_£tup
(c⁄° *
theme
)

229 
u£_cﬁ‹
;

231 
u£_cﬁ‹
 = 
	`£t_theme
(
theme
);

232 i‡(
u£_cﬁ‹
 && 
	`has_cﬁ‹s
()) {

233 
	`°¨t_cﬁ‹
();

234 
	`öô_dülog_cﬁ‹s
();

236 
	`£t_m⁄o_theme
();

237 
	}
}

242 
	$©å_˛ór
(
WINDOW
 * 
wö
, 
height
, 
width
, 
chty≥
 
©å
)

244 
i
, 
j
;

246 
	`w©å£t
(
wö
, 
©å
);

247 
i
 = 0; i < 
height
; i++) {

248 
	`wmove
(
wö
, 
i
, 0);

249 
j
 = 0; j < 
width
; j++)

250 
	`waddch
(
wö
, ' ');

252 
	`touchwö
(
wö
);

253 
	}
}

255 
	$dülog_˛ór
()

257 
löes
, 
cﬁumns
;

259 
löes
 = 
	`gëmaxy
(
°ds¸
);

260 
cﬁumns
 = 
	`gëmaxx
(
°ds¸
);

262 
	`©å_˛ór
(
°ds¸
, 
löes
, 
cﬁumns
, 
dlg
.
s¸ìn
.
©r
);

264 i‡(
dlg
.
backtôÀ
 !
NULL
) {

265 
i
, 
Àn
 = 0, 
skù
 = 0;

266 
subtôÀ_li°
 *
pos
;

268 
	`w©å£t
(
°ds¸
, 
dlg
.
s¸ìn
.
©r
);

269 
	`mvwadd°r
(
°ds¸
, 0, 1, (*)
dlg
.
backtôÀ
);

271 
pos
 = 
dlg
.
subtôÀs
;Öo†!
NULL
;Öo†pos->
√xt
) {

273 
Àn
 +
	`°æí
(
pos
->
ãxt
) + 3;

276 
	`wmove
(
°ds¸
, 1, 1);

277 i‡(
Àn
 > 
cﬁumns
 - 2) {

278 c⁄° *
ñlùsis
 = "[...] ";

279 
	`wadd°r
(
°ds¸
, 
ñlùsis
);

280 
skù
 = 
Àn
 - (
cﬁumns
 - 2 - 
	`°æí
(
ñlùsis
));

283 
pos
 = 
dlg
.
subtôÀs
;Öo†!
NULL
;Öo†pos->
√xt
) {

284 i‡(
skù
 == 0)

285 
	`waddch
(
°ds¸
, 
ACS_RARROW
);

287 
skù
--;

289 i‡(
skù
 == 0)

290 
	`waddch
(
°ds¸
, ' ');

292 
skù
--;

294 i‡(
skù
 < 
	`°æí
(
pos
->
ãxt
)) {

295 
	`wadd°r
(
°ds¸
, 
pos
->
ãxt
 + 
skù
);

296 
skù
 = 0;

298 
skù
 -
	`°æí
(
pos
->
ãxt
);

300 i‡(
skù
 == 0)

301 
	`waddch
(
°ds¸
, ' ');

303 
skù
--;

306 
i
 = 
Àn
 + 1; i < 
cﬁumns
 - 1; i++)

307 
	`waddch
(
°ds¸
, 
ACS_HLINE
);

309 
	`wnouåe‰esh
(
°ds¸
);

310 
	}
}

315 
	$öô_dülog
(c⁄° *
backtôÀ
)

317 
height
, 
width
;

319 
	`öôs¸
();

322 
	`gëyx
(
°ds¸
, 
ßved_y
, 
ßved_x
);

324 
	`gëmaxyx
(
°ds¸
, 
height
, 
width
);

325 i‡(
height
 < 
WINDOW_HEIGTH_MIN
 || 
width
 < 
WINDOW_WIDTH_MIN
) {

326 
	`ídwö
();

327  -
ERRDISPLAYTOOSMALL
;

330 
dlg
.
backtôÀ
 = backtitle;

331 
	`cﬁ‹_£tup
(
	`gëív
("MENUCONFIG_COLOR"));

333 
	`key∑d
(
°ds¸
, 
TRUE
);

334 
	`cbªak
();

335 
	`n€cho
();

336 
	`dülog_˛ór
();

339 
	}
}

341 
	$£t_dülog_backtôÀ
(c⁄° *
backtôÀ
)

343 
dlg
.
backtôÀ
 = backtitle;

344 
	}
}

346 
	$£t_dülog_subtôÀs
(
subtôÀ_li°
 *
subtôÀs
)

348 
dlg
.
subtôÀs
 = subtitles;

349 
	}
}

354 
	$íd_dülog
(
x
, 
y
)

357 
	`move
(
y
, 
x
);

358 
	`ª‰esh
();

359 
	`ídwö
();

360 
	}
}

365 
	$¥öt_tôÀ
(
WINDOW
 *
dülog
, c⁄° *
tôÀ
, 
width
)

367 i‡(
tôÀ
) {

368 
éí
 = 
	`MIN
(
width
 - 2, 
	`°æí
(
tôÀ
));

369 
	`w©å£t
(
dülog
, 
dlg
.
tôÀ
.
©r
);

370 
	`mvwaddch
(
dülog
, 0, (
width
 - 
éí
) / 2 - 1, ' ');

371 
	`mvwaddn°r
(
dülog
, 0, (
width
 - 
éí
)/2, 
tôÀ
,Ålen);

372 
	`waddch
(
dülog
, ' ');

374 
	}
}

382 
	$¥öt_autowøp
(
WINDOW
 * 
wö
, c⁄° *
¥om±
, 
width
, 
y
, 
x
)

384 
√wl
, 
cur_x
, 
cur_y
;

385 
¥om±_Àn
, 
room
, 
wÀn
;

386 
ãmp°r
[
MAX_LEN
 + 1], *
w‹d
, *
•
, *
•2
, *
√wlöe_£∑øt‹
 = 0;

388 
	`°r˝y
(
ãmp°r
, 
¥om±
);

390 
¥om±_Àn
 = 
	`°æí
(
ãmp°r
);

392 i‡(
¥om±_Àn
 <
width
 - 
x
 * 2) {

393 
	`wmove
(
wö
, 
y
, (
width
 - 
¥om±_Àn
) / 2);

394 
	`wadd°r
(
wö
, 
ãmp°r
);

396 
cur_x
 = 
x
;

397 
cur_y
 = 
y
;

398 
√wl
 = 1;

399 
w‹d
 = 
ãmp°r
;

400 
w‹d
 && *word) {

401 
•
 = 
	`°Ωbrk
(
w‹d
, "\n ");

402 i‡(
•
 && *sp == '\n')

403 
√wlöe_£∑øt‹
 = 
•
;

405 i‡(
•
)

406 *
•
++ = 0;

411 
room
 = 
width
 - 
cur_x
;

412 
wÀn
 = 
	`°æí
(
w‹d
);

413 i‡(
wÀn
 > 
room
 ||

414 (
√wl
 && 
wÀn
 < 4 && 
•


415 && 
wÀn
 + 1 + 
	`°æí
(
•
Ë> 
room


416 && (!(
•2
 = 
	`°Ωbrk
(
•
, "\n "))

417 || 
wÀn
 + 1 + (
•2
 - 
•
Ë> 
room
))) {

418 
cur_y
++;

419 
cur_x
 = 
x
;

421 
	`wmove
(
wö
, 
cur_y
, 
cur_x
);

422 
	`wadd°r
(
wö
, 
w‹d
);

423 
	`gëyx
(
wö
, 
cur_y
, 
cur_x
);

426 i‡(
√wlöe_£∑øt‹
) {

427 
cur_y
++;

428 
cur_x
 = 
x
;

429 
√wlöe_£∑øt‹
 = 0;

431 
cur_x
++;

433 i‡(
•
 && *sp == ' ') {

434 
cur_x
++;

435 *++
•
 == ' ') ;

436 
√wl
 = 1;

438 
√wl
 = 0;

439 
w‹d
 = 
•
;

442 
	}
}

447 
	$¥öt_buâ⁄
(
WINDOW
 * 
wö
, c⁄° *
œbñ
, 
y
, 
x
, 
£À˘ed
)

449 
i
, 
ãmp
;

451 
	`wmove
(
wö
, 
y
, 
x
);

452 
	`w©å£t
(
wö
, 
£À˘ed
 ? 
dlg
.
buâ⁄_a˘ive
.
©r


453 : 
dlg
.
buâ⁄_öa˘ive
.
©r
);

454 
	`wadd°r
(
wö
, "<");

455 
ãmp
 = 
	`°r•n
(
œbñ
, " ");

456 
œbñ
 +
ãmp
;

457 
	`w©å£t
(
wö
, 
£À˘ed
 ? 
dlg
.
buâ⁄_œbñ_a˘ive
.
©r


458 : 
dlg
.
buâ⁄_œbñ_öa˘ive
.
©r
);

459 
i
 = 0; i < 
ãmp
; i++)

460 
	`waddch
(
wö
, ' ');

461 
	`w©å£t
(
wö
, 
£À˘ed
 ? 
dlg
.
buâ⁄_key_a˘ive
.
©r


462 : 
dlg
.
buâ⁄_key_öa˘ive
.
©r
);

463 
	`waddch
(
wö
, 
œbñ
[0]);

464 
	`w©å£t
(
wö
, 
£À˘ed
 ? 
dlg
.
buâ⁄_œbñ_a˘ive
.
©r


465 : 
dlg
.
buâ⁄_œbñ_öa˘ive
.
©r
);

466 
	`wadd°r
(
wö
, (*)
œbñ
 + 1);

467 
	`w©å£t
(
wö
, 
£À˘ed
 ? 
dlg
.
buâ⁄_a˘ive
.
©r


468 : 
dlg
.
buâ⁄_öa˘ive
.
©r
);

469 
	`wadd°r
(
wö
, ">");

470 
	`wmove
(
wö
, 
y
, 
x
 + 
ãmp
 + 1);

471 
	}
}

477 
	$døw_box
(
WINDOW
 * 
wö
, 
y
, 
x
, 
height
, 
width
,

478 
chty≥
 
box
, chty≥ 
b‹dî
)

480 
i
, 
j
;

482 
	`w©å£t
(
wö
, 0);

483 
i
 = 0; i < 
height
; i++) {

484 
	`wmove
(
wö
, 
y
 + 
i
, 
x
);

485 
j
 = 0; j < 
width
; j++)

486 i‡(!
i
 && !
j
)

487 
	`waddch
(
wö
, 
b‹dî
 | 
ACS_ULCORNER
);

488 i‡(
i
 =
height
 - 1 && !
j
)

489 
	`waddch
(
wö
, 
b‹dî
 | 
ACS_LLCORNER
);

490 i‡(!
i
 && 
j
 =
width
 - 1)

491 
	`waddch
(
wö
, 
box
 | 
ACS_URCORNER
);

492 i‡(
i
 =
height
 - 1 && 
j
 =
width
 - 1)

493 
	`waddch
(
wö
, 
box
 | 
ACS_LRCORNER
);

494 i‡(!
i
)

495 
	`waddch
(
wö
, 
b‹dî
 | 
ACS_HLINE
);

496 i‡(
i
 =
height
 - 1)

497 
	`waddch
(
wö
, 
box
 | 
ACS_HLINE
);

498 i‡(!
j
)

499 
	`waddch
(
wö
, 
b‹dî
 | 
ACS_VLINE
);

500 i‡(
j
 =
width
 - 1)

501 
	`waddch
(
wö
, 
box
 | 
ACS_VLINE
);

503 
	`waddch
(
wö
, 
box
 | ' ');

505 
	}
}

511 
	$døw_shadow
(
WINDOW
 * 
wö
, 
y
, 
x
, 
height
, 
width
)

513 
i
;

515 i‡(
	`has_cﬁ‹s
()) {

516 
	`w©å£t
(
wö
, 
dlg
.
shadow
.
©r
);

517 
	`wmove
(
wö
, 
y
 + 
height
, 
x
 + 2);

518 
i
 = 0; i < 
width
; i++)

519 
	`waddch
(
wö
, 
	`wöch
(wöË& 
A_CHARTEXT
);

520 
i
 = 
y
 + 1; i < y + 
height
 + 1; i++) {

521 
	`wmove
(
wö
, 
i
, 
x
 + 
width
);

522 
	`waddch
(
wö
, 
	`wöch
(wöË& 
A_CHARTEXT
);

523 
	`waddch
(
wö
, 
	`wöch
(wöË& 
A_CHARTEXT
);

525 
	`wnouåe‰esh
(
wö
);

527 
	}
}

532 
	$fú°_Æpha
(c⁄° *
°rög
, c⁄° *
exem±
)

534 
i
, 
ö_∑ªn
 = 0, 
c
;

536 
i
 = 0; i < 
	`°æí
(
°rög
); i++) {

537 
c
 = 
	`tﬁowî
(
°rög
[
i
]);

539 i‡(
	`°rchr
("<[(", 
c
))

540 ++
ö_∑ªn
;

541 i‡(
	`°rchr
(">])", 
c
Ë&& 
ö_∑ªn
 > 0)

542 --
ö_∑ªn
;

544 i‡((!
ö_∑ªn
Ë&& 
	`ißÕha
(
c
Ë&& 
	`°rchr
(
exem±
, c) == 0)

545  
i
;

549 
	}
}

560 
	$⁄_key_esc
(
WINDOW
 *
wö
)

562 
key
;

563 
key2
;

564 
key3
;

566 
	`nodñay
(
wö
, 
TRUE
);

567 
	`key∑d
(
wö
, 
FALSE
);

568 
key
 = 
	`wgëch
(
wö
);

569 
key2
 = 
	`wgëch
(
wö
);

571 
key3
 = 
	`wgëch
(
wö
);

572 } 
key3
 !
ERR
);

573 
	`nodñay
(
wö
, 
FALSE
);

574 
	`key∑d
(
wö
, 
TRUE
);

575 i‡(
key
 =
KEY_ESC
 && 
key2
 =
ERR
)

576  
KEY_ESC
;

577 i‡(
key
 !
ERR
 && key !
KEY_ESC
 && 
key2
 == ERR)

578 
	`ungëch
(
key
);

581 
	}
}

584 
	$⁄_key_ªsize
()

586 
	`dülog_˛ór
();

587  
KEY_RESIZE
;

588 
	}
}

590 
dülog_li°
 *
	gôem_cur
;

591 
dülog_li°
 
	gôem_nû
;

592 
dülog_li°
 *
	gôem_hód
;

594 
	$ôem_ª£t
()

596 
dülog_li°
 *
p
, *
√xt
;

598 
p
 = 
ôem_hód
;Ö;Ö = 
√xt
) {

599 
√xt
 = 
p
->next;

600 
	`‰ì
(
p
);

602 
ôem_hód
 = 
NULL
;

603 
ôem_cur
 = &
ôem_nû
;

604 
	}
}

606 
	$ôem_make
(c⁄° *
fmt
, ...)

608 
va_li°
 
≠
;

609 
dülog_li°
 *
p
 = 
	`mÆloc
((*p));

611 i‡(
ôem_hód
)

612 
ôem_cur
->
√xt
 = 
p
;

614 
ôem_hód
 = 
p
;

615 
ôem_cur
 = 
p
;

616 
	`mem£t
(
p
, 0, (*p));

618 
	`va_°¨t
(
≠
, 
fmt
);

619 
	`v¢¥ötf
(
ôem_cur
->
node
.
°r
, (ôem_cur->node.°r), 
fmt
, 
≠
);

620 
	`va_íd
(
≠
);

621 
	}
}

623 
	$ôem_add_°r
(c⁄° *
fmt
, ...)

625 
va_li°
 
≠
;

626 
size_t
 
avaû
;

628 
avaû
 = (
ôem_cur
->
node
.
°r
Ë- 
	`°æí
(item_cur->node.str);

630 
	`va_°¨t
(
≠
, 
fmt
);

631 
	`v¢¥ötf
(
ôem_cur
->
node
.
°r
 + 
	`°æí
(item_cur->node.str),

632 
avaû
, 
fmt
, 
≠
);

633 
ôem_cur
->
node
.
°r
[(item_cur->node.str) - 1] = '\0';

634 
	`va_íd
(
≠
);

635 
	}
}

637 
	$ôem_£t_èg
(
èg
)

639 
ôem_cur
->
node
.
èg
 =Åag;

640 
	}
}

641 
	$ôem_£t_d©a
(*
±r
)

643 
ôem_cur
->
node
.
d©a
 = 
±r
;

644 
	}
}

646 
	$ôem_£t_£À˘ed
(
vÆ
)

648 
ôem_cur
->
node
.
£À˘ed
 = 
vÆ
;

649 
	}
}

651 
	$ôem_a˘iv©e_£À˘ed
()

653 
	`ôem_f‹óch
()

654 i‡(
	`ôem_is_£À˘ed
())

657 
	}
}

659 *
	$ôem_d©a
()

661  
ôem_cur
->
node
.
d©a
;

662 
	}
}

664 
	$ôem_èg
()

666  
ôem_cur
->
node
.
èg
;

667 
	}
}

669 
	$ôem_cou¡
()

671 
n
 = 0;

672 
dülog_li°
 *
p
;

674 
p
 = 
ôem_hód
;Ö;Ö =Ö->
√xt
)

675 
n
++;

676  
n
;

677 
	}
}

679 
	$ôem_£t
(
n
)

681 
i
 = 0;

682 
	`ôem_f‹óch
()

683 i‡(
i
++ =
n
)

685 
	}
}

687 
	$ôem_n
()

689 
n
 = 0;

690 
dülog_li°
 *
p
;

692 
p
 = 
ôem_hód
;Ö;Ö =Ö->
√xt
) {

693 i‡(
p
 =
ôem_cur
)

694  
n
;

695 
n
++;

698 
	}
}

700 c⁄° *
	$ôem_°r
()

702  
ôem_cur
->
node
.
°r
;

703 
	}
}

705 
	$ôem_is_£À˘ed
()

707  (
ôem_cur
->
node
.
£À˘ed
 != 0);

708 
	}
}

710 
	$ôem_is_èg
(
èg
)

712  (
ôem_cur
->
node
.
èg
 ==Åag);

713 
	}
}

	@swupdate/scripts/kconfig/lxdialog/yesno.c

22 
	~"dülog.h
"

27 
	$¥öt_buâ⁄s
(
WINDOW
 * 
dülog
, 
height
, 
width
, 
£À˘ed
)

29 
x
 = 
width
 / 2 - 10;

30 
y
 = 
height
 - 2;

32 
	`¥öt_buâ⁄
(
dülog
, 
	`gëãxt
(" Ye†"), 
y
, 
x
, 
£À˘ed
 == 0);

33 
	`¥öt_buâ⁄
(
dülog
, 
	`gëãxt
(" Nÿ "), 
y
, 
x
 + 13, 
£À˘ed
 == 1);

35 
	`wmove
(
dülog
, 
y
, 
x
 + 1 + 13 * 
£À˘ed
);

36 
	`wª‰esh
(
dülog
);

37 
	}
}

42 
	$dülog_ye¢o
(c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
)

44 
i
, 
x
, 
y
, 
key
 = 0, 
buâ⁄
 = 0;

45 
WINDOW
 *
dülog
;

47 
do_ªsize
:

48 i‡(
	`gëmaxy
(
°ds¸
Ë< (
height
 + 
YESNO_HEIGTH_MIN
))

49  -
ERRDISPLAYTOOSMALL
;

50 i‡(
	`gëmaxx
(
°ds¸
Ë< (
width
 + 
YESNO_WIDTH_MIN
))

51  -
ERRDISPLAYTOOSMALL
;

54 
x
 = (
	`gëmaxx
(
°ds¸
Ë- 
width
) / 2;

55 
y
 = (
	`gëmaxy
(
°ds¸
Ë- 
height
) / 2;

57 
	`døw_shadow
(
°ds¸
, 
y
, 
x
, 
height
, 
width
);

59 
dülog
 = 
	`√wwö
(
height
, 
width
, 
y
, 
x
);

60 
	`key∑d
(
dülog
, 
TRUE
);

62 
	`døw_box
(
dülog
, 0, 0, 
height
, 
width
,

63 
dlg
.
dülog
.
©r
, dlg.
b‹dî
.atr);

64 
	`w©å£t
(
dülog
, 
dlg
.
b‹dî
.
©r
);

65 
	`mvwaddch
(
dülog
, 
height
 - 3, 0, 
ACS_LTEE
);

66 
i
 = 0; i < 
width
 - 2; i++)

67 
	`waddch
(
dülog
, 
ACS_HLINE
);

68 
	`w©å£t
(
dülog
, 
dlg
.dülog.
©r
);

69 
	`waddch
(
dülog
, 
ACS_RTEE
);

71 
	`¥öt_tôÀ
(
dülog
, 
tôÀ
, 
width
);

73 
	`w©å£t
(
dülog
, 
dlg
.dülog.
©r
);

74 
	`¥öt_autowøp
(
dülog
, 
¥om±
, 
width
 - 2, 1, 3);

76 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

78 
key
 !
KEY_ESC
) {

79 
key
 = 
	`wgëch
(
dülog
);

80 
key
) {

83 
	`dñwö
(
dülog
);

87 
	`dñwö
(
dülog
);

90 
TAB
:

91 
KEY_LEFT
:

92 
KEY_RIGHT
:

93 
buâ⁄
 = ((
key
 =
KEY_LEFT
 ? --button : ++button) < 0) ? 1 : (button > 1 ? 0 : button);

95 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 
buâ⁄
);

96 
	`wª‰esh
(
dülog
);

100 
	`dñwö
(
dülog
);

101  
buâ⁄
;

102 
KEY_ESC
:

103 
key
 = 
	`⁄_key_esc
(
dülog
);

105 
KEY_RESIZE
:

106 
	`dñwö
(
dülog
);

107 
	`⁄_key_ªsize
();

108 
do_ªsize
;

112 
	`dñwö
(
dülog
);

113  
key
;

114 
	}
}

	@swupdate/scripts/kconfig/mconf.c

11 
	~<˘y≥.h
>

12 
	~<î∫o.h
>

13 
	~<f˙é.h
>

14 
	~<limôs.h
>

15 
	~<°d¨g.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~<sig«l.h
>

19 
	~<uni°d.h
>

20 
	~<loˇÀ.h
>

22 
	~"lkc.h
"

23 
	~"lxdülog/dülog.h
"

25 c⁄° 
	gmc⁄f_ªadme
[] = 
N_
(

175 
	gmíu_ö°ru˘i⁄s
[] = 
N_
(

182 
	gødiﬁi°_ö°ru˘i⁄s
[] = 
N_
(

187 
	göputbox_ö°ru˘i⁄s_öt
[] = 
N_
(

191 
	göputbox_ö°ru˘i⁄s_hex
[] = 
N_
(

194 
	göputbox_ö°ru˘i⁄s_°rög
[] = 
N_
(

197 
	g£tmod_ãxt
[] = 
N_
(

200 
	glﬂd_c⁄fig_ãxt
[] = 
N_
(

204 
	glﬂd_c⁄fig_hñp
[] = 
N_
(

215 
	gßve_c⁄fig_ãxt
[] = 
N_
(

218 
	gßve_c⁄fig_hñp
[] = 
N_
(

229 
	g£¨ch_hñp
[] = 
N_
(

276 
	gödít
;

277 
míu
 *
	gcuºít_míu
;

278 
	gchûd_cou¡
;

279 
	gsögÀ_míu_mode
;

280 
	gshow_Æl_›ti⁄s
;

281 
	gßve_™d_exô
;

282 
	gsûít
;

284 
c⁄f
(
míu
 *míu, míu *
a˘ive_míu
);

285 
c⁄f_choi˚
(
míu
 *menu);

286 
c⁄f_°rög
(
míu
 *menu);

287 
c⁄f_lﬂd
();

288 
c⁄f_ßve
();

289 
show_ãxtbox_ext
(c⁄° *
tôÀ
, *
ãxt
, 
r
, 
c
,

290 *
keys
, *
vs¸ﬁl
, *
hs¸ﬁl
,

291 
upd©e_ãxt_‚
 
upd©e_ãxt
, *
d©a
);

292 
show_ãxtbox
(c⁄° *
tôÀ
, c⁄° *
ãxt
, 
r
, 
c
);

293 
show_hñ±ext
(c⁄° *
tôÀ
, c⁄° *
ãxt
);

294 
show_hñp
(
míu
 *menu);

296 
	gfûíame
[
PATH_MAX
+1];

297 
	$£t_c⁄fig_fûíame
(c⁄° *
c⁄fig_fûíame
)

299 
míu_backtôÀ
[
PATH_MAX
+128];

300 
size
;

302 
size
 = 
	`¢¥ötf
(
míu_backtôÀ
, (menu_backtitle),

303 "%†- %s", 
c⁄fig_fûíame
, 
roŸmíu
.
¥om±
->
ãxt
);

304 i‡(
size
 >(
míu_backtôÀ
))

305 
míu_backtôÀ
[(menu_backtitle)-1] = '\0';

306 
	`£t_dülog_backtôÀ
(
míu_backtôÀ
);

308 
size
 = 
	`¢¥ötf
(
fûíame
, (fûíame), "%s", 
c⁄fig_fûíame
);

309 i‡(
size
 >(
fûíame
))

310 
fûíame
[(filename)-1] = '\0';

311 
	}
}

313 
	ssubtôÀ_∑π
 {

314 
li°_hód
 
	míåõs
;

315 c⁄° *
	mãxt
;

317 
LIST_HEAD
(
åaû
);

319 
subtôÀ_li°
 *
	gsubtôÀs
;

320 
	$£t_subtôÀ
()

322 
subtôÀ_∑π
 *
•
;

323 
subtôÀ_li°
 *
pos
, *
tmp
;

325 
pos
 = 
subtôÀs
;Öo†!
NULL
;Öo†
tmp
) {

326 
tmp
 = 
pos
->
√xt
;

327 
	`‰ì
(
pos
);

330 
subtôÀs
 = 
NULL
;

331 
	`li°_f‹_óch_íåy
(
•
, &
åaû
, 
íåõs
) {

332 i‡(
•
->
ãxt
) {

333 i‡(
pos
) {

334 
pos
->
√xt
 = 
	`xˇŒoc
(1, (*pos));

335 
pos
 =Öos->
√xt
;

337 
subtôÀs
 = 
pos
 = 
	`xˇŒoc
(1, (*pos));

339 
pos
->
ãxt
 = 
•
->text;

343 
	`£t_dülog_subtôÀs
(
subtôÀs
);

344 
	}
}

346 
	$ª£t_subtôÀ
()

348 
subtôÀ_li°
 *
pos
, *
tmp
;

350 
pos
 = 
subtôÀs
;Öo†!
NULL
;Öo†
tmp
) {

351 
tmp
 = 
pos
->
√xt
;

352 
	`‰ì
(
pos
);

354 
subtôÀs
 = 
NULL
;

355 
	`£t_dülog_subtôÀs
(
subtôÀs
);

356 
	}
}

358 
	s£¨ch_d©a
 {

359 
li°_hód
 *
	mhód
;

360 
míu
 **
	mèrgës
;

361 *
	mkeys
;

364 
	$upd©e_ãxt
(*
buf
, 
size_t
 
°¨t
, size_à
íd
, *
_d©a
)

366 
£¨ch_d©a
 *
d©a
 = 
_d©a
;

367 
jump_key
 *
pos
;

368 
k
 = 0;

370 
	`li°_f‹_óch_íåy
(
pos
, 
d©a
->
hód
, 
íåõs
) {

371 i‡(
pos
->
off£t
 >
°¨t
 &&Öos->off£à< 
íd
) {

372 
hódî
[4];

374 i‡(
k
 < 
JUMP_NB
) {

375 
key
 = '0' + (
pos
->
ödex
 % 
JUMP_NB
) + 1;

377 
	`•rötf
(
hódî
, "(%c)", 
key
);

378 
d©a
->
keys
[
k
] = 
key
;

379 
d©a
->
èrgës
[
k
] = 
pos
->
èrgë
;

380 
k
++;

382 
	`•rötf
(
hódî
, " ");

385 
	`mem˝y
(
buf
 + 
pos
->
off£t
, 
hódî
, (header) - 1);

388 
d©a
->
keys
[
k
] = 0;

389 
	}
}

391 
	$£¨ch_c⁄f
()

393 
symbﬁ
 **
sym_¨r
;

394 
g°r
 
ªs
;

395 
g°r
 
tôÀ
;

396 *
dülog_öput
;

397 
dªs
, 
vs¸ﬁl
 = 0, 
hs¸ﬁl
 = 0;

398 
boﬁ
 
agaö
;

399 
g°r
 
°ãxt
;

400 
subtôÀ_∑π
 
°∑π
;

402 
tôÀ
 = 
	`°r_√w
();

403 
	`°r_¥ötf
–&
tôÀ
, 
	`_
("Enter (sub)string orÑegexpÅo search for "

404 "(wôh o∏wôhouà\"%s\")"), 
CONFIG_
);

406 
agaö
:

407 
	`dülog_˛ór
();

408 
dªs
 = 
	`dülog_öputbox
(
	`_
("Search Configuration Parameter"),

409 
	`°r_gë
(&
tôÀ
),

411 
dªs
) {

415 
	`show_hñ±ext
(
	`_
("Sórch C⁄figuøti⁄"), 
£¨ch_hñp
);

416 
agaö
;

418 
	`°r_‰ì
(&
tôÀ
);

423 
dülog_öput
 = 
dülog_öput_ªsu…
;

424 i‡(
	`°∫ˇ£cmp
(
dülog_öput_ªsu…
, 
CONFIG_
, 
	`°æí
(CONFIG_)) == 0)

425 
dülog_öput
 +
	`°æí
(
CONFIG_
);

427 
°ãxt
 = 
	`°r_√w
();

428 
	`°r_¥ötf
(&
°ãxt
, "Sórch (%s)", 
dülog_öput_ªsu…
);

429 
°∑π
.
ãxt
 = 
	`°r_gë
(&
°ãxt
);

430 
	`li°_add_èû
(&
°∑π
.
íåõs
, &
åaû
);

432 
sym_¨r
 = 
	`sym_ª_£¨ch
(
dülog_öput
);

434 
	`LIST_HEAD
(
hód
);

435 
míu
 *
èrgës
[
JUMP_NB
];

436 
keys
[
JUMP_NB
 + 1], 
i
;

437 
£¨ch_d©a
 
d©a
 = {

438 .
hód
 = &head,

439 .
èrgës
 =Åargets,

440 .
keys
 = keys,

442 
jump_key
 *
pos
, *
tmp
;

444 
ªs
 = 
	`gë_ªœti⁄s_°r
(
sym_¨r
, &
hód
);

445 
	`£t_subtôÀ
();

446 
dªs
 = 
	`show_ãxtbox_ext
(
	`_
("Search Results"), (*)

447 
	`°r_gë
(&
ªs
), 0, 0, 
keys
, &
vs¸ﬁl
,

448 &
hs¸ﬁl
, &
upd©e_ãxt
, (*)

449 &
d©a
);

450 
agaö
 = 
Ál£
;

451 
i
 = 0; i < 
JUMP_NB
 && 
keys
[i]; i++)

452 i‡(
dªs
 =
keys
[
i
]) {

453 
	`c⁄f
(
èrgës
[
i
]->
∑ª¡
,Åargets[i]);

454 
agaö
 = 
åue
;

456 
	`°r_‰ì
(&
ªs
);

457 
	`li°_f‹_óch_íåy_ß„
(
pos
, 
tmp
, &
hód
, 
íåõs
)

458 
	`‰ì
(
pos
);

459 } 
agaö
);

460 
	`‰ì
(
sym_¨r
);

461 
	`°r_‰ì
(&
tôÀ
);

462 
	`li°_dñ
(
åaû
.
¥ev
);

463 
	`°r_‰ì
(&
°ãxt
);

464 
	}
}

466 
	$buûd_c⁄f
(
míu
 *menu)

468 
symbﬁ
 *
sym
;

469 
¥›îty
 *
¥›
;

470 
míu
 *
chûd
;

471 
ty≥
, 
tmp
, 
doöt
 = 2;

472 
åi°©e
 
vÆ
;

473 
ch
;

474 
boﬁ
 
visibÀ
;

480 
visibÀ
 = 
	`míu_is_visibÀ
(
míu
);

481 i‡(
show_Æl_›ti⁄s
 && !
	`míu_has_¥om±
(
míu
))

483 i‡(!
show_Æl_›ti⁄s
 && !
visibÀ
)

486 
sym
 = 
míu
->sym;

487 
¥›
 = 
míu
->
¥om±
;

488 i‡(!
sym
) {

489 i‡(
¥›
 && 
míu
 !
cuºít_míu
) {

490 c⁄° *
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

491 
¥›
->
ty≥
) {

492 
P_MENU
:

493 
chûd_cou¡
++;

494 
¥om±
 = 
	`_
(prompt);

495 i‡(
sögÀ_míu_mode
) {

496 
	`ôem_make
("%s%*c%s",

497 
míu
->
d©a
 ? "-->" : "++>",

498 
ödít
 + 1, ' ', 
¥om±
);

500 
	`ôem_make
(" %*c%s %s",

501 
ödít
 + 1, ' ', 
¥om±
,

502 
	`míu_is_em±y
(
míu
) ? "----" : "--->");

503 
	`ôem_£t_èg
('m');

504 
	`ôem_£t_d©a
(
míu
);

505 i‡(
sögÀ_míu_mode
 && 
míu
->
d©a
)

506 
c⁄f_chûds
;

508 
P_COMMENT
:

509 i‡(
¥om±
) {

510 
chûd_cou¡
++;

511 
	`ôem_make
(" %*c*** %†***", 
ödít
 + 1, ' ', 
	`_
(
¥om±
));

512 
	`ôem_£t_èg
(':');

513 
	`ôem_£t_d©a
(
míu
);

517 i‡(
¥om±
) {

518 
chûd_cou¡
++;

519 
	`ôem_make
("---%*c%s", 
ödít
 + 1, ' ', 
	`_
(
¥om±
));

520 
	`ôem_£t_èg
(':');

521 
	`ôem_£t_d©a
(
míu
);

525 
doöt
 = 0;

526 
c⁄f_chûds
;

529 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

530 i‡(
	`sym_is_choi˚
(
sym
)) {

531 
symbﬁ
 *
def_sym
 = 
	`sym_gë_choi˚_vÆue
(
sym
);

532 
míu
 *
def_míu
 = 
NULL
;

534 
chûd_cou¡
++;

535 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

536 i‡(
	`míu_is_visibÀ
(
chûd
Ë&& chûd->
sym
 =
def_sym
)

537 
def_míu
 = 
chûd
;

540 
vÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

541 i‡(
	`sym_is_ch™gabÀ
(
sym
)) {

542 
ty≥
) {

543 
S_BOOLEAN
:

544 
	`ôem_make
("[%c]", 
vÆ
 =
no
 ? ' ' : '*');

546 
S_TRISTATE
:

547 
vÆ
) {

548 
yes
: 
ch
 = '*'; ;

549 
mod
: 
ch
 = 'M'; ;

550 : 
ch
 = ' '; ;

552 
	`ôem_make
("<%c>", 
ch
);

555 
	`ôem_£t_èg
('t');

556 
	`ôem_£t_d©a
(
míu
);

558 
	`ôem_make
(" ");

559 
	`ôem_£t_èg
(
def_míu
 ? 't' : ':');

560 
	`ôem_£t_d©a
(
míu
);

563 
	`ôem_add_°r
("%*c%s", 
ödít
 + 1, ' ', 
	`_
(
	`míu_gë_¥om±
(
míu
)));

564 i‡(
vÆ
 =
yes
) {

565 i‡(
def_míu
) {

566 
	`ôem_add_°r
(" (%s)", 
	`_
(
	`míu_gë_¥om±
(
def_míu
)));

567 
	`ôem_add_°r
(" --->");

568 i‡(
def_míu
->
li°
) {

569 
ödít
 += 2;

570 
	`buûd_c⁄f
(
def_míu
);

571 
ödít
 -= 2;

577 i‡(
míu
 =
cuºít_míu
) {

578 
	`ôem_make
("---%*c%s", 
ödít
 + 1, ' ', 
	`_
(
	`míu_gë_¥om±
(
míu
)));

579 
	`ôem_£t_èg
(':');

580 
	`ôem_£t_d©a
(
míu
);

581 
c⁄f_chûds
;

583 
chûd_cou¡
++;

584 
vÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

585 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& 
vÆ
 =
yes
) {

586 
	`ôem_make
(" ");

587 
	`ôem_£t_èg
(':');

588 
	`ôem_£t_d©a
(
míu
);

590 
ty≥
) {

591 
S_BOOLEAN
:

592 i‡(
	`sym_is_ch™gabÀ
(
sym
))

593 
	`ôem_make
("[%c]", 
vÆ
 =
no
 ? ' ' : '*');

595 
	`ôem_make
("-%c-", 
vÆ
 =
no
 ? ' ' : '*');

596 
	`ôem_£t_èg
('t');

597 
	`ôem_£t_d©a
(
míu
);

599 
S_TRISTATE
:

600 
vÆ
) {

601 
yes
: 
ch
 = '*'; ;

602 
mod
: 
ch
 = 'M'; ;

603 : 
ch
 = ' '; ;

605 i‡(
	`sym_is_ch™gabÀ
(
sym
)) {

606 i‡(
sym
->
ªv_dï
.
åi
 =
mod
)

607 
	`ôem_make
("{%c}", 
ch
);

609 
	`ôem_make
("<%c>", 
ch
);

611 
	`ôem_make
("-%c-", 
ch
);

612 
	`ôem_£t_èg
('t');

613 
	`ôem_£t_d©a
(
míu
);

616 
tmp
 = 2 + 
	`°æí
(
	`sym_gë_°rög_vÆue
(
sym
));

617 
	`ôem_make
("(%s)", 
	`sym_gë_°rög_vÆue
(
sym
));

618 
tmp
 = 
ödít
 -Åmp + 4;

619 i‡(
tmp
 < 0)

620 
tmp
 = 0;

621 
	`ôem_add_°r
("%*c%s%s", 
tmp
, ' ', 
	`_
(
	`míu_gë_¥om±
(
míu
)),

622 (
	`sym_has_vÆue
(
sym
Ë|| !
	`sym_is_ch™gabÀ
(sym)) ?

623 "" : 
	`_
(" (NEW)"));

624 
	`ôem_£t_èg
('s');

625 
	`ôem_£t_d©a
(
míu
);

626 
c⁄f_chûds
;

629 
	`ôem_add_°r
("%*c%s%s", 
ödít
 + 1, ' ', 
	`_
(
	`míu_gë_¥om±
(
míu
)),

630 (
	`sym_has_vÆue
(
sym
Ë|| !
	`sym_is_ch™gabÀ
(sym)) ?

631 "" : 
	`_
(" (NEW)"));

632 i‡(
míu
->
¥om±
->
ty≥
 =
P_MENU
) {

633 
	`ôem_add_°r
(" %s", 
	`míu_is_em±y
(
míu
) ? "----" : "--->");

638 
c⁄f_chûds
:

639 
ödít
 +
doöt
;

640 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
)

641 
	`buûd_c⁄f
(
chûd
);

642 
ödít
 -
doöt
;

643 
	}
}

645 
	$c⁄f
(
míu
 *míu, míu *
a˘ive_míu
)

647 
míu
 *
submíu
;

648 c⁄° *
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

649 
subtôÀ_∑π
 
°∑π
;

650 
symbﬁ
 *
sym
;

651 
ªs
;

652 
s_s¸ﬁl
 = 0;

654 i‡(
míu
 !&
roŸmíu
)

655 
°∑π
.
ãxt
 = 
	`míu_gë_¥om±
(
míu
);

657 
°∑π
.
ãxt
 = 
NULL
;

658 
	`li°_add_èû
(&
°∑π
.
íåõs
, &
åaû
);

661 
	`ôem_ª£t
();

662 
cuºít_míu
 = 
míu
;

663 
	`buûd_c⁄f
(
míu
);

664 i‡(!
chûd_cou¡
)

666 
	`£t_subtôÀ
();

667 
	`dülog_˛ór
();

668 
ªs
 = 
	`dülog_míu
(
¥om±
 ? 
	`_
(prompt) : _("Main Menu"),

669 
	`_
(
míu_ö°ru˘i⁄s
),

670 
a˘ive_míu
, &
s_s¸ﬁl
);

671 i‡(
ªs
 =1 ||Ñe†=
KEY_ESC
 ||Ñe†=-
ERRDISPLAYTOOSMALL
)

673 i‡(
	`ôem_cou¡
() != 0) {

674 i‡(!
	`ôem_a˘iv©e_£À˘ed
())

676 i‡(!
	`ôem_èg
())

679 
submíu
 = 
	`ôem_d©a
();

680 
a˘ive_míu
 = 
	`ôem_d©a
();

681 i‡(
submíu
)

682 
sym
 = 
submíu
->sym;

684 
sym
 = 
NULL
;

686 
ªs
) {

688 
	`ôem_èg
()) {

690 i‡(
sögÀ_míu_mode
)

691 
submíu
->
d©a
 = (*) () !submenu->data;

693 
	`c⁄f
(
submíu
, 
NULL
);

696 i‡(
	`sym_is_choi˚
(
sym
Ë&& 
	`sym_gë_åi°©e_vÆue
(symË=
yes
)

697 
	`c⁄f_choi˚
(
submíu
);

698 i‡(
submíu
->
¥om±
->
ty≥
 =
P_MENU
)

699 
	`c⁄f
(
submíu
, 
NULL
);

702 
	`c⁄f_°rög
(
submíu
);

707 i‡(
sym
)

708 
	`show_hñp
(
submíu
);

710 
	`ª£t_subtôÀ
();

711 
	`show_hñ±ext
(
	`_
("README"), _(
mc⁄f_ªadme
));

715 
	`ª£t_subtôÀ
();

716 
	`c⁄f_ßve
();

719 
	`ª£t_subtôÀ
();

720 
	`c⁄f_lﬂd
();

723 i‡(
	`ôem_is_èg
('t')) {

724 i‡(
	`sym_£t_åi°©e_vÆue
(
sym
, 
yes
))

726 i‡(
	`sym_£t_åi°©e_vÆue
(
sym
, 
mod
))

727 
	`show_ãxtbox
(
NULL
, 
£tmod_ãxt
, 6, 74);

731 i‡(
	`ôem_is_èg
('t'))

732 
	`sym_£t_åi°©e_vÆue
(
sym
, 
no
);

735 i‡(
	`ôem_is_èg
('t'))

736 
	`sym_£t_åi°©e_vÆue
(
sym
, 
mod
);

739 i‡(
	`ôem_is_èg
('t'))

740 
	`sym_toggÀ_åi°©e_vÆue
(
sym
);

741 i‡(
	`ôem_is_èg
('m'))

742 
	`c⁄f
(
submíu
, 
NULL
);

745 
	`£¨ch_c⁄f
();

748 
show_Æl_›ti⁄s
 = !show_all_options;

753 
	`li°_dñ
(
åaû
.
¥ev
);

754 
	}
}

756 
	$show_ãxtbox_ext
(c⁄° *
tôÀ
, *
ãxt
, 
r
, 
c
, 

757 *
keys
, *
vs¸ﬁl
, *
hs¸ﬁl
, 
upd©e_ãxt_‚


758 
upd©e_ãxt
, *
d©a
)

760 
	`dülog_˛ór
();

761  
	`dülog_ãxtbox
(
tôÀ
, 
ãxt
, 
r
, 
c
, 
keys
, 
vs¸ﬁl
, 
hs¸ﬁl
,

762 
upd©e_ãxt
, 
d©a
);

763 
	}
}

765 
	$show_ãxtbox
(c⁄° *
tôÀ
, c⁄° *
ãxt
, 
r
, 
c
)

767 
	`show_ãxtbox_ext
(
tôÀ
, (*Ë
ãxt
, 
r
, 
c
, ([]Ë{0}, 
NULL
, NULL,

768 
NULL
, NULL);

769 
	}
}

771 
	$show_hñ±ext
(c⁄° *
tôÀ
, c⁄° *
ãxt
)

773 
	`show_ãxtbox
(
tôÀ
, 
ãxt
, 0, 0);

774 
	}
}

776 
	$c⁄f_mesßge_ˇŒback
(c⁄° *
fmt
, 
va_li°
 
≠
)

778 
buf
[
PATH_MAX
+1];

780 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

781 i‡(
ßve_™d_exô
) {

782 i‡(!
sûít
)

783 
	`¥ötf
("%s", 
buf
);

785 
	`show_ãxtbox
(
NULL
, 
buf
, 6, 60);

787 
	}
}

789 
	$show_hñp
(
míu
 *menu)

791 
g°r
 
hñp
 = 
	`°r_√w
();

793 
hñp
.
max_width
 = 
	`gëmaxx
(
°ds¸
) - 10;

794 
	`míu_gë_ext_hñp
(
míu
, &
hñp
);

796 
	`show_hñ±ext
(
	`_
(
	`míu_gë_¥om±
(
míu
)), 
	`°r_gë
(&
hñp
));

797 
	`°r_‰ì
(&
hñp
);

798 
	}
}

800 
	$c⁄f_choi˚
(
míu
 *menu)

802 c⁄° *
¥om±
 = 
	`_
(
	`míu_gë_¥om±
(
míu
));

803 
míu
 *
chûd
;

804 
symbﬁ
 *
a˘ive
;

806 
a˘ive
 = 
	`sym_gë_choi˚_vÆue
(
míu
->
sym
);

808 
ªs
;

809 
£À˘ed
;

810 
	`ôem_ª£t
();

812 
cuºít_míu
 = 
míu
;

813 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

814 i‡(!
	`míu_is_visibÀ
(
chûd
))

816 i‡(
chûd
->
sym
)

817 
	`ôem_make
("%s", 
	`_
(
	`míu_gë_¥om±
(
chûd
)));

819 
	`ôem_make
("*** %†***", 
	`_
(
	`míu_gë_¥om±
(
chûd
)));

820 
	`ôem_£t_èg
(':');

822 
	`ôem_£t_d©a
(
chûd
);

823 i‡(
chûd
->
sym
 =
a˘ive
)

824 
	`ôem_£t_£À˘ed
(1);

825 i‡(
chûd
->
sym
 =
	`sym_gë_choi˚_vÆue
(
míu
->sym))

826 
	`ôem_£t_èg
('X');

828 
	`dülog_˛ór
();

829 
ªs
 = 
	`dülog_checkli°
(
¥om±
 ? 
	`_
(prompt) : _("Main Menu"),

830 
	`_
(
ødiﬁi°_ö°ru˘i⁄s
),

831 
MENUBOX_HEIGTH_MIN
,

832 
MENUBOX_WIDTH_MIN
,

833 
CHECKLIST_HEIGTH_MIN
);

834 
£À˘ed
 = 
	`ôem_a˘iv©e_£À˘ed
();

835 
ªs
) {

837 i‡(
£À˘ed
) {

838 
chûd
 = 
	`ôem_d©a
();

839 i‡(!
chûd
->
sym
)

842 
	`sym_£t_åi°©e_vÆue
(
chûd
->
sym
, 
yes
);

846 i‡(
£À˘ed
) {

847 
chûd
 = 
	`ôem_d©a
();

848 
	`show_hñp
(
chûd
);

849 
a˘ive
 = 
chûd
->
sym
;

851 
	`show_hñp
(
míu
);

853 
KEY_ESC
:

855 -
ERRDISPLAYTOOSMALL
:

859 
	}
}

861 
	$c⁄f_°rög
(
míu
 *menu)

863 c⁄° *
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

866 
ªs
;

867 c⁄° *
hódög
;

869 
	`sym_gë_ty≥
(
míu
->
sym
)) {

870 
S_INT
:

871 
hódög
 = 
	`_
(
öputbox_ö°ru˘i⁄s_öt
);

873 
S_HEX
:

874 
hódög
 = 
	`_
(
öputbox_ö°ru˘i⁄s_hex
);

876 
S_STRING
:

877 
hódög
 = 
	`_
(
öputbox_ö°ru˘i⁄s_°rög
);

880 
hódög
 = 
	`_
("Internal mconfÉrror!");

882 
	`dülog_˛ór
();

883 
ªs
 = 
	`dülog_öputbox
(
¥om±
 ? 
	`_
(prompt) : _("Main Menu"),

884 
hódög
, 10, 75,

885 
	`sym_gë_°rög_vÆue
(
míu
->
sym
));

886 
ªs
) {

888 i‡(
	`sym_£t_°rög_vÆue
(
míu
->
sym
, 
dülog_öput_ªsu…
))

890 
	`show_ãxtbox
(
NULL
, 
	`_
("You have madeán invalidÉntry."), 5, 43);

893 
	`show_hñp
(
míu
);

895 
KEY_ESC
:

899 
	}
}

901 
	$c⁄f_lﬂd
()

905 
ªs
;

906 
	`dülog_˛ór
();

907 
ªs
 = 
	`dülog_öputbox
(
NULL
, 
lﬂd_c⁄fig_ãxt
,

908 11, 55, 
fûíame
);

909 
ªs
) {

911 i‡(!
dülog_öput_ªsu…
[0])

913 i‡(!
	`c⁄f_ªad
(
dülog_öput_ªsu…
)) {

914 
	`£t_c⁄fig_fûíame
(
dülog_öput_ªsu…
);

915 
	`sym_£t_ch™ge_cou¡
(1);

918 
	`show_ãxtbox
(
NULL
, 
	`_
("File doesÇotÉxist!"), 5, 38);

921 
	`show_hñ±ext
(
	`_
("Lﬂd A…î«ã C⁄figuøti⁄"), 
lﬂd_c⁄fig_hñp
);

923 
KEY_ESC
:

927 
	}
}

929 
	$c⁄f_ßve
()

932 
ªs
;

933 
	`dülog_˛ór
();

934 
ªs
 = 
	`dülog_öputbox
(
NULL
, 
ßve_c⁄fig_ãxt
,

935 11, 55, 
fûíame
);

936 
ªs
) {

938 i‡(!
dülog_öput_ªsu…
[0])

940 i‡(!
	`c⁄f_wrôe
(
dülog_öput_ªsu…
)) {

941 
	`£t_c⁄fig_fûíame
(
dülog_öput_ªsu…
);

944 
	`show_ãxtbox
(
NULL
, 
	`_
("Can't create file! ProbablyáÇonexistent directory."), 5, 60);

947 
	`show_hñ±ext
(
	`_
("SavêA…î«ã C⁄figuøti⁄"), 
ßve_c⁄fig_hñp
);

949 
KEY_ESC
:

953 
	}
}

955 
	$h™dÀ_exô
()

957 
ªs
;

959 
ßve_™d_exô
 = 1;

960 
	`ª£t_subtôÀ
();

961 
	`dülog_˛ór
();

962 i‡(
	`c⁄f_gë_ch™ged
())

963 
ªs
 = 
	`dülog_ye¢o
(
NULL
,

964 
	`_
("Do you wishÅo save yourÇew configuration?\n"

968 
ªs
 = -1;

970 
	`íd_dülog
(
ßved_x
, 
ßved_y
);

972 
ªs
) {

974 i‡(
	`c⁄f_wrôe
(
fûíame
)) {

975 
	`Ârötf
(
°dîr
, 
	`_
("\n\n"

983 i‡(!
sûít
)

984 
	`¥ötf
(
	`_
("\n\n"

988 
ªs
 = 0;

991 i‡(!
sûít
)

992 
	`Ârötf
(
°dîr
, 
	`_
("\n\n"

995 i‡(
ªs
 !
KEY_ESC
)

996 
ªs
 = 0;

999  
ªs
;

1000 
	}
}

1002 
	$sig_h™dÀr
(
signo
)

1004 
	`exô
(
	`h™dÀ_exô
());

1005 
	}
}

1007 
	$maö
(
ac
, **
av
)

1009 *
mode
;

1010 
ªs
;

1012 
	`£éoˇÀ
(
LC_ALL
, "");

1013 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

1014 
	`ãxtdomaö
(
PACKAGE
);

1016 
	`sig«l
(
SIGINT
, 
sig_h™dÀr
);

1018 i‡(
ac
 > 1 && 
	`°rcmp
(
av
[1], "-s") == 0) {

1019 
sûít
 = 1;

1021 
	`c⁄f_£t_mesßge_ˇŒback
(
NULL
);

1022 
av
++;

1024 
	`c⁄f_∑r£
(
av
[1]);

1025 
	`c⁄f_ªad
(
NULL
);

1027 
mode
 = 
	`gëív
("MENUCONFIG_MODE");

1028 i‡(
mode
) {

1029 i‡(!
	`°rˇ£cmp
(
mode
, "single_menu"))

1030 
sögÀ_míu_mode
 = 1;

1033 i‡(
	`öô_dülog
(
NULL
)) {

1034 
	`Ârötf
(
°dîr
, 
	`N_
("Your display isÅoo smallÅoÑun Menuconfig!\n"));

1035 
	`Ârötf
(
°dîr
, 
	`N_
("It must beátÜeast 19Üines by 80 columns.\n"));

1039 
	`£t_c⁄fig_fûíame
(
	`c⁄f_gë_c⁄fig«me
());

1040 
	`c⁄f_£t_mesßge_ˇŒback
(
c⁄f_mesßge_ˇŒback
);

1042 
	`c⁄f
(&
roŸmíu
, 
NULL
);

1043 
ªs
 = 
	`h™dÀ_exô
();

1044 } 
ªs
 =
KEY_ESC
);

1046  
ªs
;

1047 
	}
}

	@swupdate/scripts/kconfig/menu.c

6 
	~<˘y≥.h
>

7 
	~<°d¨g.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

11 
	~"lkc.h
"

13 c⁄° 
	gnohñp_ãxt
[] = "There isÇo helpávailable forÅhis option.";

15 
míu
 
	groŸmíu
;

16 
míu
 **
	gœ°_íåy_±r
;

18 
fûe
 *
	gfûe_li°
;

19 
fûe
 *
	gcuºít_fûe
;

21 
	$míu_w¨n
(
míu
 *míu, c⁄° *
fmt
, ...)

23 
va_li°
 
≠
;

24 
	`va_°¨t
(
≠
, 
fmt
);

25 
	`Ârötf
(
°dîr
, "%s:%d:w¨nög: ", 
míu
->
fûe
->
«me
, míu->
löío
);

26 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

27 
	`Ârötf
(
°dîr
, "\n");

28 
	`va_íd
(
≠
);

29 
	}
}

31 
	$¥›_w¨n
(
¥›îty
 *
¥›
, c⁄° *
fmt
, ...)

33 
va_li°
 
≠
;

34 
	`va_°¨t
(
≠
, 
fmt
);

35 
	`Ârötf
(
°dîr
, "%s:%d:w¨nög: ", 
¥›
->
fûe
->
«me
,Ör›->
löío
);

36 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

37 
	`Ârötf
(
°dîr
, "\n");

38 
	`va_íd
(
≠
);

39 
	}
}

41 
	$_míu_öô
()

43 
cuºít_íåy
 = 
cuºít_míu
 = &
roŸmíu
;

44 
œ°_íåy_±r
 = &
roŸmíu
.
li°
;

45 
	}
}

47 
	$míu_add_íåy
(
symbﬁ
 *
sym
)

49 
míu
 *menu;

51 
míu
 = 
	`xmÆloc
((*menu));

52 
	`mem£t
(
míu
, 0, (*menu));

53 
míu
->
sym
 = sym;

54 
míu
->
∑ª¡
 = 
cuºít_míu
;

55 
míu
->
fûe
 = 
cuºít_fûe
;

56 
míu
->
löío
 = 
	`zc⁄f_löío
();

58 *
œ°_íåy_±r
 = 
míu
;

59 
œ°_íåy_±r
 = &
míu
->
√xt
;

60 
cuºít_íåy
 = 
míu
;

61 i‡(
sym
)

62 
	`míu_add_symbﬁ
(
P_SYMBOL
, 
sym
, 
NULL
);

63 
	}
}

65 
	$míu_íd_íåy
()

67 
	}
}

69 
míu
 *
	$míu_add_míu
()

71 
	`míu_íd_íåy
();

72 
œ°_íåy_±r
 = &
cuºít_íåy
->
li°
;

73  
cuºít_míu
 = 
cuºít_íåy
;

74 
	}
}

76 
	$míu_íd_míu
()

78 
œ°_íåy_±r
 = &
cuºít_míu
->
√xt
;

79 
cuºít_míu
 = cuºít_míu->
∑ª¡
;

80 
	}
}

82 
ex¥
 *
	$míu_check_dï
(
ex¥
 *
e
)

84 i‡(!
e
)

85  
e
;

87 
e
->
ty≥
) {

88 
E_NOT
:

89 
e
->
À·
.
ex¥
 = 
	`míu_check_dï
(e->left.expr);

91 
E_OR
:

92 
E_AND
:

93 
e
->
À·
.
ex¥
 = 
	`míu_check_dï
(e->left.expr);

94 
e
->
right
.
ex¥
 = 
	`míu_check_dï
(e->right.expr);

96 
E_SYMBOL
:

98 i‡(
e
->
À·
.
sym
 =&
symbﬁ_mod
)

99  
	`ex¥_Æloc_™d
(
e
, 
	`ex¥_Æloc_symbﬁ
(
moduÀs_sym
));

104  
e
;

105 
	}
}

107 
	$míu_add_dï
(
ex¥
 *
dï
)

109 
cuºít_íåy
->
dï
 = 
	`ex¥_Æloc_™d
(cuºít_íåy->dï, 
	`míu_check_dï
(dep));

110 
	}
}

112 
	$míu_£t_ty≥
(
ty≥
)

114 
symbﬁ
 *
sym
 = 
cuºít_íåy
->sym;

116 i‡(
sym
->
ty≥
 ==Åype)

118 i‡(
sym
->
ty≥
 =
S_UNKNOWN
) {

119 
sym
->
ty≥
 =Åype;

122 
	`míu_w¨n
(
cuºít_íåy
,

124 
sym
->
«me
 ? sym->name : "<choice>",

125 
	`sym_ty≥_«me
(
sym
->
ty≥
), sym_type_name(type));

126 
	}
}

128 
¥›îty
 *
	$míu_add_¥›
(
¥›_ty≥
 
ty≥
, *
¥om±
, 
ex¥
 *ex¥, ex¥ *
dï
)

130 
¥›îty
 *
¥›
 = 
	`¥›_Æloc
(
ty≥
, 
cuºít_íåy
->
sym
);

132 
¥›
->
míu
 = 
cuºít_íåy
;

133 
¥›
->
ex¥
 =Éxpr;

134 
¥›
->
visibÀ
.
ex¥
 = 
	`míu_check_dï
(
dï
);

136 i‡(
¥om±
) {

137 i‡(
	`is•a˚
(*
¥om±
)) {

138 
	`¥›_w¨n
(
¥›
, "leading whitespace ignored");

139 
	`is•a˚
(*
¥om±
))

140 
¥om±
++;

142 i‡(
cuºít_íåy
->
¥om±
 && cuºít_íåy !&
roŸmíu
)

143 
	`¥›_w¨n
(
¥›
, "promptÑedefined");

146 if(
ty≥
 =
P_PROMPT
) {

147 
míu
 *míu = 
cuºít_íåy
;

149 (
míu
 = míu->
∑ª¡
Ë!
NULL
) {

150 
ex¥
 *
dup_ex¥
;

152 i‡(!
míu
->
visibûôy
)

163 
dup_ex¥
 = 
	`ex¥_c›y
(
míu
->
visibûôy
);

165 
¥›
->
visibÀ
.
ex¥


166 
	`ex¥_Æloc_™d
(
¥›
->
visibÀ
.
ex¥
,

167 
dup_ex¥
);

171 
cuºít_íåy
->
¥om±
 = 
¥›
;

173 
¥›
->
ãxt
 = 
¥om±
;

175  
¥›
;

176 
	}
}

178 
¥›îty
 *
	$míu_add_¥om±
(
¥›_ty≥
 
ty≥
, *
¥om±
, 
ex¥
 *
dï
)

180  
	`míu_add_¥›
(
ty≥
, 
¥om±
, 
NULL
, 
dï
);

181 
	}
}

183 
	$míu_add_visibûôy
(
ex¥
 *expr)

185 
cuºít_íåy
->
visibûôy
 = 
	`ex¥_Æloc_™d
(current_entry->visibility,

186 
ex¥
);

187 
	}
}

189 
	$míu_add_ex¥
(
¥›_ty≥
 
ty≥
, 
ex¥
 *ex¥, ex¥ *
dï
)

191 
	`míu_add_¥›
(
ty≥
, 
NULL
, 
ex¥
, 
dï
);

192 
	}
}

194 
	$míu_add_symbﬁ
(
¥›_ty≥
 
ty≥
, 
symbﬁ
 *
sym
, 
ex¥
 *
dï
)

196 
	`míu_add_¥›
(
ty≥
, 
NULL
, 
	`ex¥_Æloc_symbﬁ
(
sym
), 
dï
);

197 
	}
}

199 
	$míu_add_›ti⁄
(
tokí
, *
¨g
)

201 
tokí
) {

202 
T_OPT_MODULES
:

203 i‡(
moduÀs_sym
)

204 
	`zc⁄f_îr‹
("symbol '%s'Ñedefines option 'modules'"

206 
cuºít_íåy
->
sym
->
«me
,

207 
moduÀs_sym
->
«me


209 
moduÀs_sym
 = 
cuºít_íåy
->
sym
;

211 
T_OPT_DEFCONFIG_LIST
:

212 i‡(!
sym_defc⁄fig_li°
)

213 
sym_defc⁄fig_li°
 = 
cuºít_íåy
->
sym
;

214 i‡(
sym_defc⁄fig_li°
 !
cuºít_íåy
->
sym
)

215 
	`zc⁄f_îr‹
("tryingÅoÑedefine defconfig symbol");

217 
T_OPT_ENV
:

218 
	`¥›_add_ív
(
¨g
);

220 
T_OPT_ALLNOCONFIG_Y
:

221 
cuºít_íåy
->
sym
->
Êags
 |
SYMBOL_ALLNOCONFIG_Y
;

224 
	}
}

226 
	$míu_vÆid©e_numbî
(
symbﬁ
 *
sym
, symbﬁ *
sym2
)

228  
sym2
->
ty≥
 =
S_INT
 || sym2->ty≥ =
S_HEX
 ||

229 (
sym2
->
ty≥
 =
S_UNKNOWN
 && 
	`sym_°rög_vÆid
(
sym
, sym2->
«me
));

230 
	}
}

232 
	$sym_check_¥›
(
symbﬁ
 *
sym
)

234 
¥›îty
 *
¥›
;

235 
symbﬁ
 *
sym2
;

236 
¥›
 = 
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

237 
¥›
->
ty≥
) {

238 
P_DEFAULT
:

239 i‡((
sym
->
ty≥
 =
S_STRING
 || sym->ty≥ =
S_INT
 || sym->ty≥ =
S_HEX
) &&

240 
¥›
->
ex¥
->
ty≥
 !
E_SYMBOL
)

241 
	`¥›_w¨n
(
¥›
,

243 " mu° bê®sögÀ symbﬁ", 
sym
->
«me
);

244 i‡(
¥›
->
ex¥
->
ty≥
 !
E_SYMBOL
)

246 
sym2
 = 
	`¥›_gë_symbﬁ
(
¥›
);

247 i‡(
sym
->
ty≥
 =
S_HEX
 || sym->ty≥ =
S_INT
) {

248 i‡(!
	`míu_vÆid©e_numbî
(
sym
, 
sym2
))

249 
	`¥›_w¨n
(
¥›
,

251 
sym
->
«me
);

254 
P_SELECT
:

255 
sym2
 = 
	`¥›_gë_symbﬁ
(
¥›
);

256 i‡(
sym
->
ty≥
 !
S_BOOLEAN
 && sym->ty≥ !
S_TRISTATE
)

257 
	`¥›_w¨n
(
¥›
,

259 "nŸ boﬁó¿‹Åri°©e", 
sym
->
«me
);

260 i‡(
sym2
->
ty≥
 !
S_UNKNOWN
 &&

261 
sym2
->
ty≥
 !
S_BOOLEAN
 &&

262 
sym2
->
ty≥
 !
S_TRISTATE
)

263 
	`¥›_w¨n
(
¥›
,

266 "åi°©êty≥", 
sym2
->
«me
);

268 
P_RANGE
:

269 i‡(
sym
->
ty≥
 !
S_INT
 && sym->ty≥ !
S_HEX
)

270 
	`¥›_w¨n
(
¥›
, "range is onlyállowed "

272 i‡(!
	`míu_vÆid©e_numbî
(
sym
, 
¥›
->
ex¥
->
À·
.sym) ||

273 !
	`míu_vÆid©e_numbî
(
sym
, 
¥›
->
ex¥
->
right
.sym))

274 
	`¥›_w¨n
(
¥›
, "range is invalid");

280 
	}
}

282 
	$míu_föÆize
(
míu
 *
∑ª¡
)

284 
míu
 *míu, *
œ°_míu
;

285 
symbﬁ
 *
sym
;

286 
¥›îty
 *
¥›
;

287 
ex¥
 *
∑ª¡dï
, *
ba£dï
, *
dï
, *
dï2
, **
ï
;

289 
sym
 = 
∑ª¡
->sym;

290 i‡(
∑ª¡
->
li°
) {

291 i‡(
sym
 && 
	`sym_is_choi˚
(sym)) {

292 i‡(
sym
->
ty≥
 =
S_UNKNOWN
) {

294 
cuºít_íåy
 = 
∑ª¡
;

295 
míu
 = 
∑ª¡
->
li°
; míu; míu = míu->
√xt
) {

296 i‡(
míu
->
sym
 && míu->sym->
ty≥
 !
S_UNKNOWN
) {

297 
	`míu_£t_ty≥
(
míu
->
sym
->
ty≥
);

303 
míu
 = 
∑ª¡
->
li°
; míu; míu = míu->
√xt
) {

304 
cuºít_íåy
 = 
míu
;

305 i‡(
míu
->
sym
 && míu->sym->
ty≥
 =
S_UNKNOWN
)

306 
	`míu_£t_ty≥
(
sym
->
ty≥
);

308 
∑ª¡dï
 = 
	`ex¥_Æloc_symbﬁ
(
sym
);

309 } i‡(
∑ª¡
->
¥om±
)

310 
∑ª¡dï
 = 
∑ª¡
->
¥om±
->
visibÀ
.
ex¥
;

312 
∑ª¡dï
 = 
∑ª¡
->
dï
;

314 
míu
 = 
∑ª¡
->
li°
; míu; míu = míu->
√xt
) {

315 
ba£dï
 = 
	`ex¥_å™sf‹m
(
míu
->
dï
);

316 
ba£dï
 = 
	`ex¥_Æloc_™d
(
	`ex¥_c›y
(
∑ª¡dï
), basedep);

317 
ba£dï
 = 
	`ex¥_ñimö©e_dups
(basedep);

318 
míu
->
dï
 = 
ba£dï
;

319 i‡(
míu
->
sym
)

320 
¥›
 = 
míu
->
sym
->prop;

322 
¥›
 = 
míu
->
¥om±
;

323 ; 
¥›
;Ör› =Ör›->
√xt
) {

324 i‡(
¥›
->
míu
 != menu)

326 
dï
 = 
	`ex¥_å™sf‹m
(
¥›
->
visibÀ
.
ex¥
);

327 
dï
 = 
	`ex¥_Æloc_™d
(
	`ex¥_c›y
(
ba£dï
), dep);

328 
dï
 = 
	`ex¥_ñimö©e_dups
(dep);

329 i‡(
míu
->
sym
 && míu->sym->
ty≥
 !
S_TRISTATE
)

330 
dï
 = 
	`ex¥_å™s_boﬁ
(dep);

331 
¥›
->
visibÀ
.
ex¥
 = 
dï
;

332 i‡(
¥›
->
ty≥
 =
P_SELECT
) {

333 
symbﬁ
 *
es
 = 
	`¥›_gë_symbﬁ
(
¥›
);

334 
es
->
ªv_dï
.
ex¥
 = 
	`ex¥_Æloc_‹
(es->rev_dep.expr,

335 
	`ex¥_Æloc_™d
(
	`ex¥_Æloc_symbﬁ
(
míu
->
sym
), 
	`ex¥_c›y
(
dï
)));

339 
míu
 = 
∑ª¡
->
li°
; míu; míu = míu->
√xt
)

340 
	`míu_föÆize
(
míu
);

341 } i‡(
sym
) {

342 
ba£dï
 = 
∑ª¡
->
¥om±
 ?Ö¨ít->¥om±->
visibÀ
.
ex¥
 : 
NULL
;

343 
ba£dï
 = 
	`ex¥_å™s_com∑ª
(ba£dï, 
E_UNEQUAL
, &
symbﬁ_no
);

344 
ba£dï
 = 
	`ex¥_ñimö©e_dups
(
	`ex¥_å™sf‹m
(basedep));

345 
œ°_míu
 = 
NULL
;

346 
míu
 = 
∑ª¡
->
√xt
; menu; menu = menu->next) {

347 
dï
 = 
míu
->
¥om±
 ? míu->¥om±->
visibÀ
.
ex¥
 : menu->dep;

348 i‡(!
	`ex¥_c⁄èös_symbﬁ
(
dï
, 
sym
))

350 i‡(
	`ex¥_dïíds_symbﬁ
(
dï
, 
sym
))

351 
√xt
;

352 
dï
 = 
	`ex¥_å™s_com∑ª
(dï, 
E_UNEQUAL
, &
symbﬁ_no
);

353 
dï
 = 
	`ex¥_ñimö©e_dups
(
	`ex¥_å™sf‹m
(dep));

354 
dï2
 = 
	`ex¥_c›y
(
ba£dï
);

355 
	`ex¥_ñimö©e_eq
(&
dï
, &
dï2
);

356 
	`ex¥_‰ì
(
dï
);

357 i‡(!
	`ex¥_is_yes
(
dï2
)) {

358 
	`ex¥_‰ì
(
dï2
);

361 
	`ex¥_‰ì
(
dï2
);

362 
√xt
:

363 
	`míu_föÆize
(
míu
);

364 
míu
->
∑ª¡
 =Öarent;

365 
œ°_míu
 = 
míu
;

367 i‡(
œ°_míu
) {

368 
∑ª¡
->
li°
 =Ö¨ít->
√xt
;

369 
∑ª¡
->
√xt
 = 
œ°_míu
->next;

370 
œ°_míu
->
√xt
 = 
NULL
;

373 
sym
->
dú_dï
.
ex¥
 = 
	`ex¥_Æloc_‹
(sym->dú_dï.ex¥, 
∑ª¡
->
dï
);

375 
míu
 = 
∑ª¡
->
li°
; míu; míu = míu->
√xt
) {

376 i‡(
sym
 && 
	`sym_is_choi˚
(sym) &&

377 
míu
->
sym
 && !
	`sym_is_choi˚_vÆue
(menu->sym)) {

378 
cuºít_íåy
 = 
míu
;

379 
míu
->
sym
->
Êags
 |
SYMBOL_CHOICEVAL
;

380 i‡(!
míu
->
¥om±
)

381 
	`míu_w¨n
(
míu
, "choice value must haveáÖrompt");

382 
¥›
 = 
míu
->
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

383 i‡(
¥›
->
ty≥
 =
P_DEFAULT
)

384 
	`¥›_w¨n
(
¥›
, "defaults for choice "

386 i‡(
¥›
->
míu
 == menu)

388 i‡(
¥›
->
ty≥
 =
P_PROMPT
 &&

389 
¥›
->
míu
->
∑ª¡
->
sym
 != sym)

390 
	`¥›_w¨n
(
¥›
, "choice value used outside its choice group");

398 i‡(
sym
->
ty≥
 =
S_TRISTATE
 && 
míu
->sym->type != S_TRISTATE) {

399 
ba£dï
 = 
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym
, &
symbﬁ_yes
);

400 
míu
->
dï
 = 
	`ex¥_Æloc_™d
(
ba£dï
, menu->dep);

401 
¥›
 = 
míu
->
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

402 i‡(
¥›
->
míu
 != menu)

404 
¥›
->
visibÀ
.
ex¥
 = 
	`ex¥_Æloc_™d
(
	`ex¥_c›y
(
ba£dï
),

405 
¥›
->
visibÀ
.
ex¥
);

408 
	`míu_add_symbﬁ
(
P_CHOICE
, 
sym
, 
NULL
);

409 
¥›
 = 
	`sym_gë_choi˚_¥›
(
sym
);

410 
ï
 = &
¥›
->
ex¥
; *ï;É∞&(*ï)->
À·
.expr)

412 *
ï
 = 
	`ex¥_Æloc_⁄e
(
E_LIST
, 
NULL
);

413 (*
ï
)->
right
.
sym
 = 
míu
->sym;

415 i‡(
míu
->
li°
 && (!míu->
¥om±
 || !míu->¥om±->
ãxt
)) {

416 
œ°_míu
 = 
míu
->
li°
; ;Üa°_míu =Üa°_míu->
√xt
) {

417 
œ°_míu
->
∑ª¡
 =Öarent;

418 i‡(!
œ°_míu
->
√xt
)

421 
œ°_míu
->
√xt
 = 
míu
->next;

422 
míu
->
√xt
 = míu->
li°
;

423 
míu
->
li°
 = 
NULL
;

427 i‡(
sym
 && !(sym->
Êags
 & 
SYMBOL_WARNED
)) {

428 i‡(
sym
->
ty≥
 =
S_UNKNOWN
)

429 
	`míu_w¨n
(
∑ª¡
, "config symbol defined withoutÅype");

431 i‡(
	`sym_is_choi˚
(
sym
Ë&& !
∑ª¡
->
¥om±
)

432 
	`míu_w¨n
(
∑ª¡
, "choice must haveáÖrompt");

435 
	`sym_check_¥›
(
sym
);

436 
sym
->
Êags
 |
SYMBOL_WARNED
;

439 i‡(
sym
 && !
	`sym_is_›ti⁄Æ
(symË&& 
∑ª¡
->
¥om±
) {

440 
sym
->
ªv_dï
.
ex¥
 = 
	`ex¥_Æloc_‹
(sym->rev_dep.expr,

441 
	`ex¥_Æloc_™d
(
∑ª¡
->
¥om±
->
visibÀ
.
ex¥
,

442 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_mod
)));

444 
	}
}

446 
boﬁ
 
	$míu_has_¥om±
(
míu
 *menu)

448 i‡(!
míu
->
¥om±
)

449  
Ál£
;

450  
åue
;

451 
	}
}

458 
boﬁ
 
	$míu_is_em±y
(
míu
 *menu)

460 
míu
 *
chûd
;

462 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

463 i‡(
	`míu_is_visibÀ
(
chûd
))

464 (
Ál£
);

466 (
åue
);

467 
	}
}

469 
boﬁ
 
	$míu_is_visibÀ
(
míu
 *menu)

471 
míu
 *
chûd
;

472 
symbﬁ
 *
sym
;

473 
åi°©e
 
visibÀ
;

475 i‡(!
míu
->
¥om±
)

476  
Ál£
;

478 i‡(
míu
->
visibûôy
) {

479 i‡(
	`ex¥_ˇlc_vÆue
(
míu
->
visibûôy
Ë=
no
)

480  
no
;

483 
sym
 = 
míu
->sym;

484 i‡(
sym
) {

485 
	`sym_ˇlc_vÆue
(
sym
);

486 
visibÀ
 = 
míu
->
¥om±
->visibÀ.
åi
;

488 
visibÀ
 = 
míu
->
¥om±
->visibÀ.
åi
 = 
	`ex¥_ˇlc_vÆue
(míu->¥om±->visibÀ.
ex¥
);

490 i‡(
visibÀ
 !
no
)

491  
åue
;

493 i‡(!
sym
 || 
	`sym_gë_åi°©e_vÆue
(
míu
->symË=
no
)

494  
Ál£
;

496 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

497 i‡(
	`míu_is_visibÀ
(
chûd
)) {

498 i‡(
sym
)

499 
sym
->
Êags
 |
SYMBOL_DEF_USER
;

500  
åue
;

504  
Ál£
;

505 
	}
}

507 c⁄° *
	$míu_gë_¥om±
(
míu
 *menu)

509 i‡(
míu
->
¥om±
)

510  
míu
->
¥om±
->
ãxt
;

511 i‡(
míu
->
sym
)

512  
míu
->
sym
->
«me
;

513  
NULL
;

514 
	}
}

516 
míu
 *
	$míu_gë_roŸ_míu
(
míu
 *menu)

518  &
roŸmíu
;

519 
	}
}

521 
míu
 *
	$míu_gë_∑ª¡_míu
(
míu
 *menu)

523 
¥›_ty≥
 
ty≥
;

525 ; 
míu
 !&
roŸmíu
; míu = míu->
∑ª¡
) {

526 
ty≥
 = 
míu
->
¥om±
 ? menu->prompt->type : 0;

527 i‡(
ty≥
 =
P_MENU
)

530  
míu
;

531 
	}
}

533 
boﬁ
 
	$míu_has_hñp
(
míu
 *menu)

535  
míu
->
hñp
 !
NULL
;

536 
	}
}

538 c⁄° *
	$míu_gë_hñp
(
míu
 *menu)

540 i‡(
míu
->
hñp
)

541  
míu
->
hñp
;

544 
	}
}

546 
	$gë_¥om±_°r
(
g°r
 *
r
, 
¥›îty
 *
¥›
,

547 
li°_hód
 *
hód
)

549 
i
, 
j
;

550 
míu
 *
submíu
[8], *míu, *
loˇti⁄
 = 
NULL
;

551 
jump_key
 *
jump
 = 
NULL
;

553 
	`°r_¥ötf
(
r
, 
	`_
("Prom±: %s\n"), _(
¥›
->
ãxt
));

554 
míu
 = 
¥›
->míu->
∑ª¡
;

555 
i
 = 0; 
míu
 !&
roŸmíu
 && i < 8; míu = míu->
∑ª¡
) {

556 
boﬁ
 
ac˚ssibÀ
 = 
	`míu_is_visibÀ
(
míu
);

558 
submíu
[
i
++] = 
míu
;

559 i‡(
loˇti⁄
 =
NULL
 && 
ac˚ssibÀ
)

560 
loˇti⁄
 = 
míu
;

562 i‡(
hód
 && 
loˇti⁄
) {

563 
jump
 = 
	`xmÆloc
((
jump_key
));

565 i‡(
	`míu_is_visibÀ
(
¥›
->
míu
)) {

572 
jump
->
èrgë
 = 
¥›
->
míu
;

574 
jump
->
èrgë
 = 
loˇti⁄
;

576 i‡(
	`li°_em±y
(
hód
))

577 
jump
->
ödex
 = 0;

579 
jump
->
ödex
 = 
	`li°_íåy
(
hód
->
¥ev
, 
jump_key
,

580 
íåõs
)->
ödex
 + 1;

582 
	`li°_add_èû
(&
jump
->
íåõs
, 
hód
);

585 i‡(
i
 > 0) {

586 
	`°r_¥ötf
(
r
, 
	`_
(" Location:\n"));

587 
j
 = 4; --
i
 >= 0; j += 2) {

588 
míu
 = 
submíu
[
i
];

589 i‡(
jump
 && 
míu
 =
loˇti⁄
)

590 
jump
->
off£t
 = 
	`°æí
(
r
->
s
);

591 
	`°r_¥ötf
(
r
, "%*c-> %s", 
j
, ' ',

592 
	`_
(
	`míu_gë_¥om±
(
míu
)));

593 i‡(
míu
->
sym
) {

594 
	`°r_¥ötf
(
r
, " (%†[=%s])", 
míu
->
sym
->
«me
 ?

595 
míu
->
sym
->
«me
 : 
	`_
("<choice>"),

596 
	`sym_gë_°rög_vÆue
(
míu
->
sym
));

598 
	`°r_≠≥nd
(
r
, "\n");

601 
	}
}

606 
¥›îty
 *
	$gë_symbﬁ_¥›
(
symbﬁ
 *
sym
)

608 
¥›îty
 *
¥›
 = 
NULL
;

610 
	`f‹_Æl_¥›îtõs
(
sym
, 
¥›
, 
P_SYMBOL
)

612  
¥›
;

613 
	}
}

618 
	$gë_symbﬁ_°r
(
g°r
 *
r
, 
symbﬁ
 *
sym
,

619 
li°_hód
 *
hód
)

621 
boﬁ
 
hô
;

622 
¥›îty
 *
¥›
;

624 i‡(
sym
 && sym->
«me
) {

625 
	`°r_¥ötf
(
r
, "Symbﬁ: %†[=%s]\n", 
sym
->
«me
,

626 
	`sym_gë_°rög_vÆue
(
sym
));

627 
	`°r_¥ötf
(
r
, "Ty≥ : %s\n", 
	`sym_ty≥_«me
(
sym
->
ty≥
));

628 i‡(
sym
->
ty≥
 =
S_INT
 || sym->ty≥ =
S_HEX
) {

629 
¥›
 = 
	`sym_gë_ønge_¥›
(
sym
);

630 i‡(
¥›
) {

631 
	`°r_¥ötf
(
r
, "Range : ");

632 
	`ex¥_g°r_¥öt
(
¥›
->
ex¥
, 
r
);

633 
	`°r_≠≥nd
(
r
, "\n");

637 
	`f‹_Æl_¥om±s
(
sym
, 
¥›
)

638 
	`gë_¥om±_°r
(
r
, 
¥›
, 
hód
);

640 
¥›
 = 
	`gë_symbﬁ_¥›
(
sym
);

641 i‡(
¥›
) {

642 
	`°r_¥ötf
(
r
, 
	`_
(" Deföedáà%s:%d\n"), 
¥›
->
míu
->
fûe
->
«me
,

643 
¥›
->
míu
->
löío
);

644 i‡(!
	`ex¥_is_yes
(
¥›
->
visibÀ
.
ex¥
)) {

645 
	`°r_≠≥nd
(
r
, 
	`_
(" Depends on: "));

646 
	`ex¥_g°r_¥öt
(
¥›
->
visibÀ
.
ex¥
, 
r
);

647 
	`°r_≠≥nd
(
r
, "\n");

651 
hô
 = 
Ál£
;

652 
	`f‹_Æl_¥›îtõs
(
sym
, 
¥›
, 
P_SELECT
) {

653 i‡(!
hô
) {

654 
	`°r_≠≥nd
(
r
, " Selects: ");

655 
hô
 = 
åue
;

657 
	`°r_¥ötf
(
r
, " && ");

658 
	`ex¥_g°r_¥öt
(
¥›
->
ex¥
, 
r
);

660 i‡(
hô
)

661 
	`°r_≠≥nd
(
r
, "\n");

662 i‡(
sym
->
ªv_dï
.
ex¥
) {

663 
	`°r_≠≥nd
(
r
, 
	`_
(" Selected by: "));

664 
	`ex¥_g°r_¥öt
(
sym
->
ªv_dï
.
ex¥
, 
r
);

665 
	`°r_≠≥nd
(
r
, "\n");

667 
	`°r_≠≥nd
(
r
, "\n\n");

668 
	}
}

670 
g°r
 
	$gë_ªœti⁄s_°r
(
symbﬁ
 **
sym_¨r
, 
li°_hód
 *
hód
)

672 
symbﬁ
 *
sym
;

673 
g°r
 
ªs
 = 
	`°r_√w
();

674 
i
;

676 
i
 = 0; 
sym_¨r
 && (
sym
 = sym_arr[i]); i++)

677 
	`gë_symbﬁ_°r
(&
ªs
, 
sym
, 
hód
);

678 i‡(!
i
)

679 
	`°r_≠≥nd
(&
ªs
, 
	`_
("No matches found.\n"));

680  
ªs
;

681 
	}
}

684 
	$míu_gë_ext_hñp
(
míu
 *míu, 
g°r
 *
hñp
)

686 
symbﬁ
 *
sym
 = 
míu
->sym;

687 c⁄° *
hñp_ãxt
 = 
nohñp_ãxt
;

689 i‡(
	`míu_has_hñp
(
míu
)) {

690 i‡(
sym
->
«me
)

691 
	`°r_¥ötf
(
hñp
, "%s%s:\n\n", 
CONFIG_
, 
sym
->
«me
);

692 
hñp_ãxt
 = 
	`míu_gë_hñp
(
míu
);

694 
	`°r_¥ötf
(
hñp
, "%s\n", 
	`_
(
hñp_ãxt
));

695 i‡(
sym
)

696 
	`gë_symbﬁ_°r
(
hñp
, 
sym
, 
NULL
);

697 
	}
}

	@swupdate/scripts/kconfig/nconf.c

8 
	#_GNU_SOURCE


	)

9 
	~<°rög.h
>

10 
	~<°dlib.h
>

12 
	~"lkc.h
"

13 
	~"nc⁄f.h
"

14 
	~<˘y≥.h
>

16 c⁄° 
	gnc⁄f_globÆ_hñp
[] = 
N_
(

132 
	gmíu_no_f_ö°ru˘i⁄s
[] = 
N_
(

149 
	gmíu_ö°ru˘i⁄s
[] = 
N_
(

165 
	gødiﬁi°_ö°ru˘i⁄s
[] = 
N_
(

170 
	göputbox_ö°ru˘i⁄s_öt
[] = 
N_
(

174 
	göputbox_ö°ru˘i⁄s_hex
[] = 
N_
(

177 
	göputbox_ö°ru˘i⁄s_°rög
[] = 
N_
(

180 
	g£tmod_ãxt
[] = 
N_
(

183 
	glﬂd_c⁄fig_ãxt
[] = 
N_
(

187 
	glﬂd_c⁄fig_hñp
[] = 
N_
(

196 
	gßve_c⁄fig_ãxt
[] = 
N_
(

199 
	gßve_c⁄fig_hñp
[] = 
N_
(

208 
	g£¨ch_hñp
[] = 
N_
(

247 
	smôem
 {

248 
	m°r
[256];

249 
	mèg
;

250 *
	mu§±r
;

251 
	mis_visibÀ
;

254 
	#MAX_MENU_ITEMS
 4096

	)

255 
	gshow_Æl_ôems
;

256 
	gödít
;

257 
míu
 *
	gcuºít_míu
;

258 
	gchûd_cou¡
;

259 
	gsögÀ_míu_mode
;

261 
WINDOW
 *
	gmaö_wödow
;

263 
	gmwö_max_löes
;

264 
	gmwö_max_cﬁs
;

266 
MENU
 *
	gcur£s_míu
;

267 
ITEM
 *
	gcur£s_míu_ôems
[
MAX_MENU_ITEMS
];

268 
môem
 
	gk_míu_ôems
[
MAX_MENU_ITEMS
];

269 
	gôems_num
;

270 
	gglobÆ_exô
;

272 c⁄° *
	gcuºít_ö°ru˘i⁄s
 = 
míu_ö°ru˘i⁄s
;

274 *
	gdülog_öput_ªsu…
;

275 
	gdülog_öput_ªsu…_Àn
;

277 
c⁄f
(
míu
 *menu);

278 
c⁄f_choi˚
(
míu
 *menu);

279 
c⁄f_°rög
(
míu
 *menu);

280 
c⁄f_lﬂd
();

281 
c⁄f_ßve
();

282 
show_hñp
(
míu
 *menu);

283 
do_exô
();

284 
£tup_wödows
();

285 
£¨ch_c⁄f
();

287 (*
	tfun˘i⁄_key_h™dÀr_t
)(*
	tkey
, 
	tmíu
 *menu);

288 
	`h™dÀ_f1
(*
key
, 
míu
 *
cuºít_ôem
);

289 
	`h™dÀ_f2
(*
key
, 
míu
 *
cuºít_ôem
);

290 
	`h™dÀ_f3
(*
key
, 
míu
 *
cuºít_ôem
);

291 
	`h™dÀ_f4
(*
key
, 
míu
 *
cuºít_ôem
);

292 
	`h™dÀ_f5
(*
key
, 
míu
 *
cuºít_ôem
);

293 
	`h™dÀ_f6
(*
key
, 
míu
 *
cuºít_ôem
);

294 
	`h™dÀ_f7
(*
key
, 
míu
 *
cuºít_ôem
);

295 
	`h™dÀ_f8
(*
key
, 
míu
 *
cuºít_ôem
);

296 
	`h™dÀ_f9
(*
key
, 
míu
 *
cuºít_ôem
);

298 
	sfun˘i⁄_keys
 {

299 c⁄° *
key_°r
;

300 c⁄° *
func
;

301 
fun˘i⁄_key
 
key
;

302 
fun˘i⁄_key_h™dÀr_t
 
h™dÀr
;

305 c⁄° 
fun˘i⁄_keys_num
 = 9;

306 
fun˘i⁄_keys
 function_keys[] = {

308 .
key_°r
 = "F1",

309 .
func
 = "Help",

310 .
key
 = 
F_HELP
,

311 .
h™dÀr
 = 
h™dÀ_f1
,

314 .
key_°r
 = "F2",

315 .
func
 = "SymInfo",

316 .
key
 = 
F_SYMBOL
,

317 .
h™dÀr
 = 
h™dÀ_f2
,

320 .
key_°r
 = "F3",

321 .
func
 = "Help 2",

322 .
key
 = 
F_INSTS
,

323 .
h™dÀr
 = 
h™dÀ_f3
,

326 .
key_°r
 = "F4",

327 .
func
 = "ShowAll",

328 .
key
 = 
F_CONF
,

329 .
h™dÀr
 = 
h™dÀ_f4
,

332 .
key_°r
 = "F5",

333 .
func
 = "Back",

334 .
key
 = 
F_BACK
,

335 .
h™dÀr
 = 
h™dÀ_f5
,

338 .
key_°r
 = "F6",

339 .
func
 = "Save",

340 .
key
 = 
F_SAVE
,

341 .
h™dÀr
 = 
h™dÀ_f6
,

344 .
key_°r
 = "F7",

345 .
func
 = "Load",

346 .
key
 = 
F_LOAD
,

347 .
h™dÀr
 = 
h™dÀ_f7
,

350 .
key_°r
 = "F8",

351 .
func
 = "SymSearch",

352 .
key
 = 
F_SEARCH
,

353 .
h™dÀr
 = 
h™dÀ_f8
,

356 .
key_°r
 = "F9",

357 .
func
 = "Exit",

358 .
key
 = 
F_EXIT
,

359 .
h™dÀr
 = 
h™dÀ_f9
,

361 
	}
};

363 
	$¥öt_fun˘i⁄_löe
()

365 
i
;

366 
off£t
 = 1;

367 c⁄° 
skù
 = 1;

368 
löes
 = 
	`gëmaxy
(
°ds¸
);

370 
i
 = 0; i < 
fun˘i⁄_keys_num
; i++) {

371 (Ë
	`w©å£t
(
maö_wödow
, 
©åibuãs
[
FUNCTION_HIGHLIGHT
]);

372 
	`mvw¥ötw
(
maö_wödow
, 
löes
-3, 
off£t
,

374 
fun˘i⁄_keys
[
i
].
key_°r
);

375 (Ë
	`w©å£t
(
maö_wödow
, 
©åibuãs
[
FUNCTION_TEXT
]);

376 
off£t
 +
	`°æí
(
fun˘i⁄_keys
[
i
].
key_°r
);

377 
	`mvw¥ötw
(
maö_wödow
, 
löes
-3,

378 
off£t
, "%s",

379 
fun˘i⁄_keys
[
i
].
func
);

380 
off£t
 +
	`°æí
(
fun˘i⁄_keys
[
i
].
func
Ë+ 
skù
;

382 (Ë
	`w©å£t
(
maö_wödow
, 
©åibuãs
[
NORMAL
]);

383 
	}
}

386 
	$h™dÀ_f1
(*
key
, 
míu
 *
cuºít_ôem
)

388 
	`show_s¸ﬁl_wö
(
maö_wödow
,

389 
	`_
("GlobÆ hñp"), _(
nc⁄f_globÆ_hñp
));

391 
	}
}

394 
	$h™dÀ_f2
(*
key
, 
míu
 *
cuºít_ôem
)

396 
	`show_hñp
(
cuºít_ôem
);

398 
	}
}

401 
	$h™dÀ_f3
(*
key
, 
míu
 *
cuºít_ôem
)

403 
	`show_s¸ﬁl_wö
(
maö_wödow
,

404 
	`_
("Short help"),

405 
	`_
(
cuºít_ö°ru˘i⁄s
));

407 
	}
}

410 
	$h™dÀ_f4
(*
key
, 
míu
 *
cuºít_ôem
)

412 
ªs
 = 
	`bä_dülog
(
maö_wödow
,

413 
	`_
("Showáll symbols?"),

417 i‡(
ªs
 == 0)

418 
show_Æl_ôems
 = 1;

419 i‡(
ªs
 == 1)

420 
show_Æl_ôems
 = 0;

423 
	}
}

426 
	$h™dÀ_f5
(*
key
, 
míu
 *
cuºít_ôem
)

428 *
key
 = 
KEY_LEFT
;

430 
	}
}

433 
	$h™dÀ_f6
(*
key
, 
míu
 *
cuºít_ôem
)

435 
	`c⁄f_ßve
();

437 
	}
}

440 
	$h™dÀ_f7
(*
key
, 
míu
 *
cuºít_ôem
)

442 
	`c⁄f_lﬂd
();

444 
	}
}

447 
	$h™dÀ_f8
(*
key
, 
míu
 *
cuºít_ôem
)

449 
	`£¨ch_c⁄f
();

451 
	}
}

454 
	$h™dÀ_f9
(*
key
, 
míu
 *
cuºít_ôem
)

456 
	`do_exô
();

458 
	}
}

461 
	$¥o˚ss_•ecül_keys
(*
key
, 
míu
 *menu)

463 
i
;

465 i‡(*
key
 =
KEY_RESIZE
) {

466 
	`£tup_wödows
();

470 
i
 = 0; i < 
fun˘i⁄_keys_num
; i++) {

471 i‡(*
key
 =
	`KEY_F
(
fun˘i⁄_keys
[
i
].key) ||

472 *
key
 ='0' + 
fun˘i⁄_keys
[
i
].key){

473 
fun˘i⁄_keys
[
i
].
	`h™dÀr
(
key
, 
míu
);

479 
	}
}

481 
	$˛ón_ôems
()

483 
i
;

484 
i
 = 0; 
cur£s_míu_ôems
[i]; i++)

485 
	`‰ì_ôem
(
cur£s_míu_ôems
[
i
]);

486 
	`bzîo
(
cur£s_míu_ôems
, (curses_menu_items));

487 
	`bzîo
(
k_míu_ôems
, (k_menu_items));

488 
ôems_num
 = 0;

489 
	}
}

491 íum {
	mMATCH_TINKER_PATTERN_UP
, 
	mMATCH_TINKER_PATTERN_DOWN
,

492 
	mFIND_NEXT_MATCH_DOWN
, 
	mFIND_NEXT_MATCH_UP
} 
	tm©ch_f
;

495 
	$gë_mext_m©ch
(c⁄° *
m©ch_°r
, 
m©ch_f
 
Êag
)

497 
m©ch_°¨t
 = 
	`ôem_ödex
(
	`cuºít_ôem
(
cur£s_míu
));

498 
ödex
;

500 i‡(
Êag
 =
FIND_NEXT_MATCH_DOWN
)

501 ++
m©ch_°¨t
;

502 i‡(
Êag
 =
FIND_NEXT_MATCH_UP
)

503 --
m©ch_°¨t
;

505 
ödex
 = 
m©ch_°¨t
;

506 
ödex
 = (ödex + 
ôems_num
) % items_num;

507 
åue
) {

508 *
°r
 = 
k_míu_ôems
[
ödex
].str;

509 i‡(
	`°rˇ£°r
(
°r
, 
m©ch_°r
) != 0)

510  
ödex
;

511 i‡(
Êag
 =
FIND_NEXT_MATCH_UP
 ||

512 
Êag
 =
MATCH_TINKER_PATTERN_UP
)

513 --
ödex
;

515 ++
ödex
;

516 
ödex
 = (ödex + 
ôems_num
) % items_num;

517 i‡(
ödex
 =
m©ch_°¨t
)

520 
	}
}

523 
	$ôem_make
(
míu
 *míu, 
èg
, c⁄° *
fmt
, ...)

525 
va_li°
 
≠
;

527 i‡(
ôems_num
 > 
MAX_MENU_ITEMS
-1)

530 
	`bzîo
(&
k_míu_ôems
[
ôems_num
], (k_menu_items[0]));

531 
k_míu_ôems
[
ôems_num
].
èg
 =Åag;

532 
k_míu_ôems
[
ôems_num
].
u§±r
 = 
míu
;

533 i‡(
míu
 !
NULL
)

534 
k_míu_ôems
[
ôems_num
].
is_visibÀ
 =

535 
	`míu_is_visibÀ
(
míu
);

537 
k_míu_ôems
[
ôems_num
].
is_visibÀ
 = 1;

539 
	`va_°¨t
(
≠
, 
fmt
);

540 
	`v¢¥ötf
(
k_míu_ôems
[
ôems_num
].
°r
,

541 (
k_míu_ôems
[
ôems_num
].
°r
),

542 
fmt
, 
≠
);

543 
	`va_íd
(
≠
);

545 i‡(!
k_míu_ôems
[
ôems_num
].
is_visibÀ
)

546 
	`mem˝y
(
k_míu_ôems
[
ôems_num
].
°r
, "XXX", 3);

548 
cur£s_míu_ôems
[
ôems_num
] = 
	`√w_ôem
(

549 
k_míu_ôems
[
ôems_num
].
°r
,

550 
k_míu_ôems
[
ôems_num
].
°r
);

551 
	`£t_ôem_u£Ωå
(
cur£s_míu_ôems
[
ôems_num
],

552 &
k_míu_ôems
[
ôems_num
]);

558 
ôems_num
++;

559 
cur£s_míu_ôems
[
ôems_num
] = 
NULL
;

560 
	}
}

563 
	$ôem_add_°r
(c⁄° *
fmt
, ...)

565 
va_li°
 
≠
;

566 
ödex
 = 
ôems_num
-1;

567 
√w_°r
[256];

568 
tmp_°r
[256];

570 i‡(
ödex
 < 0)

573 
	`va_°¨t
(
≠
, 
fmt
);

574 
	`v¢¥ötf
(
√w_°r
, “ew_°r), 
fmt
, 
≠
);

575 
	`va_íd
(
≠
);

576 
	`¢¥ötf
(
tmp_°r
, (tmp_str), "%s%s",

577 
k_míu_ôems
[
ödex
].
°r
, 
√w_°r
);

578 
	`°∫˝y
(
k_míu_ôems
[
ödex
].
°r
,

579 
tmp_°r
,

580 (
k_míu_ôems
[
ödex
].
°r
));

582 
	`‰ì_ôem
(
cur£s_míu_ôems
[
ödex
]);

583 
cur£s_míu_ôems
[
ödex
] = 
	`√w_ôem
(

584 
k_míu_ôems
[
ödex
].
°r
,

585 
k_míu_ôems
[
ödex
].
°r
);

586 
	`£t_ôem_u£Ωå
(
cur£s_míu_ôems
[
ödex
],

587 &
k_míu_ôems
[
ödex
]);

588 
	}
}

591 
	$ôem_èg
()

593 
ITEM
 *
cur
;

594 
môem
 *
mcur
;

596 
cur
 = 
	`cuºít_ôem
(
cur£s_míu
);

597 i‡(
cur
 =
NULL
)

599 
mcur
 = (
môem
 *Ë
	`ôem_u£Ωå
(
cur
);

600  
mcur
->
èg
;

601 
	}
}

603 
	$cur£s_ôem_ödex
()

605  
	`ôem_ödex
(
	`cuºít_ôem
(
cur£s_míu
));

606 
	}
}

608 *
	$ôem_d©a
()

610 
ITEM
 *
cur
;

611 
môem
 *
mcur
;

613 
cur
 = 
	`cuºít_ôem
(
cur£s_míu
);

614 i‡(!
cur
)

615  
NULL
;

616 
mcur
 = (
môem
 *Ë
	`ôem_u£Ωå
(
cur
);

617  
mcur
->
u§±r
;

619 
	}
}

621 
	$ôem_is_èg
(
èg
)

623  
	`ôem_èg
(Ë=
èg
;

624 
	}
}

626 
	gfûíame
[
PATH_MAX
+1];

627 
	gmíu_backtôÀ
[
PATH_MAX
+128];

628 c⁄° *
	$£t_c⁄fig_fûíame
(c⁄° *
c⁄fig_fûíame
)

630 
size
;

632 
size
 = 
	`¢¥ötf
(
míu_backtôÀ
, (menu_backtitle),

633 "%†- %s", 
c⁄fig_fûíame
, 
roŸmíu
.
¥om±
->
ãxt
);

634 i‡(
size
 >(
míu_backtôÀ
))

635 
míu_backtôÀ
[(menu_backtitle)-1] = '\0';

637 
size
 = 
	`¢¥ötf
(
fûíame
, (fûíame), "%s", 
c⁄fig_fûíame
);

638 i‡(
size
 >(
fûíame
))

639 
fûíame
[(filename)-1] = '\0';

640  
míu_backtôÀ
;

641 
	}
}

646 
	$do_exô
()

648 
ªs
;

649 i‡(!
	`c⁄f_gë_ch™ged
()) {

650 
globÆ_exô
 = 1;

653 
ªs
 = 
	`bä_dülog
(
maö_wödow
,

654 
	`_
("Do you wishÅo save yourÇew configuration?\n"

659 i‡(
ªs
 =
KEY_EXIT
) {

660 
globÆ_exô
 = 0;

665 
ªs
) {

667 
ªs
 = 
	`c⁄f_wrôe
(
fûíame
);

668 i‡(
ªs
)

669 
	`bä_dülog
(

670 
maö_wödow
,

671 
	`_
("Error during writing of configuration.\n"

677 
	`bä_dülog
(

678 
maö_wödow
,

679 
	`_
("Your configuration changes were NOT saved."),

684 
globÆ_exô
 = 1;

686 
	}
}

689 
	$£¨ch_c⁄f
()

691 
symbﬁ
 **
sym_¨r
;

692 
g°r
 
ªs
;

693 
g°r
 
tôÀ
;

694 *
dülog_öput
;

695 
dªs
;

697 
tôÀ
 = 
	`°r_√w
();

698 
	`°r_¥ötf
–&
tôÀ
, 
	`_
("Enter (sub)string orÑegexpÅo search for "

699 "(wôh o∏wôhouà\"%s\")"), 
CONFIG_
);

701 
agaö
:

702 
dªs
 = 
	`dülog_öputbox
(
maö_wödow
,

703 
	`_
("Search Configuration Parameter"),

704 
	`°r_gë
(&
tôÀ
),

705 "", &
dülog_öput_ªsu…
, &
dülog_öput_ªsu…_Àn
);

706 
dªs
) {

710 
	`show_s¸ﬁl_wö
(
maö_wödow
,

711 
	`_
("Sórch C⁄figuøti⁄"), 
£¨ch_hñp
);

712 
agaö
;

714 
	`°r_‰ì
(&
tôÀ
);

719 
dülog_öput
 = 
dülog_öput_ªsu…
;

720 i‡(
	`°∫ˇ£cmp
(
dülog_öput_ªsu…
, 
CONFIG_
, 
	`°æí
(CONFIG_)) == 0)

721 
dülog_öput
 +
	`°æí
(
CONFIG_
);

723 
sym_¨r
 = 
	`sym_ª_£¨ch
(
dülog_öput
);

724 
ªs
 = 
	`gë_ªœti⁄s_°r
(
sym_¨r
, 
NULL
);

725 
	`‰ì
(
sym_¨r
);

726 
	`show_s¸ﬁl_wö
(
maö_wödow
,

727 
	`_
("Sórch Resu…s"), 
	`°r_gë
(&
ªs
));

728 
	`°r_‰ì
(&
ªs
);

729 
	`°r_‰ì
(&
tôÀ
);

730 
	}
}

733 
	$buûd_c⁄f
(
míu
 *menu)

735 
symbﬁ
 *
sym
;

736 
¥›îty
 *
¥›
;

737 
míu
 *
chûd
;

738 
ty≥
, 
tmp
, 
doöt
 = 2;

739 
åi°©e
 
vÆ
;

740 
ch
;

742 i‡(!
míu
 || (!
show_Æl_ôems
 && !
	`míu_is_visibÀ
(menu)))

745 
sym
 = 
míu
->sym;

746 
¥›
 = 
míu
->
¥om±
;

747 i‡(!
sym
) {

748 i‡(
¥›
 && 
míu
 !
cuºít_míu
) {

749 c⁄° *
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

750 
¥›_ty≥
 
±y≥
;

751 
±y≥
 = 
míu
->
¥om±
 ? míu->¥om±->
ty≥
 : 
P_UNKNOWN
;

752 
±y≥
) {

753 
P_MENU
:

754 
chûd_cou¡
++;

755 
¥om±
 = 
	`_
(prompt);

756 i‡(
sögÀ_míu_mode
) {

757 
	`ôem_make
(
míu
, 'm',

759 
míu
->
d©a
 ? "-->" : "++>",

760 
ödít
 + 1, ' ', 
¥om±
);

762 
	`ôem_make
(
míu
, 'm',

764 
ödít
 + 1, ' ', 
¥om±
,

765 
	`míu_is_em±y
(
míu
) ? "----" : "--->");

767 i‡(
sögÀ_míu_mode
 && 
míu
->
d©a
)

768 
c⁄f_chûds
;

770 
P_COMMENT
:

771 i‡(
¥om±
) {

772 
chûd_cou¡
++;

773 
	`ôem_make
(
míu
, ':',

775 
ödít
 + 1, ' ',

776 
	`_
(
¥om±
));

780 i‡(
¥om±
) {

781 
chûd_cou¡
++;

782 
	`ôem_make
(
míu
, ':', "---%*c%s",

783 
ödít
 + 1, ' ',

784 
	`_
(
¥om±
));

788 
doöt
 = 0;

789 
c⁄f_chûds
;

792 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

793 i‡(
	`sym_is_choi˚
(
sym
)) {

794 
symbﬁ
 *
def_sym
 = 
	`sym_gë_choi˚_vÆue
(
sym
);

795 
míu
 *
def_míu
 = 
NULL
;

797 
chûd_cou¡
++;

798 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

799 i‡(
	`míu_is_visibÀ
(
chûd
Ë&& chûd->
sym
 =
def_sym
)

800 
def_míu
 = 
chûd
;

803 
vÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

804 i‡(
	`sym_is_ch™gabÀ
(
sym
)) {

805 
ty≥
) {

806 
S_BOOLEAN
:

807 
	`ôem_make
(
míu
, 't', "[%c]",

808 
vÆ
 =
no
 ? ' ' : '*');

810 
S_TRISTATE
:

811 
vÆ
) {

812 
yes
:

813 
ch
 = '*';

815 
mod
:

816 
ch
 = 'M';

819 
ch
 = ' ';

822 
	`ôem_make
(
míu
, 't', "<%c>", 
ch
);

826 
	`ôem_make
(
míu
, 
def_míu
 ? 't' : ':', " ");

829 
	`ôem_add_°r
("%*c%s", 
ödít
 + 1,

830 ' ', 
	`_
(
	`míu_gë_¥om±
(
míu
)));

831 i‡(
vÆ
 =
yes
) {

832 i‡(
def_míu
) {

833 
	`ôem_add_°r
(" (%s)",

834 
	`_
(
	`míu_gë_¥om±
(
def_míu
)));

835 
	`ôem_add_°r
(" --->");

836 i‡(
def_míu
->
li°
) {

837 
ödít
 += 2;

838 
	`buûd_c⁄f
(
def_míu
);

839 
ödít
 -= 2;

845 i‡(
míu
 =
cuºít_míu
) {

846 
	`ôem_make
(
míu
, ':',

847 "---%*c%s", 
ödít
 + 1,

848 ' ', 
	`_
(
	`míu_gë_¥om±
(
míu
)));

849 
c⁄f_chûds
;

851 
chûd_cou¡
++;

852 
vÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

853 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& 
vÆ
 =
yes
) {

854 
	`ôem_make
(
míu
, ':', " ");

856 
ty≥
) {

857 
S_BOOLEAN
:

858 i‡(
	`sym_is_ch™gabÀ
(
sym
))

859 
	`ôem_make
(
míu
, 't', "[%c]",

860 
vÆ
 =
no
 ? ' ' : '*');

862 
	`ôem_make
(
míu
, 't', "-%c-",

863 
vÆ
 =
no
 ? ' ' : '*');

865 
S_TRISTATE
:

866 
vÆ
) {

867 
yes
:

868 
ch
 = '*';

870 
mod
:

871 
ch
 = 'M';

874 
ch
 = ' ';

877 i‡(
	`sym_is_ch™gabÀ
(
sym
)) {

878 i‡(
sym
->
ªv_dï
.
åi
 =
mod
)

879 
	`ôem_make
(
míu
,

880 't', "{%c}", 
ch
);

882 
	`ôem_make
(
míu
,

883 't', "<%c>", 
ch
);

885 
	`ôem_make
(
míu
, 't', "-%c-", 
ch
);

888 
tmp
 = 2 + 
	`°æí
(
	`sym_gë_°rög_vÆue
(
sym
));

889 
	`ôem_make
(
míu
, 's', " (%s)",

890 
	`sym_gë_°rög_vÆue
(
sym
));

891 
tmp
 = 
ödít
 -Åmp + 4;

892 i‡(
tmp
 < 0)

893 
tmp
 = 0;

894 
	`ôem_add_°r
("%*c%s%s", 
tmp
, ' ',

895 
	`_
(
	`míu_gë_¥om±
(
míu
)),

896 (
	`sym_has_vÆue
(
sym
) ||

897 !
	`sym_is_ch™gabÀ
(
sym
)) ? "" :

898 
	`_
(" (NEW)"));

899 
c⁄f_chûds
;

902 
	`ôem_add_°r
("%*c%s%s", 
ödít
 + 1, ' ',

903 
	`_
(
	`míu_gë_¥om±
(
míu
)),

904 (
	`sym_has_vÆue
(
sym
Ë|| !
	`sym_is_ch™gabÀ
(sym)) ?

905 "" : 
	`_
(" (NEW)"));

906 i‡(
míu
->
¥om±
 && míu->¥om±->
ty≥
 =
P_MENU
) {

907 
	`ôem_add_°r
(" %s", 
	`míu_is_em±y
(
míu
) ? "----" : "--->");

912 
c⁄f_chûds
:

913 
ödít
 +
doöt
;

914 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
)

915 
	`buûd_c⁄f
(
chûd
);

916 
ödít
 -
doöt
;

917 
	}
}

919 
	$ª£t_míu
()

921 
	`u≈o°_míu
(
cur£s_míu
);

922 
	`˛ón_ôems
();

923 
	}
}

927 
	$˚¡î_ôem
(
£À˘ed_ödex
, *
œ°_t›_row
)

929 
t›row
;

931 
	`£t_t›_row
(
cur£s_míu
, *
œ°_t›_row
);

932 
t›row
 = 
	`t›_row
(
cur£s_míu
);

933 i‡(
£À˘ed_ödex
 < 
t›row
 ||

934 
£À˘ed_ödex
 >
t›row
+
mwö_max_löes
) {

935 
t›row
 = 
	`max
(
£À˘ed_ödex
-
mwö_max_löes
/2, 0);

936 i‡(
t›row
 >
	`ôem_cou¡
(
cur£s_míu
)-
mwö_max_löes
)

937 
t›row
 = 
	`ôem_cou¡
(
cur£s_míu
)-
mwö_max_löes
;

938 
	`£t_t›_row
(
cur£s_míu
, 
t›row
);

940 
	`£t_cuºít_ôem
(
cur£s_míu
,

941 
cur£s_míu_ôems
[
£À˘ed_ödex
]);

942 *
œ°_t›_row
 = 
t›row
;

943 
	`po°_míu
(
cur£s_míu
);

944 
	`ª‰esh_Æl_wödows
(
maö_wödow
);

945 
	}
}

948 
	$show_míu
(c⁄° *
¥om±
, c⁄° *
ö°ru˘i⁄s
,

949 
£À˘ed_ödex
, *
œ°_t›_row
)

951 
maxx
, 
maxy
;

952 
WINDOW
 *
míu_wödow
;

954 
cuºít_ö°ru˘i⁄s
 = 
ö°ru˘i⁄s
;

956 
	`˛ór
();

957 (Ë
	`w©å£t
(
maö_wödow
, 
©åibuãs
[
NORMAL
]);

958 
	`¥öt_ö_middÀ
(
°ds¸
, 1, 0, 
	`gëmaxx
(stdscr),

959 
míu_backtôÀ
,

960 
©åibuãs
[
MAIN_HEADING
]);

962 (Ë
	`w©å£t
(
maö_wödow
, 
©åibuãs
[
MAIN_MENU_BOX
]);

963 
	`box
(
maö_wödow
, 0, 0);

964 (Ë
	`w©å£t
(
maö_wödow
, 
©åibuãs
[
MAIN_MENU_HEADING
]);

965 
	`mvw¥ötw
(
maö_wödow
, 0, 3, " %†", 
¥om±
);

966 (Ë
	`w©å£t
(
maö_wödow
, 
©åibuãs
[
NORMAL
]);

968 
	`£t_míu_ôems
(
cur£s_míu
, 
cur£s_míu_ôems
);

971 
	`sˇÀ_míu
(
cur£s_míu
, &
maxy
, &
maxx
);

972 
maxx
 = 
	`mö
(maxx, 
mwö_max_cﬁs
-2);

973 
maxy
 = 
mwö_max_löes
;

974 
míu_wödow
 = 
	`dîwö
(
maö_wödow
,

975 
maxy
,

976 
maxx
,

978 (
mwö_max_cﬁs
-
maxx
)/2);

979 
	`key∑d
(
míu_wödow
, 
TRUE
);

980 
	`£t_míu_wö
(
cur£s_míu
, 
míu_wödow
);

981 
	`£t_míu_sub
(
cur£s_míu
, 
míu_wödow
);

986 
	`£t_míu_f‹m©
(
cur£s_míu
, 
maxy
, 1);

987 
	`˚¡î_ôem
(
£À˘ed_ödex
, 
œ°_t›_row
);

988 
	`£t_míu_f‹m©
(
cur£s_míu
, 
maxy
, 1);

990 
	`¥öt_fun˘i⁄_löe
();

993 
	`po°_míu
(
cur£s_míu
);

994 
	`ª‰esh_Æl_wödows
(
maö_wödow
);

995 
	}
}

997 
	$adj_m©ch_dú
(
m©ch_f
 *
m©ch_dúe˘i⁄
)

999 i‡(*
m©ch_dúe˘i⁄
 =
FIND_NEXT_MATCH_DOWN
)

1000 *
m©ch_dúe˘i⁄
 =

1001 
MATCH_TINKER_PATTERN_DOWN
;

1002 i‡(*
m©ch_dúe˘i⁄
 =
FIND_NEXT_MATCH_UP
)

1003 *
m©ch_dúe˘i⁄
 =

1004 
MATCH_TINKER_PATTERN_UP
;

1006 
	}
}

1008 
	sm©ch_°©e


1010 
	mö_£¨ch
;

1011 
m©ch_f
 
	mm©ch_dúe˘i⁄
;

1012 
	m∑âîn
[256];

1019 
	$do_m©ch
(
key
, 
m©ch_°©e
 *
°©e
, *
™s
)

1021 
c
 = (Ë
key
;

1022 
ãrmö©e_£¨ch
 = 0;

1023 *
™s
 = -1;

1024 i‡(
key
 ='/' || (
°©e
->
ö_£¨ch
 && key == 27)) {

1025 
	`move
(0, 0);

1026 
	`ª‰esh
();

1027 
	`˛π€ﬁ
();

1028 
°©e
->
ö_£¨ch
 = 1-state->in_search;

1029 
	`bzîo
(
°©e
->
∑âîn
, (state->pattern));

1030 
°©e
->
m©ch_dúe˘i⁄
 = 
MATCH_TINKER_PATTERN_DOWN
;

1032 } i‡(!
°©e
->
ö_£¨ch
)

1035 i‡(
	`iß um
(
c
Ë|| 
	`isgøph
(c) || c == ' ') {

1036 
°©e
->
∑âîn
[
	`°æí
(°©e->∑âîn)] = 
c
;

1037 
°©e
->
∑âîn
[
	`°æí
(state->pattern)] = '\0';

1038 
	`adj_m©ch_dú
(&
°©e
->
m©ch_dúe˘i⁄
);

1039 *
™s
 = 
	`gë_mext_m©ch
(
°©e
->
∑âîn
,

1040 
°©e
->
m©ch_dúe˘i⁄
);

1041 } i‡(
key
 =
KEY_DOWN
) {

1042 
°©e
->
m©ch_dúe˘i⁄
 = 
FIND_NEXT_MATCH_DOWN
;

1043 *
™s
 = 
	`gë_mext_m©ch
(
°©e
->
∑âîn
,

1044 
°©e
->
m©ch_dúe˘i⁄
);

1045 } i‡(
key
 =
KEY_UP
) {

1046 
°©e
->
m©ch_dúe˘i⁄
 = 
FIND_NEXT_MATCH_UP
;

1047 *
™s
 = 
	`gë_mext_m©ch
(
°©e
->
∑âîn
,

1048 
°©e
->
m©ch_dúe˘i⁄
);

1049 } i‡(
key
 =
KEY_BACKSPACE
 || key == 127) {

1050 
°©e
->
∑âîn
[
	`°æí
(state->pattern)-1] = '\0';

1051 
	`adj_m©ch_dú
(&
°©e
->
m©ch_dúe˘i⁄
);

1053 
ãrmö©e_£¨ch
 = 1;

1055 i‡(
ãrmö©e_£¨ch
) {

1056 
°©e
->
ö_£¨ch
 = 0;

1057 
	`bzîo
(
°©e
->
∑âîn
, (state->pattern));

1058 
	`move
(0, 0);

1059 
	`ª‰esh
();

1060 
	`˛π€ﬁ
();

1064 
	}
}

1066 
	$c⁄f
(
míu
 *menu)

1068 
míu
 *
submíu
 = 0;

1069 c⁄° *
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

1070 
symbﬁ
 *
sym
;

1071 
ªs
;

1072 
cuºít_ödex
 = 0;

1073 
œ°_t›_row
 = 0;

1074 
m©ch_°©e
 match_state = {

1075 .
ö_£¨ch
 = 0,

1076 .
m©ch_dúe˘i⁄
 = 
MATCH_TINKER_PATTERN_DOWN
,

1077 .
∑âîn
 = "",

1080 !
globÆ_exô
) {

1081 
	`ª£t_míu
();

1082 
cuºít_míu
 = 
míu
;

1083 
	`buûd_c⁄f
(
míu
);

1084 i‡(!
chûd_cou¡
)

1087 
	`show_míu
(
¥om±
 ? 
	`_
(prompt) : _("Main Menu"),

1088 
	`_
(
míu_ö°ru˘i⁄s
),

1089 
cuºít_ödex
, &
œ°_t›_row
);

1090 
	`key∑d
((
	`míu_wö
(
cur£s_míu
)), 
TRUE
);

1091 !
globÆ_exô
) {

1092 i‡(
m©ch_°©e
.
ö_£¨ch
) {

1093 
	`mv¥ötw
(0, 0,

1094 "£¨chög: %s", 
m©ch_°©e
.
∑âîn
);

1095 
	`˛π€ﬁ
();

1097 
	`ª‰esh_Æl_wödows
(
maö_wödow
);

1098 
ªs
 = 
	`wgëch
(
	`míu_wö
(
cur£s_míu
));

1099 i‡(!
ªs
)

1101 i‡(
	`do_m©ch
(
ªs
, &
m©ch_°©e
, &
cuºít_ödex
) == 0) {

1102 i‡(
cuºít_ödex
 != -1)

1103 
	`˚¡î_ôem
(
cuºít_ödex
,

1104 &
œ°_t›_row
);

1107 i‡(
	`¥o˚ss_•ecül_keys
(&
ªs
,

1108 (
míu
 *Ë
	`ôem_d©a
()))

1110 
ªs
) {

1111 
KEY_DOWN
:

1112 
	`míu_drivî
(
cur£s_míu
, 
REQ_DOWN_ITEM
);

1114 
KEY_UP
:

1115 
	`míu_drivî
(
cur£s_míu
, 
REQ_UP_ITEM
);

1117 
KEY_NPAGE
:

1118 
	`míu_drivî
(
cur£s_míu
, 
REQ_SCR_DPAGE
);

1120 
KEY_PPAGE
:

1121 
	`míu_drivî
(
cur£s_míu
, 
REQ_SCR_UPAGE
);

1123 
KEY_HOME
:

1124 
	`míu_drivî
(
cur£s_míu
, 
REQ_FIRST_ITEM
);

1126 
KEY_END
:

1127 
	`míu_drivî
(
cur£s_míu
, 
REQ_LAST_ITEM
);

1131 
	`show_hñp
((
míu
 *Ë
	`ôem_d©a
());

1134 i‡(
ªs
 == 10 ||Ñes == 27 ||

1135 
ªs
 == 32 ||Ñes == 'n' ||Ñes == 'y' ||

1136 
ªs
 =
KEY_LEFT
 ||Ñe†=
KEY_RIGHT
 ||

1137 
ªs
 == 'm')

1139 
	`ª‰esh_Æl_wödows
(
maö_wödow
);

1142 
	`ª‰esh_Æl_wödows
(
maö_wödow
);

1144 i‡(
ªs
 =27 || (
míu
 !&
roŸmíu
 &&Ñe†=
KEY_LEFT
))

1148 
œ°_t›_row
 = 
	`t›_row
(
cur£s_míu
);

1149 
cuºít_ödex
 = 
	`cur£s_ôem_ödex
();

1151 i‡(!
	`ôem_èg
())

1154 
submíu
 = (
míu
 *Ë
	`ôem_d©a
();

1155 i‡(!
submíu
 || !
	`míu_is_visibÀ
(submenu))

1157 
sym
 = 
submíu
->sym;

1159 
ªs
) {

1161 i‡(
	`ôem_is_èg
('t'))

1162 
	`sym_toggÀ_åi°©e_vÆue
(
sym
);

1163 i‡(
	`ôem_is_èg
('m'))

1164 
	`c⁄f
(
submíu
);

1166 
KEY_RIGHT
:

1168 
	`ôem_èg
()) {

1170 i‡(
sögÀ_míu_mode
)

1171 
submíu
->
d©a
 =

1172 (*Ë(Ë!
submíu
->
d©a
;

1174 
	`c⁄f
(
submíu
);

1177 i‡(
	`sym_is_choi˚
(
sym
) &&

1178 
	`sym_gë_åi°©e_vÆue
(
sym
Ë=
yes
)

1179 
	`c⁄f_choi˚
(
submíu
);

1180 i‡(
submíu
->
¥om±
 &&

1181 
submíu
->
¥om±
->
ty≥
 =
P_MENU
)

1182 
	`c⁄f
(
submíu
);

1183 i‡(
ªs
 == 10)

1184 
	`sym_toggÀ_åi°©e_vÆue
(
sym
);

1187 
	`c⁄f_°rög
(
submíu
);

1192 i‡(
	`ôem_is_èg
('t')) {

1193 i‡(
	`sym_£t_åi°©e_vÆue
(
sym
, 
yes
))

1195 i‡(
	`sym_£t_åi°©e_vÆue
(
sym
, 
mod
))

1196 
	`bä_dülog
(
maö_wödow
, 
£tmod_ãxt
, 0);

1200 i‡(
	`ôem_is_èg
('t'))

1201 
	`sym_£t_åi°©e_vÆue
(
sym
, 
no
);

1204 i‡(
	`ôem_is_èg
('t'))

1205 
	`sym_£t_åi°©e_vÆue
(
sym
, 
mod
);

1209 
	}
}

1211 
	$c⁄f_mesßge_ˇŒback
(c⁄° *
fmt
, 
va_li°
 
≠
)

1213 
buf
[1024];

1215 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

1216 
	`bä_dülog
(
maö_wödow
, 
buf
, 1, "<OK>");

1217 
	}
}

1219 
	$show_hñp
(
míu
 *menu)

1221 
g°r
 
hñp
;

1223 i‡(!
míu
)

1226 
hñp
 = 
	`°r_√w
();

1227 
	`míu_gë_ext_hñp
(
míu
, &
hñp
);

1228 
	`show_s¸ﬁl_wö
(
maö_wödow
, 
	`_
(
	`míu_gë_¥om±
(
míu
)), 
	`°r_gë
(&
hñp
));

1229 
	`°r_‰ì
(&
hñp
);

1230 
	}
}

1232 
	$c⁄f_choi˚
(
míu
 *menu)

1234 c⁄° *
¥om±
 = 
	`_
(
	`míu_gë_¥om±
(
míu
));

1235 
míu
 *
chûd
 = 0;

1236 
symbﬁ
 *
a˘ive
;

1237 
£À˘ed_ödex
 = 0;

1238 
œ°_t›_row
 = 0;

1239 
ªs
, 
i
 = 0;

1240 
m©ch_°©e
 match_state = {

1241 .
ö_£¨ch
 = 0,

1242 .
m©ch_dúe˘i⁄
 = 
MATCH_TINKER_PATTERN_DOWN
,

1243 .
∑âîn
 = "",

1246 
a˘ive
 = 
	`sym_gë_choi˚_vÆue
(
míu
->
sym
);

1248 !
globÆ_exô
) {

1249 
	`ª£t_míu
();

1251 
i
 = 0, 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

1252 i‡(!
show_Æl_ôems
 && !
	`míu_is_visibÀ
(
chûd
))

1255 i‡(
chûd
->
sym
 =
	`sym_gë_choi˚_vÆue
(
míu
->sym))

1256 
	`ôem_make
(
chûd
, ':', "<X> %s",

1257 
	`_
(
	`míu_gë_¥om±
(
chûd
)));

1258 i‡(
chûd
->
sym
)

1259 
	`ôem_make
(
chûd
, ':', " %s",

1260 
	`_
(
	`míu_gë_¥om±
(
chûd
)));

1262 
	`ôem_make
(
chûd
, ':', "*** %s ***",

1263 
	`_
(
	`míu_gë_¥om±
(
chûd
)));

1265 i‡(
chûd
->
sym
 =
a˘ive
){

1266 
œ°_t›_row
 = 
	`t›_row
(
cur£s_míu
);

1267 
£À˘ed_ödex
 = 
i
;

1269 
i
++;

1271 
	`show_míu
(
¥om±
 ? 
	`_
(prompt) : _("Choice Menu"),

1272 
	`_
(
ødiﬁi°_ö°ru˘i⁄s
),

1273 
£À˘ed_ödex
,

1274 &
œ°_t›_row
);

1275 !
globÆ_exô
) {

1276 i‡(
m©ch_°©e
.
ö_£¨ch
) {

1277 
	`mv¥ötw
(0, 0, "searching: %s",

1278 
m©ch_°©e
.
∑âîn
);

1279 
	`˛π€ﬁ
();

1281 
	`ª‰esh_Æl_wödows
(
maö_wödow
);

1282 
ªs
 = 
	`wgëch
(
	`míu_wö
(
cur£s_míu
));

1283 i‡(!
ªs
)

1285 i‡(
	`do_m©ch
(
ªs
, &
m©ch_°©e
, &
£À˘ed_ödex
) == 0) {

1286 i‡(
£À˘ed_ödex
 != -1)

1287 
	`˚¡î_ôem
(
£À˘ed_ödex
,

1288 &
œ°_t›_row
);

1291 i‡(
	`¥o˚ss_•ecül_keys
(

1292 &
ªs
,

1293 (
míu
 *Ë
	`ôem_d©a
()))

1295 
ªs
) {

1296 
KEY_DOWN
:

1297 
	`míu_drivî
(
cur£s_míu
, 
REQ_DOWN_ITEM
);

1299 
KEY_UP
:

1300 
	`míu_drivî
(
cur£s_míu
, 
REQ_UP_ITEM
);

1302 
KEY_NPAGE
:

1303 
	`míu_drivî
(
cur£s_míu
, 
REQ_SCR_DPAGE
);

1305 
KEY_PPAGE
:

1306 
	`míu_drivî
(
cur£s_míu
, 
REQ_SCR_UPAGE
);

1308 
KEY_HOME
:

1309 
	`míu_drivî
(
cur£s_míu
, 
REQ_FIRST_ITEM
);

1311 
KEY_END
:

1312 
	`míu_drivî
(
cur£s_míu
, 
REQ_LAST_ITEM
);

1316 
	`show_hñp
((
míu
 *Ë
	`ôem_d©a
());

1319 i‡(
ªs
 == 10 ||Ñes == 27 ||Ñes == ' ' ||

1320 
ªs
 =
KEY_LEFT
){

1323 
	`ª‰esh_Æl_wödows
(
maö_wödow
);

1326 i‡(
ªs
 =27 ||Ñe†=
KEY_LEFT
)

1329 
chûd
 = 
	`ôem_d©a
();

1330 i‡(!
chûd
 || !
	`míu_is_visibÀ
(chûdË|| !chûd->
sym
)

1332 
ªs
) {

1335 
KEY_RIGHT
:

1336 
	`sym_£t_åi°©e_vÆue
(
chûd
->
sym
, 
yes
);

1340 
	`show_hñp
(
chûd
);

1341 
a˘ive
 = 
chûd
->
sym
;

1343 
KEY_EXIT
:

1347 
	}
}

1349 
	$c⁄f_°rög
(
míu
 *menu)

1351 c⁄° *
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

1354 
ªs
;

1355 c⁄° *
hódög
;

1357 
	`sym_gë_ty≥
(
míu
->
sym
)) {

1358 
S_INT
:

1359 
hódög
 = 
	`_
(
öputbox_ö°ru˘i⁄s_öt
);

1361 
S_HEX
:

1362 
hódög
 = 
	`_
(
öputbox_ö°ru˘i⁄s_hex
);

1364 
S_STRING
:

1365 
hódög
 = 
	`_
(
öputbox_ö°ru˘i⁄s_°rög
);

1368 
hódög
 = 
	`_
("InternalÇconfÉrror!");

1370 
ªs
 = 
	`dülog_öputbox
(
maö_wödow
,

1371 
¥om±
 ? 
	`_
(prompt) : _("Main Menu"),

1372 
hódög
,

1373 
	`sym_gë_°rög_vÆue
(
míu
->
sym
),

1374 &
dülog_öput_ªsu…
,

1375 &
dülog_öput_ªsu…_Àn
);

1376 
ªs
) {

1378 i‡(
	`sym_£t_°rög_vÆue
(
míu
->
sym
,

1379 
dülog_öput_ªsu…
))

1381 
	`bä_dülog
(
maö_wödow
,

1382 
	`_
("You have madeán invalidÉntry."), 0);

1385 
	`show_hñp
(
míu
);

1387 
KEY_EXIT
:

1391 
	}
}

1393 
	$c⁄f_lﬂd
()

1396 
ªs
;

1397 
ªs
 = 
	`dülog_öputbox
(
maö_wödow
,

1398 
NULL
, 
lﬂd_c⁄fig_ãxt
,

1399 
fûíame
,

1400 &
dülog_öput_ªsu…
,

1401 &
dülog_öput_ªsu…_Àn
);

1402 
ªs
) {

1404 i‡(!
dülog_öput_ªsu…
[0])

1406 i‡(!
	`c⁄f_ªad
(
dülog_öput_ªsu…
)) {

1407 
	`£t_c⁄fig_fûíame
(
dülog_öput_ªsu…
);

1408 
	`sym_£t_ch™ge_cou¡
(1);

1411 
	`bä_dülog
(
maö_wödow
, 
	`_
("File doesÇotÉxist!"), 0);

1414 
	`show_s¸ﬁl_wö
(
maö_wödow
,

1415 
	`_
("Load Alternate Configuration"),

1416 
lﬂd_c⁄fig_hñp
);

1418 
KEY_EXIT
:

1422 
	}
}

1424 
	$c⁄f_ßve
()

1427 
ªs
;

1428 
ªs
 = 
	`dülog_öputbox
(
maö_wödow
,

1429 
NULL
, 
ßve_c⁄fig_ãxt
,

1430 
fûíame
,

1431 &
dülog_öput_ªsu…
,

1432 &
dülog_öput_ªsu…_Àn
);

1433 
ªs
) {

1435 i‡(!
dülog_öput_ªsu…
[0])

1437 
ªs
 = 
	`c⁄f_wrôe
(
dülog_öput_ªsu…
);

1438 i‡(!
ªs
) {

1439 
	`£t_c⁄fig_fûíame
(
dülog_öput_ªsu…
);

1442 
	`bä_dülog
(
maö_wödow
, 
	`_
("Can't create file! "

1447 
	`show_s¸ﬁl_wö
(
maö_wödow
,

1448 
	`_
("Save Alternate Configuration"),

1449 
ßve_c⁄fig_hñp
);

1451 
KEY_EXIT
:

1455 
	}
}

1457 
	$£tup_wödows
()

1459 
löes
, 
cﬁumns
;

1461 
	`gëmaxyx
(
°ds¸
, 
löes
, 
cﬁumns
);

1463 i‡(
maö_wödow
 !
NULL
)

1464 
	`dñwö
(
maö_wödow
);

1467 
maö_wödow
 = 
	`√wwö
(
löes
-2, 
cﬁumns
-2, 2, 1);

1468 
	`key∑d
(
maö_wödow
, 
TRUE
);

1469 
mwö_max_löes
 = 
löes
-7;

1470 
mwö_max_cﬁs
 = 
cﬁumns
-6;

1473 
	`√w_∑√l
(
maö_wödow
);

1474 
	}
}

1476 
	$maö
(
ac
, **
av
)

1478 
löes
, 
cﬁumns
;

1479 *
mode
;

1481 
	`£éoˇÀ
(
LC_ALL
, "");

1482 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

1483 
	`ãxtdomaö
(
PACKAGE
);

1485 i‡(
ac
 > 1 && 
	`°rcmp
(
av
[1], "-s") == 0) {

1487 
	`c⁄f_£t_mesßge_ˇŒback
(
NULL
);

1488 
av
++;

1490 
	`c⁄f_∑r£
(
av
[1]);

1491 
	`c⁄f_ªad
(
NULL
);

1493 
mode
 = 
	`gëív
("NCONFIG_MODE");

1494 i‡(
mode
) {

1495 i‡(!
	`°rˇ£cmp
(
mode
, "single_menu"))

1496 
sögÀ_míu_mode
 = 1;

1500 
	`öôs¸
();

1502 
	`£t_cﬁ‹s
();

1504 
	`cbªak
();

1505 
	`n€cho
();

1506 
	`key∑d
(
°ds¸
, 
TRUE
);

1507 
	`curs_£t
(0);

1509 
	`gëmaxyx
(
°ds¸
, 
löes
, 
cﬁumns
);

1510 i‡(
cﬁumns
 < 75 || 
löes
 < 20) {

1511 
	`ídwö
();

1512 
	`¥ötf
("YourÅerminal should haveát "

1517 
	`nŸimeout
(
°ds¸
, 
FALSE
);

1518 #i‡
NCURSES_REENTRANT


1519 
	`£t_escdñay
(1);

1521 
ESCDELAY
 = 1;

1525 
cur£s_míu
 = 
	`√w_míu
(
cur£s_míu_ôems
);

1526 
	`míu_›ts_off
(
cur£s_míu
, 
O_SHOWDESC
);

1527 
	`míu_›ts_⁄
(
cur£s_míu
, 
O_SHOWMATCH
);

1528 
	`míu_›ts_⁄
(
cur£s_míu
, 
O_ONEVALUE
);

1529 
	`míu_›ts_⁄
(
cur£s_míu
, 
O_NONCYCLIC
);

1530 
	`míu_›ts_⁄
(
cur£s_míu
, 
O_IGNORECASE
);

1531 
	`£t_míu_m¨k
(
cur£s_míu
, " ");

1532 
	`£t_míu_f‹e
(
cur£s_míu
, 
©åibuãs
[
MAIN_MENU_FORE
]);

1533 
	`£t_míu_back
(
cur£s_míu
, 
©åibuãs
[
MAIN_MENU_BACK
]);

1534 
	`£t_míu_gªy
(
cur£s_míu
, 
©åibuãs
[
MAIN_MENU_GREY
]);

1536 
	`£t_c⁄fig_fûíame
(
	`c⁄f_gë_c⁄fig«me
());

1537 
	`£tup_wödows
();

1540 i‡(
	`has_key
(
	`KEY_F
(1)Ë=
FALSE
) {

1541 
	`show_s¸ﬁl_wö
(
maö_wödow
,

1542 
	`_
("Instructions"),

1543 
	`_
(
míu_no_f_ö°ru˘i⁄s
));

1546 
	`c⁄f_£t_mesßge_ˇŒback
(
c⁄f_mesßge_ˇŒback
);

1548 !
globÆ_exô
) {

1549 
	`c⁄f
(&
roŸmíu
);

1550 i‡(!
globÆ_exô
 && 
	`do_exô
() == 0)

1554 
	`u≈o°_míu
(
cur£s_míu
);

1555 
	`‰ì_míu
(
cur£s_míu
);

1556 
	`dñwö
(
maö_wödow
);

1557 
	`˛ór
();

1558 
	`ª‰esh
();

1559 
	`ídwö
();

1561 
	}
}

	@swupdate/scripts/kconfig/nconf.gui.c

8 
	~"nc⁄f.h
"

11 
©åibuãs_t
 
	g©åibuãs
[
ATTR_MAX
+1] = {0};

23 
	$£t_n‹mÆ_cﬁ‹s
()

25 
	`öô_∑ú
(
NORMAL
, -1, -1);

26 
	`öô_∑ú
(
MAIN_HEADING
, 
COLOR_MAGENTA
, -1);

29 
	`öô_∑ú
(
MAIN_MENU_FORE
, -1, -1);

31 
	`öô_∑ú
(
MAIN_MENU_BACK
, -1, -1);

32 
	`öô_∑ú
(
MAIN_MENU_GREY
, -1, -1);

33 
	`öô_∑ú
(
MAIN_MENU_HEADING
, 
COLOR_GREEN
, -1);

34 
	`öô_∑ú
(
MAIN_MENU_BOX
, 
COLOR_YELLOW
, -1);

36 
	`öô_∑ú
(
SCROLLWIN_TEXT
, -1, -1);

37 
	`öô_∑ú
(
SCROLLWIN_HEADING
, 
COLOR_GREEN
, -1);

38 
	`öô_∑ú
(
SCROLLWIN_BOX
, 
COLOR_YELLOW
, -1);

40 
	`öô_∑ú
(
DIALOG_TEXT
, -1, -1);

41 
	`öô_∑ú
(
DIALOG_BOX
, 
COLOR_YELLOW
, -1);

42 
	`öô_∑ú
(
DIALOG_MENU_BACK
, 
COLOR_YELLOW
, -1);

43 
	`öô_∑ú
(
DIALOG_MENU_FORE
, 
COLOR_RED
, -1);

45 
	`öô_∑ú
(
INPUT_BOX
, 
COLOR_YELLOW
, -1);

46 
	`öô_∑ú
(
INPUT_HEADING
, 
COLOR_GREEN
, -1);

47 
	`öô_∑ú
(
INPUT_TEXT
, -1, -1);

48 
	`öô_∑ú
(
INPUT_FIELD
, -1, -1);

50 
	`öô_∑ú
(
FUNCTION_HIGHLIGHT
, -1, -1);

51 
	`öô_∑ú
(
FUNCTION_TEXT
, 
COLOR_YELLOW
, -1);

52 
	}
}

68 
	$n‹mÆ_cﬁ‹_theme
()

71 
	#mk©å
(
«me
, 
©å
) do { \

72 
©åibuãs
[
«me
] = 
©å
 | 
	`COLOR_PAIR
“ame); } 0)

	)

73 
	`mk©å
(
NORMAL
, NORMAL);

74 
	`mk©å
(
MAIN_HEADING
, 
A_BOLD
 | 
A_UNDERLINE
);

76 
	`mk©å
(
MAIN_MENU_FORE
, 
A_REVERSE
);

77 
	`mk©å
(
MAIN_MENU_BACK
, 
A_NORMAL
);

78 
	`mk©å
(
MAIN_MENU_GREY
, 
A_NORMAL
);

79 
	`mk©å
(
MAIN_MENU_HEADING
, 
A_BOLD
);

80 
	`mk©å
(
MAIN_MENU_BOX
, 
A_NORMAL
);

82 
	`mk©å
(
SCROLLWIN_TEXT
, 
A_NORMAL
);

83 
	`mk©å
(
SCROLLWIN_HEADING
, 
A_BOLD
);

84 
	`mk©å
(
SCROLLWIN_BOX
, 
A_BOLD
);

86 
	`mk©å
(
DIALOG_TEXT
, 
A_BOLD
);

87 
	`mk©å
(
DIALOG_BOX
, 
A_BOLD
);

88 
	`mk©å
(
DIALOG_MENU_FORE
, 
A_STANDOUT
);

89 
	`mk©å
(
DIALOG_MENU_BACK
, 
A_NORMAL
);

91 
	`mk©å
(
INPUT_BOX
, 
A_NORMAL
);

92 
	`mk©å
(
INPUT_HEADING
, 
A_BOLD
);

93 
	`mk©å
(
INPUT_TEXT
, 
A_NORMAL
);

94 
	`mk©å
(
INPUT_FIELD
, 
A_UNDERLINE
);

96 
	`mk©å
(
FUNCTION_HIGHLIGHT
, 
A_BOLD
);

97 
	`mk©å
(
FUNCTION_TEXT
, 
A_REVERSE
);

98 
	}
}

100 
	$no_cﬁ‹s_theme
()

103 
	#mk©ån
(
«me
, 
©å
Ë{ 
©åibuãs
[«me] =áâr; }

	)

105 
	`mk©ån
(
NORMAL
, NORMAL);

106 
	`mk©ån
(
MAIN_HEADING
, 
A_BOLD
 | 
A_UNDERLINE
);

108 
	`mk©ån
(
MAIN_MENU_FORE
, 
A_STANDOUT
);

109 
	`mk©ån
(
MAIN_MENU_BACK
, 
A_NORMAL
);

110 
	`mk©ån
(
MAIN_MENU_GREY
, 
A_NORMAL
);

111 
	`mk©ån
(
MAIN_MENU_HEADING
, 
A_BOLD
);

112 
	`mk©ån
(
MAIN_MENU_BOX
, 
A_NORMAL
);

114 
	`mk©ån
(
SCROLLWIN_TEXT
, 
A_NORMAL
);

115 
	`mk©ån
(
SCROLLWIN_HEADING
, 
A_BOLD
);

116 
	`mk©ån
(
SCROLLWIN_BOX
, 
A_BOLD
);

118 
	`mk©ån
(
DIALOG_TEXT
, 
A_NORMAL
);

119 
	`mk©ån
(
DIALOG_BOX
, 
A_BOLD
);

120 
	`mk©ån
(
DIALOG_MENU_FORE
, 
A_STANDOUT
);

121 
	`mk©ån
(
DIALOG_MENU_BACK
, 
A_NORMAL
);

123 
	`mk©ån
(
INPUT_BOX
, 
A_BOLD
);

124 
	`mk©ån
(
INPUT_HEADING
, 
A_BOLD
);

125 
	`mk©ån
(
INPUT_TEXT
, 
A_NORMAL
);

126 
	`mk©ån
(
INPUT_FIELD
, 
A_UNDERLINE
);

128 
	`mk©ån
(
FUNCTION_HIGHLIGHT
, 
A_BOLD
);

129 
	`mk©ån
(
FUNCTION_TEXT
, 
A_REVERSE
);

130 
	}
}

132 
	$£t_cﬁ‹s
()

134 
	`°¨t_cﬁ‹
();

135 
	`u£_deÁu…_cﬁ‹s
();

136 
	`£t_n‹mÆ_cﬁ‹s
();

137 i‡(
	`has_cﬁ‹s
()) {

138 
	`n‹mÆ_cﬁ‹_theme
();

141 
	`no_cﬁ‹s_theme
();

143 
	}
}

147 
	$¥öt_ö_middÀ
(
WINDOW
 *
wö
,

148 
°¨ty
,

149 
°¨tx
,

150 
width
,

151 c⁄° *
°rög
,

152 
chty≥
 
cﬁ‹
)

153 { 
Àngth
, 
x
, 
y
;

154 
ãmp
;

157 i‡(
wö
 =
NULL
)

158 
wö
 = 
°ds¸
;

159 
	`gëyx
(
wö
, 
y
, 
x
);

160 i‡(
°¨tx
 != 0)

161 
x
 = 
°¨tx
;

162 i‡(
°¨ty
 != 0)

163 
y
 = 
°¨ty
;

164 i‡(
width
 == 0)

165 
width
 = 80;

167 
Àngth
 = 
	`°æí
(
°rög
);

168 
ãmp
 = (
width
 - 
Àngth
) / 2;

169 
x
 = 
°¨tx
 + ()
ãmp
;

170 (Ë
	`w©å£t
(
wö
, 
cﬁ‹
);

171 
	`mvw¥ötw
(
wö
, 
y
, 
x
, "%s", 
°rög
);

172 
	`ª‰esh
();

173 
	}
}

175 
	$gë_löe_no
(c⁄° *
ãxt
)

177 
i
;

178 
tŸÆ
 = 1;

180 i‡(!
ãxt
)

183 
i
 = 0; 
ãxt
[i] != '\0'; i++)

184 i‡(
ãxt
[
i
] == '\n')

185 
tŸÆ
++;

186  
tŸÆ
;

187 
	}
}

189 c⁄° *
	$gë_löe
(c⁄° *
ãxt
, 
löe_no
)

191 
i
;

192 
löes
 = 0;

194 i‡(!
ãxt
)

197 
i
 = 0; 
ãxt
[i] !'\0' && 
löes
 < 
löe_no
; i++)

198 i‡(
ãxt
[
i
] == '\n')

199 
löes
++;

200  
ãxt
+
i
;

201 
	}
}

203 
	$gë_löe_Àngth
(c⁄° *
löe
)

205 
ªs
 = 0;

206 *
löe
 != '\0' && *line != '\n') {

207 
löe
++;

208 
ªs
++;

210  
ªs
;

211 
	}
}

214 
	$fûl_wödow
(
WINDOW
 *
wö
, c⁄° *
ãxt
)

216 
x
, 
y
;

217 
tŸÆ_löes
 = 
	`gë_löe_no
(
ãxt
);

218 
i
;

220 
	`gëmaxyx
(
wö
, 
y
, 
x
);

222 
tŸÆ_löes
 = 
	`mö
—ŸÆ_löes, 
y
);

223 
i
 = 0; i < 
tŸÆ_löes
; i++) {

224 
tmp
[
x
+10];

225 c⁄° *
löe
 = 
	`gë_löe
(
ãxt
, 
i
);

226 
Àn
 = 
	`gë_löe_Àngth
(
löe
);

227 
	`°∫˝y
(
tmp
, 
löe
, 
	`mö
(
Àn
, 
x
));

228 
tmp
[
Àn
] = '\0';

229 
	`mvw¥ötw
(
wö
, 
i
, 0, "%s", 
tmp
);

231 
	}
}

241 
	$bä_dülog
(
WINDOW
 *
maö_wödow
, c⁄° *
msg
, 
bä_num
, ...)

243 
va_li°
 
≠
;

244 *
bä
;

245 
bäs_width
 = 0;

246 
msg_löes
 = 0;

247 
msg_width
 = 0;

248 
tŸÆ_width
;

249 
wö_rows
 = 0;

250 
WINDOW
 *
wö
;

251 
WINDOW
 *
msg_wö
;

252 
WINDOW
 *
míu_wö
;

253 
MENU
 *
míu
;

254 
ITEM
 *
bäs
[
bä_num
+1];

255 
i
, 
x
, 
y
;

256 
ªs
 = -1;

259 
	`va_°¨t
(
≠
, 
bä_num
);

260 
i
 = 0; i < 
bä_num
; i++) {

261 
bä
 = 
	`va_¨g
(
≠
, *);

262 
bäs
[
i
] = 
	`√w_ôem
(
bä
, "");

263 
bäs_width
 +
	`°æí
(
bä
)+1;

265 
	`va_íd
(
≠
);

266 
bäs
[
bä_num
] = 
NULL
;

269 
msg_löes
 = 
	`gë_löe_no
(
msg
);

270 
i
 = 0; i < 
msg_löes
; i++) {

271 c⁄° *
löe
 = 
	`gë_löe
(
msg
, 
i
);

272 
Àn
 = 
	`gë_löe_Àngth
(
löe
);

273 i‡(
msg_width
 < 
Àn
)

274 
msg_width
 = 
Àn
;

277 
tŸÆ_width
 = 
	`max
(
msg_width
, 
bäs_width
);

279 
y
 = (
	`gëmaxy
(
°ds¸
)-(
msg_löes
+4))/2;

280 
x
 = (
	`gëmaxx
(
°ds¸
)-(
tŸÆ_width
+4))/2;

284 i‡(
bä_num
 > 0)

285 
wö_rows
 = 
msg_löes
+4;

287 
wö_rows
 = 
msg_löes
+2;

289 
wö
 = 
	`√wwö
(
wö_rows
, 
tŸÆ_width
+4, 
y
, 
x
);

290 
	`key∑d
(
wö
, 
TRUE
);

291 
míu_wö
 = 
	`dîwö
(
wö
, 1, 
bäs_width
, 
wö_rows
-2,

292 1+(
tŸÆ_width
+2-
bäs_width
)/2);

293 
míu
 = 
	`√w_míu
(
bäs
);

294 
msg_wö
 = 
	`dîwö
(
wö
, 
wö_rows
-2, 
msg_width
, 1,

295 1+(
tŸÆ_width
+2-
msg_width
)/2);

297 
	`£t_míu_f‹e
(
míu
, 
©åibuãs
[
DIALOG_MENU_FORE
]);

298 
	`£t_míu_back
(
míu
, 
©åibuãs
[
DIALOG_MENU_BACK
]);

300 (Ë
	`w©å£t
(
wö
, 
©åibuãs
[
DIALOG_BOX
]);

301 
	`box
(
wö
, 0, 0);

304 (Ë
	`w©å£t
(
msg_wö
, 
©åibuãs
[
DIALOG_TEXT
]);

305 
	`fûl_wödow
(
msg_wö
, 
msg
);

307 
	`£t_míu_wö
(
míu
, 
wö
);

308 
	`£t_míu_sub
(
míu
, 
míu_wö
);

309 
	`£t_míu_f‹m©
(
míu
, 1, 
bä_num
);

310 
	`míu_›ts_off
(
míu
, 
O_SHOWDESC
);

311 
	`míu_›ts_off
(
míu
, 
O_SHOWMATCH
);

312 
	`míu_›ts_⁄
(
míu
, 
O_ONEVALUE
);

313 
	`míu_›ts_⁄
(
míu
, 
O_NONCYCLIC
);

314 
	`£t_míu_m¨k
(
míu
, "");

315 
	`po°_míu
(
míu
);

318 
	`touchwö
(
wö
);

319 
	`ª‰esh_Æl_wödows
(
maö_wödow
);

320 (
ªs
 = 
	`wgëch
(
wö
))) {

321 
ªs
) {

322 
KEY_LEFT
:

323 
	`míu_drivî
(
míu
, 
REQ_LEFT_ITEM
);

325 
KEY_RIGHT
:

326 
	`míu_drivî
(
míu
, 
REQ_RIGHT_ITEM
);

331 
	`KEY_F
(
F_BACK
):

332 
	`KEY_F
(
F_EXIT
):

335 
	`touchwö
(
wö
);

336 
	`ª‰esh_Æl_wödows
(
maö_wödow
);

338 i‡(
ªs
 == 10 ||Ñes == ' ') {

339 
ªs
 = 
	`ôem_ödex
(
	`cuºít_ôem
(
míu
));

341 } i‡(
ªs
 =27 ||Ñe†=
	`KEY_F
(
F_BACK
) ||

342 
ªs
 =
	`KEY_F
(
F_EXIT
)) {

343 
ªs
 = 
KEY_EXIT
;

348 
	`u≈o°_míu
(
míu
);

349 
	`‰ì_míu
(
míu
);

350 
i
 = 0; i < 
bä_num
; i++)

351 
	`‰ì_ôem
(
bäs
[
i
]);

353 
	`dñwö
(
wö
);

354  
ªs
;

355 
	}
}

357 
	$dülog_öputbox
(
WINDOW
 *
maö_wödow
,

358 c⁄° *
tôÀ
, c⁄° *
¥om±
,

359 c⁄° *
öô
, **
ªsu…p
, *
ªsu…_Àn
)

361 
¥om±_löes
 = 0;

362 
¥om±_width
 = 0;

363 
WINDOW
 *
wö
;

364 
WINDOW
 *
¥om±_wö
;

365 
WINDOW
 *
f‹m_wö
;

366 
PANEL
 *
∑√l
;

367 
i
, 
x
, 
y
;

368 
ªs
 = -1;

369 
curs‹_posôi⁄
 = 
	`°æí
(
öô
);

370 
curs‹_f‹m_wö
;

371 *
ªsu…
 = *
ªsu…p
;

373 i‡(
	`°æí
(
öô
)+1 > *
ªsu…_Àn
) {

374 *
ªsu…_Àn
 = 
	`°æí
(
öô
)+1;

375 *
ªsu…p
 = 
ªsu…
 = 
	`ªÆloc
‘esu…, *
ªsu…_Àn
);

379 
¥om±_löes
 = 
	`gë_löe_no
(
¥om±
);

380 
i
 = 0; i < 
¥om±_löes
; i++) {

381 c⁄° *
löe
 = 
	`gë_löe
(
¥om±
, 
i
);

382 
Àn
 = 
	`gë_löe_Àngth
(
löe
);

383 
¥om±_width
 = 
	`max
’rom±_width, 
Àn
);

386 i‡(
tôÀ
)

387 
¥om±_width
 = 
	`max
’rom±_width, 
	`°æí
(
tôÀ
));

390 
y
 = (
	`gëmaxy
(
°ds¸
)-(
¥om±_löes
+4))/2;

391 
x
 = (
	`gëmaxx
(
°ds¸
)-(
¥om±_width
+4))/2;

393 
	`°∫˝y
(
ªsu…
, 
öô
, *
ªsu…_Àn
);

396 
wö
 = 
	`√wwö
(
¥om±_löes
+6, 
¥om±_width
+7, 
y
, 
x
);

397 
¥om±_wö
 = 
	`dîwö
(
wö
, 
¥om±_löes
+1, 
¥om±_width
, 2, 2);

398 
f‹m_wö
 = 
	`dîwö
(
wö
, 1, 
¥om±_width
, 
¥om±_löes
+3, 2);

399 
	`key∑d
(
f‹m_wö
, 
TRUE
);

401 (Ë
	`w©å£t
(
f‹m_wö
, 
©åibuãs
[
INPUT_FIELD
]);

403 (Ë
	`w©å£t
(
wö
, 
©åibuãs
[
INPUT_BOX
]);

404 
	`box
(
wö
, 0, 0);

405 (Ë
	`w©å£t
(
wö
, 
©åibuãs
[
INPUT_HEADING
]);

406 i‡(
tôÀ
)

407 
	`mvw¥ötw
(
wö
, 0, 3, "%s", 
tôÀ
);

410 (Ë
	`w©å£t
(
¥om±_wö
, 
©åibuãs
[
INPUT_TEXT
]);

411 
	`fûl_wödow
(
¥om±_wö
, 
¥om±
);

413 
	`mvw¥ötw
(
f‹m_wö
, 0, 0, "%*s", 
¥om±_width
, " ");

414 
curs‹_f‹m_wö
 = 
	`mö
(
curs‹_posôi⁄
, 
¥om±_width
-1);

415 
	`mvw¥ötw
(
f‹m_wö
, 0, 0, "%s",

416 
ªsu…
 + 
curs‹_posôi⁄
-
curs‹_f‹m_wö
);

419 
∑√l
 = 
	`√w_∑√l
(
wö
);

422 
	`curs_£t
(1);

424 
	`touchwö
(
wö
);

425 
	`ª‰esh_Æl_wödows
(
maö_wödow
);

426 (
ªs
 = 
	`wgëch
(
f‹m_wö
))) {

427 
Àn
 = 
	`°æí
(
ªsu…
);

428 
ªs
) {

431 
	`KEY_F
(
F_HELP
):

432 
	`KEY_F
(
F_EXIT
):

433 
	`KEY_F
(
F_BACK
):

436 
KEY_BACKSPACE
:

437 i‡(
curs‹_posôi⁄
 > 0) {

438 
	`memmove
(&
ªsu…
[
curs‹_posôi⁄
-1],

439 &
ªsu…
[
curs‹_posôi⁄
],

440 
Àn
-
curs‹_posôi⁄
+1);

441 
curs‹_posôi⁄
--;

442 
curs‹_f‹m_wö
--;

443 
Àn
--;

446 
KEY_DC
:

447 i‡(
curs‹_posôi⁄
 >0 && curs‹_posôi⁄ < 
Àn
) {

448 
	`memmove
(&
ªsu…
[
curs‹_posôi⁄
],

449 &
ªsu…
[
curs‹_posôi⁄
+1],

450 
Àn
-
curs‹_posôi⁄
+1);

451 
Àn
--;

454 
KEY_UP
:

455 
KEY_RIGHT
:

456 i‡(
curs‹_posôi⁄
 < 
Àn
) {

457 
curs‹_posôi⁄
++;

458 
curs‹_f‹m_wö
++;

461 
KEY_DOWN
:

462 
KEY_LEFT
:

463 i‡(
curs‹_posôi⁄
 > 0) {

464 
curs‹_posôi⁄
--;

465 
curs‹_f‹m_wö
--;

468 
KEY_HOME
:

469 
curs‹_posôi⁄
 = 0;

470 
curs‹_f‹m_wö
 = 0;

472 
KEY_END
:

473 
curs‹_posôi⁄
 = 
Àn
;

474 
curs‹_f‹m_wö
 = 
	`mö
(
curs‹_posôi⁄
, 
¥om±_width
-1);

477 i‡((
	`isgøph
(
ªs
Ë|| 
	`is•a˚
(res))) {

479 i‡(
Àn
+2 > *
ªsu…_Àn
) {

480 *
ªsu…_Àn
 = 
Àn
+2;

481 *
ªsu…p
 = 
ªsu…
 = 
	`ªÆloc
(result,

482 *
ªsu…_Àn
);

485 
	`memmove
(&
ªsu…
[
curs‹_posôi⁄
+1],

486 &
ªsu…
[
curs‹_posôi⁄
],

487 
Àn
-
curs‹_posôi⁄
+1);

488 
ªsu…
[
curs‹_posôi⁄
] = 
ªs
;

489 
curs‹_posôi⁄
++;

490 
curs‹_f‹m_wö
++;

491 
Àn
++;

493 
	`mv¥ötw
(0, 0, "unknow¿key: %d\n", 
ªs
);

497 i‡(
curs‹_f‹m_wö
 < 0)

498 
curs‹_f‹m_wö
 = 0;

499 i‡(
curs‹_f‹m_wö
 > 
¥om±_width
-1)

500 
curs‹_f‹m_wö
 = 
¥om±_width
-1;

502 
	`wmove
(
f‹m_wö
, 0, 0);

503 
	`w˛π€ﬁ
(
f‹m_wö
);

504 
	`mvw¥ötw
(
f‹m_wö
, 0, 0, "%*s", 
¥om±_width
, " ");

505 
	`mvw¥ötw
(
f‹m_wö
, 0, 0, "%s",

506 
ªsu…
 + 
curs‹_posôi⁄
-
curs‹_f‹m_wö
);

507 
	`wmove
(
f‹m_wö
, 0, 
curs‹_f‹m_wö
);

508 
	`touchwö
(
wö
);

509 
	`ª‰esh_Æl_wödows
(
maö_wödow
);

511 i‡(
ªs
 == 10) {

512 
ªs
 = 0;

514 } i‡(
ªs
 =27 ||Ñe†=
	`KEY_F
(
F_BACK
) ||

515 
ªs
 =
	`KEY_F
(
F_EXIT
)) {

516 
ªs
 = 
KEY_EXIT
;

518 } i‡(
ªs
 =
	`KEY_F
(
F_HELP
)) {

519 
ªs
 = 1;

525 
	`curs_£t
(0);

526 
	`dñ_∑√l
(
∑√l
);

527 
	`dñwö
(
¥om±_wö
);

528 
	`dñwö
(
f‹m_wö
);

529 
	`dñwö
(
wö
);

530  
ªs
;

531 
	}
}

534 
	$ª‰esh_Æl_wödows
(
WINDOW
 *
maö_wödow
)

536 
	`upd©e_∑√ls
();

537 
	`touchwö
(
maö_wödow
);

538 
	`ª‰esh
();

539 
	}
}

542 
	$show_s¸ﬁl_wö
(
WINDOW
 *
maö_wödow
,

543 c⁄° *
tôÀ
,

544 c⁄° *
ãxt
)

546 
ªs
;

547 
tŸÆ_löes
 = 
	`gë_löe_no
(
ãxt
);

548 
x
, 
y
, 
löes
, 
cﬁumns
;

549 
°¨t_x
 = 0, 
°¨t_y
 = 0;

550 
ãxt_löes
 = 0, 
ãxt_cﬁs
 = 0;

551 
tŸÆ_cﬁs
 = 0;

552 
wö_cﬁs
 = 0;

553 
wö_löes
 = 0;

554 
i
 = 0;

555 
WINDOW
 *
wö
;

556 
WINDOW
 *
∑d
;

557 
PANEL
 *
∑√l
;

559 
	`gëmaxyx
(
°ds¸
, 
löes
, 
cﬁumns
);

562 
tŸÆ_löes
 = 
	`gë_löe_no
(
ãxt
);

563 
i
 = 0; i < 
tŸÆ_löes
; i++) {

564 c⁄° *
löe
 = 
	`gë_löe
(
ãxt
, 
i
);

565 
Àn
 = 
	`gë_löe_Àngth
(
löe
);

566 
tŸÆ_cﬁs
 = 
	`max
—ŸÆ_cﬁs, 
Àn
+2);

570 
∑d
 = 
	`√w∑d
(
tŸÆ_löes
+10, 
tŸÆ_cﬁs
+10);

571 (Ë
	`w©å£t
(
∑d
, 
©åibuãs
[
SCROLLWIN_TEXT
]);

572 
	`fûl_wödow
(
∑d
, 
ãxt
);

574 
wö_löes
 = 
	`mö
(
tŸÆ_löes
+4, 
löes
-2);

575 
wö_cﬁs
 = 
	`mö
(
tŸÆ_cﬁs
+2, 
cﬁumns
-2);

576 
ãxt_löes
 = 
	`max
(
wö_löes
-4, 0);

577 
ãxt_cﬁs
 = 
	`max
(
wö_cﬁs
-2, 0);

580 
y
 = (
löes
-
wö_löes
)/2;

581 
x
 = (
cﬁumns
-
wö_cﬁs
)/2;

583 
wö
 = 
	`√wwö
(
wö_löes
, 
wö_cﬁs
, 
y
, 
x
);

584 
	`key∑d
(
wö
, 
TRUE
);

586 (Ë
	`w©å£t
(
wö
, 
©åibuãs
[
SCROLLWIN_BOX
]);

587 
	`box
(
wö
, 0, 0);

588 (Ë
	`w©å£t
(
wö
, 
©åibuãs
[
SCROLLWIN_HEADING
]);

589 
	`mvw¥ötw
(
wö
, 0, 3, " %†", 
tôÀ
);

590 
∑√l
 = 
	`√w_∑√l
(
wö
);

595 
	`c›ywö
(
∑d
, 
wö
, 
°¨t_y
, 
°¨t_x
, 2, 2, 
ãxt_löes
,

596 
ãxt_cﬁs
, 0);

597 
	`¥öt_ö_middÀ
(
wö
,

598 
ãxt_löes
+2,

600 
ãxt_cﬁs
,

602 
©åibuãs
[
DIALOG_MENU_FORE
]);

603 
	`wª‰esh
(
wö
);

605 
ªs
 = 
	`wgëch
(
wö
);

606 
ªs
) {

607 
KEY_NPAGE
:

610 
°¨t_y
 +
ãxt_löes
-2;

612 
KEY_PPAGE
:

614 
°¨t_y
 -
ãxt_löes
+2;

616 
KEY_HOME
:

617 
°¨t_y
 = 0;

619 
KEY_END
:

620 
°¨t_y
 = 
tŸÆ_löes
-
ãxt_löes
;

622 
KEY_DOWN
:

624 
°¨t_y
++;

626 
KEY_UP
:

628 
°¨t_y
--;

630 
KEY_LEFT
:

632 
°¨t_x
--;

634 
KEY_RIGHT
:

636 
°¨t_x
++;

639 i‡(
ªs
 == 10 ||Ñes == 27 ||Ñes == 'q' ||

640 
ªs
 =
	`KEY_F
(
F_HELP
Ë||Ñe†=KEY_F(
F_BACK
) ||

641 
ªs
 =
	`KEY_F
(
F_EXIT
))

643 i‡(
°¨t_y
 < 0)

644 
°¨t_y
 = 0;

645 i‡(
°¨t_y
 >
tŸÆ_löes
-
ãxt_löes
)

646 
°¨t_y
 = 
tŸÆ_löes
-
ãxt_löes
;

647 i‡(
°¨t_x
 < 0)

648 
°¨t_x
 = 0;

649 i‡(
°¨t_x
 >
tŸÆ_cﬁs
-
ãxt_cﬁs
)

650 
°¨t_x
 = 
tŸÆ_cﬁs
-
ãxt_cﬁs
;

651 } 
ªs
);

653 
	`dñ_∑√l
(
∑√l
);

654 
	`dñwö
(
wö
);

655 
	`ª‰esh_Æl_wödows
(
maö_wödow
);

656 
	}
}

	@swupdate/scripts/kconfig/nconf.h

9 
	~<˘y≥.h
>

10 
	~<î∫o.h
>

11 
	~<f˙é.h
>

12 
	~<limôs.h
>

13 
	~<°d¨g.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<uni°d.h
>

17 
	~<loˇÀ.h
>

18 
	~<cur£s.h
>

19 
	~<míu.h
>

20 
	~<∑√l.h
>

21 
	~<f‹m.h
>

23 
	~<°dio.h
>

24 
	~<time.h
>

25 
	~<sys/time.h
>

27 
	~"ncur£s.h
"

29 
	#max
(
a
, 
b
) ({\

30 
	`ty≥of
(
a
Ë
_a
 =á;\

31 
	`ty≥of
(
b
Ë
_b
 = b;\

32 
_a
 > 
_b
 ? _®: _b; })

	)

34 
	#mö
(
a
, 
b
) ({\

35 
	`ty≥of
(
a
Ë
_a
 =á;\

36 
	`ty≥of
(
b
Ë
_b
 = b;\

37 
_a
 < 
_b
 ? _®: _b; })

	)

40 
	mNORMAL
 = 1,

41 
	mMAIN_HEADING
,

42 
	mMAIN_MENU_BOX
,

43 
	mMAIN_MENU_FORE
,

44 
	mMAIN_MENU_BACK
,

45 
	mMAIN_MENU_GREY
,

46 
	mMAIN_MENU_HEADING
,

47 
	mSCROLLWIN_TEXT
,

48 
	mSCROLLWIN_HEADING
,

49 
	mSCROLLWIN_BOX
,

50 
	mDIALOG_TEXT
,

51 
	mDIALOG_MENU_FORE
,

52 
	mDIALOG_MENU_BACK
,

53 
	mDIALOG_BOX
,

54 
	mINPUT_BOX
,

55 
	mINPUT_HEADING
,

56 
	mINPUT_TEXT
,

57 
	mINPUT_FIELD
,

58 
	mFUNCTION_TEXT
,

59 
	mFUNCTION_HIGHLIGHT
,

60 
	mATTR_MAX


61 } 
	t©åibuãs_t
;

62 
©åibuãs_t
 
©åibuãs
[];

65 
	mF_HELP
 = 1,

66 
	mF_SYMBOL
 = 2,

67 
	mF_INSTS
 = 3,

68 
	mF_CONF
 = 4,

69 
	mF_BACK
 = 5,

70 
	mF_SAVE
 = 6,

71 
	mF_LOAD
 = 7,

72 
	mF_SEARCH
 = 8,

73 
	mF_EXIT
 = 9,

74 } 
	tfun˘i⁄_key
;

76 
£t_cﬁ‹s
();

79 
¥öt_ö_middÀ
(
WINDOW
 *
wö
,

80 
°¨ty
,

81 
°¨tx
,

82 
width
,

83 c⁄° *
°rög
,

84 
chty≥
 
cﬁ‹
);

85 
gë_löe_Àngth
(c⁄° *
löe
);

86 
gë_löe_no
(c⁄° *
ãxt
);

87 c⁄° *
gë_löe
(c⁄° *
ãxt
, 
löe_no
);

88 
fûl_wödow
(
WINDOW
 *
wö
, c⁄° *
ãxt
);

89 
bä_dülog
(
WINDOW
 *
maö_wödow
, c⁄° *
msg
, 
bä_num
, ...);

90 
dülog_öputbox
(
WINDOW
 *
maö_wödow
,

91 c⁄° *
tôÀ
, c⁄° *
¥om±
,

92 c⁄° *
öô
, **
ªsu…p
, *
ªsu…_Àn
);

93 
ª‰esh_Æl_wödows
(
WINDOW
 *
maö_wödow
);

94 
show_s¸ﬁl_wö
(
WINDOW
 *
maö_wödow
,

95 c⁄° *
tôÀ
,

96 c⁄° *
ãxt
);

	@swupdate/scripts/kconfig/qconf.cc

6 
	~<qglobÆ.h
>

8 #i‡
QT_VERSION
 < 0x040000

9 
	~<°ddef.h
>

10 
	~<qmaöwödow.h
>

11 
	~<qvbox.h
>

12 
	~<qvÆuñi°.h
>

13 
	~<qãxtbrow£r.h
>

14 
	~<qa˘i⁄.h
>

15 
	~<qhódî.h
>

16 
	~<qfûedülog.h
>

17 
	~<qdøgobje˘.h
>

18 
	~<qp›upmíu.h
>

20 
	~<q3maöwödow.h
>

21 
	~<q3vbox.h
>

22 
	~<q3vÆuñi°.h
>

23 
	~<q3ãxtbrow£r.h
>

24 
	~<q3a˘i⁄.h
>

25 
	~<q3hódî.h
>

26 
	~<q3fûedülog.h
>

27 
	~<q3døgobje˘.h
>

28 
	~<q3p›upmíu.h
>

31 
	~<q≠∂iˇti⁄.h
>

32 
	~<qdeskt›widgë.h
>

33 
	~<qtoﬁb¨.h
>

34 
	~<qœyout.h
>

35 
	~<q•lôãr.h
>

36 
	~<qlöìdô.h
>

37 
	~<qœbñ.h
>

38 
	~<qpushbuâ⁄.h
>

39 
	~<qmíub¨.h
>

40 
	~<qmesßgebox.h
>

41 
	~<qªgexp.h
>

42 
	~<qevít.h
>

44 
	~<°dlib.h
>

46 
	~"lkc.h
"

47 
	~"qc⁄f.h
"

49 
	~"qc⁄f.moc
"

50 
	~"images.c
"

52 #ifde‡
_


53 #unde‡
_


54 
	#_
 
qgëãxt


	)

57 
QAµliˇti⁄
 *
	gc⁄figAµ
;

58 
C⁄figSëtögs
 *
	gc⁄figSëtögs
;

60 
Q3A˘i⁄
 *
	gC⁄figMaöWödow
::
ßveA˘i⁄
;

62 
ölöe
 
QSåög
 
	$qgëãxt
(c⁄° * 
°r
)

64  
QSåög
::
	`‰omLoˇl8Bô
(
	`gëãxt
(
°r
));

65 
	}
}

67 
ölöe
 
QSåög
 
	$qgëãxt
(c⁄° 
QSåög
& 
°r
)

69  
QSåög
::
	`‰omLoˇl8Bô
(
	`gëãxt
(
°r
.
	`œtö1
()));

70 
	}
}

72 
	gC⁄figSëtögs
::
	$C⁄figSëtögs
()

73 : 
	`QSëtögs
("kernel.org", "qconf")

75 
	}
}

80 
	gQ3VÆueLi°
<> 
	gC⁄figSëtögs
::
	$ªadSizes
(c⁄° 
QSåög
& 
key
, 
boﬁ
 *
ok
)

82 
Q3VÆueLi°
<> 
ªsu…
;

83 
QSåögLi°
 
íåyLi°
 = 
	`ªadLi°E¡ry
(
key
, 
ok
);

84 
QSåögLi°
::
Iãøt‹
 
ô
;

86 
ô
 = 
íåyLi°
.
	`begö
(); ià!íåyLi°.
	`íd
(); ++it)

87 
ªsu…
.
	`push_back
((*
ô
).
	`toI¡
());

89  
ªsu…
;

90 
	}
}

95 
boﬁ
 
	gC⁄figSëtögs
::
wrôeSizes
(c⁄° 
QSåög
& 
key
, c⁄° 
Q3VÆueLi°
<>& 
vÆue
)

97 
QSåögLi°
 
	g°rögLi°
;

98 
	gQ3VÆueLi°
<>::
C⁄°Iãøt‹
 
ô
;

100 
	gô
 = 
vÆue
.
begö
(); ià!vÆue.
íd
(); ++it)

101 
	g°rögLi°
.
push_back
(
QSåög
::
numbî
(*
ô
));

102  
wrôeE¡ry
(
key
, 
°rögLi°
);

110 
	gC⁄figIãm
::
	$okRíame
(
cﬁ
)

112 
P¨ít
::
	`okRíame
(
cﬁ
);

113 
	`sym_£t_°rög_vÆue
(
míu
->
sym
, 
	`ãxt
(
d©aCﬁIdx
).
	`œtö1
());

114 
	`li°Võw
()->
	`upd©eLi°
(
this
);

115 
	}
}

120 
	gC⁄figIãm
::
	$upd©eMíu
()

122 
C⁄figLi°
* 
li°
;

123 
symbﬁ
* 
sym
;

124 
¥›îty
 *
¥›
;

125 
QSåög
 
¥om±
;

126 
ty≥
;

127 
åi°©e
 
ex¥
;

129 
li°
 = 
	`li°Võw
();

130 i‡(
goP¨ít
) {

131 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
míuBackPix
);

132 
¥om±
 = "..";

133 
£t_¥om±
;

136 
sym
 = 
míu
->sym;

137 
¥›
 = 
míu
->
¥om±
;

138 
¥om±
 = 
	`_
(
	`míu_gë_¥om±
(
míu
));

140 i‡(
¥›
Ë¥›->
ty≥
) {

141 
P_MENU
:

142 i‡(
li°
->
mode
 =
sögÀMode
 ||Üi°->modê=
symbﬁMode
) {

146 i‡(
sym
 && 
li°
->
roŸE¡ry
 =
míu
)

148 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
míuPix
);

150 i‡(
sym
)

152 
	`£tPixm≠
(
¥om±CﬁIdx
, 0);

154 
£t_¥om±
;

155 
P_COMMENT
:

156 
	`£tPixm≠
(
¥om±CﬁIdx
, 0);

157 
£t_¥om±
;

161 i‡(!
sym
)

162 
£t_¥om±
;

164 
	`£tText
(
«meCﬁIdx
, 
QSåög
::
	`‰omLoˇl8Bô
(
sym
->
«me
));

166 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

167 
ty≥
) {

168 
S_BOOLEAN
:

169 
S_TRISTATE
:

170 
ch
;

172 i‡(!
	`sym_is_ch™gabÀ
(
sym
Ë&& 
li°
->
›tMode
 =
n‹mÆO±
) {

173 
	`£tPixm≠
(
¥om±CﬁIdx
, 0);

174 
	`£tText
(
noCﬁIdx
, 
QSåög
::
nuŒ
);

175 
	`£tText
(
modCﬁIdx
, 
QSåög
::
nuŒ
);

176 
	`£tText
(
yesCﬁIdx
, 
QSåög
::
nuŒ
);

179 
ex¥
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

180 
ex¥
) {

181 
yes
:

182 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& 
ty≥
 =
S_BOOLEAN
)

183 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
choi˚YesPix
);

185 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
symbﬁYesPix
);

186 
	`£tText
(
yesCﬁIdx
, "Y");

187 
ch
 = 'Y';

189 
mod
:

190 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
symbﬁModPix
);

191 
	`£tText
(
modCﬁIdx
, "M");

192 
ch
 = 'M';

195 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& 
ty≥
 =
S_BOOLEAN
)

196 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
choi˚NoPix
);

198 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
symbﬁNoPix
);

199 
	`£tText
(
noCﬁIdx
, "N");

200 
ch
 = 'N';

203 i‡(
ex¥
 !
no
)

204 
	`£tText
(
noCﬁIdx
, 
	`sym_åi°©e_wôhö_ønge
(
sym
, 
no
) ? "_" : 0);

205 i‡(
ex¥
 !
mod
)

206 
	`£tText
(
modCﬁIdx
, 
	`sym_åi°©e_wôhö_ønge
(
sym
, 
mod
) ? "_" : 0);

207 i‡(
ex¥
 !
yes
)

208 
	`£tText
(
yesCﬁIdx
, 
	`sym_åi°©e_wôhö_ønge
(
sym
, 
yes
) ? "_" : 0);

210 
	`£tText
(
d©aCﬁIdx
, 
	`QCh¨
(
ch
));

212 
S_INT
:

213 
S_HEX
:

214 
S_STRING
:

215 c⁄° * 
d©a
;

217 
d©a
 = 
	`sym_gë_°rög_vÆue
(
sym
);

219 
i
 = 
li°
->
	`m≠Idx
(
d©aCﬁIdx
);

220 i‡(
i
 >= 0)

221 
	`£tRíameE«bÀd
(
i
, 
TRUE
);

222 
	`£tText
(
d©aCﬁIdx
, 
d©a
);

223 i‡(
ty≥
 =
S_STRING
)

224 
¥om±
 = 
	`QSåög
("%1: %2").
	`¨g
’rom±).¨g(
d©a
);

226 
¥om±
 = 
	`QSåög
("(%2Ë%1").
	`¨g
’rom±).¨g(
d©a
);

229 i‡(!
	`sym_has_vÆue
(
sym
Ë&& 
visibÀ
)

230 
¥om±
 +
	`_
(" (NEW)");

231 
£t_¥om±
:

232 
	`£tText
(
¥om±CﬁIdx
, 
¥om±
);

233 
	}
}

235 
	gC⁄figIãm
::
	$ã°Upd©eMíu
(
boﬁ
 
v
)

237 
C⁄figIãm
* 
i
;

239 
visibÀ
 = 
v
;

240 i‡(!
míu
)

243 
	`sym_ˇlc_vÆue
(
míu
->
sym
);

244 i‡(
míu
->
Êags
 & 
MENU_CHANGED
) {

246 
míu
->
Êags
 &~
MENU_CHANGED
;

247 
i
 = (
C⁄figIãm
*)
míu
->
d©a
; i; i = i->
√xtIãm
)

248 
i
->
	`upd©eMíu
();

249 } i‡(
	`li°Võw
()->
upd©eAŒ
)

250 
	`upd©eMíu
();

251 
	}
}

253 
	gC⁄figIãm
::
	$∑ötCñl
(
QPaöãr
* 
p
, c⁄° 
QCﬁ‹Group
& 
cg
, 
cﬁumn
, 
width
, 
Æign
)

255 
C⁄figLi°
* 
li°
 = 
	`li°Võw
();

257 i‡(
visibÀ
) {

258 i‡(
	`isSñe˘ed
(Ë&& !
li°
->
	`hasFocus
(Ë&&Üi°->
mode
 =
míuMode
)

259 
P¨ít
::
	`∑ötCñl
(
p
, 
li°
->
öa˘ivedCﬁ‹Group
, 
cﬁumn
, 
width
, 
Æign
);

261 
P¨ít
::
	`∑ötCñl
(
p
, 
cg
, 
cﬁumn
, 
width
, 
Æign
);

263 
P¨ít
::
	`∑ötCñl
(
p
, 
li°
->
dißbÀdCﬁ‹Group
, 
cﬁumn
, 
width
, 
Æign
);

264 
	}
}

269 
	gC⁄figIãm
::
	$öô
()

271 i‡(
míu
) {

272 
C⁄figLi°
* 
li°
 = 
	`li°Võw
();

273 
√xtIãm
 = (
C⁄figIãm
*)
míu
->
d©a
;

274 
míu
->
d©a
 = 
this
;

276 i‡(
li°
->
mode
 !
fuŒMode
)

277 
	`£tO≥n
(
TRUE
);

278 
	`sym_ˇlc_vÆue
(
míu
->
sym
);

280 
	`upd©eMíu
();

281 
	}
}

286 
	gC⁄figIãm
::~
	$C⁄figIãm
()

288 i‡(
míu
) {

289 
C⁄figIãm
** 
ù
 = (C⁄figIãm**)&
míu
->
d©a
;

290 ; *
ù
; i∞&(*ù)->
√xtIãm
) {

291 i‡(*
ù
 =
this
) {

292 *
ù
 = 
√xtIãm
;

297 
	}
}

299 
	gC⁄figLöeEdô
::
	$C⁄figLöeEdô
(
C⁄figVõw
* 
∑ª¡
)

300 : 
	$P¨ít
(
∑ª¡
)

302 
	`c⁄√˘
(
this
, 
	`SIGNAL
(
	`lo°Focus
()), 
	`SLOT
(
	`hide
()));

303 
	}
}

305 
	gC⁄figLöeEdô
::
	$show
(
C⁄figIãm
* 
i
)

307 
ôem
 = 
i
;

308 i‡(
	`sym_gë_°rög_vÆue
(
ôem
->
míu
->
sym
))

309 
	`£tText
(
QSåög
::
	`‰omLoˇl8Bô
(
	`sym_gë_°rög_vÆue
(
ôem
->
míu
->
sym
)));

311 
	`£tText
(
QSåög
::
nuŒ
);

312 
P¨ít
::
	`show
();

313 
	`£tFocus
();

314 
	}
}

316 
	gC⁄figLöeEdô
::
	$keyPªssEvít
(
QKeyEvít
* 
e
)

318 
e
->
	`key
()) {

319 
Qt
::
Key_Esˇ≥
:

321 
Qt
::
Key_Rëu∫
:

322 
Qt
::
Key_E¡î
:

323 
	`sym_£t_°rög_vÆue
(
ôem
->
míu
->
sym
, 
	`ãxt
().
	`œtö1
());

324 
	`∑ª¡
()->
	`upd©eLi°
(
ôem
);

327 
P¨ít
::
	`keyPªssEvít
(
e
);

330 
e
->
	`ac˚±
();

331 
	`∑ª¡
()->
li°
->
	`£tFocus
();

332 
	`hide
();

333 
	}
}

335 
	gC⁄figLi°
::
	$C⁄figLi°
(
C⁄figVõw
* 
p
, c⁄° *
«me
)

336 : 
	`P¨ít
(
p
, 
«me
),

337 
	`upd©eAŒ
(
Ál£
),

338 
	`symbﬁYesPix
(
xpm_symbﬁ_yes
), 
	`symbﬁModPix
(
xpm_symbﬁ_mod
), 
	`symbﬁNoPix
(
xpm_symbﬁ_no
),

339 
	`choi˚YesPix
(
xpm_choi˚_yes
), 
	`choi˚NoPix
(
xpm_choi˚_no
),

340 
	`míuPix
(
xpm_míu
), 
	`míuInvPix
(
xpm_míu_öv
), 
	`míuBackPix
(
xpm_míuback
), 
	`voidPix
(
xpm_void
),

341 
	`showName
(
Ál£
), 
	`showR™ge
(Ál£), 
	`showD©a
(Ál£), 
	`›tMode
(
n‹mÆO±
),

342 
	`roŸE¡ry
(0), 
	$hódîP›up
(0)

344 
i
;

346 
	`£tS‹tög
(-1);

347 
	`£tRoŸIsDec‹©ed
(
TRUE
);

348 
dißbÀdCﬁ‹Group
 = 
	`∑Àâe
().
	`a˘ive
();

349 
dißbÀdCﬁ‹Group
.
	`£tCﬁ‹
(
QCﬁ‹Group
::
Text
, 
	`∑Àâe
().
	`dißbÀd
().
	`ãxt
());

350 
öa˘ivedCﬁ‹Group
 = 
	`∑Àâe
().
	`a˘ive
();

351 
öa˘ivedCﬁ‹Group
.
	`£tCﬁ‹
(
QCﬁ‹Group
::
Highlight
, 
	`∑Àâe
().
	`dißbÀd
().
	`highlight
());

353 
	`c⁄√˘
(
this
, 
	`SIGNAL
(
	`£À˘i⁄Ch™ged
()),

354 
	`SLOT
(
	`upd©eSñe˘i⁄
()));

356 i‡(
«me
) {

357 
c⁄figSëtögs
->
	`begöGroup
(
«me
);

358 
showName
 = 
c⁄figSëtögs
->
	`ªadBoﬁE¡ry
("/showName", 
Ál£
);

359 
showR™ge
 = 
c⁄figSëtögs
->
	`ªadBoﬁE¡ry
("/showR™ge", 
Ál£
);

360 
showD©a
 = 
c⁄figSëtögs
->
	`ªadBoﬁE¡ry
("/showD©a", 
Ál£
);

361 
›tMode
 = (
›ti⁄Mode
)
c⁄figSëtögs
->
	`ªadNumE¡ry
("/›ti⁄Mode", 
Ál£
);

362 
c⁄figSëtögs
->
	`ídGroup
();

363 
	`c⁄√˘
(
c⁄figAµ
, 
	`SIGNAL
(
	`aboutToQuô
()), 
	`SLOT
(
	`ßveSëtögs
()));

366 
i
 = 0; i < 
cﬁNr
; i++)

367 
cﬁM≠
[
i
] = 
cﬁRevM≠
[i] = -1;

368 
	`addCﬁumn
(
¥om±CﬁIdx
, 
	`_
("Option"));

370 
	`ªöô
();

371 
	}
}

373 
boﬁ
 
	gC⁄figLi°
::
	$míuSkù
(
míu
 *menu)

375 i‡(
›tMode
 =
n‹mÆO±
 && 
	`míu_is_visibÀ
(
míu
))

376  
Ál£
;

377 i‡(
›tMode
 =
¥om±O±
 && 
	`míu_has_¥om±
(
míu
))

378  
Ál£
;

379 i‡(
›tMode
 =
ÆlO±
)

380  
Ál£
;

381  
åue
;

382 
	}
}

384 
	gC⁄figLi°
::
	$ªöô
()

386 
	`ªmoveCﬁumn
(
d©aCﬁIdx
);

387 
	`ªmoveCﬁumn
(
yesCﬁIdx
);

388 
	`ªmoveCﬁumn
(
modCﬁIdx
);

389 
	`ªmoveCﬁumn
(
noCﬁIdx
);

390 
	`ªmoveCﬁumn
(
«meCﬁIdx
);

392 i‡(
showName
)

393 
	`addCﬁumn
(
«meCﬁIdx
, 
	`_
("Name"));

394 i‡(
showR™ge
) {

395 
	`addCﬁumn
(
noCﬁIdx
, "N");

396 
	`addCﬁumn
(
modCﬁIdx
, "M");

397 
	`addCﬁumn
(
yesCﬁIdx
, "Y");

399 i‡(
showD©a
)

400 
	`addCﬁumn
(
d©aCﬁIdx
, 
	`_
("Value"));

402 
	`upd©eLi°AŒ
();

403 
	}
}

405 
	gC⁄figLi°
::
	$ßveSëtögs
()

407 i‡(
	`«me
()) {

408 
c⁄figSëtögs
->
	`begöGroup
(
	`«me
());

409 
c⁄figSëtögs
->
	`wrôeE¡ry
("/showName", 
showName
);

410 
c⁄figSëtögs
->
	`wrôeE¡ry
("/showR™ge", 
showR™ge
);

411 
c⁄figSëtögs
->
	`wrôeE¡ry
("/showD©a", 
showD©a
);

412 
c⁄figSëtögs
->
	`wrôeE¡ry
("/›ti⁄Mode", ()
›tMode
);

413 
c⁄figSëtögs
->
	`ídGroup
();

415 
	}
}

417 
C⁄figIãm
* 
	gC⁄figLi°
::
	$födC⁄figIãm
(
míu
 *menu)

419 
C⁄figIãm
* 
ôem
 = (C⁄figIãm*)
míu
->
d©a
;

421 ; 
ôem
; iãm = iãm->
√xtIãm
) {

422 i‡(
this
 =
ôem
->
	`li°Võw
())

426  
ôem
;

427 
	}
}

429 
	gC⁄figLi°
::
	$upd©eSñe˘i⁄
()

431 
míu
 *menu;

432 
¥›_ty≥
 
ty≥
;

434 
C⁄figIãm
* 
ôem
 = (C⁄figIãm*)
	`£À˘edIãm
();

435 i‡(!
ôem
)

438 
míu
 = 
ôem
->menu;

439 
emô
 
	`míuCh™ged
(
míu
);

440 i‡(!
míu
)

442 
ty≥
 = 
míu
->
¥om±
 ? míu->¥om±->ty≥ : 
P_UNKNOWN
;

443 i‡(
mode
 =
míuMode
 && 
ty≥
 =
P_MENU
)

444 
emô
 
	`míuSñe˘ed
(
míu
);

445 
	}
}

447 
	gC⁄figLi°
::
	$upd©eLi°
(
C⁄figIãm
* 
ôem
)

449 
C⁄figIãm
* 
œ°
 = 0;

451 i‡(!
roŸE¡ry
) {

452 i‡(
mode
 !
li°Mode
)

453 
upd©e
;

454 
Q3Li°VõwIãmIãøt‹
 
	`ô
(
this
);

455 
C⁄figIãm
* 
ôem
;

457 ; 
ô
.
	`cuºít
(); ++it) {

458 
ôem
 = (
C⁄figIãm
*)
ô
.
	`cuºít
();

459 i‡(!
ôem
->
míu
)

461 
ôem
->
	`ã°Upd©eMíu
(
	`míu_is_visibÀ
(ôem->
míu
));

466 i‡(
roŸE¡ry
 !&
roŸmíu
 && (
mode
 =
sögÀMode
 ||

467 (
mode
 =
symbﬁMode
 && 
roŸE¡ry
->
∑ª¡
 !&
roŸmíu
))) {

468 
ôem
 = 
	`fú°Chûd
();

469 i‡(!
ôem
)

470 
ôem
 = 
√w
 
	`C⁄figIãm
(
this
, 0, 
åue
);

471 
œ°
 = 
ôem
;

473 i‡((
mode
 =
sögÀMode
 || (modê=
symbﬁMode
 && !(
roŸE¡ry
->
Êags
 & 
MENU_ROOT
))) &&

474 
roŸE¡ry
->
sym
 &&ÑoŸE¡ry->
¥om±
) {

475 
ôem
 = 
œ°
 ?Üa°->
	`√xtSiblög
(Ë: 
	`fú°Chûd
();

476 i‡(!
ôem
)

477 
ôem
 = 
√w
 
	`C⁄figIãm
(
this
, 
œ°
, 
roŸE¡ry
, 
åue
);

479 
ôem
->
	`ã°Upd©eMíu
(
åue
);

481 
	`upd©eMíuLi°
(
ôem
, 
roŸE¡ry
);

482 
	`åiggîUpd©e
();

485 
upd©e
:

486 
	`upd©eMíuLi°
(
this
, 
roŸE¡ry
);

487 
	`åiggîUpd©e
();

488 
	}
}

490 
	gC⁄figLi°
::
	$£tVÆue
(
C⁄figIãm
* 
ôem
, 
åi°©e
 
vÆ
)

492 
symbﬁ
* 
sym
;

493 
ty≥
;

494 
åi°©e
 
ﬁdvÆ
;

496 
sym
 = 
ôem
->
míu
 ? item->menu->sym : 0;

497 i‡(!
sym
)

500 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

501 
ty≥
) {

502 
S_BOOLEAN
:

503 
S_TRISTATE
:

504 
ﬁdvÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

506 i‡(!
	`sym_£t_åi°©e_vÆue
(
sym
, 
vÆ
))

508 i‡(
ﬁdvÆ
 =
no
 && 
ôem
->
míu
->
li°
)

509 
ôem
->
	`£tO≥n
(
TRUE
);

510 
	`∑ª¡
()->
	`upd©eLi°
(
ôem
);

513 
	}
}

515 
	gC⁄figLi°
::
	$ch™geVÆue
(
C⁄figIãm
* 
ôem
)

517 
symbﬁ
* 
sym
;

518 
míu
* menu;

519 
ty≥
, 
ﬁdex¥
, 
√wex¥
;

521 
míu
 = 
ôem
->menu;

522 i‡(!
míu
)

524 
sym
 = 
míu
->sym;

525 i‡(!
sym
) {

526 i‡(
ôem
->
míu
->
li°
)

527 
ôem
->
	`£tO≥n
(!ôem->
	`isO≥n
());

531 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

532 
ty≥
) {

533 
S_BOOLEAN
:

534 
S_TRISTATE
:

535 
ﬁdex¥
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

536 
√wex¥
 = 
	`sym_toggÀ_åi°©e_vÆue
(
sym
);

537 i‡(
ôem
->
míu
->
li°
) {

538 i‡(
ﬁdex¥
 =
√wex¥
)

539 
ôem
->
	`£tO≥n
(!ôem->
	`isO≥n
());

540 i‡(
ﬁdex¥
 =
no
)

541 
ôem
->
	`£tO≥n
(
TRUE
);

543 i‡(
ﬁdex¥
 !
√wex¥
)

544 
	`∑ª¡
()->
	`upd©eLi°
(
ôem
);

546 
S_INT
:

547 
S_HEX
:

548 
S_STRING
:

549 i‡(
cﬁM≠
[
d©aCﬁIdx
] >= 0)

550 
ôem
->
	`°¨tRíame
(
cﬁM≠
[
d©aCﬁIdx
]);

552 
	`∑ª¡
()->
löeEdô
->
	`show
(
ôem
);

555 
	}
}

557 
	gC⁄figLi°
::
	$£tRoŸMíu
(
míu
 *menu)

559 
¥›_ty≥
 
ty≥
;

561 i‡(
roŸE¡ry
 =
míu
)

563 
ty≥
 = 
míu
 && míu->
¥om±
 ? míu->¥om±->ty≥ : 
P_UNKNOWN
;

564 i‡(
ty≥
 !
P_MENU
)

566 
	`upd©eMíuLi°
(
this
, 0);

567 
roŸE¡ry
 = 
míu
;

568 
	`upd©eLi°AŒ
();

569 
	`£tSñe˘ed
(
	`cuºítIãm
(), 
	`hasFocus
());

570 
	`ísuªIãmVisibÀ
(
	`cuºítIãm
());

571 
	}
}

573 
	gC⁄figLi°
::
	$£tP¨ítMíu
()

575 
C⁄figIãm
* 
ôem
;

576 
míu
 *
ﬁdroŸ
;

578 
ﬁdroŸ
 = 
roŸE¡ry
;

579 i‡(
roŸE¡ry
 =&
roŸmíu
)

581 
	`£tRoŸMíu
(
	`míu_gë_∑ª¡_míu
(
roŸE¡ry
->
∑ª¡
));

583 
Q3Li°VõwIãmIãøt‹
 
	`ô
(
this
);

584 ; (
ôem
 = (
C⁄figIãm
*)
ô
.
	`cuºít
()); it++) {

585 i‡(
ôem
->
míu
 =
ﬁdroŸ
) {

586 
	`£tCuºítIãm
(
ôem
);

587 
	`ísuªIãmVisibÀ
(
ôem
);

591 
	}
}

600 
	gãm∂©e
 <
˛ass
 
	gP
>

601 
	gC⁄figLi°
::
	$upd©eMíuLi°
(
P
* 
∑ª¡
, 
míu
* menu)

603 
míu
* 
chûd
;

604 
C⁄figIãm
* 
ôem
;

605 
C⁄figIãm
* 
œ°
;

606 
boﬁ
 
visibÀ
;

607 
¥›_ty≥
 
ty≥
;

609 i‡(!
míu
) {

610 (
ôem
 = 
∑ª¡
->
	`fú°Chûd
()))

611 
dñëe
 
ôem
;

615 
œ°
 = 
∑ª¡
->
	`fú°Chûd
();

616 i‡(
œ°
 && !œ°->
goP¨ít
)

617 
œ°
 = 0;

618 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

619 
ôem
 = 
œ°
 ?Üa°->
	`√xtSiblög
(Ë: 
∑ª¡
->
	`fú°Chûd
();

620 
ty≥
 = 
chûd
->
¥om±
 ? chûd->¥om±->ty≥ : 
P_UNKNOWN
;

622 
mode
) {

623 
míuMode
:

624 i‡(!(
chûd
->
Êags
 & 
MENU_ROOT
))

625 
hide
;

627 
symbﬁMode
:

628 i‡(
chûd
->
Êags
 & 
MENU_ROOT
)

629 
hide
;

635 
visibÀ
 = 
	`míu_is_visibÀ
(
chûd
);

636 i‡(!
	`míuSkù
(
chûd
)) {

637 i‡(!
chûd
->
sym
 && !chûd->
li°
 && !chûd->
¥om±
)

639 i‡(!
ôem
 || iãm->
míu
 !
chûd
)

640 
ôem
 = 
√w
 
	`C⁄figIãm
(
∑ª¡
, 
œ°
, 
chûd
, 
visibÀ
);

642 
ôem
->
	`ã°Upd©eMíu
(
visibÀ
);

644 i‡(
mode
 =
fuŒMode
 || modê=
míuMode
 || 
ty≥
 !
P_MENU
)

645 
	`upd©eMíuLi°
(
ôem
, 
chûd
);

647 
	`upd©eMíuLi°
(
ôem
, 0);

648 
œ°
 = 
ôem
;

651 
hide
:

652 i‡(
ôem
 && iãm->
míu
 =
chûd
) {

653 
œ°
 = 
∑ª¡
->
	`fú°Chûd
();

654 i‡(
œ°
 =
ôem
)

655 
œ°
 = 0;

656 
œ°
->
	`√xtSiblög
(Ë!
ôem
)

657 
œ°
 =Üa°->
	`√xtSiblög
();

658 
dñëe
 
ôem
;

661 
	}
}

663 
	gC⁄figLi°
::
	$keyPªssEvít
(
QKeyEvít
* 
ev
)

665 
Q3Li°VõwIãm
* 
i
 = 
	`cuºítIãm
();

666 
C⁄figIãm
* 
ôem
;

667 
míu
 *menu;

668 
¥›_ty≥
 
ty≥
;

670 i‡(
ev
->
	`key
(Ë=
Qt
::
Key_Esˇ≥
 && 
mode
 !
fuŒMode
 && modê!
li°Mode
) {

671 
emô
 
	`∑ª¡Sñe˘ed
();

672 
ev
->
	`ac˚±
();

676 i‡(!
i
) {

677 
P¨ít
::
	`keyPªssEvít
(
ev
);

680 
ôem
 = (
C⁄figIãm
*)
i
;

682 
ev
->
	`key
()) {

683 
Qt
::
Key_Rëu∫
:

684 
Qt
::
Key_E¡î
:

685 i‡(
ôem
->
goP¨ít
) {

686 
emô
 
	`∑ª¡Sñe˘ed
();

689 
míu
 = 
ôem
->menu;

690 i‡(!
míu
)

692 
ty≥
 = 
míu
->
¥om±
 ? míu->¥om±->ty≥ : 
P_UNKNOWN
;

693 i‡(
ty≥
 =
P_MENU
 && 
roŸE¡ry
 !
míu
 &&

694 
mode
 !
fuŒMode
 && modê!
míuMode
) {

695 
emô
 
	`míuSñe˘ed
(
míu
);

698 
Qt
::
Key_S∑˚
:

699 
	`ch™geVÆue
(
ôem
);

701 
Qt
::
Key_N
:

702 
	`£tVÆue
(
ôem
, 
no
);

704 
Qt
::
Key_M
:

705 
	`£tVÆue
(
ôem
, 
mod
);

707 
Qt
::
Key_Y
:

708 
	`£tVÆue
(
ôem
, 
yes
);

711 
P¨ít
::
	`keyPªssEvít
(
ev
);

714 
ev
->
	`ac˚±
();

715 
	}
}

717 
	gC⁄figLi°
::
	$c⁄ã¡sMou£PªssEvít
(
QMou£Evít
* 
e
)

721 
P¨ít
::
	`c⁄ã¡sMou£PªssEvít
(
e
);

722 
	}
}

724 
	gC⁄figLi°
::
	$c⁄ã¡sMou£Rñó£Evít
(
QMou£Evít
* 
e
)

726 
QPoöt
 
	`p
(
	`c⁄ã¡sToVõwp‹t
(
e
->
	`pos
()));

727 
C⁄figIãm
* 
ôem
 = (C⁄figIãm*)
	`ôemAt
(
p
);

728 
míu
 *menu;

729 
¥›_ty≥
 
±y≥
;

730 c⁄° 
QPixm≠
* 
pm
;

731 
idx
, 
x
;

733 i‡(!
ôem
)

734 
skù
;

736 
míu
 = 
ôem
->menu;

737 
x
 = 
	`hódî
()->
	`off£t
(Ë+ 
p
.
	`x
();

738 
idx
 = 
cﬁRevM≠
[
	`hódî
()->
	`£˘i⁄At
(
x
)];

739 
idx
) {

740 
¥om±CﬁIdx
:

741 
pm
 = 
ôem
->
	`pixm≠
(
¥om±CﬁIdx
);

742 i‡(
pm
) {

743 
off
 = 
	`hódî
()->
	`£˘i⁄Pos
(0Ë+ 
	`ôemM¨gö
() +

744 
	`åìSãpSize
(Ë* (
ôem
->
	`dïth
(Ë+ (
	`roŸIsDec‹©ed
() ? 1 : 0));

745 i‡(
x
 >
off
 && x < of‡+ 
pm
->
	`width
()) {

746 i‡(
ôem
->
goP¨ít
) {

747 
emô
 
	`∑ª¡Sñe˘ed
();

749 } i‡(!
míu
)

751 
±y≥
 = 
míu
->
¥om±
 ? míu->¥om±->
ty≥
 : 
P_UNKNOWN
;

752 i‡(
±y≥
 =
P_MENU
 && 
roŸE¡ry
 !
míu
 &&

753 
mode
 !
fuŒMode
 && modê!
míuMode
)

754 
emô
 
	`míuSñe˘ed
(
míu
);

756 
	`ch™geVÆue
(
ôem
);

760 
noCﬁIdx
:

761 
	`£tVÆue
(
ôem
, 
no
);

763 
modCﬁIdx
:

764 
	`£tVÆue
(
ôem
, 
mod
);

766 
yesCﬁIdx
:

767 
	`£tVÆue
(
ôem
, 
yes
);

769 
d©aCﬁIdx
:

770 
	`ch™geVÆue
(
ôem
);

774 
skù
:

776 
P¨ít
::
	`c⁄ã¡sMou£Rñó£Evít
(
e
);

777 
	}
}

779 
	gC⁄figLi°
::
	$c⁄ã¡sMou£MoveEvít
(
QMou£Evít
* 
e
)

783 
P¨ít
::
	`c⁄ã¡sMou£MoveEvít
(
e
);

784 
	}
}

786 
	gC⁄figLi°
::
	$c⁄ã¡sMou£DoubÀClickEvít
(
QMou£Evít
* 
e
)

788 
QPoöt
 
	`p
(
	`c⁄ã¡sToVõwp‹t
(
e
->
	`pos
()));

789 
C⁄figIãm
* 
ôem
 = (C⁄figIãm*)
	`ôemAt
(
p
);

790 
míu
 *menu;

791 
¥›_ty≥
 
±y≥
;

793 i‡(!
ôem
)

794 
skù
;

795 i‡(
ôem
->
goP¨ít
) {

796 
emô
 
	`∑ª¡Sñe˘ed
();

797 
skù
;

799 
míu
 = 
ôem
->menu;

800 i‡(!
míu
)

801 
skù
;

802 
±y≥
 = 
míu
->
¥om±
 ? míu->¥om±->
ty≥
 : 
P_UNKNOWN
;

803 i‡(
±y≥
 =
P_MENU
 && (
mode
 =
sögÀMode
 || modê=
symbﬁMode
))

804 
emô
 
	`míuSñe˘ed
(
míu
);

805 i‡(
míu
->
sym
)

806 
	`ch™geVÆue
(
ôem
);

808 
skù
:

810 
P¨ít
::
	`c⁄ã¡sMou£DoubÀClickEvít
(
e
);

811 
	}
}

813 
	gC⁄figLi°
::
	$focusInEvít
(
QFocusEvít
 *
e
)

815 
míu
 *míu = 
NULL
;

817 
P¨ít
::
	`focusInEvít
(
e
);

819 
C⁄figIãm
* 
ôem
 = (C⁄figIãm *)
	`cuºítIãm
();

820 i‡(
ôem
) {

821 
	`£tSñe˘ed
(
ôem
, 
TRUE
);

822 
míu
 = 
ôem
->menu;

824 
emô
 
	`gŸFocus
(
míu
);

825 
	}
}

827 
	gC⁄figLi°
::
	$c⁄ãxtMíuEvít
(
QC⁄ãxtMíuEvít
 *
e
)

829 i‡(
e
->
	`y
(Ë<
	`hódî
()->
	`geomëry
().
	`bŸtom
()) {

830 i‡(!
hódîP›up
) {

831 
Q3A˘i⁄
 *
a˘i⁄
;

833 
hódîP›up
 = 
√w
 
	`Q3P›upMíu
(
this
);

834 
a˘i⁄
 = 
√w
 
	`Q3A˘i⁄
(
NULL
, 
	`_
("Show Name"), 0, 
this
);

835 
a˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

836 
	`c⁄√˘
(
a˘i⁄
, 
	`SIGNAL
(
	`toggÀd
(
boﬁ
)),

837 
	`∑ª¡
(), 
	`SLOT
(
	`£tShowName
(
boﬁ
)));

838 
	`c⁄√˘
(
	`∑ª¡
(), 
	`SIGNAL
(
	`showNameCh™ged
(
boﬁ
)),

839 
a˘i⁄
, 
	`SLOT
(
	`£tOn
(
boﬁ
)));

840 
a˘i⁄
->
	`£tOn
(
showName
);

841 
a˘i⁄
->
	`addTo
(
hódîP›up
);

842 
a˘i⁄
 = 
√w
 
	`Q3A˘i⁄
(
NULL
, 
	`_
("Show R™ge"), 0, 
this
);

843 
a˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

844 
	`c⁄√˘
(
a˘i⁄
, 
	`SIGNAL
(
	`toggÀd
(
boﬁ
)),

845 
	`∑ª¡
(), 
	`SLOT
(
	`£tShowR™ge
(
boﬁ
)));

846 
	`c⁄√˘
(
	`∑ª¡
(), 
	`SIGNAL
(
	`showR™geCh™ged
(
boﬁ
)),

847 
a˘i⁄
, 
	`SLOT
(
	`£tOn
(
boﬁ
)));

848 
a˘i⁄
->
	`£tOn
(
showR™ge
);

849 
a˘i⁄
->
	`addTo
(
hódîP›up
);

850 
a˘i⁄
 = 
√w
 
	`Q3A˘i⁄
(
NULL
, 
	`_
("Show D©a"), 0, 
this
);

851 
a˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

852 
	`c⁄√˘
(
a˘i⁄
, 
	`SIGNAL
(
	`toggÀd
(
boﬁ
)),

853 
	`∑ª¡
(), 
	`SLOT
(
	`£tShowD©a
(
boﬁ
)));

854 
	`c⁄√˘
(
	`∑ª¡
(), 
	`SIGNAL
(
	`showD©aCh™ged
(
boﬁ
)),

855 
a˘i⁄
, 
	`SLOT
(
	`£tOn
(
boﬁ
)));

856 
a˘i⁄
->
	`£tOn
(
showD©a
);

857 
a˘i⁄
->
	`addTo
(
hódîP›up
);

859 
hódîP›up
->
	`exec
(
e
->
	`globÆPos
());

860 
e
->
	`ac˚±
();

862 
e
->
	`ign‹e
();

863 
	}
}

865 
C⁄figVõw
*
	gC⁄figVõw
::
võwLi°
;

866 
QA˘i⁄
 *
	gC⁄figVõw
::
showN‹mÆA˘i⁄
;

867 
QA˘i⁄
 *
	gC⁄figVõw
::
showAŒA˘i⁄
;

868 
QA˘i⁄
 *
	gC⁄figVõw
::
showProm±A˘i⁄
;

870 
	gC⁄figVõw
::
	$C⁄figVõw
(
QWidgë
* 
∑ª¡
, c⁄° *
«me
)

871 : 
	$P¨ít
(
∑ª¡
, 
«me
)

873 
li°
 = 
√w
 
	`C⁄figLi°
(
this
, 
«me
);

874 
löeEdô
 = 
√w
 
	`C⁄figLöeEdô
(
this
);

875 
löeEdô
->
	`hide
();

877 
this
->
√xtVõw
 = 
võwLi°
;

878 
võwLi°
 = 
this
;

879 
	}
}

881 
	gC⁄figVõw
::~
	$C⁄figVõw
()

883 
C⁄figVõw
** 
vp
;

885 
vp
 = &
võwLi°
; *vp; v∞&(*vp)->
√xtVõw
) {

886 i‡(*
vp
 =
this
) {

887 *
vp
 = 
√xtVõw
;

891 
	}
}

893 
	gC⁄figVõw
::
	$£tO±i⁄Mode
(
QA˘i⁄
 *
a˘
)

895 i‡(
a˘
 =
showN‹mÆA˘i⁄
)

896 
li°
->
›tMode
 = 
n‹mÆO±
;

897 i‡(
a˘
 =
showAŒA˘i⁄
)

898 
li°
->
›tMode
 = 
ÆlO±
;

900 
li°
->
›tMode
 = 
¥om±O±
;

902 
li°
->
	`upd©eLi°AŒ
();

903 
	}
}

905 
	gC⁄figVõw
::
	$£tShowName
(
boﬁ
 
b
)

907 i‡(
li°
->
showName
 !
b
) {

908 
li°
->
showName
 = 
b
;

909 
li°
->
	`ªöô
();

910 
emô
 
	`showNameCh™ged
(
b
);

912 
	}
}

914 
	gC⁄figVõw
::
	$£tShowR™ge
(
boﬁ
 
b
)

916 i‡(
li°
->
showR™ge
 !
b
) {

917 
li°
->
showR™ge
 = 
b
;

918 
li°
->
	`ªöô
();

919 
emô
 
	`showR™geCh™ged
(
b
);

921 
	}
}

923 
	gC⁄figVõw
::
	$£tShowD©a
(
boﬁ
 
b
)

925 i‡(
li°
->
showD©a
 !
b
) {

926 
li°
->
showD©a
 = 
b
;

927 
li°
->
	`ªöô
();

928 
emô
 
	`showD©aCh™ged
(
b
);

930 
	}
}

932 
	gC⁄figLi°
::
	$£tAŒO≥n
(
boﬁ
 
›í
)

934 
Q3Li°VõwIãmIãøt‹
 
	`ô
(
this
);

936 ; 
ô
.
	`cuºít
(); it++)

937 
ô
.
	`cuºít
()->
	`£tO≥n
(
›í
);

938 
	}
}

940 
	gC⁄figVõw
::
	$upd©eLi°
(
C⁄figIãm
* 
ôem
)

942 
C⁄figVõw
* 
v
;

944 
v
 = 
võwLi°
; v; v = v->
√xtVõw
)

945 
v
->
li°
->
	`upd©eLi°
(
ôem
);

946 
	}
}

948 
	gC⁄figVõw
::
	$upd©eLi°AŒ
()

950 
C⁄figVõw
* 
v
;

952 
v
 = 
võwLi°
; v; v = v->
√xtVõw
)

953 
v
->
li°
->
	`upd©eLi°AŒ
();

954 
	}
}

956 
	gC⁄figInfoVõw
::
	$C⁄figInfoVõw
(
QWidgë
* 
∑ª¡
, c⁄° *
«me
)

957 : 
	`P¨ít
(
∑ª¡
, 
«me
), 
	`sym
(0), 
	$_míu
(0)

959 i‡(
«me
) {

960 
c⁄figSëtögs
->
	`begöGroup
(
«me
);

961 
_showDebug
 = 
c⁄figSëtögs
->
	`ªadBoﬁE¡ry
("/showDebug", 
Ál£
);

962 
c⁄figSëtögs
->
	`ídGroup
();

963 
	`c⁄√˘
(
c⁄figAµ
, 
	`SIGNAL
(
	`aboutToQuô
()), 
	`SLOT
(
	`ßveSëtögs
()));

965 
	}
}

967 
	gC⁄figInfoVõw
::
	$ßveSëtögs
()

969 i‡(
	`«me
()) {

970 
c⁄figSëtögs
->
	`begöGroup
(
	`«me
());

971 
c⁄figSëtögs
->
	`wrôeE¡ry
("/showDebug", 
	`showDebug
());

972 
c⁄figSëtögs
->
	`ídGroup
();

974 
	}
}

976 
	gC⁄figInfoVõw
::
	$£tShowDebug
(
boﬁ
 
b
)

978 i‡(
_showDebug
 !
b
) {

979 
_showDebug
 = 
b
;

980 i‡(
_míu
)

981 
	`míuInfo
();

982 i‡(
sym
)

983 
	`symbﬁInfo
();

984 
emô
 
	`showDebugCh™ged
(
b
);

986 
	}
}

988 
	gC⁄figInfoVõw
::
	$£tInfo
(
míu
 *
m
)

990 i‡(
_míu
 =
m
)

992 
_míu
 = 
m
;

993 
sym
 = 
NULL
;

994 i‡(!
_míu
)

995 
	`˛ór
();

997 
	`míuInfo
();

998 
	}
}

1000 
	gC⁄figInfoVõw
::
	$symbﬁInfo
()

1002 
QSåög
 
°r
;

1004 
°r
 += "<big>Symbol: <b>";

1005 
°r
 +
	`¥öt_fûãr
(
sym
->
«me
);

1006 
°r
 += "</b></big><br><br>value: ";

1007 
°r
 +
	`¥öt_fûãr
(
	`sym_gë_°rög_vÆue
(
sym
));

1008 
°r
 += "<br>visibility: ";

1009 
°r
 +
sym
->
visibÀ
 =
yes
 ? "y" : sym->visibÀ =
mod
 ? "m" : "n";

1010 
°r
 += "<br>";

1011 
°r
 +
	`debug_öfo
(
sym
);

1013 
	`£tText
(
°r
);

1014 
	}
}

1016 
	gC⁄figInfoVõw
::
	$míuInfo
()

1018 
symbﬁ
* 
sym
;

1019 
QSåög
 
hód
, 
debug
, 
hñp
;

1021 
sym
 = 
_míu
->sym;

1022 i‡(
sym
) {

1023 i‡(
_míu
->
¥om±
) {

1024 
hód
 += "<big><b>";

1025 
hód
 +
	`¥öt_fûãr
(
	`_
(
_míu
->
¥om±
->
ãxt
));

1026 
hód
 += "</b></big>";

1027 i‡(
sym
->
«me
) {

1028 
hód
 += " (";

1029 i‡(
	`showDebug
())

1030 
hód
 +
	`QSåög
().
	`•rötf
("<®hªf=\"s%p\">", 
sym
);

1031 
hód
 +
	`¥öt_fûãr
(
sym
->
«me
);

1032 i‡(
	`showDebug
())

1033 
hód
 += "</a>";

1034 
hód
 += ")";

1036 } i‡(
sym
->
«me
) {

1037 
hód
 += "<big><b>";

1038 i‡(
	`showDebug
())

1039 
hód
 +
	`QSåög
().
	`•rötf
("<®hªf=\"s%p\">", 
sym
);

1040 
hód
 +
	`¥öt_fûãr
(
sym
->
«me
);

1041 i‡(
	`showDebug
())

1042 
hód
 += "</a>";

1043 
hód
 += "</b></big>";

1045 
hód
 += "<br><br>";

1047 i‡(
	`showDebug
())

1048 
debug
 = 
	`debug_öfo
(
sym
);

1050 
g°r
 
hñp_g°r
 = 
	`°r_√w
();

1051 
	`míu_gë_ext_hñp
(
_míu
, &
hñp_g°r
);

1052 
hñp
 = 
	`¥öt_fûãr
(
	`°r_gë
(&
hñp_g°r
));

1053 
	`°r_‰ì
(&
hñp_g°r
);

1054 } i‡(
_míu
->
¥om±
) {

1055 
hód
 += "<big><b>";

1056 
hód
 +
	`¥öt_fûãr
(
	`_
(
_míu
->
¥om±
->
ãxt
));

1057 
hód
 += "</b></big><br><br>";

1058 i‡(
	`showDebug
()) {

1059 i‡(
_míu
->
¥om±
->
visibÀ
.
ex¥
) {

1060 
debug
 += "&nbsp;&nbsp;dep: ";

1061 
	`ex¥_¥öt
(
_míu
->
¥om±
->
visibÀ
.
ex¥
, 
ex¥_¥öt_hñp
, &
debug
, 
E_NONE
);

1062 
debug
 += "<br><br>";

1066 i‡(
	`showDebug
())

1067 
debug
 +
	`QSåög
().
	`•rötf
("deföedáà%s:%d<br><br>", 
_míu
->
fûe
->
«me
, _míu->
löío
);

1069 
	`£tText
(
hód
 + 
debug
 + 
hñp
);

1070 
	}
}

1072 
QSåög
 
	gC⁄figInfoVõw
::
	$debug_öfo
(
symbﬁ
 *
sym
)

1074 
QSåög
 
debug
;

1076 
debug
 += "type: ";

1077 
debug
 +
	`¥öt_fûãr
(
	`sym_ty≥_«me
(
sym
->
ty≥
));

1078 i‡(
	`sym_is_choi˚
(
sym
))

1079 
debug
 += " (choice)";

1080 
debug
 += "<br>";

1081 i‡(
sym
->
ªv_dï
.
ex¥
) {

1082 
debug
 += "reverse dep: ";

1083 
	`ex¥_¥öt
(
sym
->
ªv_dï
.
ex¥
, 
ex¥_¥öt_hñp
, &
debug
, 
E_NONE
);

1084 
debug
 += "<br>";

1086 
¥›îty
 *
¥›
 = 
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

1087 
¥›
->
ty≥
) {

1088 
P_PROMPT
:

1089 
P_MENU
:

1090 
debug
 +
	`QSåög
().
	`•rötf
("¥om±: <®hªf=\"m%p\">", 
¥›
->
míu
);

1091 
debug
 +
	`¥öt_fûãr
(
	`_
(
¥›
->
ãxt
));

1092 
debug
 += "</a><br>";

1094 
P_DEFAULT
:

1095 
P_SELECT
:

1096 
P_RANGE
:

1097 
P_ENV
:

1098 
debug
 +
	`¥›_gë_ty≥_«me
(
¥›
->
ty≥
);

1099 
debug
 += ": ";

1100 
	`ex¥_¥öt
(
¥›
->
ex¥
, 
ex¥_¥öt_hñp
, &
debug
, 
E_NONE
);

1101 
debug
 += "<br>";

1103 
P_CHOICE
:

1104 i‡(
	`sym_is_choi˚
(
sym
)) {

1105 
debug
 += "choice: ";

1106 
	`ex¥_¥öt
(
¥›
->
ex¥
, 
ex¥_¥öt_hñp
, &
debug
, 
E_NONE
);

1107 
debug
 += "<br>";

1111 
debug
 += "unknownÖroperty: ";

1112 
debug
 +
	`¥›_gë_ty≥_«me
(
¥›
->
ty≥
);

1113 
debug
 += "<br>";

1115 i‡(
¥›
->
visibÀ
.
ex¥
) {

1116 
debug
 += "&nbsp;&nbsp;&nbsp;&nbsp;dep: ";

1117 
	`ex¥_¥öt
(
¥›
->
visibÀ
.
ex¥
, 
ex¥_¥öt_hñp
, &
debug
, 
E_NONE
);

1118 
debug
 += "<br>";

1121 
debug
 += "<br>";

1123  
debug
;

1124 
	}
}

1126 
QSåög
 
	gC⁄figInfoVõw
::
	$¥öt_fûãr
(c⁄° 
QSåög
 &
°r
)

1128 
QRegExp
 
	`ª
("[<>&\"\\n]");

1129 
QSåög
 
ªs
 = 
°r
;

1130 
i
 = 0; (ò
ªs
.
	`föd
(
ª
, i)) >= 0;) {

1131 
ªs
[
i
].
	`œtö1
()) {

1133 
ªs
.
	`ª∂a˚
(
i
, 1, "&lt;");

1134 
i
 += 4;

1137 
ªs
.
	`ª∂a˚
(
i
, 1, "&gt;");

1138 
i
 += 4;

1141 
ªs
.
	`ª∂a˚
(
i
, 1, "&amp;");

1142 
i
 += 5;

1145 
ªs
.
	`ª∂a˚
(
i
, 1, "&quot;");

1146 
i
 += 6;

1149 
ªs
.
	`ª∂a˚
(
i
, 1, "<br>");

1150 
i
 += 4;

1154  
ªs
;

1155 
	}
}

1157 
	gC⁄figInfoVõw
::
	$ex¥_¥öt_hñp
(*
d©a
, 
symbﬁ
 *
sym
, c⁄° *
°r
)

1159 
QSåög
* 
ãxt
 = 
ªöãΩªt_ˇ°
<QSåög*>(
d©a
);

1160 
QSåög
 
°r2
 = 
	`¥öt_fûãr
(
°r
);

1162 i‡(
sym
 && sym->
«me
 && !(sym->
Êags
 & 
SYMBOL_CONST
)) {

1163 *
ãxt
 +
	`QSåög
().
	`•rötf
("<®hªf=\"s%p\">", 
sym
);

1164 *
ãxt
 +
°r2
;

1165 *
ãxt
 += "</a>";

1167 *
ãxt
 +
°r2
;

1168 
	}
}

1170 
Q3P›upMíu
* 
	gC⁄figInfoVõw
::
	$¸óãP›upMíu
(c⁄° 
QPoöt
& 
pos
)

1172 
Q3P›upMíu
* 
p›up
 = 
P¨ít
::
	`¸óãP›upMíu
(
pos
);

1173 
Q3A˘i⁄
* 
a˘i⁄
 = 
√w
 
	`Q3A˘i⁄
(
NULL
, 
	`_
("Show Debug Info"), 0, 
p›up
);

1174 
a˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

1175 
	`c⁄√˘
(
a˘i⁄
, 
	`SIGNAL
(
	`toggÀd
(
boﬁ
)), 
	`SLOT
(
	`£tShowDebug
(bool)));

1176 
	`c⁄√˘
(
this
, 
	`SIGNAL
(
	`showDebugCh™ged
(
boﬁ
)), 
a˘i⁄
, 
	`SLOT
(
	`£tOn
(bool)));

1177 
a˘i⁄
->
	`£tOn
(
	`showDebug
());

1178 
p›up
->
	`ö£πSï¨©‹
();

1179 
a˘i⁄
->
	`addTo
(
p›up
);

1180  
p›up
;

1181 
	}
}

1183 
	gC⁄figInfoVõw
::
	$c⁄ã¡sC⁄ãxtMíuEvít
(
QC⁄ãxtMíuEvít
 *
e
)

1185 
P¨ít
::
	`c⁄ã¡sC⁄ãxtMíuEvít
(
e
);

1186 
	}
}

1188 
	gC⁄figSórchWödow
::
	$C⁄figSórchWödow
(
C⁄figMaöWödow
* 
∑ª¡
, c⁄° *
«me
)

1189 : 
	`P¨ít
(
∑ª¡
, 
«me
), 
	$ªsu…
(
NULL
)

1191 
	`£tC≠ti⁄
("Search Config");

1193 
QVBoxLayout
* 
œyout1
 = 
√w
 
	`QVBoxLayout
(
this
, 11, 6);

1194 
QHBoxLayout
* 
œyout2
 = 
√w
 
	`QHBoxLayout
(0, 0, 6);

1195 
œyout2
->
	`addWidgë
(
√w
 
	`QLabñ
(
	`_
("Föd:"), 
this
));

1196 
edôFõld
 = 
√w
 
	`QLöeEdô
(
this
);

1197 
	`c⁄√˘
(
edôFõld
, 
	`SIGNAL
(
	`ªtu∫Pªs£d
()), 
	`SLOT
(
	`£¨ch
()));

1198 
œyout2
->
	`addWidgë
(
edôFõld
);

1199 
£¨chBuâ⁄
 = 
√w
 
	`QPushBuâ⁄
(
	`_
("Sórch"), 
this
);

1200 
£¨chBuâ⁄
->
	`£tAutoDeÁu…
(
FALSE
);

1201 
	`c⁄√˘
(
£¨chBuâ⁄
, 
	`SIGNAL
(
	`˛icked
()), 
	`SLOT
(
	`£¨ch
()));

1202 
œyout2
->
	`addWidgë
(
£¨chBuâ⁄
);

1203 
œyout1
->
	`addLayout
(
œyout2
);

1205 
•lô
 = 
√w
 
	`QS∂ôãr
(
this
);

1206 
•lô
->
	`£tOrõ¡©i⁄
(
Qt
::
Vîtiˇl
);

1207 
li°
 = 
√w
 
	`C⁄figVõw
(
•lô
, 
«me
);

1208 
li°
->li°->
mode
 = 
li°Mode
;

1209 
öfo
 = 
√w
 
	`C⁄figInfoVõw
(
•lô
, 
«me
);

1210 
	`c⁄√˘
(
li°
->li°, 
	`SIGNAL
(
	`míuCh™ged
(
míu
 *)),

1211 
öfo
, 
	`SLOT
(
	`£tInfo
(
míu
 *)));

1212 
	`c⁄√˘
(
li°
->li°, 
	`SIGNAL
(
	`míuCh™ged
(
míu
 *)),

1213 
∑ª¡
, 
	`SLOT
(
	`£tMíuLök
(
míu
 *)));

1215 
œyout1
->
	`addWidgë
(
•lô
);

1217 i‡(
«me
) {

1218 
x
, 
y
, 
width
, 
height
;

1219 
boﬁ
 
ok
;

1221 
c⁄figSëtögs
->
	`begöGroup
(
«me
);

1222 
width
 = 
c⁄figSëtögs
->
	`ªadNumE¡ry
("/wödow width", 
∑ª¡
->
	`width
() / 2);

1223 
height
 = 
c⁄figSëtögs
->
	`ªadNumE¡ry
("/wödow height", 
∑ª¡
->
	`height
() / 2);

1224 
	`ªsize
(
width
, 
height
);

1225 
x
 = 
c⁄figSëtögs
->
	`ªadNumE¡ry
("/wödow x", 0, &
ok
);

1226 i‡(
ok
)

1227 
y
 = 
c⁄figSëtögs
->
	`ªadNumE¡ry
("/wödow y", 0, &
ok
);

1228 i‡(
ok
)

1229 
	`move
(
x
, 
y
);

1230 
Q3VÆueLi°
<> 
sizes
 = 
c⁄figSëtögs
->
	`ªadSizes
("/•lô", &
ok
);

1231 i‡(
ok
)

1232 
•lô
->
	`£tSizes
(
sizes
);

1233 
c⁄figSëtögs
->
	`ídGroup
();

1234 
	`c⁄√˘
(
c⁄figAµ
, 
	`SIGNAL
(
	`aboutToQuô
()), 
	`SLOT
(
	`ßveSëtögs
()));

1236 
	}
}

1238 
	gC⁄figSórchWödow
::
	$ßveSëtögs
()

1240 i‡(
	`«me
()) {

1241 
c⁄figSëtögs
->
	`begöGroup
(
	`«me
());

1242 
c⁄figSëtögs
->
	`wrôeE¡ry
("/wödow x", 
	`pos
().
	`x
());

1243 
c⁄figSëtögs
->
	`wrôeE¡ry
("/wödow y", 
	`pos
().
	`y
());

1244 
c⁄figSëtögs
->
	`wrôeE¡ry
("/wödow width", 
	`size
().
	`width
());

1245 
c⁄figSëtögs
->
	`wrôeE¡ry
("/wödow height", 
	`size
().
	`height
());

1246 
c⁄figSëtögs
->
	`wrôeSizes
("/•lô", 
•lô
->
	`sizes
());

1247 
c⁄figSëtögs
->
	`ídGroup
();

1249 
	}
}

1251 
	gC⁄figSórchWödow
::
	$£¨ch
()

1253 
symbﬁ
 **
p
;

1254 
¥›îty
 *
¥›
;

1255 
C⁄figIãm
 *
œ°Iãm
 = 
NULL
;

1257 
	`‰ì
(
ªsu…
);

1258 
li°
->li°->
	`˛ór
();

1259 
öfo
->
	`˛ór
();

1261 
ªsu…
 = 
	`sym_ª_£¨ch
(
edôFõld
->
	`ãxt
().
	`œtö1
());

1262 i‡(!
ªsu…
)

1264 
p
 = 
ªsu…
; *p;Ö++) {

1265 
	`f‹_Æl_¥om±s
((*
p
), 
¥›
)

1266 
œ°Iãm
 = 
√w
 
	`C⁄figIãm
(
li°
->li°,Üa°Iãm, 
¥›
->
míu
,

1267 
	`míu_is_visibÀ
(
¥›
->
míu
));

1269 
	}
}

1274 
	gC⁄figMaöWödow
::
	$C⁄figMaöWödow
()

1275 : 
	$£¨chWödow
(0)

1277 
QMíuB¨
* 
míu
;

1278 
boﬁ
 
ok
;

1279 
x
, 
y
, 
width
, 
height
;

1280 
tôÀ
[256];

1282 
QDeskt›Widgë
 *
d
 = 
c⁄figAµ
->
	`deskt›
();

1283 
	`¢¥ötf
(
tôÀ
, (title), "%s%s",

1284 
roŸmíu
.
¥om±
->
ãxt
,

1285 #i‡
QT_VERSION
 < 0x040000

1291 
	`£tC≠ti⁄
(
tôÀ
);

1293 
width
 = 
c⁄figSëtögs
->
	`ªadNumE¡ry
("/wödow width", 
d
->
	`width
() - 64);

1294 
height
 = 
c⁄figSëtögs
->
	`ªadNumE¡ry
("/wödow height", 
d
->
	`height
() - 64);

1295 
	`ªsize
(
width
, 
height
);

1296 
x
 = 
c⁄figSëtögs
->
	`ªadNumE¡ry
("/wödow x", 0, &
ok
);

1297 i‡(
ok
)

1298 
y
 = 
c⁄figSëtögs
->
	`ªadNumE¡ry
("/wödow y", 0, &
ok
);

1299 i‡(
ok
)

1300 
	`move
(
x
, 
y
);

1302 
•lô1
 = 
√w
 
	`QS∂ôãr
(
this
);

1303 
•lô1
->
	`£tOrõ¡©i⁄
(
Qt
::
H‹iz⁄èl
);

1304 
	`£tCíåÆWidgë
(
•lô1
);

1306 
míuVõw
 = 
√w
 
	`C⁄figVõw
(
•lô1
, "menu");

1307 
míuLi°
 = 
míuVõw
->
li°
;

1309 
•lô2
 = 
√w
 
	`QS∂ôãr
(
•lô1
);

1310 
•lô2
->
	`£tOrõ¡©i⁄
(
Qt
::
Vîtiˇl
);

1313 
c⁄figVõw
 = 
√w
 
	`C⁄figVõw
(
•lô2
, "config");

1314 
c⁄figLi°
 = 
c⁄figVõw
->
li°
;

1316 
hñpText
 = 
√w
 
	`C⁄figInfoVõw
(
•lô2
, "help");

1317 
hñpText
->
	`£tTextF‹m©
(
Qt
::
RichText
);

1319 
	`£tTabOrdî
(
c⁄figLi°
, 
hñpText
);

1320 
c⁄figLi°
->
	`£tFocus
();

1322 
míu
 = 
	`míuB¨
();

1323 
toﬁB¨
 = 
√w
 
	`Q3ToﬁB¨
("Toﬁs", 
this
);

1325 
backA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
("Back", 
	`QPixm≠
(
xpm_back
), 
	`_
("Back"), 0, 
this
);

1326 
	`c⁄√˘
(
backA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`goBack
()));

1327 
backA˘i⁄
->
	`£tE«bÀd
(
FALSE
);

1328 
Q3A˘i⁄
 *
quôA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
("Quô", 
	`_
("&Quô"), 
Qt
::
CTRL
 + Qt::
Key_Q
, 
this
);

1329 
	`c⁄√˘
(
quôA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`˛o£
()));

1330 
Q3A˘i⁄
 *
lﬂdA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
("Lﬂd", 
	`QPixm≠
(
xpm_lﬂd
), 
	`_
("&Lﬂd"), 
Qt
::
CTRL
 + Qt::
Key_L
, 
this
);

1331 
	`c⁄√˘
(
lﬂdA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`lﬂdC⁄fig
()));

1332 
ßveA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
("Save", 
	`QPixm≠
(
xpm_ßve
), 
	`_
("&Save"), 
Qt
::
CTRL
 + Qt::
Key_S
, 
this
);

1333 
	`c⁄√˘
(
ßveA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`ßveC⁄fig
()));

1334 
	`c⁄f_£t_ch™ged_ˇŒback
(
c⁄f_ch™ged
);

1336 
	`c⁄f_ch™ged
();

1337 
Q3A˘i⁄
 *
ßveAsA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
("SavêAs...", 
	`_
("Savê&As..."), 0, 
this
);

1338 
	`c⁄√˘
(
ßveAsA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`ßveC⁄figAs
()));

1339 
Q3A˘i⁄
 *
£¨chA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
("Föd", 
	`_
("&Föd"), 
Qt
::
CTRL
 + Qt::
Key_F
, 
this
);

1340 
	`c⁄√˘
(
£¨chA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`£¨chC⁄fig
()));

1341 
Q3A˘i⁄
 *
sögÀVõwA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
("SögÀ Võw", 
	`QPixm≠
(
xpm_sögÀ_võw
), 
	`_
("SögÀ Võw"), 0, 
this
);

1342 
	`c⁄√˘
(
sögÀVõwA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`showSögÀVõw
()));

1343 
Q3A˘i⁄
 *
•lôVõwA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
("S∂ô Võw", 
	`QPixm≠
(
xpm_•lô_võw
), 
	`_
("S∂ô Võw"), 0, 
this
);

1344 
	`c⁄√˘
(
•lôVõwA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`showS∂ôVõw
()));

1345 
Q3A˘i⁄
 *
fuŒVõwA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
("FuŒ Võw", 
	`QPixm≠
(
xpm_åì_võw
), 
	`_
("FuŒ Võw"), 0, 
this
);

1346 
	`c⁄√˘
(
fuŒVõwA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`showFuŒVõw
()));

1348 
Q3A˘i⁄
 *
showNameA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
(
NULL
, 
	`_
("Show Name"), 0, 
this
);

1349 
showNameA˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

1350 
	`c⁄√˘
(
showNameA˘i⁄
, 
	`SIGNAL
(
	`toggÀd
(
boﬁ
)), 
c⁄figVõw
, 
	`SLOT
(
	`£tShowName
(bool)));

1351 
	`c⁄√˘
(
c⁄figVõw
, 
	`SIGNAL
(
	`showNameCh™ged
(
boﬁ
)), 
showNameA˘i⁄
, 
	`SLOT
(
	`£tOn
(bool)));

1352 
showNameA˘i⁄
->
	`£tOn
(
c⁄figVõw
->
	`showName
());

1353 
Q3A˘i⁄
 *
showR™geA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
(
NULL
, 
	`_
("Show R™ge"), 0, 
this
);

1354 
showR™geA˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

1355 
	`c⁄√˘
(
showR™geA˘i⁄
, 
	`SIGNAL
(
	`toggÀd
(
boﬁ
)), 
c⁄figVõw
, 
	`SLOT
(
	`£tShowR™ge
(bool)));

1356 
	`c⁄√˘
(
c⁄figVõw
, 
	`SIGNAL
(
	`showR™geCh™ged
(
boﬁ
)), 
showR™geA˘i⁄
, 
	`SLOT
(
	`£tOn
(bool)));

1357 
showR™geA˘i⁄
->
	`£tOn
(
c⁄figLi°
->
showR™ge
);

1358 
Q3A˘i⁄
 *
showD©aA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
(
NULL
, 
	`_
("Show D©a"), 0, 
this
);

1359 
showD©aA˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

1360 
	`c⁄√˘
(
showD©aA˘i⁄
, 
	`SIGNAL
(
	`toggÀd
(
boﬁ
)), 
c⁄figVõw
, 
	`SLOT
(
	`£tShowD©a
(bool)));

1361 
	`c⁄√˘
(
c⁄figVõw
, 
	`SIGNAL
(
	`showD©aCh™ged
(
boﬁ
)), 
showD©aA˘i⁄
, 
	`SLOT
(
	`£tOn
(bool)));

1362 
showD©aA˘i⁄
->
	`£tOn
(
c⁄figLi°
->
showD©a
);

1364 
QA˘i⁄Group
 *
›tGroup
 = 
√w
 
	`QA˘i⁄Group
(
this
);

1365 
›tGroup
->
	`£tEx˛usive
(
TRUE
);

1366 
	`c⁄√˘
(
›tGroup
, 
	`SIGNAL
(
	`£À˘ed
(
QA˘i⁄
 *)), 
c⁄figVõw
,

1367 
	`SLOT
(
	`£tO±i⁄Mode
(
QA˘i⁄
 *)));

1368 
	`c⁄√˘
(
›tGroup
, 
	`SIGNAL
(
	`£À˘ed
(
QA˘i⁄
 *)), 
míuVõw
,

1369 
	`SLOT
(
	`£tO±i⁄Mode
(
QA˘i⁄
 *)));

1371 #i‡
QT_VERSION
 >= 0x040000

1372 
c⁄figVõw
->
showN‹mÆA˘i⁄
 = 
√w
 
	`QA˘i⁄
(
	`_
("Show N‹mÆ O±i⁄s"), 
›tGroup
);

1373 
c⁄figVõw
->
showAŒA˘i⁄
 = 
√w
 
	`QA˘i⁄
(
	`_
("Show AŒ O±i⁄s"), 
›tGroup
);

1374 
c⁄figVõw
->
showProm±A˘i⁄
 = 
√w
 
	`QA˘i⁄
(
	`_
("Show Prom± O±i⁄s"), 
›tGroup
);

1376 
c⁄figVõw
->
showN‹mÆA˘i⁄
 = 
√w
 
	`QA˘i⁄
(
	`_
("Show N‹mÆ O±i⁄s"), 0, 
›tGroup
);

1377 
c⁄figVõw
->
showAŒA˘i⁄
 = 
√w
 
	`QA˘i⁄
(
	`_
("Show AŒ O±i⁄s"), 0, 
›tGroup
);

1378 
c⁄figVõw
->
showProm±A˘i⁄
 = 
√w
 
	`QA˘i⁄
(
	`_
("Show Prom± O±i⁄s"), 0, 
›tGroup
);

1380 
c⁄figVõw
->
showN‹mÆA˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

1381 
c⁄figVõw
->
showN‹mÆA˘i⁄
->
	`£tOn
(
c⁄figLi°
->
›tMode
 =
n‹mÆO±
);

1382 
c⁄figVõw
->
showAŒA˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

1383 
c⁄figVõw
->
showAŒA˘i⁄
->
	`£tOn
(
c⁄figLi°
->
›tMode
 =
ÆlO±
);

1384 
c⁄figVõw
->
showProm±A˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

1385 
c⁄figVõw
->
showProm±A˘i⁄
->
	`£tOn
(
c⁄figLi°
->
›tMode
 =
¥om±O±
);

1387 
Q3A˘i⁄
 *
showDebugA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
(
NULL
, 
	`_
("Show Debug Info"), 0, 
this
);

1388 
showDebugA˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

1389 
	`c⁄√˘
(
showDebugA˘i⁄
, 
	`SIGNAL
(
	`toggÀd
(
boﬁ
)), 
hñpText
, 
	`SLOT
(
	`£tShowDebug
(bool)));

1390 
	`c⁄√˘
(
hñpText
, 
	`SIGNAL
(
	`showDebugCh™ged
(
boﬁ
)), 
showDebugA˘i⁄
, 
	`SLOT
(
	`£tOn
(bool)));

1391 
showDebugA˘i⁄
->
	`£tOn
(
hñpText
->
	`showDebug
());

1393 
Q3A˘i⁄
 *
showI¡roA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
(
NULL
, 
	`_
("I¡rodu˘i⁄"), 0, 
this
);

1394 
	`c⁄√˘
(
showI¡roA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`showI¡ro
()));

1395 
Q3A˘i⁄
 *
showAboutA˘i⁄
 = 
√w
 
	`Q3A˘i⁄
(
NULL
, 
	`_
("About"), 0, 
this
);

1396 
	`c⁄√˘
(
showAboutA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`showAbout
()));

1399 
backA˘i⁄
->
	`addTo
(
toﬁB¨
);

1400 
toﬁB¨
->
	`addSï¨©‹
();

1401 
lﬂdA˘i⁄
->
	`addTo
(
toﬁB¨
);

1402 
ßveA˘i⁄
->
	`addTo
(
toﬁB¨
);

1403 
toﬁB¨
->
	`addSï¨©‹
();

1404 
sögÀVõwA˘i⁄
->
	`addTo
(
toﬁB¨
);

1405 
•lôVõwA˘i⁄
->
	`addTo
(
toﬁB¨
);

1406 
fuŒVõwA˘i⁄
->
	`addTo
(
toﬁB¨
);

1409 
Q3P›upMíu
* 
c⁄fig
 = 
√w
 
	`Q3P›upMíu
(
this
);

1410 
míu
->
	`ö£πIãm
(
	`_
("&Fûe"), 
c⁄fig
);

1411 
lﬂdA˘i⁄
->
	`addTo
(
c⁄fig
);

1412 
ßveA˘i⁄
->
	`addTo
(
c⁄fig
);

1413 
ßveAsA˘i⁄
->
	`addTo
(
c⁄fig
);

1414 
c⁄fig
->
	`ö£πSï¨©‹
();

1415 
quôA˘i⁄
->
	`addTo
(
c⁄fig
);

1418 
Q3P›upMíu
* 
edôMíu
 = 
√w
 
	`Q3P›upMíu
(
this
);

1419 
míu
->
	`ö£πIãm
(
	`_
("&Edô"), 
edôMíu
);

1420 
£¨chA˘i⁄
->
	`addTo
(
edôMíu
);

1423 
Q3P›upMíu
* 
›ti⁄Míu
 = 
√w
 
	`Q3P›upMíu
(
this
);

1424 
míu
->
	`ö£πIãm
(
	`_
("&O±i⁄"), 
›ti⁄Míu
);

1425 
showNameA˘i⁄
->
	`addTo
(
›ti⁄Míu
);

1426 
showR™geA˘i⁄
->
	`addTo
(
›ti⁄Míu
);

1427 
showD©aA˘i⁄
->
	`addTo
(
›ti⁄Míu
);

1428 
›ti⁄Míu
->
	`ö£πSï¨©‹
();

1429 
›tGroup
->
	`addTo
(
›ti⁄Míu
);

1430 
›ti⁄Míu
->
	`ö£πSï¨©‹
();

1433 
Q3P›upMíu
* 
hñpMíu
 = 
√w
 
	`Q3P›upMíu
(
this
);

1434 
míu
->
	`ö£πSï¨©‹
();

1435 
míu
->
	`ö£πIãm
(
	`_
("&Hñp"), 
hñpMíu
);

1436 
showI¡roA˘i⁄
->
	`addTo
(
hñpMíu
);

1437 
showAboutA˘i⁄
->
	`addTo
(
hñpMíu
);

1439 
	`c⁄√˘
(
c⁄figLi°
, 
	`SIGNAL
(
	`míuCh™ged
(
míu
 *)),

1440 
hñpText
, 
	`SLOT
(
	`£tInfo
(
míu
 *)));

1441 
	`c⁄√˘
(
c⁄figLi°
, 
	`SIGNAL
(
	`míuSñe˘ed
(
míu
 *)),

1442 
	`SLOT
(
	`ch™geMíu
(
míu
 *)));

1443 
	`c⁄√˘
(
c⁄figLi°
, 
	`SIGNAL
(
	`∑ª¡Sñe˘ed
()),

1444 
	`SLOT
(
	`goBack
()));

1445 
	`c⁄√˘
(
míuLi°
, 
	`SIGNAL
(
	`míuCh™ged
(
míu
 *)),

1446 
hñpText
, 
	`SLOT
(
	`£tInfo
(
míu
 *)));

1447 
	`c⁄√˘
(
míuLi°
, 
	`SIGNAL
(
	`míuSñe˘ed
(
míu
 *)),

1448 
	`SLOT
(
	`ch™geMíu
(
míu
 *)));

1450 
	`c⁄√˘
(
c⁄figLi°
, 
	`SIGNAL
(
	`gŸFocus
(
míu
 *)),

1451 
hñpText
, 
	`SLOT
(
	`£tInfo
(
míu
 *)));

1452 
	`c⁄√˘
(
míuLi°
, 
	`SIGNAL
(
	`gŸFocus
(
míu
 *)),

1453 
hñpText
, 
	`SLOT
(
	`£tInfo
(
míu
 *)));

1454 
	`c⁄√˘
(
míuLi°
, 
	`SIGNAL
(
	`gŸFocus
(
míu
 *)),

1455 
	`SLOT
(
	`li°FocusCh™ged
()));

1456 
	`c⁄√˘
(
hñpText
, 
	`SIGNAL
(
	`míuSñe˘ed
(
míu
 *)),

1457 
	`SLOT
(
	`£tMíuLök
(
míu
 *)));

1459 
QSåög
 
li°Mode
 = 
c⁄figSëtögs
->
	`ªadE¡ry
("/listMode", "symbol");

1460 i‡(
li°Mode
 == "single")

1461 
	`showSögÀVõw
();

1462 i‡(
li°Mode
 == "full")

1463 
	`showFuŒVõw
();

1465 
	`showS∂ôVõw
();

1468 
Q3VÆueLi°
<> 
sizes
 = 
c⁄figSëtögs
->
	`ªadSizes
("/•lô1", &
ok
);

1469 i‡(
ok
)

1470 
•lô1
->
	`£tSizes
(
sizes
);

1472 
sizes
 = 
c⁄figSëtögs
->
	`ªadSizes
("/•lô2", &
ok
);

1473 i‡(
ok
)

1474 
•lô2
->
	`£tSizes
(
sizes
);

1475 
	}
}

1477 
	gC⁄figMaöWödow
::
	$lﬂdC⁄fig
()

1479 
QSåög
 
s
 = 
Q3FûeDülog
::
	`gëO≥nFûeName
(
	`c⁄f_gë_c⁄fig«me
(), 
NULL
, 
this
);

1480 i‡(
s
.
	`isNuŒ
())

1482 i‡(
	`c⁄f_ªad
(
QFûe
::
	`ícodeName
(
s
)))

1483 
QMesßgeBox
::
	`öf‹m©i⁄
(
this
, "qc⁄f", 
	`_
("UnableÅoÜoad configuration!"));

1484 
C⁄figVõw
::
	`upd©eLi°AŒ
();

1485 
	}
}

1487 
boﬁ
 
	gC⁄figMaöWödow
::
	$ßveC⁄fig
()

1489 i‡(
	`c⁄f_wrôe
(
NULL
)) {

1490 
QMesßgeBox
::
	`öf‹m©i⁄
(
this
, "qc⁄f", 
	`_
("UnableÅo save configuration!"));

1491  
Ál£
;

1493  
åue
;

1494 
	}
}

1496 
	gC⁄figMaöWödow
::
	$ßveC⁄figAs
()

1498 
QSåög
 
s
 = 
Q3FûeDülog
::
	`gëSaveFûeName
(
	`c⁄f_gë_c⁄fig«me
(), 
NULL
, 
this
);

1499 i‡(
s
.
	`isNuŒ
())

1501 
	`ßveC⁄fig
();

1502 
	}
}

1504 
	gC⁄figMaöWödow
::
	$£¨chC⁄fig
()

1506 i‡(!
£¨chWödow
)

1507 
£¨chWödow
 = 
√w
 
	`C⁄figSórchWödow
(
this
, "search");

1508 
£¨chWödow
->
	`show
();

1509 
	}
}

1511 
	gC⁄figMaöWödow
::
	$ch™geMíu
(
míu
 *menu)

1513 
c⁄figLi°
->
	`£tRoŸMíu
(
míu
);

1514 i‡(
c⁄figLi°
->
roŸE¡ry
->
∑ª¡
 =&
roŸmíu
)

1515 
backA˘i⁄
->
	`£tE«bÀd
(
FALSE
);

1517 
backA˘i⁄
->
	`£tE«bÀd
(
TRUE
);

1518 
	}
}

1520 
	gC⁄figMaöWödow
::
	$£tMíuLök
(
míu
 *menu)

1522 
míu
 *
∑ª¡
;

1523 
C⁄figLi°
* 
li°
 = 
NULL
;

1524 
C⁄figIãm
* 
ôem
;

1526 i‡(
c⁄figLi°
->
	`míuSkù
(
míu
))

1529 
c⁄figLi°
->
mode
) {

1530 
sögÀMode
:

1531 
li°
 = 
c⁄figLi°
;

1532 
∑ª¡
 = 
	`míu_gë_∑ª¡_míu
(
míu
);

1533 i‡(!
∑ª¡
)

1535 
li°
->
	`£tRoŸMíu
(
∑ª¡
);

1537 
symbﬁMode
:

1538 i‡(
míu
->
Êags
 & 
MENU_ROOT
) {

1539 
c⁄figLi°
->
	`£tRoŸMíu
(
míu
);

1540 
c⁄figLi°
->
	`˛órSñe˘i⁄
();

1541 
li°
 = 
míuLi°
;

1543 
li°
 = 
c⁄figLi°
;

1544 
∑ª¡
 = 
	`míu_gë_∑ª¡_míu
(
míu
->parent);

1545 i‡(!
∑ª¡
)

1547 
ôem
 = 
míuLi°
->
	`födC⁄figIãm
(
∑ª¡
);

1548 i‡(
ôem
) {

1549 
míuLi°
->
	`£tSñe˘ed
(
ôem
, 
TRUE
);

1550 
míuLi°
->
	`ísuªIãmVisibÀ
(
ôem
);

1552 
li°
->
	`£tRoŸMíu
(
∑ª¡
);

1555 
fuŒMode
:

1556 
li°
 = 
c⁄figLi°
;

1562 i‡(
li°
) {

1563 
ôem
 = 
li°
->
	`födC⁄figIãm
(
míu
);

1564 i‡(
ôem
) {

1565 
li°
->
	`£tSñe˘ed
(
ôem
, 
TRUE
);

1566 
li°
->
	`ísuªIãmVisibÀ
(
ôem
);

1567 
li°
->
	`£tFocus
();

1570 
	}
}

1572 
	gC⁄figMaöWödow
::
	$li°FocusCh™ged
()

1574 i‡(
míuLi°
->
mode
 =
míuMode
)

1575 
c⁄figLi°
->
	`˛órSñe˘i⁄
();

1576 
	}
}

1578 
	gC⁄figMaöWödow
::
	$goBack
()

1580 
C⁄figIãm
* 
ôem
;

1582 
c⁄figLi°
->
	`£tP¨ítMíu
();

1583 i‡(
c⁄figLi°
->
roŸE¡ry
 =&
roŸmíu
)

1584 
backA˘i⁄
->
	`£tE«bÀd
(
FALSE
);

1585 
ôem
 = (
C⁄figIãm
*)
míuLi°
->
	`£À˘edIãm
();

1586 
ôem
) {

1587 i‡(
ôem
->
míu
 =
c⁄figLi°
->
roŸE¡ry
) {

1588 
míuLi°
->
	`£tSñe˘ed
(
ôem
, 
TRUE
);

1591 
ôem
 = (
C⁄figIãm
*)ôem->
	`∑ª¡
();

1593 
	}
}

1595 
	gC⁄figMaöWödow
::
	$showSögÀVõw
()

1597 
míuVõw
->
	`hide
();

1598 
míuLi°
->
	`£tRoŸMíu
(0);

1599 
c⁄figLi°
->
mode
 = 
sögÀMode
;

1600 i‡(
c⁄figLi°
->
roŸE¡ry
 =&
roŸmíu
)

1601 
c⁄figLi°
->
	`upd©eLi°AŒ
();

1603 
c⁄figLi°
->
	`£tRoŸMíu
(&
roŸmíu
);

1604 
c⁄figLi°
->
	`£tAŒO≥n
(
TRUE
);

1605 
c⁄figLi°
->
	`£tFocus
();

1606 
	}
}

1608 
	gC⁄figMaöWödow
::
	$showS∂ôVõw
()

1610 
c⁄figLi°
->
mode
 = 
symbﬁMode
;

1611 i‡(
c⁄figLi°
->
roŸE¡ry
 =&
roŸmíu
)

1612 
c⁄figLi°
->
	`upd©eLi°AŒ
();

1614 
c⁄figLi°
->
	`£tRoŸMíu
(&
roŸmíu
);

1615 
c⁄figLi°
->
	`£tAŒO≥n
(
TRUE
);

1616 
c⁄figAµ
->
	`¥o˚ssEvíts
();

1617 
míuLi°
->
mode
 = 
míuMode
;

1618 
míuLi°
->
	`£tRoŸMíu
(&
roŸmíu
);

1619 
míuLi°
->
	`£tAŒO≥n
(
TRUE
);

1620 
míuVõw
->
	`show
();

1621 
míuLi°
->
	`£tFocus
();

1622 
	}
}

1624 
	gC⁄figMaöWödow
::
	$showFuŒVõw
()

1626 
míuVõw
->
	`hide
();

1627 
míuLi°
->
	`£tRoŸMíu
(0);

1628 
c⁄figLi°
->
mode
 = 
fuŒMode
;

1629 i‡(
c⁄figLi°
->
roŸE¡ry
 =&
roŸmíu
)

1630 
c⁄figLi°
->
	`upd©eLi°AŒ
();

1632 
c⁄figLi°
->
	`£tRoŸMíu
(&
roŸmíu
);

1633 
c⁄figLi°
->
	`£tAŒO≥n
(
FALSE
);

1634 
c⁄figLi°
->
	`£tFocus
();

1635 
	}
}

1641 
	gC⁄figMaöWödow
::
	$˛o£Evít
(
QClo£Evít
* 
e
)

1643 i‡(!
	`c⁄f_gë_ch™ged
()) {

1644 
e
->
	`ac˚±
();

1647 
QMesßgeBox
 
	`mb
("qc⁄f", 
	`_
("Savêc⁄figuøti⁄?"), QMesßgeBox::
W¨nög
,

1648 
QMesßgeBox
::
Yes
 | QMesßgeBox::
DeÁu…
, QMesßgeBox::
No
, QMesßgeBox::
C™˚l
 | QMesßgeBox::
Esˇ≥
);

1649 
mb
.
	`£tBuâ⁄Text
(
QMesßgeBox
::
Yes
, 
	`_
("&Save Changes"));

1650 
mb
.
	`£tBuâ⁄Text
(
QMesßgeBox
::
No
, 
	`_
("&Discard Changes"));

1651 
mb
.
	`£tBuâ⁄Text
(
QMesßgeBox
::
C™˚l
, 
	`_
("Cancel Exit"));

1652 
mb
.
	`exec
()) {

1653 
QMesßgeBox
::
Yes
:

1654 i‡(
	`ßveC⁄fig
())

1655 
e
->
	`ac˚±
();

1657 
e
->
	`ign‹e
();

1659 
QMesßgeBox
::
No
:

1660 
e
->
	`ac˚±
();

1662 
QMesßgeBox
::
C™˚l
:

1663 
e
->
	`ign‹e
();

1666 
	}
}

1668 
	gC⁄figMaöWödow
::
	$showI¡ro
()

1670 c⁄° 
QSåög
 
°r
 = 
	`_
("WelcomeÅoÅhe qconf graphical configurationÅool.\n\n"

1682 
QMesßgeBox
::
	`öf‹m©i⁄
(
this
, "qc⁄f", 
°r
);

1683 
	}
}

1685 
	gC⁄figMaöWödow
::
	$showAbout
()

1687 c⁄° 
QSåög
 
°r
 = 
	`_
("qconf is Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>.\n\n"

1690 
QMesßgeBox
::
	`öf‹m©i⁄
(
this
, "qc⁄f", 
°r
);

1691 
	}
}

1693 
	gC⁄figMaöWödow
::
	$ßveSëtögs
()

1695 
c⁄figSëtögs
->
	`wrôeE¡ry
("/wödow x", 
	`pos
().
	`x
());

1696 
c⁄figSëtögs
->
	`wrôeE¡ry
("/wödow y", 
	`pos
().
	`y
());

1697 
c⁄figSëtögs
->
	`wrôeE¡ry
("/wödow width", 
	`size
().
	`width
());

1698 
c⁄figSëtögs
->
	`wrôeE¡ry
("/wödow height", 
	`size
().
	`height
());

1700 
QSåög
 
íåy
;

1701 
c⁄figLi°
->
mode
) {

1702 
sögÀMode
 :

1703 
íåy
 = "single";

1706 
symbﬁMode
 :

1707 
íåy
 = "split";

1710 
fuŒMode
 :

1711 
íåy
 = "full";

1717 
c⁄figSëtögs
->
	`wrôeE¡ry
("/li°Mode", 
íåy
);

1719 
c⁄figSëtögs
->
	`wrôeSizes
("/•lô1", 
•lô1
->
	`sizes
());

1720 
c⁄figSëtögs
->
	`wrôeSizes
("/•lô2", 
•lô2
->
	`sizes
());

1721 
	}
}

1723 
	gC⁄figMaöWödow
::
	$c⁄f_ch™ged
()

1725 i‡(
ßveA˘i⁄
)

1726 
ßveA˘i⁄
->
	`£tE«bÀd
(
	`c⁄f_gë_ch™ged
());

1727 
	}
}

1729 
	$fixup_roŸmíu
(
míu
 *menu)

1731 
míu
 *
chûd
;

1732 
míu_˙t
 = 0;

1734 
míu
->
Êags
 |
MENU_ROOT
;

1735 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

1736 i‡(
chûd
->
¥om±
 && chûd->¥om±->
ty≥
 =
P_MENU
) {

1737 
míu_˙t
++;

1738 
	`fixup_roŸmíu
(
chûd
);

1739 
míu_˙t
--;

1740 } i‡(!
míu_˙t
)

1741 
	`fixup_roŸmíu
(
chûd
);

1743 
	}
}

1745 c⁄° *
	g¥og«me
;

1747 
	$ußge
()

1749 
	`¥ötf
(
	`_
("%†[-s] <c⁄fig>\n"), 
¥og«me
);

1750 
	`exô
(0);

1751 
	}
}

1753 
	$maö
(
ac
, ** 
av
)

1755 
C⁄figMaöWödow
* 
v
;

1756 c⁄° *
«me
;

1758 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

1759 
	`ãxtdomaö
(
PACKAGE
);

1761 
¥og«me
 = 
av
[0];

1762 
c⁄figAµ
 = 
√w
 
	`QAµliˇti⁄
(
ac
, 
av
);

1763 i‡(
ac
 > 1 && 
av
[1][0] == '-') {

1764 
av
[1][1]) {

1766 
	`c⁄f_£t_mesßge_ˇŒback
(
NULL
);

1770 
	`ußge
();

1772 
«me
 = 
av
[2];

1774 
«me
 = 
av
[1];

1775 i‡(!
«me
)

1776 
	`ußge
();

1778 
	`c⁄f_∑r£
(
«me
);

1779 
	`fixup_roŸmíu
(&
roŸmíu
);

1780 
	`c⁄f_ªad
(
NULL
);

1783 
c⁄figSëtögs
 = 
√w
 
	`C⁄figSëtögs
();

1784 
c⁄figSëtögs
->
	`begöGroup
("/kconfig/qconf");

1785 
v
 = 
√w
 
	`C⁄figMaöWödow
();

1788 
c⁄figAµ
->
	`£tMaöWidgë
(
v
);

1789 
c⁄figAµ
->
	`c⁄√˘
(c⁄figAµ, 
	`SIGNAL
(
	`œ°WödowClo£d
()), 
	`SLOT
(
	`quô
()));

1790 
c⁄figAµ
->
	`c⁄√˘
(c⁄figAµ, 
	`SIGNAL
(
	`aboutToQuô
()), 
v
, 
	`SLOT
(
	`ßveSëtögs
()));

1791 
v
->
	`show
();

1792 
c⁄figAµ
->
	`exec
();

1794 
c⁄figSëtögs
->
	`ídGroup
();

1795 
dñëe
 
c⁄figSëtögs
;

1798 
	}
}

	@swupdate/scripts/kconfig/qconf.h

6 #i‡
QT_VERSION
 < 0x040000

7 
	~<qli°võw.h
>

9 
	~<q3li°võw.h
>

11 
	~<q£âögs.h
>

13 #i‡
QT_VERSION
 < 0x040000

14 
	#Q3VÆueLi°
 
QVÆueLi°


	)

15 
	#Q3P›upMíu
 
QP›upMíu


	)

16 
	#Q3Li°Võw
 
QLi°Võw


	)

17 
	#Q3Li°VõwIãm
 
QLi°VõwIãm


	)

18 
	#Q3VBox
 
QVBox


	)

19 
	#Q3TextBrow£r
 
QTextBrow£r


	)

20 
	#Q3MaöWödow
 
QMaöWödow


	)

21 
	#Q3A˘i⁄
 
QA˘i⁄


	)

22 
	#Q3ToﬁB¨
 
QToﬁB¨


	)

23 
	#Q3Li°VõwIãmIãøt‹
 
QLi°VõwIãmIãøt‹


	)

24 
	#Q3FûeDülog
 
QFûeDülog


	)

27 
˛ass
 
	gC⁄figVõw
;

28 
˛ass
 
	gC⁄figLi°
;

29 
˛ass
 
	gC⁄figIãm
;

30 
˛ass
 
	gC⁄figLöeEdô
;

31 
˛ass
 
	gC⁄figMaöWödow
;

33 ˛as†
	cC⁄figSëtögs
 : 
public
 
QSëtögs
 {

34 
public
:

35 
C⁄figSëtögs
();

36 
	mQ3VÆueLi°
<> 
ªadSizes
(c⁄° 
QSåög
& 
key
, 
boﬁ
 *
ok
);

37 
boﬁ
 
wrôeSizes
(c⁄° 
QSåög
& 
key
, c⁄° 
Q3VÆueLi°
<>& 
vÆue
);

40 
	ecﬁIdx
 {

41 
	m¥om±CﬁIdx
, 
	m«meCﬁIdx
, 
	mnoCﬁIdx
, 
	mmodCﬁIdx
, 
	myesCﬁIdx
, 
	md©aCﬁIdx
, 
	mcﬁNr


43 
	eli°Mode
 {

44 
	msögÀMode
, 
	mmíuMode
, 
	msymbﬁMode
, 
	mfuŒMode
, 
	mli°Mode


46 
	e›ti⁄Mode
 {

47 
	mn‹mÆO±
 = 0, 
	mÆlO±
, 
	m¥om±O±


50 ˛as†
	cC⁄figLi°
 : 
public
 
Q3Li°Võw
 {

51 
Q_OBJECT


52 
˛ass
 
	tQ3Li°Võw
 
	tP¨ít
;

53 
	mpublic
:

54 
C⁄figLi°
(
C⁄figVõw
* 
p
, c⁄° *
«me
 = 0);

55 
ªöô
();

56 
C⁄figVõw
* 
	$∑ª¡
() const

58  (
C⁄figVõw
*)
P¨ít
::
	`∑ª¡
();

60 
C⁄figIãm
* 
	`födC⁄figIãm
(
míu
 *);

62 
¥Ÿe˘ed
:

63 
	`keyPªssEvít
(
QKeyEvít
 *
e
);

64 
	`c⁄ã¡sMou£PªssEvít
(
QMou£Evít
 *
e
);

65 
	`c⁄ã¡sMou£Rñó£Evít
(
QMou£Evít
 *
e
);

66 
	`c⁄ã¡sMou£MoveEvít
(
QMou£Evít
 *
e
);

67 
	`c⁄ã¡sMou£DoubÀClickEvít
(
QMou£Evít
 *
e
);

68 
	`focusInEvít
(
QFocusEvít
 *
e
);

69 
	`c⁄ãxtMíuEvít
(
QC⁄ãxtMíuEvít
 *
e
);

71 
public
 
¶Ÿs
:

72 
	`£tRoŸMíu
(
míu
 *menu);

74 
	`upd©eLi°
(
C⁄figIãm
 *
ôem
);

75 
	`£tVÆue
(
C⁄figIãm
* 
ôem
, 
åi°©e
 
vÆ
);

76 
	`ch™geVÆue
(
C⁄figIãm
* 
ôem
);

77 
	`upd©eSñe˘i⁄
();

78 
	`ßveSëtögs
();

79 
sig«ls
:

80 
	`míuCh™ged
(
míu
 *menu);

81 
	`míuSñe˘ed
(
míu
 *menu);

82 
	`∑ª¡Sñe˘ed
();

83 
	`gŸFocus
(
míu
 *);

85 
public
:

86 
	$upd©eLi°AŒ
()

88 
upd©eAŒ
 = 
åue
;

89 
	`upd©eLi°
(
NULL
);

90 
upd©eAŒ
 = 
Ál£
;

91 
	}
}

92 
C⁄figLi°
* 
	$li°Võw
()

94  
this
;

95 
	}
}

96 
C⁄figIãm
* 
	$fú°Chûd
() const

98  (
C⁄figIãm
 *)
P¨ít
::
	`fú°Chûd
();

99 
	}
}

100 
	$m≠Idx
(
cﬁIdx
 
idx
)

102  
cﬁM≠
[
idx
];

103 
	}
}

104 
	$addCﬁumn
(
cﬁIdx
 
idx
, c⁄° 
QSåög
& 
œbñ
)

106 
cﬁM≠
[
idx
] = 
P¨ít
::
	`addCﬁumn
(
œbñ
);

107 
cﬁRevM≠
[
cﬁM≠
[
idx
]] = idx;

108 
	}
}

109 
	$ªmoveCﬁumn
(
cﬁIdx
 
idx
)

111 
cﬁ
 = 
cﬁM≠
[
idx
];

112 i‡(
cﬁ
 >= 0) {

113 
P¨ít
::
	`ªmoveCﬁumn
(
cﬁ
);

114 
cﬁRevM≠
[
cﬁ
] = 
cﬁM≠
[
idx
] = -1;

116 
	}
}

117 
£tAŒO≥n
(
boﬁ
 
›í
);

118 
£tP¨ítMíu
();

120 
boﬁ
 
míuSkù
(
míu
 *);

122 
	gãm∂©e
 <
˛ass
 
	gP
>

123 
upd©eMíuLi°
(
P
*, 
míu
*);

125 
boﬁ
 
	gupd©eAŒ
;

127 
QPixm≠
 
	gsymbﬁYesPix
, 
	gsymbﬁModPix
, 
	gsymbﬁNoPix
;

128 
QPixm≠
 
	gchoi˚YesPix
, 
	gchoi˚NoPix
;

129 
QPixm≠
 
	gmíuPix
, 
	gmíuInvPix
, 
	gmíuBackPix
, 
	gvoidPix
;

131 
boﬁ
 
	gshowName
, 
	gshowR™ge
, 
	gshowD©a
;

132 
li°Mode
 
	gmode
;

133 
›ti⁄Mode
 
	g›tMode
;

134 
míu
 *
	groŸE¡ry
;

135 
QCﬁ‹Group
 
	gdißbÀdCﬁ‹Group
;

136 
QCﬁ‹Group
 
	göa˘ivedCﬁ‹Group
;

137 
Q3P›upMíu
* 
	ghódîP›up
;

139 
	g¥iv©e
:

140 
cﬁM≠
[
cﬁNr
];

141 
	gcﬁRevM≠
[
cﬁNr
];

144 ˛as†
	cC⁄figIãm
 : 
public
 
Q3Li°VõwIãm
 {

145 
˛ass
 
	tQ3Li°VõwIãm
 
	tP¨ít
;

146 
	mpublic
:

147 
	$C⁄figIãm
(
Q3Li°Võw
 *
∑ª¡
, 
C⁄figIãm
 *
a·î
, 
míu
 *
m
, 
boﬁ
 
v
)

148 : 
	`P¨ít
(
∑ª¡
, 
a·î
), 
	`míu
(
m
), 
	`visibÀ
(
v
), 
	$goP¨ít
(
Ál£
)

150 
	`öô
();

152 
	$C⁄figIãm
(
C⁄figIãm
 *
∑ª¡
, C⁄figIãm *
a·î
, 
míu
 *
m
, 
boﬁ
 
v
)

153 : 
	`P¨ít
(
∑ª¡
, 
a·î
), 
	`míu
(
m
), 
	`visibÀ
(
v
), 
	$goP¨ít
(
Ál£
)

155 
	`öô
();

156 
	}
}

157 
	$C⁄figIãm
(
Q3Li°Võw
 *
∑ª¡
, 
C⁄figIãm
 *
a·î
, 
boﬁ
 
v
)

158 : 
	`P¨ít
(
∑ª¡
, 
a·î
), 
	`míu
(0), 
	`visibÀ
(
v
), 
	$goP¨ít
(
åue
)

160 
	`öô
();

161 
	}
}

162 ~
C⁄figIãm
();

163 
öô
();

164 
okRíame
(
cﬁ
);

165 
upd©eMíu
();

166 
ã°Upd©eMíu
(
boﬁ
 
v
);

167 
C⁄figLi°
* 
	$li°Võw
() const

169  (
C⁄figLi°
*)
P¨ít
::
	`li°Võw
();

170 
	}
}

171 
C⁄figIãm
* 
	$fú°Chûd
() const

173  (
C⁄figIãm
 *)
P¨ít
::
	`fú°Chûd
();

174 
	}
}

175 
C⁄figIãm
* 
	$√xtSiblög
() const

177  (
C⁄figIãm
 *)
P¨ít
::
	`√xtSiblög
();

178 
	}
}

179 
	$£tText
(
cﬁIdx
 
idx
, c⁄° 
QSåög
& 
ãxt
)

181 
P¨ít
::
	`£tText
(
	`li°Võw
()->
	`m≠Idx
(
idx
), 
ãxt
);

182 
	}
}

183 
QSåög
 
	$ãxt
(
cﬁIdx
 
idx
) const

185  
P¨ít
::
	`ãxt
(
	`li°Võw
()->
	`m≠Idx
(
idx
));

186 
	}
}

187 
	$£tPixm≠
(
cﬁIdx
 
idx
, c⁄° 
QPixm≠
& 
pm
)

189 
P¨ít
::
	`£tPixm≠
(
	`li°Võw
()->
	`m≠Idx
(
idx
), 
pm
);

190 
	}
}

191 c⁄° 
QPixm≠
* 
	$pixm≠
(
cﬁIdx
 
idx
) const

193  
P¨ít
::
	`pixm≠
(
	`li°Võw
()->
	`m≠Idx
(
idx
));

194 
	}
}

195 
∑ötCñl
(
QPaöãr
* 
p
, c⁄° 
QCﬁ‹Group
& 
cg
, 
cﬁumn
, 
width
, 
Æign
);

197 
C⁄figIãm
* 
	g√xtIãm
;

198 
míu
 *
	gmíu
;

199 
boﬁ
 
	gvisibÀ
;

200 
boﬁ
 
	ggoP¨ít
;

203 ˛as†
	cC⁄figLöeEdô
 : 
public
 
QLöeEdô
 {

204 
Q_OBJECT


205 
˛ass
 
	tQLöeEdô
 
	tP¨ít
;

206 
	mpublic
:

207 
C⁄figLöeEdô
(
C⁄figVõw
* 
∑ª¡
);

208 
C⁄figVõw
* 
	$∑ª¡
() const

210  (
C⁄figVõw
*)
P¨ít
::
	`∑ª¡
();

212 
	`show
(
C⁄figIãm
 *
i
);

213 
	`keyPªssEvít
(
QKeyEvít
 *
e
);

215 
public
:

216 
C⁄figIãm
 *
ôem
;

217 
	}
};

219 ˛as†
	cC⁄figVõw
 : 
public
 
Q3VBox
 {

220 
Q_OBJECT


221 
˛ass
 
	tQ3VBox
 
	tP¨ít
;

222 
	mpublic
:

223 
C⁄figVõw
(
QWidgë
* 
∑ª¡
, c⁄° *
«me
 = 0);

224 ~
C⁄figVõw
();

225 
upd©eLi°
(
C⁄figIãm
* 
ôem
);

226 
upd©eLi°AŒ
();

228 
boﬁ
 
	$showName
(Ëc⁄° {  
li°
->
showName
; }

229 
boﬁ
 
	$showR™ge
(Ëc⁄° {  
li°
->
showR™ge
; 
	}
}

230 
boﬁ
 
	$showD©a
(Ëc⁄° {  
li°
->
showD©a
; 
	}
}

231 
public
 
	g¶Ÿs
:

232 
£tShowName
(
boﬁ
);

233 
£tShowR™ge
(
boﬁ
);

234 
£tShowD©a
(
boﬁ
);

235 
£tO±i⁄Mode
(
QA˘i⁄
 *);

236 
	gsig«ls
:

237 
showNameCh™ged
(
boﬁ
);

238 
showR™geCh™ged
(
boﬁ
);

239 
showD©aCh™ged
(
boﬁ
);

240 
	gpublic
:

241 
C⁄figLi°
* 
li°
;

242 
C⁄figLöeEdô
* 
	glöeEdô
;

244 
C⁄figVõw
* 
	gvõwLi°
;

245 
C⁄figVõw
* 
	g√xtVõw
;

247 
QA˘i⁄
 *
	gshowN‹mÆA˘i⁄
;

248 
QA˘i⁄
 *
	gshowAŒA˘i⁄
;

249 
QA˘i⁄
 *
	gshowProm±A˘i⁄
;

252 ˛as†
	cC⁄figInfoVõw
 : 
public
 
Q3TextBrow£r
 {

253 
Q_OBJECT


254 
˛ass
 
	tQ3TextBrow£r
 
	tP¨ít
;

255 
	mpublic
:

256 
C⁄figInfoVõw
(
QWidgë
* 
∑ª¡
, c⁄° *
«me
 = 0);

257 
boﬁ
 
	$showDebug
(Ëc⁄° {  
_showDebug
; }

259 
public
 
¶Ÿs
:

260 
	`£tInfo
(
míu
 *menu);

261 
	`ßveSëtögs
();

262 
	`£tShowDebug
(
boﬁ
);

264 
sig«ls
:

265 
	`showDebugCh™ged
(
boﬁ
);

266 
	`míuSñe˘ed
(
míu
 *);

268 
¥Ÿe˘ed
:

269 
	`symbﬁInfo
();

270 
	`míuInfo
();

271 
QSåög
 
	`debug_öfo
(
symbﬁ
 *
sym
);

272 
QSåög
 
	`¥öt_fûãr
(c⁄° QSåög &
°r
);

273 
	`ex¥_¥öt_hñp
(*
d©a
, 
symbﬁ
 *
sym
, c⁄° *
°r
);

274 
Q3P›upMíu
* 
	`¸óãP›upMíu
(c⁄° 
QPoöt
& 
pos
);

275 
	`c⁄ã¡sC⁄ãxtMíuEvít
(
QC⁄ãxtMíuEvít
 *
e
);

277 
symbﬁ
 *
sym
;

278 
míu
 *
_míu
;

279 
boﬁ
 
_showDebug
;

280 
	}
};

282 ˛as†
	cC⁄figSórchWödow
 : 
public
 
QDülog
 {

283 
Q_OBJECT


284 
˛ass
 
	tQDülog
 
	tP¨ít
;

285 
	mpublic
:

286 
C⁄figSórchWödow
(
C⁄figMaöWödow
* 
∑ª¡
, c⁄° *
«me
 = 0);

288 
public
 
	m¶Ÿs
:

289 
ßveSëtögs
();

290 
£¨ch
();

292 
	m¥Ÿe˘ed
:

293 
QLöeEdô
* 
edôFõld
;

294 
QPushBuâ⁄
* 
	m£¨chBuâ⁄
;

295 
QS∂ôãr
* 
	m•lô
;

296 
C⁄figVõw
* 
	mli°
;

297 
C⁄figInfoVõw
* 
	möfo
;

299 
symbﬁ
 **
	mªsu…
;

302 ˛as†
	cC⁄figMaöWödow
 : 
public
 
Q3MaöWödow
 {

303 
Q_OBJECT


305 
Q3A˘i⁄
 *
ßveA˘i⁄
;

306 
c⁄f_ch™ged
();

307 
	mpublic
:

308 
C⁄figMaöWödow
();

309 
public
 
	m¶Ÿs
:

310 
ch™geMíu
(
míu
 *);

311 
£tMíuLök
(
míu
 *);

312 
li°FocusCh™ged
();

313 
goBack
();

314 
lﬂdC⁄fig
();

315 
boﬁ
 
ßveC⁄fig
();

316 
ßveC⁄figAs
();

317 
£¨chC⁄fig
();

318 
showSögÀVõw
();

319 
showS∂ôVõw
();

320 
showFuŒVõw
();

321 
showI¡ro
();

322 
showAbout
();

323 
ßveSëtögs
();

325 
	m¥Ÿe˘ed
:

326 
˛o£Evít
(
QClo£Evít
 *
e
);

328 
C⁄figSórchWödow
 *
	m£¨chWödow
;

329 
C⁄figVõw
 *
	mmíuVõw
;

330 
C⁄figLi°
 *
	mmíuLi°
;

331 
C⁄figVõw
 *
	mc⁄figVõw
;

332 
C⁄figLi°
 *
	mc⁄figLi°
;

333 
C⁄figInfoVõw
 *
	mhñpText
;

334 
Q3ToﬁB¨
 *
	mtoﬁB¨
;

335 
Q3A˘i⁄
 *
	mbackA˘i⁄
;

336 
QS∂ôãr
* 
	m•lô1
;

337 
QS∂ôãr
* 
	m•lô2
;

	@swupdate/scripts/kconfig/symbol.c

6 
	~<˘y≥.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

9 
	~<ªgex.h
>

10 
	~<sys/ut¢ame.h
>

12 
	~"lkc.h
"

14 
symbﬁ
 
	gsymbﬁ_yes
 = {

15 .
«me
 = "y",

16 .
	gcuº
 = { "y", 
yes
 },

17 .
	gÊags
 = 
SYMBOL_CONST
|
SYMBOL_VALID
,

18 }, 
	gsymbﬁ_mod
 = {

19 .
«me
 = "m",

20 .
	gcuº
 = { "m", 
mod
 },

21 .
	gÊags
 = 
SYMBOL_CONST
|
SYMBOL_VALID
,

22 }, 
	gsymbﬁ_no
 = {

23 .
«me
 = "n",

24 .
	gcuº
 = { "n", 
no
 },

25 .
	gÊags
 = 
SYMBOL_CONST
|
SYMBOL_VALID
,

26 }, 
	gsymbﬁ_em±y
 = {

27 .
«me
 = "",

28 .
	gcuº
 = { "", 
no
 },

29 .
	gÊags
 = 
SYMBOL_VALID
,

32 
symbﬁ
 *
	gsym_defc⁄fig_li°
;

33 
symbﬁ
 *
	gmoduÀs_sym
;

34 
åi°©e
 
	gmoduÀs_vÆ
;

36 
ex¥
 *
	gsym_ív_li°
;

38 
	$sym_add_deÁu…
(
symbﬁ
 *
sym
, c⁄° *
def
)

40 
¥›îty
 *
¥›
 = 
	`¥›_Æloc
(
P_DEFAULT
, 
sym
);

42 
¥›
->
ex¥
 = 
	`ex¥_Æloc_symbﬁ
(
	`sym_lookup
(
def
, 
SYMBOL_CONST
));

43 
	}
}

45 
	$sym_öô
()

47 
symbﬁ
 *
sym
;

48 
ut¢ame
 
uts
;

49 
boﬁ
 
öôed
 = 
Ál£
;

51 i‡(
öôed
)

53 
öôed
 = 
åue
;

55 
	`u«me
(&
uts
);

57 
sym
 = 
	`sym_lookup
("UNAME_RELEASE", 0);

58 
sym
->
ty≥
 = 
S_STRING
;

59 
sym
->
Êags
 |
SYMBOL_AUTO
;

60 
	`sym_add_deÁu…
(
sym
, 
uts
.
ªÀa£
);

61 
	}
}

63 
symbﬁ_ty≥
 
	$sym_gë_ty≥
(
symbﬁ
 *
sym
)

65 
symbﬁ_ty≥
 
ty≥
 = 
sym
->type;

67 i‡(
ty≥
 =
S_TRISTATE
) {

68 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& sym->
visibÀ
 =
yes
)

69 
ty≥
 = 
S_BOOLEAN
;

70 i‡(
moduÀs_vÆ
 =
no
)

71 
ty≥
 = 
S_BOOLEAN
;

73  
ty≥
;

74 
	}
}

76 c⁄° *
	$sym_ty≥_«me
(
symbﬁ_ty≥
 
ty≥
)

78 
ty≥
) {

79 
S_BOOLEAN
:

81 
S_TRISTATE
:

83 
S_INT
:

85 
S_HEX
:

87 
S_STRING
:

89 
S_UNKNOWN
:

91 
S_OTHER
:

95 
	}
}

97 
¥›îty
 *
	$sym_gë_choi˚_¥›
(
symbﬁ
 *
sym
)

99 
¥›îty
 *
¥›
;

101 
	`f‹_Æl_choi˚s
(
sym
, 
¥›
)

102  
¥›
;

103  
NULL
;

104 
	}
}

106 
¥›îty
 *
	$sym_gë_ív_¥›
(
symbﬁ
 *
sym
)

108 
¥›îty
 *
¥›
;

110 
	`f‹_Æl_¥›îtõs
(
sym
, 
¥›
, 
P_ENV
)

111  
¥›
;

112  
NULL
;

113 
	}
}

115 
¥›îty
 *
	$sym_gë_deÁu…_¥›
(
symbﬁ
 *
sym
)

117 
¥›îty
 *
¥›
;

119 
	`f‹_Æl_deÁu…s
(
sym
, 
¥›
) {

120 
¥›
->
visibÀ
.
åi
 = 
	`ex¥_ˇlc_vÆue
’r›->visibÀ.
ex¥
);

121 i‡(
¥›
->
visibÀ
.
åi
 !
no
)

122  
¥›
;

124  
NULL
;

125 
	}
}

127 
¥›îty
 *
	$sym_gë_ønge_¥›
(
symbﬁ
 *
sym
)

129 
¥›îty
 *
¥›
;

131 
	`f‹_Æl_¥›îtõs
(
sym
, 
¥›
, 
P_RANGE
) {

132 
¥›
->
visibÀ
.
åi
 = 
	`ex¥_ˇlc_vÆue
’r›->visibÀ.
ex¥
);

133 i‡(
¥›
->
visibÀ
.
åi
 !
no
)

134  
¥›
;

136  
NULL
;

137 
	}
}

139 
	$sym_gë_ønge_vÆ
(
symbﬁ
 *
sym
, 
ba£
)

141 
	`sym_ˇlc_vÆue
(
sym
);

142 
sym
->
ty≥
) {

143 
S_INT
:

144 
ba£
 = 10;

146 
S_HEX
:

147 
ba£
 = 16;

152  
	`°πﬁl
(
sym
->
cuº
.
vÆ
, 
NULL
, 
ba£
);

153 
	}
}

155 
	$sym_vÆid©e_ønge
(
symbﬁ
 *
sym
)

157 
¥›îty
 *
¥›
;

158 
ba£
;

159 
vÆ
, 
vÆ2
;

160 
°r
[64];

162 
sym
->
ty≥
) {

163 
S_INT
:

164 
ba£
 = 10;

166 
S_HEX
:

167 
ba£
 = 16;

172 
¥›
 = 
	`sym_gë_ønge_¥›
(
sym
);

173 i‡(!
¥›
)

175 
vÆ
 = 
	`°πﬁl
(
sym
->
cuº
.vÆ, 
NULL
, 
ba£
);

176 
vÆ2
 = 
	`sym_gë_ønge_vÆ
(
¥›
->
ex¥
->
À·
.
sym
, 
ba£
);

177 i‡(
vÆ
 >
vÆ2
) {

178 
vÆ2
 = 
	`sym_gë_ønge_vÆ
(
¥›
->
ex¥
->
right
.
sym
, 
ba£
);

179 i‡(
vÆ
 <
vÆ2
)

182 i‡(
sym
->
ty≥
 =
S_INT
)

183 
	`•rötf
(
°r
, "%Œd", 
vÆ2
);

185 
	`•rötf
(
°r
, "0x%Œx", 
vÆ2
);

186 
sym
->
cuº
.
vÆ
 = 
	`°rdup
(
°r
);

187 
	}
}

189 
	$sym_£t_ch™ged
(
symbﬁ
 *
sym
)

191 
¥›îty
 *
¥›
;

193 
sym
->
Êags
 |
SYMBOL_CHANGED
;

194 
¥›
 = 
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

195 i‡(
¥›
->
míu
)

196 
¥›
->
míu
->
Êags
 |
MENU_CHANGED
;

198 
	}
}

200 
	$sym_£t_Æl_ch™ged
()

202 
symbﬁ
 *
sym
;

203 
i
;

205 
	`f‹_Æl_symbﬁs
(
i
, 
sym
)

206 
	`sym_£t_ch™ged
(
sym
);

207 
	}
}

209 
	$sym_ˇlc_visibûôy
(
symbﬁ
 *
sym
)

211 
¥›îty
 *
¥›
;

212 
åi°©e
 
åi
;

215 
åi
 = 
no
;

216 
	`f‹_Æl_¥om±s
(
sym
, 
¥›
) {

217 
¥›
->
visibÀ
.
åi
 = 
	`ex¥_ˇlc_vÆue
’r›->visibÀ.
ex¥
);

218 
åi
 = 
	`EXPR_OR
—ri, 
¥›
->
visibÀ
.tri);

220 i‡(
åi
 =
mod
 && (
sym
->
ty≥
 !
S_TRISTATE
 || 
moduÀs_vÆ
 =
no
))

221 
åi
 = 
yes
;

222 i‡(
sym
->
visibÀ
 !
åi
) {

223 
sym
->
visibÀ
 = 
åi
;

224 
	`sym_£t_ch™ged
(
sym
);

226 i‡(
	`sym_is_choi˚_vÆue
(
sym
))

229 
åi
 = 
yes
;

230 i‡(
sym
->
dú_dï
.
ex¥
)

231 
åi
 = 
	`ex¥_ˇlc_vÆue
(
sym
->
dú_dï
.
ex¥
);

232 i‡(
åi
 =
mod
)

233 
åi
 = 
yes
;

234 i‡(
sym
->
dú_dï
.
åi
 !=Åri) {

235 
sym
->
dú_dï
.
åi
 =Åri;

236 
	`sym_£t_ch™ged
(
sym
);

238 
åi
 = 
no
;

239 i‡(
sym
->
ªv_dï
.
ex¥
)

240 
åi
 = 
	`ex¥_ˇlc_vÆue
(
sym
->
ªv_dï
.
ex¥
);

241 i‡(
åi
 =
mod
 && 
	`sym_gë_ty≥
(
sym
Ë=
S_BOOLEAN
)

242 
åi
 = 
yes
;

243 i‡(
sym
->
ªv_dï
.
åi
 !=Åri) {

244 
sym
->
ªv_dï
.
åi
 =Åri;

245 
	`sym_£t_ch™ged
(
sym
);

247 
	}
}

255 
symbﬁ
 *
	$sym_choi˚_deÁu…
(
symbﬁ
 *
sym
)

257 
symbﬁ
 *
def_sym
;

258 
¥›îty
 *
¥›
;

259 
ex¥
 *
e
;

262 
	`f‹_Æl_deÁu…s
(
sym
, 
¥›
) {

263 
¥›
->
visibÀ
.
åi
 = 
	`ex¥_ˇlc_vÆue
’r›->visibÀ.
ex¥
);

264 i‡(
¥›
->
visibÀ
.
åi
 =
no
)

266 
def_sym
 = 
	`¥›_gë_symbﬁ
(
¥›
);

267 i‡(
def_sym
->
visibÀ
 !
no
)

268  
def_sym
;

272 
¥›
 = 
	`sym_gë_choi˚_¥›
(
sym
);

273 
	`ex¥_li°_f‹_óch_sym
(
¥›
->
ex¥
, 
e
, 
def_sym
)

274 i‡(
def_sym
->
visibÀ
 !
no
)

275  
def_sym
;

278  
NULL
;

279 
	}
}

281 
symbﬁ
 *
	$sym_ˇlc_choi˚
(
symbﬁ
 *
sym
)

283 
symbﬁ
 *
def_sym
;

284 
¥›îty
 *
¥›
;

285 
ex¥
 *
e
;

286 
Êags
;

289 
Êags
 = 
sym
->flags;

290 
¥›
 = 
	`sym_gë_choi˚_¥›
(
sym
);

291 
	`ex¥_li°_f‹_óch_sym
(
¥›
->
ex¥
, 
e
, 
def_sym
) {

292 
	`sym_ˇlc_visibûôy
(
def_sym
);

293 i‡(
def_sym
->
visibÀ
 !
no
)

294 
Êags
 &
def_sym
->flags;

297 
sym
->
Êags
 &Êag†| ~
SYMBOL_DEF_USER
;

300 
def_sym
 = 
sym
->
def
[
S_DEF_USER
].
vÆ
;

301 i‡(
def_sym
 && def_sym->
visibÀ
 !
no
)

302  
def_sym
;

304 
def_sym
 = 
	`sym_choi˚_deÁu…
(
sym
);

306 i‡(
def_sym
 =
NULL
)

308 
sym
->
cuº
.
åi
 = 
no
;

310  
def_sym
;

311 
	}
}

313 
	$sym_ˇlc_vÆue
(
symbﬁ
 *
sym
)

315 
symbﬁ_vÆue
 
√wvÆ
, 
ﬁdvÆ
;

316 
¥›îty
 *
¥›
;

317 
ex¥
 *
e
;

319 i‡(!
sym
)

322 i‡(
sym
->
Êags
 & 
SYMBOL_VALID
)

325 i‡(
	`sym_is_choi˚_vÆue
(
sym
) &&

326 
sym
->
Êags
 & 
SYMBOL_NEED_SET_CHOICE_VALUES
) {

327 
sym
->
Êags
 &~
SYMBOL_NEED_SET_CHOICE_VALUES
;

328 
¥›
 = 
	`sym_gë_choi˚_¥›
(
sym
);

329 
	`sym_ˇlc_vÆue
(
	`¥›_gë_symbﬁ
(
¥›
));

332 
sym
->
Êags
 |
SYMBOL_VALID
;

334 
ﬁdvÆ
 = 
sym
->
cuº
;

336 
sym
->
ty≥
) {

337 
S_INT
:

338 
S_HEX
:

339 
S_STRING
:

340 
√wvÆ
 = 
symbﬁ_em±y
.
cuº
;

342 
S_BOOLEAN
:

343 
S_TRISTATE
:

344 
√wvÆ
 = 
symbﬁ_no
.
cuº
;

347 
sym
->
cuº
.
vÆ
 = sym->
«me
;

348 
sym
->
cuº
.
åi
 = 
no
;

351 i‡(!
	`sym_is_choi˚_vÆue
(
sym
))

352 
sym
->
Êags
 &~
SYMBOL_WRITE
;

354 
	`sym_ˇlc_visibûôy
(
sym
);

357 
sym
->
cuº
 = 
√wvÆ
;

359 
	`sym_gë_ty≥
(
sym
)) {

360 
S_BOOLEAN
:

361 
S_TRISTATE
:

362 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& sym->
visibÀ
 =
yes
) {

363 
¥›
 = 
	`sym_gë_choi˚_¥›
(
sym
);

364 
√wvÆ
.
åi
 = (
	`¥›_gë_symbﬁ
(
¥›
)->
cuº
.
vÆ
 =
sym
Ë? 
yes
 : 
no
;

366 i‡(
sym
->
visibÀ
 !
no
) {

370 
sym
->
Êags
 |
SYMBOL_WRITE
;

371 i‡(
	`sym_has_vÆue
(
sym
)) {

372 
√wvÆ
.
åi
 = 
	`EXPR_AND
(
sym
->
def
[
S_DEF_USER
].tri,

373 
sym
->
visibÀ
);

374 
ˇlc_√wvÆ
;

377 i‡(
sym
->
ªv_dï
.
åi
 !
no
)

378 
sym
->
Êags
 |
SYMBOL_WRITE
;

379 i‡(!
	`sym_is_choi˚
(
sym
)) {

380 
¥›
 = 
	`sym_gë_deÁu…_¥›
(
sym
);

381 i‡(
¥›
) {

382 
sym
->
Êags
 |
SYMBOL_WRITE
;

383 
√wvÆ
.
åi
 = 
	`EXPR_AND
(
	`ex¥_ˇlc_vÆue
(
¥›
->
ex¥
),

384 
¥›
->
visibÀ
.
åi
);

387 
ˇlc_√wvÆ
:

388 i‡(
sym
->
dú_dï
.
åi
 =
no
 && sym->
ªv_dï
.tri !=Ço) {

389 
ex¥
 *
e
;

390 
e
 = 
	`ex¥_sim∂ify_unmë_dï
(
sym
->
ªv_dï
.
ex¥
,

391 
sym
->
dú_dï
.
ex¥
);

392 
	`Ârötf
(
°dîr
, "warning: (");

393 
	`ex¥_Âröt
(
e
, 
°dîr
);

394 
	`Ârötf
(
°dîr
, ") selects %s which has unmet direct dependencies (",

395 
sym
->
«me
);

396 
	`ex¥_Âröt
(
sym
->
dú_dï
.
ex¥
, 
°dîr
);

397 
	`Ârötf
(
°dîr
, ")\n");

398 
	`ex¥_‰ì
(
e
);

400 
√wvÆ
.
åi
 = 
	`EXPR_OR
“ewvÆ.åi, 
sym
->
ªv_dï
.tri);

402 i‡(
√wvÆ
.
åi
 =
mod
 && 
	`sym_gë_ty≥
(
sym
Ë=
S_BOOLEAN
)

403 
√wvÆ
.
åi
 = 
yes
;

405 
S_STRING
:

406 
S_HEX
:

407 
S_INT
:

408 i‡(
sym
->
visibÀ
 !
no
) {

409 
sym
->
Êags
 |
SYMBOL_WRITE
;

410 i‡(
	`sym_has_vÆue
(
sym
)) {

411 
√wvÆ
.
vÆ
 = 
sym
->
def
[
S_DEF_USER
].val;

415 
¥›
 = 
	`sym_gë_deÁu…_¥›
(
sym
);

416 i‡(
¥›
) {

417 
symbﬁ
 *
ds
 = 
	`¥›_gë_symbﬁ
(
¥›
);

418 i‡(
ds
) {

419 
sym
->
Êags
 |
SYMBOL_WRITE
;

420 
	`sym_ˇlc_vÆue
(
ds
);

421 
√wvÆ
.
vÆ
 = 
ds
->
cuº
.val;

429 
sym
->
cuº
 = 
√wvÆ
;

430 i‡(
	`sym_is_choi˚
(
sym
Ë&& 
√wvÆ
.
åi
 =
yes
)

431 
sym
->
cuº
.
vÆ
 = 
	`sym_ˇlc_choi˚
(sym);

432 
	`sym_vÆid©e_ønge
(
sym
);

434 i‡(
	`memcmp
(&
ﬁdvÆ
, &
sym
->
cuº
, (oldval))) {

435 
	`sym_£t_ch™ged
(
sym
);

436 i‡(
moduÀs_sym
 =
sym
) {

437 
	`sym_£t_Æl_ch™ged
();

438 
moduÀs_vÆ
 = 
moduÀs_sym
->
cuº
.
åi
;

442 i‡(
	`sym_is_choi˚
(
sym
)) {

443 
symbﬁ
 *
choi˚_sym
;

445 
¥›
 = 
	`sym_gë_choi˚_¥›
(
sym
);

446 
	`ex¥_li°_f‹_óch_sym
(
¥›
->
ex¥
, 
e
, 
choi˚_sym
) {

447 i‡((
sym
->
Êags
 & 
SYMBOL_WRITE
) &&

448 
choi˚_sym
->
visibÀ
 !
no
)

449 
choi˚_sym
->
Êags
 |
SYMBOL_WRITE
;

450 i‡(
sym
->
Êags
 & 
SYMBOL_CHANGED
)

451 
	`sym_£t_ch™ged
(
choi˚_sym
);

455 i‡(
sym
->
Êags
 & 
SYMBOL_AUTO
)

456 
sym
->
Êags
 &~
SYMBOL_WRITE
;

458 i‡(
sym
->
Êags
 & 
SYMBOL_NEED_SET_CHOICE_VALUES
)

459 
	`£t_Æl_choi˚_vÆues
(
sym
);

460 
	}
}

462 
	$sym_˛ór_Æl_vÆid
()

464 
symbﬁ
 *
sym
;

465 
i
;

467 
	`f‹_Æl_symbﬁs
(
i
, 
sym
)

468 
sym
->
Êags
 &~
SYMBOL_VALID
;

469 
	`sym_add_ch™ge_cou¡
(1);

470 i‡(
moduÀs_sym
)

471 
	`sym_ˇlc_vÆue
(
moduÀs_sym
);

472 
	}
}

474 
boﬁ
 
	$sym_åi°©e_wôhö_ønge
(
symbﬁ
 *
sym
, 
åi°©e
 
vÆ
)

476 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

478 i‡(
sym
->
visibÀ
 =
no
)

479  
Ál£
;

481 i‡(
ty≥
 !
S_BOOLEAN
 &&Åy≥ !
S_TRISTATE
)

482  
Ál£
;

484 i‡(
ty≥
 =
S_BOOLEAN
 && 
vÆ
 =
mod
)

485  
Ál£
;

486 i‡(
sym
->
visibÀ
 <sym->
ªv_dï
.
åi
)

487  
Ál£
;

488 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& sym->
visibÀ
 =
yes
)

489  
vÆ
 =
yes
;

490  
vÆ
 >
sym
->
ªv_dï
.
åi
 && vÆ <sym->
visibÀ
;

491 
	}
}

493 
boﬁ
 
	$sym_£t_åi°©e_vÆue
(
symbﬁ
 *
sym
, 
åi°©e
 
vÆ
)

495 
åi°©e
 
ﬁdvÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

497 i‡(
ﬁdvÆ
 !
vÆ
 && !
	`sym_åi°©e_wôhö_ønge
(
sym
, val))

498  
Ál£
;

500 i‡(!(
sym
->
Êags
 & 
SYMBOL_DEF_USER
)) {

501 
sym
->
Êags
 |
SYMBOL_DEF_USER
;

502 
	`sym_£t_ch™ged
(
sym
);

508 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& 
vÆ
 =
yes
) {

509 
symbﬁ
 *
cs
 = 
	`¥›_gë_symbﬁ
(
	`sym_gë_choi˚_¥›
(
sym
));

510 
¥›îty
 *
¥›
;

511 
ex¥
 *
e
;

513 
cs
->
def
[
S_DEF_USER
].
vÆ
 = 
sym
;

514 
cs
->
Êags
 |
SYMBOL_DEF_USER
;

515 
¥›
 = 
	`sym_gë_choi˚_¥›
(
cs
);

516 
e
 = 
¥›
->
ex¥
;É;É =É->
À·
.expr) {

517 i‡(
e
->
right
.
sym
->
visibÀ
 !
no
)

518 
e
->
right
.
sym
->
Êags
 |
SYMBOL_DEF_USER
;

522 
sym
->
def
[
S_DEF_USER
].
åi
 = 
vÆ
;

523 i‡(
ﬁdvÆ
 !
vÆ
)

524 
	`sym_˛ór_Æl_vÆid
();

526  
åue
;

527 
	}
}

529 
åi°©e
 
	$sym_toggÀ_åi°©e_vÆue
(
symbﬁ
 *
sym
)

531 
åi°©e
 
ﬁdvÆ
, 
√wvÆ
;

533 
ﬁdvÆ
 = 
√wvÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

535 
√wvÆ
) {

536 
no
:

537 
√wvÆ
 = 
mod
;

539 
mod
:

540 
√wvÆ
 = 
yes
;

542 
yes
:

543 
√wvÆ
 = 
no
;

546 i‡(
	`sym_£t_åi°©e_vÆue
(
sym
, 
√wvÆ
))

548 } 
ﬁdvÆ
 !
√wvÆ
);

549  
√wvÆ
;

550 
	}
}

552 
boﬁ
 
	$sym_°rög_vÆid
(
symbﬁ
 *
sym
, c⁄° *
°r
)

554 sig√d 
ch
;

556 
sym
->
ty≥
) {

557 
S_STRING
:

558  
åue
;

559 
S_INT
:

560 
ch
 = *
°r
++;

561 i‡(
ch
 == '-')

562 
ch
 = *
°r
++;

563 i‡(!
	`isdigô
(
ch
))

564  
Ál£
;

565 i‡(
ch
 ='0' && *
°r
 != 0)

566  
Ál£
;

567 (
ch
 = *
°r
++)) {

568 i‡(!
	`isdigô
(
ch
))

569  
Ál£
;

571  
åue
;

572 
S_HEX
:

573 i‡(
°r
[0] == '0' && (str[1] == 'x' || str[1] == 'X'))

574 
°r
 += 2;

575 
ch
 = *
°r
++;

577 i‡(!
	`isxdigô
(
ch
))

578  
Ál£
;

579 } (
ch
 = *
°r
++));

580  
åue
;

581 
S_BOOLEAN
:

582 
S_TRISTATE
:

583 
°r
[0]) {

587  
åue
;

589  
Ál£
;

591  
Ál£
;

593 
	}
}

595 
boﬁ
 
	$sym_°rög_wôhö_ønge
(
symbﬁ
 *
sym
, c⁄° *
°r
)

597 
¥›îty
 *
¥›
;

598 
vÆ
;

600 
sym
->
ty≥
) {

601 
S_STRING
:

602  
	`sym_°rög_vÆid
(
sym
, 
°r
);

603 
S_INT
:

604 i‡(!
	`sym_°rög_vÆid
(
sym
, 
°r
))

605  
Ál£
;

606 
¥›
 = 
	`sym_gë_ønge_¥›
(
sym
);

607 i‡(!
¥›
)

608  
åue
;

609 
vÆ
 = 
	`°πﬁl
(
°r
, 
NULL
, 10);

610  
vÆ
 >
	`sym_gë_ønge_vÆ
(
¥›
->
ex¥
->
À·
.
sym
, 10) &&

611 
vÆ
 <
	`sym_gë_ønge_vÆ
(
¥›
->
ex¥
->
right
.
sym
, 10);

612 
S_HEX
:

613 i‡(!
	`sym_°rög_vÆid
(
sym
, 
°r
))

614  
Ál£
;

615 
¥›
 = 
	`sym_gë_ønge_¥›
(
sym
);

616 i‡(!
¥›
)

617  
åue
;

618 
vÆ
 = 
	`°πﬁl
(
°r
, 
NULL
, 16);

619  
vÆ
 >
	`sym_gë_ønge_vÆ
(
¥›
->
ex¥
->
À·
.
sym
, 16) &&

620 
vÆ
 <
	`sym_gë_ønge_vÆ
(
¥›
->
ex¥
->
right
.
sym
, 16);

621 
S_BOOLEAN
:

622 
S_TRISTATE
:

623 
°r
[0]) {

625  
	`sym_åi°©e_wôhö_ønge
(
sym
, 
yes
);

627  
	`sym_åi°©e_wôhö_ønge
(
sym
, 
mod
);

629  
	`sym_åi°©e_wôhö_ønge
(
sym
, 
no
);

631  
Ál£
;

633  
Ál£
;

635 
	}
}

637 
boﬁ
 
	$sym_£t_°rög_vÆue
(
symbﬁ
 *
sym
, c⁄° *
√wvÆ
)

639 c⁄° *
ﬁdvÆ
;

640 *
vÆ
;

641 
size
;

643 
sym
->
ty≥
) {

644 
S_BOOLEAN
:

645 
S_TRISTATE
:

646 
√wvÆ
[0]) {

648  
	`sym_£t_åi°©e_vÆue
(
sym
, 
yes
);

650  
	`sym_£t_åi°©e_vÆue
(
sym
, 
mod
);

652  
	`sym_£t_åi°©e_vÆue
(
sym
, 
no
);

654  
Ál£
;

659 i‡(!
	`sym_°rög_wôhö_ønge
(
sym
, 
√wvÆ
))

660  
Ál£
;

662 i‡(!(
sym
->
Êags
 & 
SYMBOL_DEF_USER
)) {

663 
sym
->
Êags
 |
SYMBOL_DEF_USER
;

664 
	`sym_£t_ch™ged
(
sym
);

667 
ﬁdvÆ
 = 
sym
->
def
[
S_DEF_USER
].
vÆ
;

668 
size
 = 
	`°æí
(
√wvÆ
) + 1;

669 i‡(
sym
->
ty≥
 =
S_HEX
 && (
√wvÆ
[0] != '0' || (newval[1] != 'x' &&Çewval[1] != 'X'))) {

670 
size
 += 2;

671 
sym
->
def
[
S_DEF_USER
].
vÆ
 = vÆ = 
	`xmÆloc
(
size
);

672 *
vÆ
++ = '0';

673 *
vÆ
++ = 'x';

674 } i‡(!
ﬁdvÆ
 || 
	`°rcmp
(ﬁdvÆ, 
√wvÆ
))

675 
sym
->
def
[
S_DEF_USER
].
vÆ
 = vÆ = 
	`xmÆloc
(
size
);

677  
åue
;

679 
	`°r˝y
(
vÆ
, 
√wvÆ
);

680 
	`‰ì
((*)
ﬁdvÆ
);

681 
	`sym_˛ór_Æl_vÆid
();

683  
åue
;

684 
	}
}

693 c⁄° *
	$sym_gë_°rög_deÁu…
(
symbﬁ
 *
sym
)

695 
¥›îty
 *
¥›
;

696 
symbﬁ
 *
ds
;

697 c⁄° *
°r
;

698 
åi°©e
 
vÆ
;

700 
	`sym_ˇlc_visibûôy
(
sym
);

701 
	`sym_ˇlc_vÆue
(
moduÀs_sym
);

702 
vÆ
 = 
symbﬁ_no
.
cuº
.
åi
;

703 
°r
 = 
symbﬁ_em±y
.
cuº
.
vÆ
;

706 
¥›
 = 
	`sym_gë_deÁu…_¥›
(
sym
);

707 i‡(
¥›
 !
NULL
) {

708 
sym
->
ty≥
) {

709 
S_BOOLEAN
:

710 
S_TRISTATE
:

712 
vÆ
 = 
	`EXPR_AND
(
	`ex¥_ˇlc_vÆue
(
¥›
->
ex¥
),Ör›->
visibÀ
.
åi
);

720 
ds
 = 
	`¥›_gë_symbﬁ
(
¥›
);

721 i‡(
ds
 !
NULL
) {

722 
	`sym_ˇlc_vÆue
(
ds
);

723 
°r
 = (c⁄° *)
ds
->
cuº
.
vÆ
;

729 
vÆ
 = 
	`EXPR_OR
(vÆ, 
sym
->
ªv_dï
.
åi
);

732 i‡(
vÆ
 =
mod
)

733 i‡(!
	`sym_is_choi˚_vÆue
(
sym
Ë&& 
moduÀs_sym
->
cuº
.
åi
 =
no
)

734 
vÆ
 = 
yes
;

737 i‡(
sym
->
ty≥
 =
S_BOOLEAN
 && 
vÆ
 =
mod
)

738 
vÆ
 = 
yes
;

740 
sym
->
ty≥
) {

741 
S_BOOLEAN
:

742 
S_TRISTATE
:

743 
vÆ
) {

744 
no
:  "n";

745 
mod
:  "m";

746 
yes
:  "y";

748 
S_INT
:

749 
S_HEX
:

750  
°r
;

751 
S_STRING
:

752  
°r
;

753 
S_OTHER
:

754 
S_UNKNOWN
:

758 
	}
}

760 c⁄° *
	$sym_gë_°rög_vÆue
(
symbﬁ
 *
sym
)

762 
åi°©e
 
vÆ
;

764 
sym
->
ty≥
) {

765 
S_BOOLEAN
:

766 
S_TRISTATE
:

767 
vÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

768 
vÆ
) {

769 
no
:

771 
mod
:

772 
	`sym_ˇlc_vÆue
(
moduÀs_sym
);

773  (
moduÀs_sym
->
cuº
.
åi
 =
no
) ? "n" : "m";

774 
yes
:

781  (c⁄° *)
sym
->
cuº
.
vÆ
;

782 
	}
}

784 
boﬁ
 
	$sym_is_ch™gabÀ
(
symbﬁ
 *
sym
)

786  
sym
->
visibÀ
 > sym->
ªv_dï
.
åi
;

787 
	}
}

789 
	$°rhash
(c⁄° *
s
)

792 
hash
 = 2166136261U;

793 ; *
s
; s++)

794 
hash
 = (hash ^ *
s
) * 0x01000193;

795  
hash
;

796 
	}
}

798 
symbﬁ
 *
	$sym_lookup
(c⁄° *
«me
, 
Êags
)

800 
symbﬁ
 *symbol;

801 *
√w_«me
;

802 
hash
;

804 i‡(
«me
) {

805 i‡(
«me
[0] && !name[1]) {

806 
«me
[0]) {

807 'y':  &
symbﬁ_yes
;

808 'm':  &
symbﬁ_mod
;

809 'n':  &
symbﬁ_no
;

812 
hash
 = 
	`°rhash
(
«me
Ë% 
SYMBOL_HASHSIZE
;

814 
symbﬁ
 = 
symbﬁ_hash
[
hash
]; symbﬁ; symbﬁ = symbﬁ->
√xt
) {

815 i‡(
symbﬁ
->
«me
 &&

816 !
	`°rcmp
(
symbﬁ
->
«me
,Çame) &&

817 (
Êags
 ? 
symbﬁ
->flags & flags

818 : !(
symbﬁ
->
Êags
 & (
SYMBOL_CONST
|
SYMBOL_CHOICE
))))

819  
symbﬁ
;

821 
√w_«me
 = 
	`°rdup
(
«me
);

823 
√w_«me
 = 
NULL
;

824 
hash
 = 0;

827 
symbﬁ
 = 
	`xmÆloc
((*symbol));

828 
	`mem£t
(
symbﬁ
, 0, (*symbol));

829 
symbﬁ
->
«me
 = 
√w_«me
;

830 
symbﬁ
->
ty≥
 = 
S_UNKNOWN
;

831 
symbﬁ
->
Êags
 |= flags;

833 
symbﬁ
->
√xt
 = 
symbﬁ_hash
[
hash
];

834 
symbﬁ_hash
[
hash
] = 
symbﬁ
;

836  
symbﬁ
;

837 
	}
}

839 
symbﬁ
 *
	$sym_föd
(c⁄° *
«me
)

841 
symbﬁ
 *symbﬁ = 
NULL
;

842 
hash
 = 0;

844 i‡(!
«me
)

845  
NULL
;

847 i‡(
«me
[0] && !name[1]) {

848 
«me
[0]) {

849 'y':  &
symbﬁ_yes
;

850 'm':  &
symbﬁ_mod
;

851 'n':  &
symbﬁ_no
;

854 
hash
 = 
	`°rhash
(
«me
Ë% 
SYMBOL_HASHSIZE
;

856 
symbﬁ
 = 
symbﬁ_hash
[
hash
]; symbﬁ; symbﬁ = symbﬁ->
√xt
) {

857 i‡(
symbﬁ
->
«me
 &&

858 !
	`°rcmp
(
symbﬁ
->
«me
,Çame) &&

859 !(
symbﬁ
->
Êags
 & 
SYMBOL_CONST
))

863  
symbﬁ
;

864 
	}
}

871 c⁄° *
	$sym_ex∑nd_°rög_vÆue
(c⁄° *
ö
)

873 c⁄° *
§c
;

874 *
ªs
;

875 
size_t
 
ª¶í
;

877 
ª¶í
 = 
	`°æí
(
ö
) + 1;

878 
ªs
 = 
	`xmÆloc
(
ª¶í
);

879 
ªs
[0] = '\0';

881 (
§c
 = 
	`°rchr
(
ö
, '$'))) {

882 *
p
, 
«me
[
SYMBOL_MAXLENGTH
];

883 c⁄° *
symvÆ
 = "";

884 
symbﬁ
 *
sym
;

885 
size_t
 
√wÀn
;

887 
	`°∫ˇt
(
ªs
, 
ö
, 
§c
 - in);

888 
§c
++;

890 
p
 = 
«me
;

891 
	`iß um
(*
§c
) || *src == '_')

892 *
p
++ = *
§c
++;

893 *
p
 = '\0';

895 
sym
 = 
	`sym_föd
(
«me
);

896 i‡(
sym
 !
NULL
) {

897 
	`sym_ˇlc_vÆue
(
sym
);

898 
symvÆ
 = 
	`sym_gë_°rög_vÆue
(
sym
);

901 
√wÀn
 = 
	`°æí
(
ªs
Ë+ såÀn(
symvÆ
Ë+ såÀn(
§c
) + 1;

902 i‡(
√wÀn
 > 
ª¶í
) {

903 
ª¶í
 = 
√wÀn
;

904 
ªs
 = 
	`ªÆloc
‘es, 
ª¶í
);

907 
	`°rˇt
(
ªs
, 
symvÆ
);

908 
ö
 = 
§c
;

910 
	`°rˇt
(
ªs
, 
ö
);

912  
ªs
;

913 
	}
}

915 c⁄° *
	$sym_esˇ≥_°rög_vÆue
(c⁄° *
ö
)

917 c⁄° *
p
;

918 
size_t
 
ª¶í
;

919 *
ªs
;

920 
size_t
 
l
;

922 
ª¶í
 = 
	`°æí
(
ö
) + strlen("\"\"") + 1;

924 
p
 = 
ö
;

926 
l
 = 
	`°rc•n
(
p
, "\"\\");

927 
p
 +
l
;

929 i‡(
p
[0] == '\0')

932 
ª¶í
++;

933 
p
++;

936 
ªs
 = 
	`xmÆloc
(
ª¶í
);

937 
ªs
[0] = '\0';

939 
	`°rˇt
(
ªs
, "\"");

941 
p
 = 
ö
;

943 
l
 = 
	`°rc•n
(
p
, "\"\\");

944 
	`°∫ˇt
(
ªs
, 
p
, 
l
);

945 
p
 +
l
;

947 i‡(
p
[0] == '\0')

950 
	`°rˇt
(
ªs
, "\\");

951 
	`°∫ˇt
(
ªs
, 
p
++, 1);

954 
	`°rˇt
(
ªs
, "\"");

955  
ªs
;

956 
	}
}

958 
	ssym_m©ch
 {

959 
symbﬁ
 *
	msym
;

960 
off_t
 
	mso
, 
	meo
;

967 
	$sym_ªl_comp
(c⁄° *
sym1
, c⁄° *
sym2
)

969 c⁄° 
sym_m©ch
 *
s1
 = 
sym1
;

970 c⁄° 
sym_m©ch
 *
s2
 = 
sym2
;

971 
exa˘1
, 
exa˘2
;

982 
exa˘1
 = (
s1
->
eo
 - s1->
so
Ë=
	`°æí
(s1->
sym
->
«me
);

983 
exa˘2
 = (
s2
->
eo
 - s2->
so
Ë=
	`°æí
(s2->
sym
->
«me
);

984 i‡(
exa˘1
 && !
exa˘2
)

986 i‡(!
exa˘1
 && 
exa˘2
)

990  
	`°rcmp
(
s1
->
sym
->
«me
, 
s2
->sym->name);

991 
	}
}

993 
symbﬁ
 **
	$sym_ª_£¨ch
(c⁄° *
∑âîn
)

995 
symbﬁ
 *
sym
, **
sym_¨r
 = 
NULL
;

996 
sym_m©ch
 *
sym_m©ch_¨r
 = 
NULL
;

997 
i
, 
˙t
, 
size
;

998 
ªgex_t
 
ª
;

999 
ªgm©ch_t
 
m©ch
[1];

1001 
˙t
 = 
size
 = 0;

1003 i‡(
	`°æí
(
∑âîn
) == 0)

1004  
NULL
;

1005 i‡(
	`ªgcomp
(&
ª
, 
∑âîn
, 
REG_EXTENDED
|
REG_ICASE
))

1006  
NULL
;

1008 
	`f‹_Æl_symbﬁs
(
i
, 
sym
) {

1009 i‡(
sym
->
Êags
 & 
SYMBOL_CONST
 || !sym->
«me
)

1011 i‡(
	`ªgexec
(&
ª
, 
sym
->
«me
, 1, 
m©ch
, 0))

1013 i‡(
˙t
 >
size
) {

1014 *
tmp
;

1015 
size
 += 16;

1016 
tmp
 = 
	`ªÆloc
(
sym_m©ch_¨r
, 
size
 * (
sym_m©ch
));

1017 i‡(!
tmp
)

1018 
sym_ª_£¨ch_‰ì
;

1019 
sym_m©ch_¨r
 = 
tmp
;

1021 
	`sym_ˇlc_vÆue
(
sym
);

1025 
sym_m©ch_¨r
[
˙t
].
so
 = 
m©ch
[0].
rm_so
;

1026 
sym_m©ch_¨r
[
˙t
].
eo
 = 
m©ch
[0].
rm_eo
;

1027 
sym_m©ch_¨r
[
˙t
++].
sym
 = sym;

1029 i‡(
sym_m©ch_¨r
) {

1030 
	`qs‹t
(
sym_m©ch_¨r
, 
˙t
, (
sym_m©ch
), 
sym_ªl_comp
);

1031 
sym_¨r
 = 
	`mÆloc
((
˙t
+1Ë* (
symbﬁ
));

1032 i‡(!
sym_¨r
)

1033 
sym_ª_£¨ch_‰ì
;

1034 
i
 = 0; i < 
˙t
; i++)

1035 
sym_¨r
[
i
] = 
sym_m©ch_¨r
[i].
sym
;

1036 
sym_¨r
[
˙t
] = 
NULL
;

1038 
sym_ª_£¨ch_‰ì
:

1040 
	`‰ì
(
sym_m©ch_¨r
);

1041 
	`ªg‰ì
(&
ª
);

1043  
sym_¨r
;

1044 
	}
}

1052 
	sdï_°ack
 {

1053 
dï_°ack
 *
	m¥ev
, *
	m√xt
;

1054 
symbﬁ
 *
	msym
;

1055 
¥›îty
 *
	m¥›
;

1056 
ex¥
 *
	mex¥
;

1057 } *
	gcheck_t›
;

1059 
	$dï_°ack_ö£π
(
dï_°ack
 *
°ack
, 
symbﬁ
 *
sym
)

1061 
	`mem£t
(
°ack
, 0, (*stack));

1062 i‡(
check_t›
)

1063 
check_t›
->
√xt
 = 
°ack
;

1064 
°ack
->
¥ev
 = 
check_t›
;

1065 
°ack
->
sym
 = sym;

1066 
check_t›
 = 
°ack
;

1067 
	}
}

1069 
	$dï_°ack_ªmove
()

1071 
check_t›
 = check_t›->
¥ev
;

1072 i‡(
check_t›
)

1073 
check_t›
->
√xt
 = 
NULL
;

1074 
	}
}

1081 
	$sym_check_¥öt_ªcursive
(
symbﬁ
 *
œ°_sym
)

1083 
dï_°ack
 *
°ack
;

1084 
symbﬁ
 *
sym
, *
√xt_sym
;

1085 
míu
 *míu = 
NULL
;

1086 
¥›îty
 *
¥›
;

1087 
dï_°ack
 
cv_°ack
;

1089 i‡(
	`sym_is_choi˚_vÆue
(
œ°_sym
)) {

1090 
	`dï_°ack_ö£π
(&
cv_°ack
, 
œ°_sym
);

1091 
œ°_sym
 = 
	`¥›_gë_symbﬁ
(
	`sym_gë_choi˚_¥›
(last_sym));

1094 
°ack
 = 
check_t›
; sèck !
NULL
; sèck = sèck->
¥ev
)

1095 i‡(
°ack
->
sym
 =
œ°_sym
)

1097 i‡(!
°ack
) {

1098 
	`Ârötf
(
°dîr
, "unexpectedÑecursive dependencyÉrror\n");

1102 ; 
°ack
; sèck = sèck->
√xt
) {

1103 
sym
 = 
°ack
->sym;

1104 
√xt_sym
 = 
°ack
->
√xt
 ? sèck->√xt->
sym
 : 
œ°_sym
;

1105 
¥›
 = 
°ack
->prop;

1106 i‡(
¥›
 =
NULL
)

1107 
¥›
 = 
°ack
->
sym
->prop;

1110 i‡(
	`sym_is_choi˚
(
sym
Ë|| 
	`sym_is_choi˚_vÆue
(sym)) {

1111 
¥›
 = 
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

1112 
míu
 = 
¥›
->menu;

1113 i‡(
¥›
->
míu
)

1117 i‡(
°ack
->
sym
 =
œ°_sym
)

1118 
	`Ârötf
(
°dîr
, "%s:%d:error:Ñecursive dependency detected!\n",

1119 
¥›
->
fûe
->
«me
,Ör›->
löío
);

1120 i‡(
°ack
->
ex¥
) {

1121 
	`Ârötf
(
°dîr
, "%s:%d:\tsymbol %s %s value contains %s\n",

1122 
¥›
->
fûe
->
«me
,Ör›->
löío
,

1123 
sym
->
«me
 ? sym->name : "<choice>",

1124 
	`¥›_gë_ty≥_«me
(
¥›
->
ty≥
),

1125 
√xt_sym
->
«me
 ?Çext_sym->name : "<choice>");

1126 } i‡(
°ack
->
¥›
) {

1127 
	`Ârötf
(
°dîr
, "%s:%d:\tsymbol %s depends on %s\n",

1128 
¥›
->
fûe
->
«me
,Ör›->
löío
,

1129 
sym
->
«me
 ? sym->name : "<choice>",

1130 
√xt_sym
->
«me
 ?Çext_sym->name : "<choice>");

1131 } i‡(
	`sym_is_choi˚
(
sym
)) {

1132 
	`Ârötf
(
°dîr
, "%s:%d:\tchoice %s contains symbol %s\n",

1133 
míu
->
fûe
->
«me
, míu->
löío
,

1134 
sym
->
«me
 ? sym->name : "<choice>",

1135 
√xt_sym
->
«me
 ?Çext_sym->name : "<choice>");

1136 } i‡(
	`sym_is_choi˚_vÆue
(
sym
)) {

1137 
	`Ârötf
(
°dîr
, "%s:%d:\tsymbol %s isÖart of choice %s\n",

1138 
míu
->
fûe
->
«me
, míu->
löío
,

1139 
sym
->
«me
 ? sym->name : "<choice>",

1140 
√xt_sym
->
«me
 ?Çext_sym->name : "<choice>");

1142 
	`Ârötf
(
°dîr
, "%s:%d:\tsymbol %s is selected by %s\n",

1143 
¥›
->
fûe
->
«me
,Ör›->
löío
,

1144 
sym
->
«me
 ? sym->name : "<choice>",

1145 
√xt_sym
->
«me
 ?Çext_sym->name : "<choice>");

1149 i‡(
check_t›
 =&
cv_°ack
)

1150 
	`dï_°ack_ªmove
();

1151 
	}
}

1153 
symbﬁ
 *
	$sym_check_ex¥_dïs
(
ex¥
 *
e
)

1155 
symbﬁ
 *
sym
;

1157 i‡(!
e
)

1158  
NULL
;

1159 
e
->
ty≥
) {

1160 
E_OR
:

1161 
E_AND
:

1162 
sym
 = 
	`sym_check_ex¥_dïs
(
e
->
À·
.
ex¥
);

1163 i‡(
sym
)

1164  
sym
;

1165  
	`sym_check_ex¥_dïs
(
e
->
right
.
ex¥
);

1166 
E_NOT
:

1167  
	`sym_check_ex¥_dïs
(
e
->
À·
.
ex¥
);

1168 
E_EQUAL
:

1169 
E_GEQ
:

1170 
E_GTH
:

1171 
E_LEQ
:

1172 
E_LTH
:

1173 
E_UNEQUAL
:

1174 
sym
 = 
	`sym_check_dïs
(
e
->
À·
.sym);

1175 i‡(
sym
)

1176  
sym
;

1177  
	`sym_check_dïs
(
e
->
right
.
sym
);

1178 
E_SYMBOL
:

1179  
	`sym_check_dïs
(
e
->
À·
.
sym
);

1183 
	`¥ötf
("O›s! HowÅÿcheck %d?\n", 
e
->
ty≥
);

1184  
NULL
;

1185 
	}
}

1188 
symbﬁ
 *
	$sym_check_sym_dïs
(
symbﬁ
 *
sym
)

1190 
symbﬁ
 *
sym2
;

1191 
¥›îty
 *
¥›
;

1192 
dï_°ack
 
°ack
;

1194 
	`dï_°ack_ö£π
(&
°ack
, 
sym
);

1196 
sym2
 = 
	`sym_check_ex¥_dïs
(
sym
->
ªv_dï
.
ex¥
);

1197 i‡(
sym2
)

1198 
out
;

1200 
¥›
 = 
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

1201 i‡(
¥›
->
ty≥
 =
P_CHOICE
 ||Ör›->ty≥ =
P_SELECT
)

1203 
°ack
.
¥›
 =Örop;

1204 
sym2
 = 
	`sym_check_ex¥_dïs
(
¥›
->
visibÀ
.
ex¥
);

1205 i‡(
sym2
)

1207 i‡(
¥›
->
ty≥
 !
P_DEFAULT
 || 
	`sym_is_choi˚
(
sym
))

1209 
°ack
.
ex¥
 = 
¥›
->expr;

1210 
sym2
 = 
	`sym_check_ex¥_dïs
(
¥›
->
ex¥
);

1211 i‡(
sym2
)

1213 
°ack
.
ex¥
 = 
NULL
;

1216 
out
:

1217 
	`dï_°ack_ªmove
();

1219  
sym2
;

1220 
	}
}

1222 
symbﬁ
 *
	$sym_check_choi˚_dïs
(
symbﬁ
 *
choi˚
)

1224 
symbﬁ
 *
sym
, *
sym2
;

1225 
¥›îty
 *
¥›
;

1226 
ex¥
 *
e
;

1227 
dï_°ack
 
°ack
;

1229 
	`dï_°ack_ö£π
(&
°ack
, 
choi˚
);

1231 
¥›
 = 
	`sym_gë_choi˚_¥›
(
choi˚
);

1232 
	`ex¥_li°_f‹_óch_sym
(
¥›
->
ex¥
, 
e
, 
sym
)

1233 
sym
->
Êags
 |(
SYMBOL_CHECK
 | 
SYMBOL_CHECKED
);

1235 
choi˚
->
Êags
 |(
SYMBOL_CHECK
 | 
SYMBOL_CHECKED
);

1236 
sym2
 = 
	`sym_check_sym_dïs
(
choi˚
);

1237 
choi˚
->
Êags
 &~
SYMBOL_CHECK
;

1238 i‡(
sym2
)

1239 
out
;

1241 
	`ex¥_li°_f‹_óch_sym
(
¥›
->
ex¥
, 
e
, 
sym
) {

1242 
sym2
 = 
	`sym_check_sym_dïs
(
sym
);

1243 i‡(
sym2
)

1246 
out
:

1247 
	`ex¥_li°_f‹_óch_sym
(
¥›
->
ex¥
, 
e
, 
sym
)

1248 
sym
->
Êags
 &~
SYMBOL_CHECK
;

1250 i‡(
sym2
 && 
	`sym_is_choi˚_vÆue
(sym2) &&

1251 
	`¥›_gë_symbﬁ
(
	`sym_gë_choi˚_¥›
(
sym2
)Ë=
choi˚
)

1252 
sym2
 = 
choi˚
;

1254 
	`dï_°ack_ªmove
();

1256  
sym2
;

1257 
	}
}

1259 
symbﬁ
 *
	$sym_check_dïs
(
symbﬁ
 *
sym
)

1261 
symbﬁ
 *
sym2
;

1262 
¥›îty
 *
¥›
;

1264 i‡(
sym
->
Êags
 & 
SYMBOL_CHECK
) {

1265 
	`sym_check_¥öt_ªcursive
(
sym
);

1266  
sym
;

1268 i‡(
sym
->
Êags
 & 
SYMBOL_CHECKED
)

1269  
NULL
;

1271 i‡(
	`sym_is_choi˚_vÆue
(
sym
)) {

1272 
dï_°ack
 
°ack
;

1275 
	`dï_°ack_ö£π
(&
°ack
, 
sym
);

1276 
¥›
 = 
	`sym_gë_choi˚_¥›
(
sym
);

1277 
sym2
 = 
	`sym_check_dïs
(
	`¥›_gë_symbﬁ
(
¥›
));

1278 
	`dï_°ack_ªmove
();

1279 } i‡(
	`sym_is_choi˚
(
sym
)) {

1280 
sym2
 = 
	`sym_check_choi˚_dïs
(
sym
);

1282 
sym
->
Êags
 |(
SYMBOL_CHECK
 | 
SYMBOL_CHECKED
);

1283 
sym2
 = 
	`sym_check_sym_dïs
(
sym
);

1284 
sym
->
Êags
 &~
SYMBOL_CHECK
;

1287 i‡(
sym2
 && sym2 =
sym
)

1288 
sym2
 = 
NULL
;

1290  
sym2
;

1291 
	}
}

1293 
¥›îty
 *
	$¥›_Æloc
(
¥›_ty≥
 
ty≥
, 
symbﬁ
 *
sym
)

1295 
¥›îty
 *
¥›
;

1296 
¥›îty
 **
¥›p
;

1298 
¥›
 = 
	`xmÆloc
((*prop));

1299 
	`mem£t
(
¥›
, 0, (*prop));

1300 
¥›
->
ty≥
 =Åype;

1301 
¥›
->
sym
 = sym;

1302 
¥›
->
fûe
 = 
cuºít_fûe
;

1303 
¥›
->
löío
 = 
	`zc⁄f_löío
();

1306 i‡(
sym
) {

1307 
¥›p
 = &
sym
->
¥›
; *¥›p;Ör›∞&(*¥›p)->
√xt
)

1309 *
¥›p
 = 
¥›
;

1312  
¥›
;

1313 
	}
}

1315 
symbﬁ
 *
	$¥›_gë_symbﬁ
(
¥›îty
 *
¥›
)

1317 i‡(
¥›
->
ex¥
 && (¥›->ex¥->
ty≥
 =
E_SYMBOL
 ||

1318 
¥›
->
ex¥
->
ty≥
 =
E_LIST
))

1319  
¥›
->
ex¥
->
À·
.
sym
;

1320  
NULL
;

1321 
	}
}

1323 c⁄° *
	$¥›_gë_ty≥_«me
(
¥›_ty≥
 
ty≥
)

1325 
ty≥
) {

1326 
P_PROMPT
:

1328 
P_ENV
:

1330 
P_COMMENT
:

1332 
P_MENU
:

1334 
P_DEFAULT
:

1336 
P_CHOICE
:

1338 
P_SELECT
:

1340 
P_RANGE
:

1342 
P_SYMBOL
:

1344 
P_UNKNOWN
:

1348 
	}
}

1350 
	$¥›_add_ív
(c⁄° *
ív
)

1352 
symbﬁ
 *
sym
, *
sym2
;

1353 
¥›îty
 *
¥›
;

1354 *
p
;

1356 
sym
 = 
cuºít_íåy
->sym;

1357 
sym
->
Êags
 |
SYMBOL_AUTO
;

1358 
	`f‹_Æl_¥›îtõs
(
sym
, 
¥›
, 
P_ENV
) {

1359 
sym2
 = 
	`¥›_gë_symbﬁ
(
¥›
);

1360 i‡(
	`°rcmp
(
sym2
->
«me
, 
ív
))

1361 
	`míu_w¨n
(
cuºít_íåy
, "redefiningÉnvironment symbol from %s",

1362 
sym2
->
«me
);

1366 
¥›
 = 
	`¥›_Æloc
(
P_ENV
, 
sym
);

1367 
¥›
->
ex¥
 = 
	`ex¥_Æloc_symbﬁ
(
	`sym_lookup
(
ív
, 
SYMBOL_CONST
));

1369 
sym_ív_li°
 = 
	`ex¥_Æloc_⁄e
(
E_LIST
, sym_env_list);

1370 
sym_ív_li°
->
right
.
sym
 = sym;

1372 
p
 = 
	`gëív
(
ív
);

1373 i‡(
p
)

1374 
	`sym_add_deÁu…
(
sym
, 
p
);

1376 
	`míu_w¨n
(
cuºít_íåy
, "ívú⁄míàv¨übÀ %†undeföed", 
ív
);

1377 
	}
}

	@swupdate/scripts/kconfig/util.c

8 
	~<°d¨g.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~"lkc.h
"

14 
fûe
 *
	$fûe_lookup
(c⁄° *
«me
)

16 
fûe
 *file;

17 c⁄° *
fûe_«me
 = 
	`sym_ex∑nd_°rög_vÆue
(
«me
);

19 
fûe
 = 
fûe_li°
; fûe; fûêfûe->
√xt
) {

20 i‡(!
	`°rcmp
(
«me
, 
fûe
->name)) {

21 
	`‰ì
((*)
fûe_«me
);

22  
fûe
;

26 
fûe
 = 
	`xmÆloc
((*file));

27 
	`mem£t
(
fûe
, 0, (*file));

28 
fûe
->
«me
 = 
fûe_«me
;

29 
fûe
->
√xt
 = 
fûe_li°
;

30 
fûe_li°
 = 
fûe
;

31  
fûe
;

32 
	}
}

35 
	$fûe_wrôe_dï
(c⁄° *
«me
)

37 
symbﬁ
 *
sym
, *
ív_sym
;

38 
ex¥
 *
e
;

39 
fûe
 *file;

40 
FILE
 *
out
;

42 i‡(!
«me
)

43 
«me
 = ".kconfig.d";

44 
out
 = 
	`f›í
("..config.tmp", "w");

45 i‡(!
out
)

47 
	`Ârötf
(
out
, "deps_config := \\\n");

48 
fûe
 = 
fûe_li°
; fûe; fûêfûe->
√xt
) {

49 i‡(
fûe
->
√xt
)

50 
	`Ârötf
(
out
, "\t%†\\\n", 
fûe
->
«me
);

52 
	`Ârötf
(
out
, "\t%s\n", 
fûe
->
«me
);

54 
	`Ârötf
(
out
, "\n%s: \\\n"

55 "\t$(dïs_c⁄fig)\n\n", 
	`c⁄f_gë_autoc⁄fig_«me
());

57 
	`ex¥_li°_f‹_óch_sym
(
sym_ív_li°
, 
e
, 
sym
) {

58 
¥›îty
 *
¥›
;

59 c⁄° *
vÆue
;

61 
¥›
 = 
	`sym_gë_ív_¥›
(
sym
);

62 
ív_sym
 = 
	`¥›_gë_symbﬁ
(
¥›
);

63 i‡(!
ív_sym
)

65 
vÆue
 = 
	`gëív
(
ív_sym
->
«me
);

66 i‡(!
vÆue
)

67 
vÆue
 = "";

68 
	`Ârötf
(
out
, "i‚eq \"$(%s)\" \"%s\"\n", 
ív_sym
->
«me
, 
vÆue
);

69 
	`Ârötf
(
out
, "%s: FORCE\n", 
	`c⁄f_gë_autoc⁄fig_«me
());

70 
	`Ârötf
(
out
, "endif\n");

73 
	`Ârötf
(
out
, "\n$(deps_config): ;\n");

74 
	`f˛o£
(
out
);

75 
	`ª«me
("..c⁄fig.tmp", 
«me
);

77 
	}
}

81 
g°r
 
	$°r_√w
()

83 
g°r
 
gs
;

84 
gs
.
s
 = 
	`xmÆloc
(() * 64);

85 
gs
.
Àn
 = 64;

86 
gs
.
max_width
 = 0;

87 
	`°r˝y
(
gs
.
s
, "\0");

88  
gs
;

89 
	}
}

92 
	$°r_‰ì
(
g°r
 *
gs
)

94 i‡(
gs
->
s
)

95 
	`‰ì
(
gs
->
s
);

96 
gs
->
s
 = 
NULL
;

97 
gs
->
Àn
 = 0;

98 
	}
}

101 
	$°r_≠≥nd
(
g°r
 *
gs
, c⁄° *
s
)

103 
size_t
 
l
;

104 i‡(
s
) {

105 
l
 = 
	`°æí
(
gs
->
s
) + strlen(s) + 1;

106 i‡(
l
 > 
gs
->
Àn
) {

107 
gs
->
s
 = 
	`ªÆloc
(gs->s, 
l
);

108 
gs
->
Àn
 = 
l
;

110 
	`°rˇt
(
gs
->
s
, s);

112 
	}
}

115 
	$°r_¥ötf
(
g°r
 *
gs
, c⁄° *
fmt
, ...)

117 
va_li°
 
≠
;

118 
s
[10000];

119 
	`va_°¨t
(
≠
, 
fmt
);

120 
	`v¢¥ötf
(
s
, (s), 
fmt
, 
≠
);

121 
	`°r_≠≥nd
(
gs
, 
s
);

122 
	`va_íd
(
≠
);

123 
	}
}

126 c⁄° *
	$°r_gë
(
g°r
 *
gs
)

128  
gs
->
s
;

129 
	}
}

131 *
	$xmÆloc
(
size_t
 
size
)

133 *
p
 = 
	`mÆloc
(
size
);

134 i‡(
p
)

135  
p
;

136 
	`Ârötf
(
°dîr
, "Out of memory.\n");

137 
	`exô
(1);

138 
	}
}

140 *
	$xˇŒoc
(
size_t
 
nmemb
, size_à
size
)

142 *
p
 = 
	`ˇŒoc
(
nmemb
, 
size
);

143 i‡(
p
)

144  
p
;

145 
	`Ârötf
(
°dîr
, "Out of memory.\n");

146 
	`exô
(1);

147 
	}
}

	@swupdate/scripts/kconfig/zconf.l

1 %
›ti⁄
 
no°döô
 
noyywøp
 
√vî
-
öãø˘ive
 
fuŒ
 
ecs


2 %
›ti⁄
 8b
ô
 
nodeÁu…
 
≥rf
-
ªp‹t
Öerf-report

3 %
›ti⁄
 
noöput


4 %
x
 
COMMAND
 
HELP
 
STRING
 
PARAM


11 
	~<limôs.h
>

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<uni°d.h
>

17 
	~"lkc.h
"

19 
	#START_STRSIZE
 16

	)

22 
fûe
 *
	mfûe
;

23 
	mlöío
;

24 } 
	gcuºít_pos
;

26 *
	gãxt
;

27 
	gãxt_size
, 
	gãxt_asize
;

29 
	sbuf„r
 {

30 
buf„r
 *
	m∑ª¡
;

31 
YY_BUFFER_STATE
 
	m°©e
;

34 
buf„r
 *
	gcuºít_buf
;

36 
	gœ°_ts
, 
	gfú°_ts
;

38 
zc⁄f_ídhñp
();

39 
zc⁄f_ídfûe
();

41 
	$√w_°rög
()

43 
ãxt
 = 
	`xmÆloc
(
START_STRSIZE
);

44 
ãxt_asize
 = 
START_STRSIZE
;

45 
ãxt_size
 = 0;

46 *
ãxt
 = 0;

47 
	}
}

49 
	$≠≥nd_°rög
(c⁄° *
°r
, 
size
)

51 
√w_size
 = 
ãxt_size
 + 
size
 + 1;

52 i‡(
√w_size
 > 
ãxt_asize
) {

53 
√w_size
 +
START_STRSIZE
 - 1;

54 
√w_size
 &-
START_STRSIZE
;

55 
ãxt
 = 
	`ªÆloc
—ext, 
√w_size
);

56 
ãxt_asize
 = 
√w_size
;

58 
	`mem˝y
(
ãxt
 + 
ãxt_size
, 
°r
, 
size
);

59 
ãxt_size
 +
size
;

60 
ãxt
[
ãxt_size
] = 0;

61 
	}
}

63 
	$Æloc_°rög
(c⁄° *
°r
, 
size
)

65 
ãxt
 = 
	`xmÆloc
(
size
 + 1);

66 
	`mem˝y
(
ãxt
, 
°r
, 
size
);

67 
ãxt
[
size
] = 0;

68 
	}
}

71 
n
 [
A
-
Za
-
z0
-9
_
]

73 %% /* 
	$yyÀx
 */

74 
°r
 = 0;

75 
ts
, 
i
;

77 [ \
t
]*#.*\
n
 |

78 [ \
t
]*\
n
 {

79 
cuºít_fûe
->
löío
++;

80  
T_EOL
;

82 [ \
t
]*#.*

85 [ \
t
]+ {

86 
	`BEGIN
(
COMMAND
);

90 
	`u≈ut
(
yyãxt
[0]);

91 
	`BEGIN
(
COMMAND
);

95 <
COMMAND
>{

96 {
n
}+ {

97 c⁄° 
kc⁄f_id
 *
id
 = 
	`kc⁄f_id_lookup
(
yyãxt
, 
yyÀng
);

98 
	`BEGIN
(
PARAM
);

99 
cuºít_pos
.
fûe
 = 
cuºít_fûe
;

100 
cuºít_pos
.
löío
 = 
cuºít_fûe
->lineno;

101 i‡(
id
 && id->
Êags
 & 
TF_COMMAND
) {

102 
zc⁄ÊvÆ
.
id
 = id;

103  
id
->
tokí
;

105 
	`Æloc_°rög
(
yyãxt
, 
yyÀng
);

106 
zc⁄ÊvÆ
.
°rög
 = 
ãxt
;

107  
T_WORD
;

110 \
n
 {

111 
	`BEGIN
(
INITIAL
);

112 
cuºít_fûe
->
löío
++;

113  
T_EOL
;

117 <
PARAM
>{

118 "&&"  
T_AND
;

119 "||"  
T_OR
;

120 "("  
T_OPEN_PAREN
;

121 ")"  
T_CLOSE_PAREN
;

122 "!"  
T_NOT
;

123 "="  
T_EQUAL
;

124 "!="  
T_UNEQUAL
;

125 "<="  
T_LESS_EQUAL
;

126 ">="  
T_GREATER_EQUAL
;

127 "<"  
T_LESS
;

128 ">"  
T_GREATER
;

130 
°r
 = 
yyãxt
[0];

131 
	`√w_°rög
();

132 
	`BEGIN
(
STRING
);

134 \
n
 
	`BEGIN
(
INITIAL
); 
cuºít_fûe
->
löío
++;  
T_EOL
;

136 ({
n
}|[-/.])+ {

137 c⁄° 
kc⁄f_id
 *
id
 = 
	`kc⁄f_id_lookup
(
yyãxt
, 
yyÀng
);

138 i‡(
id
 && id->
Êags
 & 
TF_PARAM
) {

139 
zc⁄ÊvÆ
.
id
 = id;

140  
id
->
tokí
;

142 
	`Æloc_°rög
(
yyãxt
, 
yyÀng
);

143 
zc⁄ÊvÆ
.
°rög
 = 
ãxt
;

144  
T_WORD
;

147 \\\
n
 
cuºít_fûe
->
löío
++;

148 [[:
bœnk
:]]+

150 
	`Ârötf
(
°dîr
,

152 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(), *
yyãxt
);

154 <<
EOF
>> {

155 
	`BEGIN
(
INITIAL
);

159 <
STRING
>{

161 
	`≠≥nd_°rög
(
yyãxt
, 
yyÀng
);

162 
zc⁄ÊvÆ
.
°rög
 = 
ãxt
;

163  
T_WORD_QUOTE
;

166 
	`≠≥nd_°rög
(
yyãxt
, 
yyÀng
);

168 \\.?/\
n
 {

169 
	`≠≥nd_°rög
(
yyãxt
 + 1, 
yyÀng
 - 1);

170 
zc⁄ÊvÆ
.
°rög
 = 
ãxt
;

171  
T_WORD_QUOTE
;

174 
	`≠≥nd_°rög
(
yyãxt
 + 1, 
yyÀng
 - 1);

177 i‡(
°r
 =
yyãxt
[0]) {

178 
	`BEGIN
(
PARAM
);

179 
zc⁄ÊvÆ
.
°rög
 = 
ãxt
;

180  
T_WORD_QUOTE
;

182 
	`≠≥nd_°rög
(
yyãxt
, 1);

184 \
n
 {

185 
	`¥ötf
("%s:%d:w¨nög: mu…i-löê°rög†nŸ suµ‹ãd\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

186 
cuºít_fûe
->
löío
++;

187 
	`BEGIN
(
INITIAL
);

188  
T_EOL
;

190 <<
EOF
>> {

191 
	`BEGIN
(
INITIAL
);

195 <
HELP
>{

196 [ \
t
]+ {

197 
ts
 = 0;

198 
i
 = 0; i < 
yyÀng
; i++) {

199 i‡(
yyãxt
[
i
] == '\t')

200 
ts
 = (ts & ~7) + 8;

202 
ts
++;

204 
œ°_ts
 = 
ts
;

205 i‡(
fú°_ts
) {

206 i‡(
ts
 < 
fú°_ts
) {

207 
	`zc⁄f_ídhñp
();

208  
T_HELPTEXT
;

210 
ts
 -
fú°_ts
;

211 
ts
 > 8) {

212 
	`≠≥nd_°rög
(" ", 8);

213 
ts
 -= 8;

215 
	`≠≥nd_°rög
(" ", 
ts
);

218 [ \
t
]*\
n
/[^ \t\n] {

219 
cuºít_fûe
->
löío
++;

220 
	`zc⁄f_ídhñp
();

221  
T_HELPTEXT
;

223 [ \
t
]*\
n
 {

224 
cuºít_fûe
->
löío
++;

225 
	`≠≥nd_°rög
("\n", 1);

227 [^ \
t
\
n
].* {

228 
yyÀng
) {

229 i‡((
yyãxt
[
yyÀng
-1] != ' ') && (yytext[yyleng-1] != '\t'))

231 
yyÀng
--;

233 
	`≠≥nd_°rög
(
yyãxt
, 
yyÀng
);

234 i‡(!
fú°_ts
)

235 
fú°_ts
 = 
œ°_ts
;

237 <<
EOF
>> {

238 
	`zc⁄f_ídhñp
();

239  
T_HELPTEXT
;

243 <<
EOF
>> {

244 i‡(
cuºít_fûe
) {

245 
	`zc⁄f_ídfûe
();

246  
T_EOL
;

248 
	`f˛o£
(
yyö
);

249 
	`yyãrmö©e
();

252 
	}
%%

253 
	$zc⁄f_°¨thñp
()

255 
	`√w_°rög
();

256 
œ°_ts
 = 
fú°_ts
 = 0;

257 
	`BEGIN
(
HELP
);

258 
	}
}

260 
	$zc⁄f_ídhñp
()

262 
zc⁄ÊvÆ
.
°rög
 = 
ãxt
;

263 
	`BEGIN
(
INITIAL
);

264 
	}
}

275 
FILE
 *
	$zc⁄f_f›í
(c⁄° *
«me
)

277 *
ív
, 
fuŒ«me
[
PATH_MAX
+1];

278 
FILE
 *
f
;

280 
f
 = 
	`f›í
(
«me
, "r");

281 i‡(!
f
 && 
«me
 !
NULL
 &&Çame[0] != '/') {

282 
ív
 = 
	`gëív
(
SRCTREE
);

283 i‡(
ív
) {

284 
	`•rötf
(
fuŒ«me
, "%s/%s", 
ív
, 
«me
);

285 
f
 = 
	`f›í
(
fuŒ«me
, "r");

288  
f
;

289 
	}
}

291 
	$zc⁄f_öôsˇn
(c⁄° *
«me
)

293 
yyö
 = 
	`zc⁄f_f›í
(
«me
);

294 i‡(!
yyö
) {

295 
	`¥ötf
("ˇn'àföd fûê%s\n", 
«me
);

296 
	`exô
(1);

299 
cuºít_buf
 = 
	`xmÆloc
((*current_buf));

300 
	`mem£t
(
cuºít_buf
, 0, (*current_buf));

302 
cuºít_fûe
 = 
	`fûe_lookup
(
«me
);

303 
cuºít_fûe
->
löío
 = 1;

304 
	}
}

306 
	$zc⁄f_√xtfûe
(c⁄° *
«me
)

308 
fûe
 *
ôî
;

309 
fûe
 *fûê
	`fûe_lookup
(
«me
);

310 
buf„r
 *
buf
 = 
	`xmÆloc
((*buf));

311 
	`mem£t
(
buf
, 0, (*buf));

313 
cuºít_buf
->
°©e
 = 
YY_CURRENT_BUFFER
;

314 
yyö
 = 
	`zc⁄f_f›í
(
fûe
->
«me
);

315 i‡(!
yyö
) {

316 
	`¥ötf
("%s:%d: can't open file \"%s\"\n",

317 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(), 
fûe
->
«me
);

318 
	`exô
(1);

320 
	`yy_swôch_to_buf„r
(
	`yy_¸óã_buf„r
(
yyö
, 
YY_BUF_SIZE
));

321 
buf
->
∑ª¡
 = 
cuºít_buf
;

322 
cuºít_buf
 = 
buf
;

324 
ôî
 = 
cuºít_fûe
->
∑ª¡
; iter; iter = iter->parent ) {

325 i‡(!
	`°rcmp
(
cuºít_fûe
->
«me
,
ôî
->name) ) {

326 
	`¥ötf
("%s:%d:Ñecursive inclusion detected. "

328 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(),

329 
	`zc⁄f_cu∫ame
());

330 
ôî
 = 
cuºít_fûe
->
∑ª¡
;

331 
ôî
 && \

332 
	`°rcmp
(
ôî
->
«me
,
cuºít_fûe
->name)) {

333 
	`¥ötf
(" included from: '%s:%d'\n",

334 
ôî
->
«me
, iãr->
löío
-1);

335 
ôî
 = iãr->
∑ª¡
;

337 i‡(
ôî
)

338 
	`¥ötf
(" included from: '%s:%d'\n",

339 
ôî
->
«me
, iãr->
löío
+1);

340 
	`exô
(1);

343 
fûe
->
löío
 = 1;

344 
fûe
->
∑ª¡
 = 
cuºít_fûe
;

345 
cuºít_fûe
 = 
fûe
;

346 
	}
}

348 
	$zc⁄f_ídfûe
()

350 
buf„r
 *
∑ª¡
;

352 
cuºít_fûe
 = cuºít_fûe->
∑ª¡
;

354 
∑ª¡
 = 
cuºít_buf
->parent;

355 i‡(
∑ª¡
) {

356 
	`f˛o£
(
yyö
);

357 
	`yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
);

358 
	`yy_swôch_to_buf„r
(
∑ª¡
->
°©e
);

360 
	`‰ì
(
cuºít_buf
);

361 
cuºít_buf
 = 
∑ª¡
;

362 
	}
}

364 
	$zc⁄f_löío
()

366  
cuºít_pos
.
löío
;

367 
	}
}

369 c⁄° *
	$zc⁄f_cu∫ame
()

371  
cuºít_pos
.
fûe
 ? cuºít_pos.fûe->
«me
 : "<none>";

372 
	}
}

	@swupdate/scripts/kconfig/zconf.y

7 
	~<˘y≥.h
>

8 
	~<°d¨g.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<°dboﬁ.h
>

14 
	~"lkc.h
"

16 
	#¥ötd
(
mask
, 
fmt
...Ëi‡(
cdebug
 & (mask)Ë
	`¥ötf
(fmt)

	)

18 
	#PRINTD
 0x0001

	)

19 
	#DEBUG_PARSE
 0x0002

	)

21 
	gcdebug
 = 
PRINTD
;

23 
zc⁄Êex
();

24 
zc⁄Âröt
(c⁄° *
îr
, ...);

25 
zc⁄f_îr‹
(c⁄° *
îr
, ...);

26 
zc⁄„º‹
(c⁄° *
îr
);

27 
boﬁ
 
zc⁄f_ídtokí
(c⁄° 
kc⁄f_id
 *
id
, 
°¨âokí
, 
ídtokí
);

29 
symbﬁ
 *
	gsymbﬁ_hash
[
SYMBOL_HASHSIZE
];

31 
míu
 *
	gcuºít_míu
, *
	gcuºít_íåy
;

34 %
ex≥˘
 30

38 *
°rög
;

39 
fûe
 *file;

40 
symbﬁ
 *symbol;

41 
ex¥
 *expr;

42 
míu
 *menu;

43 c⁄° 
kc⁄f_id
 *
id
;

46 %
tokí
 <
id
>
T_MAINMENU


47 %
tokí
 <
id
>
T_MENU


48 %
tokí
 <
id
>
T_ENDMENU


49 %
tokí
 <
id
>
T_SOURCE


50 %
tokí
 <
id
>
T_CHOICE


51 %
tokí
 <
id
>
T_ENDCHOICE


52 %
tokí
 <
id
>
T_COMMENT


53 %
tokí
 <
id
>
T_CONFIG


54 %
tokí
 <
id
>
T_MENUCONFIG


55 %
tokí
 <
id
>
T_HELP


56 %
tokí
 <
°rög
> 
T_HELPTEXT


57 %
tokí
 <
id
>
T_IF


58 %
tokí
 <
id
>
T_ENDIF


59 %
tokí
 <
id
>
T_DEPENDS


60 %
tokí
 <
id
>
T_OPTIONAL


61 %
tokí
 <
id
>
T_PROMPT


62 %
tokí
 <
id
>
T_TYPE


63 %
tokí
 <
id
>
T_DEFAULT


64 %
tokí
 <
id
>
T_SELECT


65 %
tokí
 <
id
>
T_RANGE


66 %
tokí
 <
id
>
T_VISIBLE


67 %
tokí
 <
id
>
T_OPTION


68 %
tokí
 <
id
>
T_ON


69 %
tokí
 <
°rög
> 
T_WORD


70 %
tokí
 <
°rög
> 
T_WORD_QUOTE


71 %
tokí
 
T_UNEQUAL


72 %
tokí
 
T_LESS


73 %
tokí
 
T_LESS_EQUAL


74 %
tokí
 
T_GREATER


75 %
tokí
 
T_GREATER_EQUAL


76 %
tokí
 
T_CLOSE_PAREN


77 %
tokí
 
T_OPEN_PAREN


78 %
tokí
 
T_EOL


80 %
À·
 
T_OR


81 %
À·
 
T_AND


82 %
À·
 
T_EQUAL
 
T_UNEQUAL


83 %
À·
 
T_LESS
 
T_LESS_EQUAL
 
T_GREATER
 
T_GREATER_EQUAL


84 %
n⁄assoc
 
T_NOT


86 %
ty≥
 <
°rög
> 
¥om±


87 %
ty≥
 <
symbﬁ
> symbol

88 %
ty≥
 <
ex¥
>Éxpr

89 %
ty≥
 <
ex¥
> 
if_ex¥


90 %
ty≥
 <
id
> 
íd


91 %
ty≥
 <
id
> 
›ti⁄_«me


92 %
ty≥
 <
míu
> 
if_íåy
 
míu_íåy
 
choi˚_íåy


93 %
ty≥
 <
°rög
> 
symbﬁ_›ti⁄_¨g
 
w‹d_›t


95 %
de°ru˘‹
 {

96 
Ârötf
(
°dîr
, "%s:%d: missingÉnd statement forÅhisÉntry\n",

97 
$$
->
fûe
->
«me
, $$->
löío
);

98 i‡(
cuºít_míu
 =
$$
)

99 
míu_íd_míu
();

100 } 
if_íåy
 
míu_íåy
 
choi˚_íåy


104 
	~"zc⁄f.hash.c
"

107 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

108 
öput
: 
∆
 
°¨t
 | start;

110 
°¨t
: 
maömíu_°mt
 
°mt_li°
 | stmt_list;

112 
°mt_li°
:

114 | 
°mt_li°
 
comm⁄_°mt


115 | 
°mt_li°
 
choi˚_°mt


116 | 
°mt_li°
 
míu_°mt


117 | 
°mt_li°
 
íd
 { 
	`zc⁄f_îr‹
("unexpectedÉnd statement"); }

118 | 
°mt_li°
 
T_WORD
 
îr‹
 
T_EOL
 { 
	`zc⁄f_îr‹
("unknow¿°©emíà\"%s\"", 
$2
); }

119 | 
°mt_li°
 
›ti⁄_«me
 
îr‹
 
T_EOL


121 
	`zc⁄f_îr‹
("u√x≥˘ed o±i⁄ \"%s\"", 
kc⁄f_id_°rögs
 + 
$2
->
«me
);

123 | 
°mt_li°
 
îr‹
 
T_EOL
 { 
	`zc⁄f_îr‹
("invalid statement"); }

126 
›ti⁄_«me
:

127 
T_DEPENDS
 | 
T_PROMPT
 | 
T_TYPE
 | 
T_SELECT
 | 
T_OPTIONAL
 | 
T_RANGE
 | 
T_DEFAULT
 | 
T_VISIBLE


130 
comm⁄_°mt
:

131 
T_EOL


132 | 
if_°mt


133 | 
commít_°mt


134 | 
c⁄fig_°mt


135 | 
míuc⁄fig_°mt


136 | 
sour˚_°mt


139 
›ti⁄_îr‹
:

140 
T_WORD
 
îr‹
 
T_EOL
 { 
	`zc⁄f_îr‹
("unknow¿›ti⁄ \"%s\"", 
$1
); }

141 | 
îr‹
 
T_EOL
 { 
	`zc⁄f_îr‹
("invalid option"); }

147 
c⁄fig_íåy_°¨t
: 
T_CONFIG
 
T_WORD
 
T_EOL


149 
symbﬁ
 *
sym
 = 
	`sym_lookup
(
$2
, 0);

150 
sym
->
Êags
 |
SYMBOL_OPTIONAL
;

151 
	`míu_add_íåy
(
sym
);

152 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:c⁄fig %s\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(), 
$2
);

155 
c⁄fig_°mt
: 
c⁄fig_íåy_°¨t
 
c⁄fig_›ti⁄_li°


157 
	`míu_íd_íåy
();

158 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídc⁄fig\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

161 
míuc⁄fig_íåy_°¨t
: 
T_MENUCONFIG
 
T_WORD
 
T_EOL


163 
symbﬁ
 *
sym
 = 
	`sym_lookup
(
$2
, 0);

164 
sym
->
Êags
 |
SYMBOL_OPTIONAL
;

165 
	`míu_add_íåy
(
sym
);

166 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:míuc⁄fig %s\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(), 
$2
);

169 
míuc⁄fig_°mt
: 
míuc⁄fig_íåy_°¨t
 
c⁄fig_›ti⁄_li°


171 i‡(
cuºít_íåy
->
¥om±
)

172 
cuºít_íåy
->
¥om±
->
ty≥
 = 
P_MENU
;

174 
	`zc⁄Âröt
("warning: menuconfig statement withoutÖrompt");

175 
	`míu_íd_íåy
();

176 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídc⁄fig\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

179 
c⁄fig_›ti⁄_li°
:

181 | 
c⁄fig_›ti⁄_li°
 
c⁄fig_›ti⁄


182 | 
c⁄fig_›ti⁄_li°
 
symbﬁ_›ti⁄


183 | 
c⁄fig_›ti⁄_li°
 
dïíds


184 | 
c⁄fig_›ti⁄_li°
 
hñp


185 | 
c⁄fig_›ti⁄_li°
 
›ti⁄_îr‹


186 | 
c⁄fig_›ti⁄_li°
 
T_EOL


189 
c⁄fig_›ti⁄
: 
T_TYPE
 
¥om±_°mt_›t
 
T_EOL


191 
	`míu_£t_ty≥
(
$1
->
°y≥
);

192 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:type(%u)\n",

193 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(),

194 
$1
->
°y≥
);

197 
c⁄fig_›ti⁄
: 
T_PROMPT
 
¥om±
 
if_ex¥
 
T_EOL


199 
	`míu_add_¥om±
(
P_PROMPT
, 
$2
, 
$3
);

200 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:¥om±\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

203 
c⁄fig_›ti⁄
: 
T_DEFAULT
 
ex¥
 
if_ex¥
 
T_EOL


205 
	`míu_add_ex¥
(
P_DEFAULT
, 
$2
, 
$3
);

206 i‡(
$1
->
°y≥
 !
S_UNKNOWN
)

207 
	`míu_£t_ty≥
(
$1
->
°y≥
);

208 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:default(%u)\n",

209 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(),

210 
$1
->
°y≥
);

213 
c⁄fig_›ti⁄
: 
T_SELECT
 
T_WORD
 
if_ex¥
 
T_EOL


215 
	`míu_add_symbﬁ
(
P_SELECT
, 
	`sym_lookup
(
$2
, 0), 
$3
);

216 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:£À˘\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

219 
c⁄fig_›ti⁄
: 
T_RANGE
 
symbﬁ
 symbﬁ 
if_ex¥
 
T_EOL


221 
	`míu_add_ex¥
(
P_RANGE
, 
	`ex¥_Æloc_comp
(
E_RANGE
,
$2
, 
$3
), 
$4
);

222 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ønge\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

225 
symbﬁ_›ti⁄
: 
T_OPTION
 
symbﬁ_›ti⁄_li°
 
T_EOL


228 
symbﬁ_›ti⁄_li°
:

230 | 
symbﬁ_›ti⁄_li°
 
T_WORD
 
symbﬁ_›ti⁄_¨g


232 c⁄° 
kc⁄f_id
 *
id
 = 
	`kc⁄f_id_lookup
(
$2
, 
	`°æí
($2));

233 i‡(
id
 && id->
Êags
 & 
TF_OPTION
)

234 
	`míu_add_›ti⁄
(
id
->
tokí
, 
$3
);

236 
	`zc⁄Âröt
("w¨nög: ign‹ög unknow¿›ti⁄ %s", 
$2
);

237 
	`‰ì
(
$2
);

240 
symbﬁ_›ti⁄_¨g
:

241  { 
$$
 = 
NULL
; }

242 | 
T_EQUAL
 
¥om±
 { 
$$
 = 
$2
; }

247 
choi˚
: 
T_CHOICE
 
w‹d_›t
 
T_EOL


249 
symbﬁ
 *
sym
 = 
	`sym_lookup
(
$2
, 
SYMBOL_CHOICE
);

250 
sym
->
Êags
 |
SYMBOL_AUTO
;

251 
	`míu_add_íåy
(
sym
);

252 
	`míu_add_ex¥
(
P_CHOICE
, 
NULL
, NULL);

253 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:choi˚\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

256 
choi˚_íåy
: 
choi˚
 
choi˚_›ti⁄_li°


258 
$$
 = 
	`míu_add_míu
();

261 
choi˚_íd
: 
íd


263 i‡(
	`zc⁄f_ídtokí
(
$1
, 
T_CHOICE
, 
T_ENDCHOICE
)) {

264 
	`míu_íd_míu
();

265 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídchoi˚\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

269 
choi˚_°mt
: 
choi˚_íåy
 
choi˚_block
 
choi˚_íd


272 
choi˚_›ti⁄_li°
:

274 | 
choi˚_›ti⁄_li°
 
choi˚_›ti⁄


275 | 
choi˚_›ti⁄_li°
 
dïíds


276 | 
choi˚_›ti⁄_li°
 
hñp


277 | 
choi˚_›ti⁄_li°
 
T_EOL


278 | 
choi˚_›ti⁄_li°
 
›ti⁄_îr‹


281 
choi˚_›ti⁄
: 
T_PROMPT
 
¥om±
 
if_ex¥
 
T_EOL


283 
	`míu_add_¥om±
(
P_PROMPT
, 
$2
, 
$3
);

284 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:¥om±\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

287 
choi˚_›ti⁄
: 
T_TYPE
 
¥om±_°mt_›t
 
T_EOL


289 i‡(
$1
->
°y≥
 =
S_BOOLEAN
 || $1->°y≥ =
S_TRISTATE
) {

290 
	`míu_£t_ty≥
(
$1
->
°y≥
);

291 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:type(%u)\n",

292 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(),

293 
$1
->
°y≥
);

295 
YYERROR
;

298 
choi˚_›ti⁄
: 
T_OPTIONAL
 
T_EOL


300 
cuºít_íåy
->
sym
->
Êags
 |
SYMBOL_OPTIONAL
;

301 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:›ti⁄Æ\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

304 
choi˚_›ti⁄
: 
T_DEFAULT
 
T_WORD
 
if_ex¥
 
T_EOL


306 i‡(
$1
->
°y≥
 =
S_UNKNOWN
) {

307 
	`míu_add_symbﬁ
(
P_DEFAULT
, 
	`sym_lookup
(
$2
, 0), 
$3
);

308 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:default\n",

309 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

311 
YYERROR
;

314 
choi˚_block
:

316 | 
choi˚_block
 
comm⁄_°mt


321 
if_íåy
: 
T_IF
 
ex¥
 
∆


323 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:if\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

324 
	`míu_add_íåy
(
NULL
);

325 
	`míu_add_dï
(
$2
);

326 
$$
 = 
	`míu_add_míu
();

329 
if_íd
: 
íd


331 i‡(
	`zc⁄f_ídtokí
(
$1
, 
T_IF
, 
T_ENDIF
)) {

332 
	`míu_íd_míu
();

333 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídif\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

337 
if_°mt
: 
if_íåy
 
if_block
 
if_íd


340 
if_block
:

342 | 
if_block
 
comm⁄_°mt


343 | 
if_block
 
míu_°mt


344 | 
if_block
 
choi˚_°mt


349 
maömíu_°mt
: 
T_MAINMENU
 
¥om±
 
∆


351 
	`míu_add_¥om±
(
P_MENU
, 
$2
, 
NULL
);

356 
míu
: 
T_MENU
 
¥om±
 
T_EOL


358 
	`míu_add_íåy
(
NULL
);

359 
	`míu_add_¥om±
(
P_MENU
, 
$2
, 
NULL
);

360 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:míu\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

363 
míu_íåy
: 
míu
 
visibûôy_li°
 
dïíds_li°


365 
$$
 = 
	`míu_add_míu
();

368 
míu_íd
: 
íd


370 i‡(
	`zc⁄f_ídtokí
(
$1
, 
T_MENU
, 
T_ENDMENU
)) {

371 
	`míu_íd_míu
();

372 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídmíu\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

376 
míu_°mt
: 
míu_íåy
 
míu_block
 
míu_íd


379 
míu_block
:

381 | 
míu_block
 
comm⁄_°mt


382 | 
míu_block
 
míu_°mt


383 | 
míu_block
 
choi˚_°mt


386 
sour˚_°mt
: 
T_SOURCE
 
¥om±
 
T_EOL


388 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:sour˚ %s\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(), 
$2
);

389 
	`zc⁄f_√xtfûe
(
$2
);

394 
commít
: 
T_COMMENT
 
¥om±
 
T_EOL


396 
	`míu_add_íåy
(
NULL
);

397 
	`míu_add_¥om±
(
P_COMMENT
, 
$2
, 
NULL
);

398 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:commít\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

401 
commít_°mt
: 
commít
 
dïíds_li°


403 
	`míu_íd_íåy
();

408 
hñp_°¨t
: 
T_HELP
 
T_EOL


410 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:hñp\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

411 
	`zc⁄f_°¨thñp
();

414 
hñp
: 
hñp_°¨t
 
T_HELPTEXT


416 
cuºít_íåy
->
hñp
 = 
$2
;

421 
dïíds_li°
:

423 | 
dïíds_li°
 
dïíds


424 | 
dïíds_li°
 
T_EOL


425 | 
dïíds_li°
 
›ti⁄_îr‹


428 
dïíds
: 
T_DEPENDS
 
T_ON
 
ex¥
 
T_EOL


430 
	`míu_add_dï
(
$3
);

431 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:dïíd†⁄\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

436 
visibûôy_li°
:

438 | 
visibûôy_li°
 
visibÀ


439 | 
visibûôy_li°
 
T_EOL


442 
visibÀ
: 
T_VISIBLE
 
if_ex¥


444 
	`míu_add_visibûôy
(
$2
);

449 
¥om±_°mt_›t
:

451 | 
¥om±
 
if_ex¥


453 
	`míu_add_¥om±
(
P_PROMPT
, 
$1
, 
$2
);

456 
¥om±
: 
T_WORD


457 | 
T_WORD_QUOTE


460 
íd
: 
T_ENDMENU
 
T_EOL
 { 
$$
 = 
$1
; }

461 | 
T_ENDCHOICE
 
T_EOL
 { 
$$
 = 
$1
; }

462 | 
T_ENDIF
 
T_EOL
 { 
$$
 = 
$1
; }

465 
∆
:

466 
T_EOL


467 | 
∆
 
T_EOL


470 
if_ex¥
: { 
$$
 = 
NULL
; }

471 | 
T_IF
 
ex¥
 { 
$$
 = 
$2
; }

474 
ex¥
: 
symbﬁ
 { 
$$
 = 
	`ex¥_Æloc_symbﬁ
(
$1
); }

475 | 
symbﬁ
 
T_LESS
 symbﬁ { 
$$
 = 
	`ex¥_Æloc_comp
(
E_LTH
, 
$1
, 
$3
); }

476 | 
symbﬁ
 
T_LESS_EQUAL
 symbﬁ { 
$$
 = 
	`ex¥_Æloc_comp
(
E_LEQ
, 
$1
, 
$3
); }

477 | 
symbﬁ
 
T_GREATER
 symbﬁ { 
$$
 = 
	`ex¥_Æloc_comp
(
E_GTH
, 
$1
, 
$3
); }

478 | 
symbﬁ
 
T_GREATER_EQUAL
 symbﬁ { 
$$
 = 
	`ex¥_Æloc_comp
(
E_GEQ
, 
$1
, 
$3
); }

479 | 
symbﬁ
 
T_EQUAL
 symbﬁ { 
$$
 = 
	`ex¥_Æloc_comp
(
E_EQUAL
, 
$1
, 
$3
); }

480 | 
symbﬁ
 
T_UNEQUAL
 symbﬁ { 
$$
 = 
	`ex¥_Æloc_comp
(
E_UNEQUAL
, 
$1
, 
$3
); }

481 | 
T_OPEN_PAREN
 
ex¥
 
T_CLOSE_PAREN
 { 
$$
 = 
$2
; }

482 | 
T_NOT
 
ex¥
 { 
$$
 = 
	`ex¥_Æloc_⁄e
(
E_NOT
, 
$2
); }

483 | 
ex¥
 
T_OR
Éx¥ { 
$$
 = 
	`ex¥_Æloc_two
(
E_OR
, 
$1
, 
$3
); }

484 | 
ex¥
 
T_AND
Éx¥ { 
$$
 = 
	`ex¥_Æloc_two
(
E_AND
, 
$1
, 
$3
); }

487 
symbﬁ
: 
T_WORD
 { 
$$
 = 
	`sym_lookup
(
$1
, 0); 
	`‰ì
($1); }

488 | 
T_WORD_QUOTE
 { 
$$
 = 
	`sym_lookup
(
$1
, 
SYMBOL_CONST
); 
	`‰ì
($1); }

491 
w‹d_›t
: { 
$$
 = 
NULL
; }

492 | 
T_WORD


494 
	}
%%

496 
	$c⁄f_∑r£
(c⁄° *
«me
)

498 
symbﬁ
 *
sym
;

499 
i
;

501 
	`zc⁄f_öôsˇn
(
«me
);

503 
	`sym_öô
();

504 
	`_míu_öô
();

505 
roŸmíu
.
¥om±
 = 
	`míu_add_¥om±
(
P_MENU
, "Löux Kî√»C⁄figuøti⁄", 
NULL
);

507 i‡(
	`gëív
("ZCONF_DEBUG"))

508 
zc⁄fdebug
 = 1;

509 
	`zc⁄Â¨£
();

510 i‡(
zc⁄‚îrs
)

511 
	`exô
(1);

512 i‡(!
moduÀs_sym
)

513 
moduÀs_sym
 = 
	`sym_föd
( "n" );

515 
roŸmíu
.
¥om±
->
ãxt
 = 
	`_
(rootmenu.prompt->text);

516 
roŸmíu
.
¥om±
->
ãxt
 = 
	`sym_ex∑nd_°rög_vÆue
(rootmenu.prompt->text);

518 
	`míu_föÆize
(&
roŸmíu
);

519 
	`f‹_Æl_symbﬁs
(
i
, 
sym
) {

520 i‡(
	`sym_check_dïs
(
sym
))

521 
zc⁄‚îrs
++;

523 i‡(
zc⁄‚îrs
)

524 
	`exô
(1);

525 
	`sym_£t_ch™ge_cou¡
(1);

526 
	}
}

528 c⁄° *
	$zc⁄f_tokí«me
(
tokí
)

530 
tokí
) {

531 
T_MENU
:  "menu";

532 
T_ENDMENU
:  "endmenu";

533 
T_CHOICE
:  "choice";

534 
T_ENDCHOICE
:  "endchoice";

535 
T_IF
:  "if";

536 
T_ENDIF
:  "endif";

537 
T_DEPENDS
:  "depends";

538 
T_VISIBLE
:  "visible";

541 
	}
}

543 
boﬁ
 
	$zc⁄f_ídtokí
(c⁄° 
kc⁄f_id
 *
id
, 
°¨âokí
, 
ídtokí
)

545 i‡(
id
->
tokí
 !
ídtokí
) {

546 
	`zc⁄f_îr‹
("unexpected '%s' within %s block",

547 
kc⁄f_id_°rögs
 + 
id
->
«me
, 
	`zc⁄f_tokí«me
(
°¨âokí
));

548 
zc⁄‚îrs
++;

549  
Ál£
;

551 i‡(
cuºít_míu
->
fûe
 !
cuºít_fûe
) {

552 
	`zc⁄f_îr‹
("'%s' in different fileÅhan '%s'",

553 
kc⁄f_id_°rögs
 + 
id
->
«me
, 
	`zc⁄f_tokí«me
(
°¨âokí
));

554 
	`Ârötf
(
°dîr
, "%s:%d:Üocation ofÅhe '%s'\n",

555 
cuºít_míu
->
fûe
->
«me
, cuºít_míu->
löío
,

556 
	`zc⁄f_tokí«me
(
°¨âokí
));

557 
zc⁄‚îrs
++;

558  
Ál£
;

560  
åue
;

561 
	}
}

563 
	$zc⁄Âröt
(c⁄° *
îr
, ...)

565 
va_li°
 
≠
;

567 
	`Ârötf
(
°dîr
, "%s:%d: ", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

568 
	`va_°¨t
(
≠
, 
îr
);

569 
	`vÂrötf
(
°dîr
, 
îr
, 
≠
);

570 
	`va_íd
(
≠
);

571 
	`Ârötf
(
°dîr
, "\n");

572 
	}
}

574 
	$zc⁄f_îr‹
(c⁄° *
îr
, ...)

576 
va_li°
 
≠
;

578 
zc⁄‚îrs
++;

579 
	`Ârötf
(
°dîr
, "%s:%d: ", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

580 
	`va_°¨t
(
≠
, 
îr
);

581 
	`vÂrötf
(
°dîr
, 
îr
, 
≠
);

582 
	`va_íd
(
≠
);

583 
	`Ârötf
(
°dîr
, "\n");

584 
	}
}

586 
	$zc⁄„º‹
(c⁄° *
îr
)

588 
	`Ârötf
(
°dîr
, "%s:%d: %s\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(Ë+ 1, 
îr
);

589 
	}
}

591 
	$¥öt_quŸed_°rög
(
FILE
 *
out
, c⁄° *
°r
)

593 c⁄° *
p
;

594 
Àn
;

596 
	`putc
('"', 
out
);

597 (
p
 = 
	`°rchr
(
°r
, '"'))) {

598 
Àn
 = 
p
 - 
°r
;

599 i‡(
Àn
)

600 
	`Ârötf
(
out
, "%.*s", 
Àn
, 
°r
);

601 
	`Âuts
("\\\"", 
out
);

602 
°r
 = 
p
 + 1;

604 
	`Âuts
(
°r
, 
out
);

605 
	`putc
('"', 
out
);

606 
	}
}

608 
	$¥öt_symbﬁ
(
FILE
 *
out
, 
míu
 *menu)

610 
symbﬁ
 *
sym
 = 
míu
->sym;

611 
¥›îty
 *
¥›
;

613 i‡(
	`sym_is_choi˚
(
sym
))

614 
	`Ârötf
(
out
, "\nchoice\n");

616 
	`Ârötf
(
out
, "\nc⁄fig %s\n", 
sym
->
«me
);

617 
sym
->
ty≥
) {

618 
S_BOOLEAN
:

619 
	`Âuts
(" boﬁón\n", 
out
);

621 
S_TRISTATE
:

622 
	`Âuts
("Åri°©e\n", 
out
);

624 
S_STRING
:

625 
	`Âuts
(" såög\n", 
out
);

627 
S_INT
:

628 
	`Âuts
(" i¡egî\n", 
out
);

630 
S_HEX
:

631 
	`Âuts
(" hex\n", 
out
);

634 
	`Âuts
(" ???\n", 
out
);

637 
¥›
 = 
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

638 i‡(
¥›
->
míu
 != menu)

640 
¥›
->
ty≥
) {

641 
P_PROMPT
:

642 
	`Âuts
("Örom± ", 
out
);

643 
	`¥öt_quŸed_°rög
(
out
, 
¥›
->
ãxt
);

644 i‡(!
	`ex¥_is_yes
(
¥›
->
visibÀ
.
ex¥
)) {

645 
	`Âuts
(" i‡", 
out
);

646 
	`ex¥_Âröt
(
¥›
->
visibÀ
.
ex¥
, 
out
);

648 
	`Âutc
('\n', 
out
);

650 
P_DEFAULT
:

651 
	`Âuts
–" deÁu… ", 
out
);

652 
	`ex¥_Âröt
(
¥›
->
ex¥
, 
out
);

653 i‡(!
	`ex¥_is_yes
(
¥›
->
visibÀ
.
ex¥
)) {

654 
	`Âuts
(" i‡", 
out
);

655 
	`ex¥_Âröt
(
¥›
->
visibÀ
.
ex¥
, 
out
);

657 
	`Âutc
('\n', 
out
);

659 
P_CHOICE
:

660 
	`Âuts
(" #choi˚ vÆue\n", 
out
);

662 
P_SELECT
:

663 
	`Âuts
–" sñe˘ ", 
out
);

664 
	`ex¥_Âröt
(
¥›
->
ex¥
, 
out
);

665 
	`Âutc
('\n', 
out
);

667 
P_RANGE
:

668 
	`Âuts
–"Ñ™gê", 
out
);

669 
	`ex¥_Âröt
(
¥›
->
ex¥
, 
out
);

670 
	`Âutc
('\n', 
out
);

672 
P_MENU
:

673 
	`Âuts
–" míu ", 
out
);

674 
	`¥öt_quŸed_°rög
(
out
, 
¥›
->
ãxt
);

675 
	`Âutc
('\n', 
out
);

678 
	`Ârötf
(
out
, " unknow¿¥› %d!\n", 
¥›
->
ty≥
);

682 i‡(
míu
->
hñp
) {

683 
Àn
 = 
	`°æí
(
míu
->
hñp
);

684 
míu
->
hñp
[--
Àn
] == '\n')

685 
míu
->
hñp
[
Àn
] = 0;

686 
	`Ârötf
(
out
, " hñp\n%s\n", 
míu
->
hñp
);

688 
	}
}

690 
	$zc⁄fdump
(
FILE
 *
out
)

692 
¥›îty
 *
¥›
;

693 
symbﬁ
 *
sym
;

694 
míu
 *menu;

696 
míu
 = 
roŸmíu
.
li°
;

697 
míu
) {

698 i‡((
sym
 = 
míu
->sym))

699 
	`¥öt_symbﬁ
(
out
, 
míu
);

700 i‡((
¥›
 = 
míu
->
¥om±
)) {

701 
¥›
->
ty≥
) {

702 
P_COMMENT
:

703 
	`Âuts
("\ncommíà", 
out
);

704 
	`¥öt_quŸed_°rög
(
out
, 
¥›
->
ãxt
);

705 
	`Âuts
("\n", 
out
);

707 
P_MENU
:

708 
	`Âuts
("\nmíu ", 
out
);

709 
	`¥öt_quŸed_°rög
(
out
, 
¥›
->
ãxt
);

710 
	`Âuts
("\n", 
out
);

715 i‡(!
	`ex¥_is_yes
(
¥›
->
visibÀ
.
ex¥
)) {

716 
	`Âuts
(" dïíd†", 
out
);

717 
	`ex¥_Âröt
(
¥›
->
visibÀ
.
ex¥
, 
out
);

718 
	`Âutc
('\n', 
out
);

722 i‡(
míu
->
li°
)

723 
míu
 = míu->
li°
;

724 i‡(
míu
->
√xt
)

725 
míu
 = míu->
√xt
;

726 (
míu
 = míu->
∑ª¡
)) {

727 i‡(
míu
->
¥om±
 && míu->¥om±->
ty≥
 =
P_MENU
)

728 
	`Âuts
("\√ndmíu\n", 
out
);

729 i‡(
míu
->
√xt
) {

730 
míu
 = míu->
√xt
;

735 
	}
}

737 
	~"zc⁄f.Àx.c
"

738 
	~"utû.c
"

739 
	~"c⁄fd©a.c
"

740 
	~"ex¥.c
"

741 
	~"symbﬁ.c
"

742 
	~"míu.c
"

	@swupdate/suricatta/common.c

7 
	~<°dboﬁ.h
>

8 
	~<swupd©e_di˘.h
>

9 
	~<ch™√l.h
>

10 
	~<utû.h
>

11 
	~<∑r£lib.h
>

12 
	~<swupd©e_£âögs.h
>

13 
	~<ch™√l_cuæ.h
>

14 
	~"suriˇâa/suriˇâa.h
"

15 
	~"suriˇâa_¥iv©e.h
"

17 
	$suriˇâa_ch™√l_£âögs
(*
ñem
, 
ch™√l_d©a_t
 *
ch™
)

19 
tmp
[128];

21 
	`gë_fõld
(
LIBCFG_PARSER
, 
ñem
, "retry",

22 &
ch™
->
ªåõs
);

24 
	`GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "ªåywaô", 
tmp
);

25 i‡(
	`°æí
(
tmp
))

26 
ch™
->
ªåy_¶ìp
 =

27 ()
	`°πoul
(
tmp
, 
NULL
, 10);

28 
	`GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "ˇfûe", 
tmp
);

29 i‡(
	`°æí
(
tmp
))

30 
	`SETSTRING
(
ch™
->
ˇfûe
, 
tmp
);

31 
	`GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "s¶key", 
tmp
);

32 i‡(
	`°æí
(
tmp
))

33 
	`SETSTRING
(
ch™
->
s¶key
, 
tmp
);

34 
	`GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "cùhîs", 
tmp
);

35 i‡(
	`°æí
(
tmp
))

36 
	`SETSTRING
(
ch™
->
cùhîs
, 
tmp
);

37 
	`GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "s¶˚π", 
tmp
);

38 i‡(
	`°æí
(
tmp
))

39 
	`SETSTRING
(
ch™
->
s¶˚π
, 
tmp
);

40 
	`GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "¥oxy", 
tmp
);

41 i‡(
	`°æí
(
tmp
))

42 
	`SETSTRING
(
ch™
->
¥oxy
, 
tmp
);

43 
	}
}

45 
£rvî_›_ªs_t
 
	$m≠_ch™√l_ªtcode
(
ch™√l_›_ªs_t
 
ª•⁄£
)

47 
ª•⁄£
) {

48 
CHANNEL_ENONET
:

49 
CHANNEL_EAGAIN
:

50  
SERVER_EAGAIN
;

51 
CHANNEL_EACCES
:

52  
SERVER_EACCES
;

53 
CHANNEL_ENOENT
:

54 
CHANNEL_EIO
:

55 
CHANNEL_EILSEQ
:

56 
CHANNEL_ENOMEM
:

57 
CHANNEL_EINIT
:

58 
CHANNEL_ELOOP
:

59  
SERVER_EERR
;

60 
CHANNEL_EBADMSG
:

61 
CHANNEL_ENOTFOUND
:

62  
SERVER_EBADMSG
;

63 
CHANNEL_OK
:

64 
CHANNEL_EREDIRECT
:

65  
SERVER_OK
;

67  
SERVER_EERR
;

68 
	}
}

	@swupdate/suricatta/server_general.c

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~<time.h
>

16 
	~<°dboﬁ.h
>

17 
	~<uni°d.h
>

18 
	~<gë›t.h
>

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<gíî©ed/autoc⁄f.h
>

22 
	~<utû.h
>

23 
	~<√tw‹k_ùc.h
>

24 
	~<sys/time.h
>

25 
	~<swupd©e_°©us.h
>

26 
	~"suriˇâa/suriˇâa.h
"

27 
	~"suriˇâa_¥iv©e.h
"

28 
	~"∑r£lib.h
"

29 
	~"ch™√l.h
"

30 
	~<cuæ/cuæ.h
>

31 
	~"ch™√l_cuæ.h
"

32 
	~"°©e.h
"

33 
	~"∑r£lib.h
"

34 
	~"swupd©e_£âögs.h
"

35 
	~"swupd©e_di˘.h
"

36 
	~"£rvî_gíîÆ.h
"

37 
	~<¥ogªss_ùc.h
>

38 
	~<p˘l.h
>

39 
	~<±hªad.h
>

42 
£rvî_¥öt_hñp
();

43 
£rvî_›_ªs_t
 
£rvî_has_≥ndög_a˘i⁄
(*
a˘i⁄_id
);

44 
£rvî_›_ªs_t
 
£rvî_°›
();

45 
£rvî_›_ªs_t
 
£rvî_ùc
(
fd
);

46 
£rvî_›_ªs_t
 
£rvî_°¨t
(*
‚ame
, 
¨gc
, *
¨gv
[]);

47 
£rvî_›_ªs_t
 
£rvî_ö°Æl_upd©e
();

48 
£rvî_›_ªs_t
 
£rvî_£nd_èrgë_d©a
();

49 
£rvî_gë_pﬁlög_öãrvÆ
();

58 
£rvî_›_ªs_t
 
m≠_hâp_ªtcode
(
ch™√l_›_ªs_t
 
ª•⁄£
);

60 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

61 {"uæ", 
ªquúed_¨gumít
, 
NULL
, 'u'},

62 {"loguæ", 
ªquúed_¨gumít
, 
NULL
, 'l'},

63 {"pﬁldñay", 
ªquúed_¨gumít
, 
NULL
, 'p'},

64 {"ªåy", 
ªquúed_¨gumít
, 
NULL
, 'r'},

65 {"ªåywaô", 
ªquúed_¨gumít
, 
NULL
, 'w'},

66 {
NULL
, 0, NULL, 0}};

68 
	gm™d©‹y_¨gumít_cou¡
 = 0;

75 *
	muæ
;

76 
di˘
 *
	midítify
;

77 *
	m‚ame
;

78 } 
	t£rvî_¥ogªss_d©a
;

79 
£rvî_¥ogªss_d©a
 
	g¥ogd©a
;

85 
	#URL_BIT
 4

	)

86 
	#ALL_MANDATORY_SET
 (
URL_BIT
)

	)

91 
	#MAX_LOG_SIZE
 1024

	)

93 
ch™√l_›_ªs_t
 
ch™√l_cuæ_öô
();

95 
£rvî_gíîÆ_t
 
	g£rvî_gíîÆ
 = {.
uæ
 = 
NULL
,

96 .
	gpﬁlög_öãrvÆ
 = 30,

97 .
	gdebug
 = 
Ál£
,

98 .
	gch™√l
 = 
NULL
};

100 
ch™√l_d©a_t
 
	gch™√l_d©a_deÁu…s
 = {.
debug
 = 
Ál£
,

101 .
	gsour˚
 = 
SOURCE_SURICATTA
,

102 .
	gªåõs
 = 
CHANNEL_DEFAULT_RESUME_TRIES
,

103 .
	gªåy_¶ìp
 =

104 
CHANNEL_DEFAULT_RESUME_DELAY
,

105 .
	gu£s¶
 = 
åue
,

106 .
	gf‹m©
 = 
CHANNEL_PARSE_RAW
,

107 .
	gnocheck™swî
 = 
åue
,

108 .
	gnofﬁlow
 = 
åue
,

109 .
	g°ri˘s¶
 = 
åue
};

115 
£rvî_gíîÆ_°©us_ˇŒback
(
ùc_mesßge
 
__©åibuã__
 ((
__unu£d__
)Ë*
msg
)

126 
	$£rvî_logevít_£âögs
(*
£âögs
, *
d©a
)

128 *
ñem
;

129 
cou¡
, 
i
;

130 
di˘
 *
evíts
;

131 
evít
[80], 
fmt
[80];

133 i‡(!
d©a
)

134  -
EINVAL
;

136 
evíts
 = (
di˘
 *)
d©a
;

138 
cou¡
 = 
	`gë_¨øy_Àngth
(
LIBCFG_PARSER
, 
£âögs
);

140 
i
 = 0; i < 
cou¡
; ++i) {

141 
ñem
 = 
	`gë_ñem_‰om_idx
(
LIBCFG_PARSER
, 
£âögs
, 
i
);

142 i‡(!
ñem
)

149 if(!(
	`exi°_fõld_°rög
(
LIBCFG_PARSER
, 
ñem
, "event")))

151 if(!(
	`exi°_fõld_°rög
(
LIBCFG_PARSER
, 
ñem
, "format")))

154 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
, "evít", 
evít
);

155 
	`GET_FIELD_STRING
(
LIBCFG_PARSER
, 
ñem
, "f‹m©", 
fmt
);

156 
	`TRACE
("evít: %s, f‹m©: %s", 
evít
, 
fmt
);

157 
	`di˘_£t_vÆue
(
evíts
, 
evít
, 
fmt
);

161 
	}
}

173 *
	$£rvî_f‹m©_log
(c⁄° *
evít
, 
di˘
 *
fmãvíts
,

174 
di˘
 *
idítify
)

176 *
fmt
, *
tmp
;

177 *
fd©e
;

178 *
tokí
;

179 *
ßvïå
 = 
NULL
;

181 i‡(!
fmãvíts
 || !
evít
)

182  
NULL
;

184 i‡–!(
tmp
 = 
	`di˘_gë_vÆue
(
fmãvíts
, 
evít
)))

185  
NULL
;

187 *
log
 = (*)
	`ˇŒoc
(1, 
MAX_LOG_SIZE
);

188 i‡(!
log
)

189  
NULL
;

191 
fmt
 = 
	`°rdup
(
tmp
);

192 
tokí
 = 
	`°πok_r
(
fmt
, ",", &
ßvïå
);

194 
fd©e
 = 
	`swupd©e_time_iso8601
();

196 
tokí
) {

197 *
fõld
;

202 i‡(!
	`°rcmp
(
tokí
, "date"))

203 
fõld
 = 
fd©e
;

205 
fõld
 = 
	`di˘_gë_vÆue
(
idítify
, 
tokí
);

207 i‡(
	`°æí
(
log
Ë&& såÀn÷ogË< 
MAX_LOG_SIZE
)

208 
	`°rˇt
(
log
,",");

210 i‡(!
fõld
) {

211 
	`°∫ˇt
(
log
, 
tokí
, 
MAX_LOG_SIZE
 - 
	`°æí
(log) - 1);

213 
	`°∫ˇt
(
log
, 
fõld
, 
MAX_LOG_SIZE
 - 
	`°æí
(log) - 1);

215 
tokí
 = 
	`°πok_r
(
NULL
, ",", &
ßvïå
);

217 
	`‰ì
(
fmt
);

218 
	`‰ì
(
fd©e
);

219 
	`TRACE
("F‹m©ãdÜog: %s", 
log
);

221  
log
;

222 
	}
}

232 *
	$£rvî_¥ogªss_thªad
 (*
d©a
)

234 
¥ogfd
 = -1;

235 
¥ogªss_msg
 
msg
;

236 
RECOVERY_STATUS
 
°©us
 = 
IDLE
;

237 
£rvî_¥ogªss_d©a
 *
¥og
 = (£rvî_¥ogªss_d©®*)
d©a
;

238 
ch™√l_t
 *
ch™√l
;

239 
ch™√l_d©a_t
 
ch™√l_d©a
 = 
ch™√l_d©a_deÁu…s
;

240 
di˘
 
fmãvíts
;

241 
£rvî_›_ªs_t
 
ªsu…
;

242 *
logbuf„r
 = 
NULL
;

244 
	`LIST_INIT
(&
fmãvíts
);

246 i‡(!
¥og
) {

247 
	`ERROR
("Fatal Error:Åhread without data !");

249 i‡(!
¥og
->
uæ
 || !
	`°æí
(prog->url)) {

250 
	`INFO
("No url forÜogging...noÑesult sent");

251 
	`±hªad_exô
((*)
SERVER_EINIT
);

254 
ch™√l
 = 
	`ch™√l_√w
();

255 i‡(!
ch™√l
) {

256 
	`ERROR
("Cannot get channel for communication");

258 i‡(
ch™√l
->
	`›í
(ch™√l, &
ch™√l_d©a
Ë!
CHANNEL_OK
) {

259 
	`ERROR
("Cannot open channel forÖrogressÅhread");

260 
	`±hªad_exô
((*)
SERVER_EINIT
);

263 if(
¥og
->
‚ame
)

264 
	`ªad_moduÀ_£âögs
(
¥og
->
‚ame
, "g£rvi˚.logevít", 
£rvî_logevít_£âögs
,

265 &
fmãvíts
);

270 
ch™√l_d©a
.
uæ
 = 
¥og
->url;

272 
	`TRACE
("g£rvi˚Örogªs†thªad sèπed,ÜogÅÿ\"%s\" !", 
¥og
->
uæ
);

275 i‡(
¥ogfd
 < 0) {

276 
¥ogfd
 = 
	`¥ogªss_ùc_c⁄√˘
(
åue
);

279 i‡(
	`¥ogªss_ùc_ª˚ive
(&
¥ogfd
, &
msg
) == -1) {

286 i‡((
°©us
 =
IDLE
Ë&& (
msg
.status != IDLE)) {

288 
logbuf„r
 = 
	`£rvî_f‹m©_log
("°¨ãd", &
fmãvíts
, 
¥og
->
idítify
);

292 
msg
.
°©us
) {

293 
SUCCESS
:

294 
logbuf„r
 = 
	`£rvî_f‹m©_log
("suc˚ss", &
fmãvíts
, 
¥og
->
idítify
);

297 
FAILURE
:

298 
logbuf„r
 = 
	`£rvî_f‹m©_log
("Áû", &
fmãvíts
, 
¥og
->
idítify
);

300 
DONE
:

306 i‡(
logbuf„r
) {

307 
ch™√l_d©a
.
ªque°_body
 = 
logbuf„r
;

308 
ch™√l_d©a
.
mëhod
 = 
CHANNEL_PUT
;

309 
ch™√l_d©a
.
c⁄ã¡_ty≥
 = "application/text";

310 
ªsu…
 = 
	`m≠_ch™√l_ªtcode
(
ch™√l
->
	`put
(ch™√l, (*)&
ch™√l_d©a
));

311 i‡(
ªsu…
 !
SERVER_OK
)

312 
	`ERROR
("SendingÜogÅo server failed !");

313 
	`‰ì
(
logbuf„r
);

314 
logbuf„r
 = 
NULL
;

316 
°©us
 = 
msg
.status;

319 ()
ch™√l
->
	`˛o£
(channel);

320 
	`±hªad_exô
((*)0);

321 
	}
}

323 *
	$£rvî_¥ï¨e_quîy
(*
uæ
, 
di˘
 *dict)

325 
ªt
;

326 
di˘_íåy
 *
íåy
;

327 *
qry
 = 
NULL
;

328 *
tmp
;

329 
CURL
 *
cuæ
 = 
	`cuæ_ósy_öô
();

331 i‡(!
cuæ
)

332  
NULL
;

334 
	`LIST_FOREACH
(
íåy
, 
di˘
, 
√xt
) {

335 *
key
 = 
	`di˘_íåy_gë_key
(
íåy
);

336 *
vÆue
 = 
	`di˘_íåy_gë_vÆue
(
íåy
);

337 *
ícoded
 = 
	`cuæ_ósy_esˇ≥
(
cuæ
, 
vÆue
, 0);

339 i‡(!
ícoded
) {

340 
	`ERROR
("MemoryÉrror calling curl_easy_escape");

341 i‡(
qry
)

342 
	`‰ì
(
qry
);

343 
qry
 = 
NULL
;

344 
˛ónup
;

347 i‡(
qry
) {

348 
tmp
 = 
qry
;

349 
ªt
 = 
	`a•rötf
(&
qry
, "%s&%s=%s", 
tmp
, 
key
, 
ícoded
);

353 
	`‰ì
(
tmp
);

355 
ªt
 = 
	`a•rötf
(&
qry
, "%s?%s=%s", 
uæ
, 
key
, 
ícoded
);

361 
	`‰ì
(
ícoded
);

363 i‡(
ªt
 =
ENOMEM_ASPRINTF
) {

364 
	`ERROR
("Error generating query for general service");

365 
qry
 = 
NULL
;

366 
˛ónup
;

370 
˛ónup
:

371 
	`cuæ_ósy_˛ónup
(
cuæ
);

373 i‡(!
qry
)

374 
qry
 = 
uæ
;

376  
qry
;

378 
	}
}

380 
£rvî_›_ªs_t
 
	$m≠_hâp_ªtcode
(
ch™√l_›_ªs_t
 
ª•⁄£
)

386 
ª•⁄£
) {

387 
CHANNEL_ENONET
:

388 
CHANNEL_EAGAIN
:

389  
SERVER_EAGAIN
;

390 
CHANNEL_EACCES
:

391  
SERVER_EACCES
;

392 
CHANNEL_ENOENT
:

393 
CHANNEL_EIO
:

394 
CHANNEL_EILSEQ
:

395 
CHANNEL_ENOMEM
:

396 
CHANNEL_EINIT
:

397 
CHANNEL_ELOOP
:

398  
SERVER_EERR
;

399 
CHANNEL_EBADMSG
:

400  
SERVER_EBADMSG
;

401 
CHANNEL_EREDIRECT
:

402  
SERVER_UPDATE_AVAILABLE
;

403 
CHANNEL_ENOTFOUND
:

404  
SERVER_NO_UPDATE_AVAILABLE
;

405 
CHANNEL_OK
:

406  
SERVER_EERR
;

408  
SERVER_EERR
;

409 
	}
}

411 
£rvî_›_ªs_t
 
	$£rvî_£t_pﬁlög_öãrvÆ
(*
pﬁl
)

413 
pﬁlög_öãrvÆ
 = 
	`°πoul
(
pﬁl
, 
NULL
, 10);

415 
£rvî_gíîÆ
.
pﬁlög_öãrvÆ
 =

416 
pﬁlög_öãrvÆ
 =0 ? 
CHANNEL_DEFAULT_POLLING_INTERVAL
 :Öolling_interval;

417 
	`DEBUG
("SetÖolling intervalÅo %dsásánnounced by server.\n",

418 
£rvî_gíîÆ
.
pﬁlög_öãrvÆ
);

420  
SERVER_OK
;

421 
	}
}

423 
£rvî_›_ªs_t
 
	$£rvî_gë_dïloymít_öfo
(
ch™√l_t
 *
ch™√l
, 
ch™√l_d©a_t
 *
ch™√l_d©a
)

425 *
pﬁl°rög
;

426 
£rvî_›_ªs_t
 
ªsu…
;

427 
	`as£π
(
ch™√l
 !
NULL
);

428 
	`as£π
(
ch™√l_d©a
 !
NULL
);

435 
ch™√l_d©a
->
uæ

	`£rvî_¥ï¨e_quîy
(
£rvî_gíîÆ
.uæ, &£rvî_gíîÆ.
c⁄figd©a
);

437 
	`LIST_INIT
(&
£rvî_gíîÆ
.
hâphódîs
);

438 
ch™√l_d©a
->
hódîs
 = &
£rvî_gíîÆ
.
hâphódîs
;

440 
ªsu…
 = 
	`m≠_hâp_ªtcode
(
ch™√l
->
	`gë
(ch™√l, (*)
ch™√l_d©a
));

442 i‡(
ch™√l_d©a
->
uæ
 !
NULL
) {

443 
	`‰ì
(
ch™√l_d©a
->
uæ
);

446 
pﬁl°rög
 = 
	`di˘_gë_vÆue
(&
£rvî_gíîÆ
.
hâphódîs
, "Retry-After");

447 i‡(
pﬁl°rög
) {

448 
	`£rvî_£t_pﬁlög_öãrvÆ
(
pﬁl°rög
);

451 
	`di˘_dr›_db
(&
£rvî_gíîÆ
.
hâphódîs
);

453  
ªsu…
;

454 
	}
}

456 
£rvî_›_ªs_t
 
	$£rvî_has_≥ndög_a˘i⁄
(*
a˘i⁄_id
)

459 
ch™√l_d©a_t
 
ch™√l_d©a
 = 
ch™√l_d©a_deÁu…s
;

460 
£rvî_›_ªs_t
 
ªsu…
 =

461 
	`£rvî_gë_dïloymít_öfo
(
£rvî_gíîÆ
.
ch™√l
,

462 &
ch™√l_d©a
);

468 *
a˘i⁄_id
 = 0;

470 i‡((
ªsu…
 =
SERVER_UPDATE_AVAILABLE
) &&

471 (
	`gë_°©e
(Ë=
STATE_INSTALLED
)) {

472 
	`WARN
("Análready installed update isÖendingÅesting, "

474 
	`INFO
("PleaseÑestart SWUpdateÅoÑeportÅheÅestÑesults "

476 
ªsu…
 = 
SERVER_NO_UPDATE_AVAILABLE
;

479  
ªsu…
;

480 
	}
}

482 
£rvî_›_ªs_t
 
	$£rvî_£nd_èrgë_d©a
()

485  
SERVER_OK
;

486 
	}
}

488 
	$£rvî_gë_pﬁlög_öãrvÆ
()

490  
£rvî_gíîÆ
.
pﬁlög_öãrvÆ
;

491 
	}
}

493 
	$£rvî_¥öt_hñp
()

495 
	`Ârötf
(

496 
°dîr
,

508 
CHANNEL_DEFAULT_POLLING_INTERVAL
, 
CHANNEL_DEFAULT_RESUME_TRIES
,

509 
CHANNEL_DEFAULT_RESUME_DELAY
);

510 
	}
}

512 
£rvî_›_ªs_t
 
	$£rvî_ö°Æl_upd©e
()

514 
ch™√l_d©a_t
 
ch™√l_d©a
 = 
ch™√l_d©a_deÁu…s
;

515 
£rvî_›_ªs_t
 
ªsu…
 = 
SERVER_OK
;

516 
ch™√l_t
 *
ch™√l
 = 
£rvî_gíîÆ
.channel;

517 *
uæ
 = 
ch™√l
->
	`gë_ªdúe˘_uæ
(channel);

519 i‡(!
uæ
)

520  
SERVER_EERR
;

522 
ch™√l_d©a
.
nofﬁlow
 = 
Ál£
;

523 
ch™√l_d©a
.
nocheck™swî
 = 
Ál£
;

524 
ch™√l_d©a
.
checkdwl
 = 
NULL
;

526 
ch™√l_d©a
.
uæ
 = 
	`°rdup
(url);

528 
ch™√l_›_ªs_t
 
¸esu…
 =

529 
ch™√l
->
	`gë_fûe
(ch™√l, (*)&
ch™√l_d©a
);

530 i‡((
ªsu…
 = 
	`m≠_ch™√l_ªtcode
(
¸esu…
)Ë!
SERVER_OK
) {

532 
	`ùc_waô_f‹_com∂ëe
(
£rvî_gíîÆ_°©us_ˇŒback
);

533 
˛ónup
;

536 
	`ùc_waô_f‹_com∂ëe
(
£rvî_gíîÆ_°©us_ˇŒback
)) {

537 
DOWNLOAD
:

538 
IDLE
:

539 
START
:

540 
RUN
:

541 
SUCCESS
:

542 
ªsu…
 = 
SERVER_OK
;

544 
FAILURE
:

545 
ªsu…
 = 
SERVER_EERR
;

546 
˛ónup
;

552 i‡((
ªsu…
 = 
	`ßve_°©e
((*)
STATE_KEY
, 
STATE_INSTALLED
)) !=

553 
SERVER_OK
) {

554 
	`ERROR
("CannotÖersistently store update state.\n");

555 
˛ónup
;

558 
˛ónup
:

559 
	`‰ì
(
ch™√l_d©a
.
uæ
);

560  
ªsu…
;

561 
	}
}

563 
£rvî_gíîÆ_£âögs
(*
ñem
, 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

565 
	gtmp
[128];

567 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "uæ", 
tmp
);

568 i‡(
°æí
(
tmp
)) {

569 
SETSTRING
(
£rvî_gíîÆ
.
uæ
, 
tmp
);

570 
	gm™d©‹y_¨gumít_cou¡
 |
URL_BIT
;

573 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "loguæ", 
tmp
);

574 i‡(
°æí
(
tmp
)) {

575 
SETSTRING
(
£rvî_gíîÆ
.
loguæ
, 
tmp
);

578 
gë_fõld
(
LIBCFG_PARSER
, 
ñem
, "polldelay",

579 &
£rvî_gíîÆ
.
pﬁlög_öãrvÆ
);

581 
suriˇâa_ch™√l_£âögs
(
ñem
, &
ch™√l_d©a_deÁu…s
);

586 
£rvî_›_ªs_t
 
	$£rvî_°¨t
(*
‚ame
, 
¨gc
, *
¨gv
[])

588 
choi˚
 = 0;

590 
	`LIST_INIT
(&
£rvî_gíîÆ
.
c⁄figd©a
);

592 i‡(
‚ame
) {

594 
	`ªad_moduÀ_£âögs
(
‚ame
, "g£rvi˚", 
£rvî_gíîÆ_£âögs
,

595 
NULL
);

596 
	`ªad_moduÀ_£âögs
(
‚ame
, "idítify", 
£âögs_öto_di˘
,

597 &
£rvî_gíîÆ
.
c⁄figd©a
);

600 i‡(
logÀvñ
 >
TRACELEVEL
) {

601 
ch™√l_d©a_deÁu…s
.
debug
 = 
åue
;

605 
›töd
 = 1;

606 (
choi˚
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "u:l:r:w:",

607 
l⁄g_›ti⁄s
, 
NULL
)) != -1) {

608 
choi˚
) {

610 
	`SETSTRING
(
£rvî_gíîÆ
.
uæ
, 
›èrg
);

611 
m™d©‹y_¨gumít_cou¡
 |
URL_BIT
;

614 
	`SETSTRING
(
£rvî_gíîÆ
.
loguæ
, 
›èrg
);

617 
£rvî_gíîÆ
.
pﬁlög_öãrvÆ
 =

618 ()
	`°πoul
(
›èrg
, 
NULL
, 10);

621 
ch™√l_d©a_deÁu…s
.
ªåõs
 =

622 ()
	`°πoul
(
›èrg
, 
NULL
, 10);

625 
ch™√l_d©a_deÁu…s
.
ªåy_¶ìp
 =

626 ()
	`°πoul
(
›èrg
, 
NULL
, 10);

630  
SERVER_EINIT
;

634 i‡(
m™d©‹y_¨gumít_cou¡
 !
ALL_MANDATORY_SET
) {

635 
	`ERROR
("Mandatoryárguments missing!");

636 
	`suriˇâa_¥öt_hñp
();

637  
SERVER_EINIT
;

640 i‡(
	`ch™√l_cuæ_öô
(Ë!
CHANNEL_OK
)

641  
SERVER_EINIT
;

646 
£rvî_gíîÆ
.
ch™√l
 = 
	`ch™√l_√w
();

647 i‡(!
£rvî_gíîÆ
.
ch™√l
)

648  
SERVER_EINIT
;

650 i‡(
£rvî_gíîÆ
.
ch™√l
->
	`›í
(£rvî_gíîÆ.ch™√l, &
ch™√l_d©a_deÁu…s
Ë!
CHANNEL_OK
) {

651  
SERVER_EINIT
;

654 
¥ogd©a
.
‚ame
 = (‚ameË? 
	`°rdup
(‚ameË: 
NULL
;

655 
¥ogd©a
.
uæ
 = 
£rvî_gíîÆ
.
loguæ
;

656 
¥ogd©a
.
idítify
 = &
£rvî_gíîÆ
.
c⁄figd©a
;

658 
	`°¨t_thªad
(
£rvî_¥ogªss_thªad
, &
¥ogd©a
);

660 
	`TRACE
("General Server started !!");

662  
SERVER_OK
;

663 
	}
}

665 
£rvî_›_ªs_t
 
	$£rvî_°›
()

667 ()
£rvî_gíîÆ
.
ch™√l
->
	`˛o£
(server_general.channel);

668  
SERVER_OK
;

669 
	}
}

671 
£rvî_›_ªs_t
 
£rvî_ùc
(
__©åibuã__
 ((
__unu£d__
)Ë
fd
)

673  
	gSERVER_OK
;

	@swupdate/suricatta/server_general.h

8 #¥agm®
⁄˚


9 
	~<°dboﬁ.h
>

10 
	~<°©e.h
>

11 
	~<swupd©e_di˘.h
>

12 
	~<ch™√l.h
>

20 *
	muæ
;

21 *
	mloguæ
;

22 
	mpﬁlög_öãrvÆ
;

23 
boﬁ
 
	mdebug
;

24 
di˘
 
	mc⁄figd©a
;

25 
di˘
 
	mhâphódîs
;

26 
upd©e_°©e_t
 
	mupd©e_°©e
;

27 
ch™√l_t
 *
	mch™√l
;

28 } 
	t£rvî_gíîÆ_t
;

30 
£rvî_gíîÆ_t
 
£rvî_gíîÆ
;

	@swupdate/suricatta/server_hawkbit.c

8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~<time.h
>

11 
	~<°dboﬁ.h
>

12 
	~<uni°d.h
>

13 
	~<gë›t.h
>

14 
	~<as£π.h
>

15 
	~<î∫o.h
>

16 
	~<js⁄-c/js⁄.h
>

17 
	~<gíî©ed/autoc⁄f.h
>

18 
	~<utû.h
>

19 
	~<√tw‹k_ùc.h
>

20 
	~<sys/time.h
>

21 
	~<swupd©e_°©us.h
>

22 
	~"suriˇâa/suriˇâa.h
"

23 
	~"suriˇâa_¥iv©e.h
"

24 
	~"∑r£lib.h
"

25 
	~"ch™√l.h
"

26 
	~"ch™√l_cuæ.h
"

27 
	~"°©e.h
"

28 
	~"£rvî_hawkbô.h
"

29 
	~"∑r£lib.h
"

30 
	~"swupd©e_£âögs.h
"

31 
	~"swupd©e_di˘.h
"

33 
	#INITIAL_STATUS_REPORT_WAIT_DELAY
 10

	)

35 
	#JSON_OBJECT_FREED
 1

	)

37 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

38 {"ã«¡", 
ªquúed_¨gumít
, 
NULL
, 't'},

39 {"id", 
ªquúed_¨gumít
, 
NULL
, 'i'},

40 {"c⁄fúm", 
ªquúed_¨gumít
, 
NULL
, 'c'},

41 {"uæ", 
ªquúed_¨gumít
, 
NULL
, 'u'},

42 {"pﬁldñay", 
ªquúed_¨gumít
, 
NULL
, 'p'},

43 {"nocheck˚π", 
no_¨gumít
, 
NULL
, 'x'},

44 {"ªåy", 
ªquúed_¨gumít
, 
NULL
, 'r'},

45 {"ªåywaô", 
ªquúed_¨gumít
, 
NULL
, 'w'},

46 {"¥oxy", 
›ti⁄Æ_¨gumít
, 
NULL
, 'y'},

47 {"èrgëtokí", 
ªquúed_¨gumít
, 
NULL
, 'k'},

48 {"g©ewaytokí", 
ªquúed_¨gumít
, 
NULL
, 'g'},

49 {
NULL
, 0, NULL, 0}};

51 
	gm™d©‹y_¨gumít_cou¡
 = 0;

57 c⁄° *
	gexecuti⁄_vÆues
[] = { "˛o£d", "¥o˚edög", "ˇn˚Àd","scheduÀd", "ªje˘ed", "ªsumed", 
NULL
 };

58 c⁄° *
	gföished_vÆues
[] = { "suc˚ss", "Áûuª", "n⁄e", 
NULL
};

61 c⁄° *
	mkey
;

62 c⁄° **
	mvÆues
;

63 } 
	thawkbô_íums_t
;

65 
hawkbô_íums_t
 
	ghawkbô_íums
[] = {

66 { "executi⁄", 
executi⁄_vÆues
 },

67 { "föished", 
föished_vÆues
 },

68 { 
NULL
, NULL },

75 
	#TENANT_BIT
 1

	)

76 
	#ID_BIT
 2

	)

77 
	#URL_BIT
 4

	)

78 
	#ALL_MANDATORY_SET
 (
TENANT_BIT
 | 
ID_BIT
 | 
URL_BIT
)

	)

81 
ch™√l_›_ªs_t
 
ch™√l_cuæ_öô
();

84 
£rvî_›_ªs_t
 
£rvî_h™dÀ_öôül_°©e
(
upd©e_°©e_t
 
°©eovºd
);

85 
£rvî_upd©e_°©us_ˇŒback
(
ùc_mesßge
 *
msg
);

86 
£rvî_upd©e_d⁄e_ˇŒback
(
RECOVERY_STATUS
 
°©us
);

87 
£rvî_›_ªs_t
 
£rvî_¥o˚ss_upd©e_¨tiÁ˘
(
a˘i⁄_id
,

88 
js⁄_obje˘
 *
js⁄_d©a_¨tiÁ˘
,

89 c⁄° *
upd©e_a˘i⁄
,

90 c⁄° *
∑π
,

91 c⁄° *
vîsi⁄
,

92 c⁄° *
«me
);

93 
£rvî_¥öt_hñp
();

94 
£rvî_›_ªs_t
 
£rvî_£t_pﬁlög_öãrvÆ
(
js⁄_obje˘
 *
js⁄_roŸ
);

95 
£rvî_›_ªs_t
 
£rvî_£t_c⁄fig_d©a
(
js⁄_obje˘
 *
js⁄_roŸ
);

96 
£rvî_›_ªs_t


97 
£rvî_£nd_dïloymít_ª∂y
(c⁄° 
a˘i⁄_id
, c⁄° 
job_˙t_max
,

98 c⁄° 
job_˙t_cur
, c⁄° *
föished
,

99 c⁄° *
executi⁄_°©us
, 
numdëaûs
, c⁄° *
dëaûs
[]);

100 
£rvî_›_ªs_t
 
£rvî_£nd_ˇn˚l_ª∂y
(
ch™√l_t
 *
ch™√l
, c⁄° 
a˘i⁄_id
);

101 
gë_èrgë_d©a_Àngth
();

103 
£rvî_hawkbô_t
 
	g£rvî_hawkbô
 = {.
uæ
 = 
NULL
,

104 .
	gpﬁlög_öãrvÆ
 = 
CHANNEL_DEFAULT_POLLING_INTERVAL
,

105 .
	gpﬁlög_öãrvÆ_‰om_£rvî
 = 
åue
,

106 .
	gdebug
 = 
Ál£
,

107 .
	gdevi˚_id
 = 
NULL
,

108 .
	gã«¡
 = 
NULL
,

109 .
	gˇn˚l_uæ
 = 
NULL
,

110 .
	gupd©e_a˘i⁄
 = 
NULL
,

111 .
	gch™√l
 = 
NULL
};

113 
ch™√l_d©a_t
 
	gch™√l_d©a_deÁu…s
 = {.
debug
 = 
Ál£
,

114 .
	gsour˚
 = 
SOURCE_SURICATTA
,

115 .
	gªåõs
 = 
CHANNEL_DEFAULT_RESUME_TRIES
,

116 .
	gªåy_¶ìp
 =

117 
CHANNEL_DEFAULT_RESUME_DELAY
,

118 #ifde‡
CONFIG_SURICATTA_SSL


119 .
	gu£s¶
 = 
åue
,

121 .
	gf‹m©
 = 
CHANNEL_PARSE_JSON
,

122 .
	gnocheck™swî
 = 
Ál£
,

123 .
	gnofﬁlow
 = 
Ál£
,

124 .
	g°ri˘s¶
 = 
åue
};

126 
timevÆ
 
	g£rvî_time
;

129 
£rvî_›_ªs_t
 
£rvî_has_≥ndög_a˘i⁄
(*
a˘i⁄_id
);

130 
£rvî_›_ªs_t
 
£rvî_°›
();

131 
£rvî_›_ªs_t
 
£rvî_ùc
(
fd
);

132 
£rvî_›_ªs_t
 
£rvî_°¨t
(*
‚ame
, 
¨gc
, *
¨gv
[]);

133 
£rvî_›_ªs_t
 
£rvî_ö°Æl_upd©e
();

134 
£rvî_›_ªs_t
 
£rvî_£nd_èrgë_d©a
();

135 
£rvî_gë_pﬁlög_öãrvÆ
();

140 
ölöe
 
	$£rvî_hakwbô_£âokí
(c⁄° *
ty≥
, c⁄° *
tokí
)

142 *
tokís_hódî
 = 
NULL
;

143 i‡(!
tokí
)

146 i‡(
ENOMEM_ASPRINTF
 ==

147 
	`a•rötf
(&
tokís_hódî
, "Auth‹iz©i⁄: %†%s", 
ty≥
, 
tokí
)) {

148 
	`ERROR
("OOM whí sëtög %s.", 
ty≥
);

151 i‡(
tokís_hódî
 !
NULL
 && 
	`°æí
(tokens_header))

152 
	`SETSTRING
(
ch™√l_d©a_deÁu…s
.
hódî
, 
tokís_hódî
);

153 
	}
}

160 
ölöe
 
	$£rvî_hawkbô_îr‹
(c⁄° *
s
)

162 
˙t
 = 
£rvî_hawkbô
.
îr‹˙t
;

164 i‡((
s
) &&

165 (
˙t
 < 
HAWKBIT_MAX_REPORTED_ERRORS
)) {

166 
£rvî_hawkbô
.
îr‹s
[
˙t
] = 
	`°rdup
(
s
);

167 i‡(
£rvî_hawkbô
.
îr‹s
[
˙t
])

168 
£rvî_hawkbô
.
îr‹˙t
++;

174 
	`ERROR
("%s", 
s
);

175 
	}
}

177 
boﬁ
 
	$hawkbô_íum_check
(c⁄° *
key
, c⁄° *
vÆue
)

179 
hawkbô_íums_t
 *
èbÀ
 = 
hawkbô_íums
;

180 c⁄° **
vÆues
;

182 
èbÀ
->
key
) {

183 i‡(!
	`°rcmp
(
key
, 
èbÀ
->key)) {

184 
vÆues
 = 
èbÀ
->values;

185 *
vÆues
 !
NULL
) {

186 i‡(!
	`°rcmp
(
vÆue
, *
vÆues
))

187  
åue
;

188 
vÆues
++;

191  
Ál£
;

193 
èbÀ
++;

195  
Ál£
;

196 
	}
}

198 c⁄° *
	$js⁄_gë_dïloymít_upd©e_a˘i⁄
(
js⁄_obje˘
 *
js⁄_ª∂y
)

200 i‡(!
js⁄_ª∂y
)

201  
NULL
;

203 
js⁄_obje˘
 *
js⁄_dïloymít_upd©e_a˘i⁄
 =

204 
	`js⁄_gë_∑th_key
(
js⁄_ª∂y
,

205 (c⁄° *[]){"dïloymít", "upd©e", 
NULL
});

206 
	`as£π
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_dïloymít_upd©e_a˘i⁄
) ==

207 
js⁄_ty≥_°rög
);

208 i‡(!
	`js⁄_obje˘_gë_°rög
(
js⁄_dïloymít_upd©e_a˘i⁄
)) {

209 
	`ERROR
("Server deliveredÉmpty 'update', skipping..");

210  
dïloymít_upd©e_a˘i⁄
.
skù
;

213 i‡(
	`°∫cmp
(
	`js⁄_obje˘_gë_°rög
(
js⁄_dïloymít_upd©e_a˘i⁄
),

214 
dïloymít_upd©e_a˘i⁄
.
f‹˚d
,

215 
	`°æí
(
dïloymít_upd©e_a˘i⁄
.
f‹˚d
)) == 0) {

216  
dïloymít_upd©e_a˘i⁄
.
f‹˚d
;

218 i‡(
	`°∫cmp
(
	`js⁄_obje˘_gë_°rög
(
js⁄_dïloymít_upd©e_a˘i⁄
),

219 
dïloymít_upd©e_a˘i⁄
.
©ãm±
,

220 
	`°æí
(
dïloymít_upd©e_a˘i⁄
.
©ãm±
)) == 0) {

221  
dïloymít_upd©e_a˘i⁄
.
©ãm±
;

223 i‡(
	`°∫cmp
(
	`js⁄_obje˘_gë_°rög
(
js⁄_dïloymít_upd©e_a˘i⁄
),

224 
dïloymít_upd©e_a˘i⁄
.
skù
,

225 
	`°æí
(
dïloymít_upd©e_a˘i⁄
.
skù
)) == 0) {

226  
dïloymít_upd©e_a˘i⁄
.
skù
;

228 
	`TRACE
("Server delivered unknown 'update' field, skipping..");

233  
dïloymít_upd©e_a˘i⁄
.
skù
;

234 
	}
}

236 
	$check_a˘i⁄_ch™ged
(
a˘i⁄_id
, c⁄° *
upd©e_a˘i⁄
)

239 i‡(!
upd©e_a˘i⁄
)

242 i‡(
upd©e_a˘i⁄
 !
£rvî_hawkbô
.update_action) {

243 *
nŸifybuf
 = 
NULL
;

244 
£rvî_hawkbô
.
upd©e_a˘i⁄
 = update_action;

245 
	`INFO
("Update classifiedás '%s' by server.",

246 
£rvî_hawkbô
.
upd©e_a˘i⁄
);

248 i‡(
ENOMEM_ASPRINTF
 ==

249 
	`a•rötf
(&
nŸifybuf
, "{ \"id\" : \"%d\", \"update\" : \"%s\"}",

250 
a˘i⁄_id
, 
£rvî_hawkbô
.
upd©e_a˘i⁄
)) {

251 
	`nŸify
(
SUBPROCESS
, 
CHANGE
, 
DEBUGLEVEL
, "UpdateÅype changed by server");

253 
	`nŸify
(
SUBPROCESS
, 
CHANGE
, 
DEBUGLEVEL
, 
nŸifybuf
);

254 
	`‰ì
(
nŸifybuf
);

257 
	}
}

259 
£rvî_›_ªs_t
 
	$£rvî_£nd_ˇn˚l_ª∂y
(
ch™√l_t
 *
ch™√l
, c⁄° 
a˘i⁄_id
)

261 
	`as£π
(
£rvî_hawkbô
.
uæ
 !
NULL
);

262 
	`as£π
(
£rvî_hawkbô
.
ã«¡
 !
NULL
);

263 
	`as£π
(
£rvî_hawkbô
.
devi˚_id
 !
NULL
);

266 
ch™√l_d©a_t
 
ch™√l_d©a_ª∂y
 = 
ch™√l_d©a_deÁu…s
;

267 
°›_id
 = 
£rvî_hawkbô
.stop_id;

270 c⁄° * c⁄° 
js⁄_hawkbô_ˇn˚œti⁄_„edback
 = 
	`STRINGIFY
(

272 "id": %
d
,

284 
£rvî_›_ªs_t
 
ªsu…
 = 
SERVER_OK
;

285 *
uæ
 = 
NULL
;

286 *
js⁄_ª∂y_°rög
 = 
NULL
;

288 i‡(
ENOMEM_ASPRINTF
 ==

289 
	`a•rötf
(&
uæ
, "%s/feedback",

290 
£rvî_hawkbô
.
ˇn˚l_uæ
)) {

291 
	`ERROR
("hawkBit serverÑeply cannot be sent because of OOM.");

292 
ªsu…
 = 
SERVER_EINIT
;

293 
˛ónup
;

296 
fd©e
[15 + 1];

297 
time_t
 
now
 = 
	`time
(
NULL
) == (time_t)-1 ? 0 :Åime(NULL);

298 ()
	`°r·ime
(
fd©e
, (fd©e), "%Y%m%dT%H%M%S", 
	`loˇ…ime
(&
now
));

299 i‡(
ENOMEM_ASPRINTF
 ==

300 
	`a•rötf
(&
js⁄_ª∂y_°rög
, 
js⁄_hawkbô_ˇn˚œti⁄_„edback
,

301 
°›_id
, 
fd©e
, 
ª∂y_°©us_ªsu…_föished
.
suc˚ss
,

302 
ª∂y_°©us_executi⁄
.
˛o£d
,

304 
	`ERROR
("hawkBit serverÑeply cannot be sent because of OOM.");

305 
ªsu…
 = 
SERVER_EINIT
;

306 
˛ónup
;

308 
ch™√l_d©a_ª∂y
.
uæ
 = url;

309 
ch™√l_d©a_ª∂y
.
ªque°_body
 = 
js⁄_ª∂y_°rög
;

310 
ch™√l_d©a_ª∂y
.
mëhod
 = 
CHANNEL_POST
;

311 
ªsu…
 = 
	`m≠_ch™√l_ªtcode
(
ch™√l
->
	`put
(ch™√l, (*)&
ch™√l_d©a_ª∂y
));

313 
˛ónup
:

314 i‡(
uæ
 !
NULL
) {

315 
	`‰ì
(
uæ
);

317 i‡(
js⁄_ª∂y_°rög
 !
NULL
) {

318 
	`‰ì
(
js⁄_ª∂y_°rög
);

320 i‡(
ch™√l_d©a_ª∂y
.
js⁄_ª∂y
 !
NULL
 &&

321 
	`js⁄_obje˘_put
(
ch™√l_d©a_ª∂y
.
js⁄_ª∂y
) !=

322 
JSON_OBJECT_FREED
) {

323 
	`ERROR
("JSON object should be freed but wasÇot.");

329 *
nŸifybuf
 = 
NULL
;

330 i‡(
ENOMEM_ASPRINTF
 ==

331 
	`a•rötf
(&
nŸifybuf
, "{ \"id\" : \"%d\", \"stopId\" : \"%d\"}",

332 
a˘i⁄_id
, 
°›_id
)) {

333 
	`nŸify
(
SUBPROCESS
, 
CANCELUPDATE
, 
INFOLEVEL
, "Update cancelled");

335 
	`nŸify
(
SUBPROCESS
, 
CANCELUPDATE
, 
INFOLEVEL
, 
nŸifybuf
);

336 
	`‰ì
(
nŸifybuf
);

339  
ªsu…
;

340 
	}
}

342 *
	$£rvî_¸óã_dëaûs
(
numdëaûs
, c⁄° *
dëaûs
[])

344 
i
, 
ªt
;

345 *
¥ev
 = 
NULL
;

346 *
√xt
 = 
NULL
;

348 
i
 = 0; i < 
numdëaûs
; i++) {

349 
	`TRACE
("Dëaû %d %s", 
i
, 
dëaûs
[i]);

350 i‡(
i
 == 0) {

351 
ªt
 = 
	`a•rötf
(&
√xt
, "\"%s\"", 
dëaûs
[
i
]);

353 
ªt
 = 
	`a•rötf
(&
√xt
, "%s,\"%s\"", 
¥ev
, 
dëaûs
[
i
]);

354 
	`‰ì
(
¥ev
);

356 i‡(
ªt
 =
ENOMEM_ASPRINTF
)

357  
NULL
;

358 
¥ev
 = 
√xt
;

361 
	`TRACE
("FöÆ dëaûs: %s", 
√xt
);

363  
√xt
;

364 
	}
}

366 
£rvî_›_ªs_t


367 
	$£rvî_£nd_dïloymít_ª∂y
(c⁄° 
a˘i⁄_id
, c⁄° 
job_˙t_max
,

368 c⁄° 
job_˙t_cur
, c⁄° *
föished
,

369 c⁄° *
executi⁄_°©us
, 
numdëaûs
, c⁄° *
dëaûs
[])

371 
ch™√l_t
 *
ch™√l
 = 
£rvî_hawkbô
.channel;

372 
	`as£π
(
ch™√l
 !
NULL
);

373 
	`as£π
(
föished
 !
NULL
);

374 
	`as£π
(
executi⁄_°©us
 !
NULL
);

375 
	`as£π
(
dëaûs
 !
NULL
);

376 
	`as£π
(
£rvî_hawkbô
.
uæ
 !
NULL
);

377 
	`as£π
(
£rvî_hawkbô
.
ã«¡
 !
NULL
);

378 
	`as£π
(
£rvî_hawkbô
.
devi˚_id
 !
NULL
);

380 *
dëaû
 = 
	`£rvî_¸óã_dëaûs
(
numdëaûs
, 
dëaûs
);

382 
	`TRACE
("Reporting InstallationÖrogress for ID %d: %s / %s / %s",

383 
a˘i⁄_id
, 
föished
, 
executi⁄_°©us
, 
dëaû
);

385 c⁄° * c⁄° 
js⁄_hawkbô_dïloymít_„edback
 = 
	`STRINGIFY
(

387 "id": %
d
,

392 "˙t" : %
d
,

393 "of" : %
d


398 "dëaûs" : [ %
s
 ]

403 
ch™√l_d©a_t
 
ch™√l_d©a
 = 
ch™√l_d©a_deÁu…s
;

404 
£rvî_›_ªs_t
 
ªsu…
 = 
SERVER_OK
;

405 *
uæ
 = 
NULL
;

406 *
js⁄_ª∂y_°rög
 = 
NULL
;

407 
fd©e
[15 + 1];

408 
time_t
 
now
 = 
	`time
(
NULL
) == (time_t)-1 ? 0 :Åime(NULL);

409 ()
	`°r·ime
(
fd©e
, (fd©e), "%Y%m%dT%H%M%S", 
	`loˇ…ime
(&
now
));

410 i‡(
ENOMEM_ASPRINTF
 ==

411 
	`a•rötf
(&
js⁄_ª∂y_°rög
, 
js⁄_hawkbô_dïloymít_„edback
,

412 
a˘i⁄_id
, 
fd©e
, 
job_˙t_cur
, 
job_˙t_max
, 
föished
,

413 
executi⁄_°©us
, 
dëaû
 ? detail : " ")) {

414 
	`ERROR
("hawkBit serverÑeply cannot be sent because of OOM.");

415 
ªsu…
 = 
SERVER_EINIT
;

416 
˛ónup
;

418 i‡(
ENOMEM_ASPRINTF
 ==

419 
	`a•rötf
(&
uæ
, "%s/%s/controller/v1/%s/deploymentBase/%d/feedback",

420 
£rvî_hawkbô
.
uæ
, sîvî_hawkbô.
ã«¡
,

421 
£rvî_hawkbô
.
devi˚_id
, 
a˘i⁄_id
)) {

422 
	`ERROR
("hawkBit serverÑeply cannot be sent because of OOM.");

423 
ªsu…
 = 
SERVER_EINIT
;

424 
˛ónup
;

426 
ch™√l_d©a
.
uæ
 = url;

427 
ch™√l_d©a
.
ªque°_body
 = 
js⁄_ª∂y_°rög
;

428 
	`TRACE
("PUTögÅÿ%s: %s", 
ch™√l_d©a
.
uæ
, ch™√l_d©a.
ªque°_body
);

429 
ch™√l_d©a
.
mëhod
 = 
CHANNEL_POST
;

430 
ªsu…
 = 
	`m≠_ch™√l_ªtcode
(
ch™√l
->
	`put
(ch™√l, (*)&
ch™√l_d©a
));

432 
˛ónup
:

433 i‡(
dëaû
 !
NULL
)

434 
	`‰ì
(
dëaû
);

435 i‡(
uæ
 !
NULL
) {

436 
	`‰ì
(
uæ
);

438 i‡(
js⁄_ª∂y_°rög
 !
NULL
) {

439 
	`‰ì
(
js⁄_ª∂y_°rög
);

441 i‡(
ch™√l_d©a
.
js⁄_ª∂y
 !
NULL
 &&

442 
	`js⁄_obje˘_put
(
ch™√l_d©a
.
js⁄_ª∂y
Ë!
JSON_OBJECT_FREED
) {

443 
	`ERROR
("JSON object should be freed but wasÇot.");

445  
ªsu…
;

446 
	}
}

448 
£rvî_›_ªs_t
 
	$£rvî_£t_pﬁlög_öãrvÆ
(
js⁄_obje˘
 *
js⁄_roŸ
)

454 i‡(!
£rvî_hawkbô
.
pﬁlög_öãrvÆ_‰om_£rvî
)

455  
SERVER_OK
;

457 
js⁄_obje˘
 *
js⁄_d©a
 = 
	`js⁄_gë_∑th_key
(

458 
js⁄_roŸ
, (c⁄° *[]){"c⁄fig", "pﬁlög", "¶ìp", 
NULL
});

459 i‡(
js⁄_d©a
 =
NULL
) {

460 
	`ERROR
("Got malformed JSON: CouldÇot find field "

462 
	`DEBUG
("GŸ JSON: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
js⁄_d©a
));

463  
SERVER_EBADMSG
;

465 
tm
 
timed©e
;

466 i‡(
	`°Ωtime
(
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a
), "%H:%M:%S",

467 &
timed©e
Ë=
NULL
) {

468 
	`ERROR
("Got malformed JSON: CouldÇot convert field "

470 
	`DEBUG
("GŸ JSON: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
js⁄_d©a
));

471  
SERVER_EBADMSG
;

473 
pﬁlög_öãrvÆ
 =

474 ()(
	`abs
(
timed©e
.
tm_£c
Ë+ (abs—imed©e.
tm_mö
) * 60) +

475 (
	`abs
(
timed©e
.
tm_hour
) * 60 * 60));

482 i‡(
£rvî_hawkbô
.
upd©e_°©e
 =
STATE_WAIT
)

483 
pﬁlög_öãrvÆ
 /= 10;

485 
£rvî_hawkbô
.
pﬁlög_öãrvÆ
 =

486 
pﬁlög_öãrvÆ
 =0 ? 
CHANNEL_DEFAULT_POLLING_INTERVAL
 :Öolling_interval;

487 
	`DEBUG
("SetÖolling intervalÅo %dsásánnounced by server.",

488 
£rvî_hawkbô
.
pﬁlög_öãrvÆ
);

489  
SERVER_OK
;

490 
	}
}

492 
	$£rvî_gë_pﬁlög_öãrvÆ
()

494  
£rvî_hawkbô
.
pﬁlög_öãrvÆ
;

495 
	}
}

497 
	$£rvî_gë_cuºít_time
(
timevÆ
 *
tv
)

499 
time•ec
 
ts
;

502 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

504 
	`TIMESPEC_TO_TIMEVAL
(
tv
, &
ts
);

505 
	}
}

507 
£rvî_›_ªs_t
 
	$£rvî_£t_c⁄fig_d©a
(
js⁄_obje˘
 *
js⁄_roŸ
)

509 *
tmp
;

511 
tmp
 = 
	`js⁄_gë_d©a_uæ
(
js⁄_roŸ
, "configData");

513 i‡(
tmp
 !
NULL
) {

514 i‡(
£rvî_hawkbô
.
c⁄figD©a_uæ
)

515 
	`‰ì
(
£rvî_hawkbô
.
c⁄figD©a_uæ
);

516 
£rvî_hawkbô
.
c⁄figD©a_uæ
 = 
tmp
;

517 
£rvî_hawkbô
.
has_to_£nd_c⁄figD©a
 = (
	`gë_èrgë_d©a_Àngth
(Ë> 0Ë? 
åue
 : 
Ál£
;

518 
	`TRACE
("C⁄figD©a: %s", 
£rvî_hawkbô
.
c⁄figD©a_uæ
);

520  
SERVER_OK
;

521 
	}
}

523 
£rvî_›_ªs_t
 
	$£rvî_gë_devi˚_öfo
(
ch™√l_t
 *
ch™√l
, 
ch™√l_d©a_t
 *
ch™√l_d©a
)

525 
	`as£π
(
ch™√l
 !
NULL
);

526 
	`as£π
(
ch™√l_d©a
 !
NULL
);

527 
	`as£π
(
£rvî_hawkbô
.
uæ
 !
NULL
);

528 
	`as£π
(
£rvî_hawkbô
.
ã«¡
 !
NULL
);

529 
	`as£π
(
£rvî_hawkbô
.
devi˚_id
 !
NULL
);

530 
	`DEBUG
("Getting information for device '%s'",

531 
£rvî_hawkbô
.
devi˚_id
);

532 
£rvî_›_ªs_t
 
ªsu…
 = 
SERVER_OK
;

533 i‡(
ENOMEM_ASPRINTF
 ==

534 
	`a•rötf
(&
ch™√l_d©a
->
uæ
, "%s/%s/controller/v1/%s",

535 
£rvî_hawkbô
.
uæ
, sîvî_hawkbô.
ã«¡
,

536 
£rvî_hawkbô
.
devi˚_id
)) {

537 
	`ERROR
("hawkBit server cannot be queried because of OOM.");

538 
ªsu…
 = 
SERVER_EINIT
;

539 
˛ónup
;

541 i‡((
ªsu…
 = 
	`m≠_ch™√l_ªtcode
(
ch™√l
->
	`gë
(ch™√l, (*)
ch™√l_d©a
))) !=

542 
SERVER_OK
) {

543 
˛ónup
;

545 i‡((
ªsu…
 = 
	`£rvî_£t_pﬁlög_öãrvÆ
(
ch™√l_d©a
->
js⁄_ª∂y
)) !=

546 
SERVER_OK
) {

547 
˛ónup
;

550 i‡((
ªsu…
 = 
	`£rvî_£t_c⁄fig_d©a
(
ch™√l_d©a
->
js⁄_ª∂y
)) !=

551 
SERVER_OK
) {

552 
˛ónup
;

555 
˛ónup
:

556 i‡(
ch™√l_d©a
->
uæ
 !
NULL
) {

557 
	`‰ì
(
ch™√l_d©a
->
uæ
);

559  
ªsu…
;

560 
	}
}

562 
£rvî_›_ªs_t
 
	$£rvî_gë_dïloymít_öfo
(
ch™√l_t
 *
ch™√l
, 
ch™√l_d©a_t
 *
ch™√l_d©a
,

563 *
a˘i⁄_id
)

565 
	`as£π
(
ch™√l
 !
NULL
);

566 
	`as£π
(
ch™√l_d©a
 !
NULL
);

567 
	`as£π
(
a˘i⁄_id
 !
NULL
);

568 
£rvî_›_ªs_t
 
upd©e_°©us
 = 
SERVER_OK
;

569 
£rvî_›_ªs_t
 
ªsu…
 = 
SERVER_OK
;

570 *
uæ_dïloymít_ba£
 = 
NULL
;

571 *
uæ_ˇn˚l
 = 
NULL
;

572 
ch™√l_d©a_t
 
ch™√l_d©a_devi˚_öfo
 = 
ch™√l_d©a_deÁu…s
;

573 i‡((
ªsu…
 = 
	`£rvî_gë_devi˚_öfo
(
ch™√l
, &
ch™√l_d©a_devi˚_öfo
)) !=

574 
SERVER_OK
) {

575 
˛ónup
;

577 i‡((
uæ_ˇn˚l
 = 
	`js⁄_gë_d©a_uæ
(
ch™√l_d©a_devi˚_öfo
.
js⁄_ª∂y
,

578 "ˇn˚lA˘i⁄")Ë!
NULL
) {

579 
upd©e_°©us
 = 
SERVER_UPDATE_CANCELED
;

580 
ch™√l_d©a
->
uæ
 = 
uæ_ˇn˚l
;

581 i‡(
£rvî_hawkbô
.
ˇn˚l_uæ
)

582 
	`‰ì
(
£rvî_hawkbô
.
ˇn˚l_uæ
);

583 
£rvî_hawkbô
.
ˇn˚l_uæ
 = 
	`°rdup
(
uæ_ˇn˚l
);

584 
	`TRACE
("C™˚»a˘i⁄ávaûabÀáà%s", 
uæ_ˇn˚l
);

585 } i‡((
uæ_dïloymít_ba£
 =

586 
	`js⁄_gë_d©a_uæ
(
ch™√l_d©a_devi˚_öfo
.
js⁄_ª∂y
,

587 "dïloymítBa£")Ë!
NULL
) {

588 
upd©e_°©us
 = 
SERVER_UPDATE_AVAILABLE
;

589 
ch™√l_d©a
->
uæ
 = 
uæ_dïloymít_ba£
;

590 
	`TRACE
("Upd©êa˘i⁄ávaûabÀáà%s", 
uæ_dïloymít_ba£
);

592 
	`TRACE
("NoÖendingáction on server.");

593 
ªsu…
 = 
SERVER_NO_UPDATE_AVAILABLE
;

594 
˛ónup
;

596 i‡((
ªsu…
 = 
	`m≠_ch™√l_ªtcode
(
ch™√l
->
	`gë
(ch™√l, (*)
ch™√l_d©a
))) !=

597 
SERVER_OK
) {

598 
˛ónup
;

600 
js⁄_obje˘
 *
js⁄_d©a
 = 
	`js⁄_gë_∑th_key
(

601 
ch™√l_d©a
->
js⁄_ª∂y
, (c⁄° *[]){"id", 
NULL
});

602 i‡(
js⁄_d©a
 =
NULL
) {

603 
	`ERROR
("Got malformed JSON: CouldÇot find field 'id'.");

604 
	`DEBUG
("Got JSON: %s",

605 
	`js⁄_obje˘_to_js⁄_°rög
(
ch™√l_d©a
->
js⁄_ª∂y
));

606 
ªsu…
 = 
SERVER_EBADMSG
;

607 
˛ónup
;

609 *
a˘i⁄_id
 = 
	`js⁄_obje˘_gë_öt
(
js⁄_d©a
);

614 
£rvî_hawkbô
.
°›_id
 = *
a˘i⁄_id
;

615 i‡(
upd©e_°©us
 =
SERVER_UPDATE_CANCELED
) {

616 
js⁄_d©a
 = 
	`js⁄_gë_∑th_key
(

617 
ch™√l_d©a
->
js⁄_ª∂y
, (c⁄° *[]){"ˇn˚lA˘i⁄", "°›Id", 
NULL
});

618 i‡(
js⁄_d©a
 =
NULL
) {

619 
	`ERROR
("Got malformed JSON: CouldÇot find field 'stopId',ÑeuseáctionId.");

620 
	`DEBUG
("Got JSON: %s",

621 
	`js⁄_obje˘_to_js⁄_°rög
(
ch™√l_d©a
->
js⁄_ª∂y
));

623 
£rvî_hawkbô
.
°›_id
 = 
	`js⁄_obje˘_gë_öt
(
js⁄_d©a
);

626 
	`TRACE
("Assocüãd A˘i⁄ ID f‹ Upd©êA˘i⁄ i†%d", *
a˘i⁄_id
);

627 
ªsu…
 = 
upd©e_°©us
 =
SERVER_OK
 ?Ñesult : update_status;

629 
˛ónup
:

630 i‡(
ch™√l_d©a_devi˚_öfo
.
js⁄_ª∂y
 !
NULL
 &&

631 
	`js⁄_obje˘_put
(
ch™√l_d©a_devi˚_öfo
.
js⁄_ª∂y
) !=

632 
JSON_OBJECT_FREED
) {

633 
	`ERROR
("JSON object should be freed but wasÇot.");

635 i‡(
uæ_ˇn˚l
 !
NULL
) {

636 
	`‰ì
(
uæ_ˇn˚l
);

638 i‡(
uæ_dïloymít_ba£
 !
NULL
) {

639 
	`‰ì
(
uæ_dïloymít_ba£
);

641  
ªsu…
;

642 
	}
}

644 
	$£rvî_check_durög_dwl
()

646 
timevÆ
 
now
;

647 
ch™√l_d©a_t
 
ch™√l_d©a
 = 
ch™√l_d©a_deÁu…s
;

648 
a˘i⁄_id
;

649 
ªt
 = 0;

650 c⁄° *
upd©e_a˘i⁄
;

652 
	`£rvî_gë_cuºít_time
(&
now
);

660 i‡((
now
.
tv_£c
 - 
£rvî_time
.tv_£cË< (()
	`£rvî_gë_pﬁlög_öãrvÆ
()))

664 
£rvî_time
 = 
now
;

670 
ch™√l_t
 *
ch™√l
 = 
	`ch™√l_√w
();

672 i‡(
ch™√l
->
	`›í
(ch™√l, &
ch™√l_d©a_deÁu…s
Ë!
CHANNEL_OK
) {

677 
	`‰ì
(
ch™√l
);

684 
£rvî_›_ªs_t
 
ªsu…
 =

685 
	`£rvî_gë_dïloymít_öfo
(
ch™√l
, &
ch™√l_d©a
, &
a˘i⁄_id
);

686 i‡(
ªsu…
 =
SERVER_UPDATE_CANCELED
) {

688 
£rvî_hawkbô
.
ˇn˚lDurögUpd©e
 = 
åue
;

689 
ªt
 = -1;

691 
upd©e_a˘i⁄
 = 
	`js⁄_gë_dïloymít_upd©e_a˘i⁄
(
ch™√l_d©a
.
js⁄_ª∂y
);

694 i‡(
upd©e_a˘i⁄
 =
dïloymít_upd©e_a˘i⁄
.
skù
)

695 
ªt
 = -1;

697 
	`check_a˘i⁄_ch™ged
(
a˘i⁄_id
, 
upd©e_a˘i⁄
);

700 i‡(
ch™√l_d©a
.
js⁄_ª∂y
 !
NULL
 &&

701 
	`js⁄_obje˘_put
(
ch™√l_d©a
.
js⁄_ª∂y
Ë!
JSON_OBJECT_FREED
) {

702 
	`ERROR
("JSON object should be freed but wasÇot.");

704 
ch™√l
->
	`˛o£
(channel);

705 
	`‰ì
(
ch™√l
);

707  
ªt
;

708 
	}
}

710 
£rvî_›_ªs_t
 
	$£rvî_has_≥ndög_a˘i⁄
(*
a˘i⁄_id
)

713 
ch™√l_d©a_t
 
ch™√l_d©a
 = 
ch™√l_d©a_deÁu…s
;

714 c⁄° *
upd©e_a˘i⁄
 = 
NULL
;

715 
£rvî_›_ªs_t
 
ªsu…
 =

716 
	`£rvî_gë_dïloymít_öfo
(
£rvî_hawkbô
.
ch™√l
,

717 &
ch™√l_d©a
, 
a˘i⁄_id
);

722 i‡(
ªsu…
 =
SERVER_UPDATE_AVAILABLE
) {

723 
upd©e_a˘i⁄
 = 
	`js⁄_gë_dïloymít_upd©e_a˘i⁄
(
ch™√l_d©a
.
js⁄_ª∂y
);

728 i‡(
ch™√l_d©a
.
js⁄_ª∂y
 !
NULL
 &&

729 
	`js⁄_obje˘_put
(
ch™√l_d©a
.
js⁄_ª∂y
Ë!
JSON_OBJECT_FREED
) {

730 
	`ERROR
("JSON object should be freed but wasÇot.");

732 i‡(
ªsu…
 =
SERVER_UPDATE_CANCELED
) {

733 
	`DEBUG
("Acknowledging cancelled update.");

734 ()
	`£rvî_£nd_ˇn˚l_ª∂y
(
£rvî_hawkbô
.
ch™√l
, *
a˘i⁄_id
);

736  
SERVER_OK
;

743 i‡(
£rvî_hawkbô
.
upd©e_°©e
 =
STATE_WAIT
) {

744  
SERVER_OK
;

751 i‡(
£rvî_hawkbô
.
has_to_£nd_c⁄figD©a
)

752  
SERVER_ID_REQUESTED
;

755 i‡((
ªsu…
 =
SERVER_UPDATE_AVAILABLE
) &&

756 (
	`gë_°©e
(Ë=
STATE_INSTALLED
)) {

757 
	`WARN
("Análready installed update isÖendingÅesting, "

759 
	`INFO
("PleaseÑestart SWUpdateÅoÑeportÅheÅestÑesults "

761 
	`check_a˘i⁄_ch™ged
(*
a˘i⁄_id
, 
upd©e_a˘i⁄
);

762 
ªsu…
 = 
SERVER_NO_UPDATE_AVAILABLE
;

765  
ªsu…
;

766 
	}
}

768 
	$add_dëaû_îr‹
(c⁄° *
s
)

770 
˙t
 = 
£rvî_hawkbô
.
îr‹˙t
;

772 i‡((
s
Ë&& (!
	`°∫cmp
(s, "ERROR", 5)) &&

773 (
˙t
 < 
HAWKBIT_MAX_REPORTED_ERRORS
)) {

775 
£rvî_hawkbô
.
îr‹s
[
˙t
] = 
	`°rdup
(
s
);

776 i‡(
£rvî_hawkbô
.
îr‹s
[
˙t
])

777 
£rvî_hawkbô
.
îr‹˙t
++;

779 
	}
}

781 
£rvî_›_ªs_t
 
	$h™dÀ_„edback
(
a˘i⁄_id
, 
£rvî_›_ªs_t
 
ªsu…
,

782 
upd©e_°©e_t
 
°©e
,

783 c⁄° *
ª∂y_ªsu…
,

784 c⁄° *
ª∂y_executi⁄
,

785 
numdëaûs
,

786 c⁄° *
dëaûs
[])

789 
ªsu…
) {

790 
SERVER_OK
:

791 
SERVER_ID_REQUESTED
:

792 
SERVER_UPDATE_CANCELED
:

793 
SERVER_NO_UPDATE_AVAILABLE
:

794 
	`TRACE
("Noáctive updateávailable,ÇothingÅoÑeportÅo "

796 i‡((
°©e
 !
STATE_OK
Ë&& (°©ê!
STATE_NOT_AVAILABLE
)) {

797 
	`WARN
("Persistent state=%c butÇoáctive update on "

799 
°©e
);

801  
SERVER_OK
;

802 
SERVER_EERR
:

803 
SERVER_EBADMSG
:

804 
SERVER_EINIT
:

805 
SERVER_EACCES
:

806 
SERVER_EAGAIN
:

807  
ªsu…
;

808 
SERVER_UPDATE_AVAILABLE
:

812 i‡(
	`£rvî_£nd_dïloymít_ª∂y
(
a˘i⁄_id
, 0, 0, 
ª∂y_ªsu…
,

813 
ª∂y_executi⁄
,

814 
numdëaûs
, 
dëaûs
Ë!
SERVER_OK
) {

815 
	`ERROR
("Error whileÑeporting installation statusÅo server.");

816  
SERVER_EAGAIN
;

819  
SERVER_UPDATE_AVAILABLE
;

820 
	}
}

823 
£rvî_›_ªs_t
 
	$£rvî_h™dÀ_öôül_°©e
(
upd©e_°©e_t
 
°©eovºd
)

825 
a˘i⁄_id
;

826 
upd©e_°©e_t
 
°©e
 = 
STATE_OK
;

827 i‡(
°©eovºd
 !
STATE_NOT_AVAILABLE
) {

828 
°©e
 = 
°©eovºd
;

829 
	`TRACE
("GŸ sèã=%¯‰om comm™dÜöe.", 
°©e
);

830 i‡(!
	`is_°©e_vÆid
(
°©e
)) {

831  
SERVER_EINIT
;

834 i‡((
°©e
 = 
	`gë_°©e
()Ë=
STATE_ERROR
) {

835  
SERVER_EINIT
;

839 c⁄° *
ª∂y_ªsu…
;

840 c⁄° *
ª∂y_executi⁄
;

841 c⁄° *
ª∂y_mesßge
;

842 
°©e
) {

843 
STATE_INSTALLED
:

844 
ª∂y_ªsu…
 = 
ª∂y_°©us_ªsu…_föished
.
n⁄e
;

845 
ª∂y_executi⁄
 = 
ª∂y_°©us_executi⁄
.
¥o˚edög
;

846 
ª∂y_mesßge
 = "Update Installed, Testing Pending.";

848 
STATE_TESTING
:

849 
ª∂y_ªsu…
 = 
ª∂y_°©us_ªsu…_föished
.
suc˚ss
;

850 
ª∂y_executi⁄
 = 
ª∂y_°©us_executi⁄
.
˛o£d
;

851 
ª∂y_mesßge
 = "Update Installed.";

853 
STATE_FAILED
:

854 
ª∂y_ªsu…
 = 
ª∂y_°©us_ªsu…_föished
.
Áûuª
;

855 
ª∂y_executi⁄
 = 
ª∂y_°©us_executi⁄
.
˛o£d
;

856 
ª∂y_mesßge
 = "Update Failed.";

858 
STATE_OK
:

859 
STATE_NOT_AVAILABLE
:

861 
	`DEBUG
("State is STATE_OK/STATE_NOT_AVAILABLE,ÇothingÅo "

863  
SERVER_OK
;

865 
£rvî_›_ªs_t
 
ªsu…
;

870 
ch™√l_d©a_t
 
ch™√l_d©a
 = 
ch™√l_d©a_deÁu…s
;

871 
ªsu…
 =

872 
	`£rvî_gë_dïloymít_öfo
(
£rvî_hawkbô
.
ch™√l
, &
ch™√l_d©a
, &
a˘i⁄_id
);

874 
ªsu…
 = 
	`h™dÀ_„edback
(
a˘i⁄_id
,Ñesu…, 
°©e
, 
ª∂y_ªsu…
,

875 
ª∂y_executi⁄
, 1, &
ª∂y_mesßge
);

877 i‡(
ªsu…
 !
SERVER_UPDATE_AVAILABLE
)

878  
ªsu…
;

883 i‡((
ªsu…
 = 
	`ßve_°©e
((*)
STATE_KEY
, 
STATE_OK
)Ë!
SERVER_OK
) {

884 
	`ERROR
("Error whileÑesetting update state onÖersistent "

886  
ªsu…
;

888  
SERVER_OK
;

889 
	}
}

891 
	$£rvî_upd©e_°©us_ˇŒback
(
ùc_mesßge
 *
msg
)

894 
	`add_dëaû_îr‹
(
msg
->
d©a
.
°©us
.
desc
);

897 
	}
}

899 
£rvî_›_ªs_t
 
	$£rvî_¥o˚ss_upd©e_¨tiÁ˘
(
a˘i⁄_id
,

900 
js⁄_obje˘
 *
js⁄_d©a_¨tiÁ˘
,

901 c⁄° *
upd©e_a˘i⁄
,

902 c⁄° *
∑π
,

903 c⁄° *
vîsi⁄
,

904 c⁄° *
«me
)

906 
ch™√l_t
 *
ch™√l
 = 
£rvî_hawkbô
.channel;

907 
	`as£π
(
ch™√l
 !
NULL
);

908 
	`as£π
(
js⁄_d©a_¨tiÁ˘
 !
NULL
);

909 
	`as£π
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_d©a_¨tiÁ˘
Ë=
js⁄_ty≥_¨øy
);

910 
£rvî_›_ªs_t
 
ªsu…
 = 
SERVER_OK
;

913 
i
 = 0; i < 
HAWKBIT_MAX_REPORTED_ERRORS
; i++)

914 
£rvî_hawkbô
.
îr‹s
[
i
] = 
NULL
;

915 
£rvî_hawkbô
.
îr‹˙t
 = 0;

917 
¨øy_li°
 *
js⁄_d©a_¨tiÁ˘_¨øy
 =

918 
	`js⁄_obje˘_gë_¨øy
(
js⁄_d©a_¨tiÁ˘
);

919 
js⁄_d©a_¨tiÁ˘_max
 =

920 
	`js⁄_obje˘_¨øy_Àngth
(
js⁄_d©a_¨tiÁ˘
);

921 
js⁄_d©a_¨tiÁ˘_ö°ÆÀd
 = 0;

922 
js⁄_obje˘
 *
js⁄_d©a_¨tiÁ˘_ôem
 = 
NULL
;

923 
js⁄_d©a_¨tiÁ˘_cou¡
 = 0;

924 
js⁄_d©a_¨tiÁ˘_cou¡
 < 
js⁄_d©a_¨tiÁ˘_max
;

925 
js⁄_d©a_¨tiÁ˘_cou¡
++) {

926 
js⁄_d©a_¨tiÁ˘_ôem
 = 
	`¨øy_li°_gë_idx
(

927 
js⁄_d©a_¨tiÁ˘_¨øy
, 
js⁄_d©a_¨tiÁ˘_cou¡
);

928 
	`TRACE
("Iterating over JSON, key=%s",

929 
	`js⁄_obje˘_to_js⁄_°rög
(
js⁄_d©a_¨tiÁ˘_ôem
));

930 
js⁄_obje˘
 *
js⁄_d©a_¨tiÁ˘_fûíame
 =

931 
	`js⁄_gë_∑th_key
(
js⁄_d©a_¨tiÁ˘_ôem
,

932 (c⁄° *[]){"fûíame", 
NULL
});

933 
js⁄_obje˘
 *
js⁄_d©a_¨tiÁ˘_sha1hash
 =

934 
	`js⁄_gë_∑th_key
(
js⁄_d©a_¨tiÁ˘_ôem
,

935 (c⁄° *[]){"hashes", "sha1", 
NULL
});

936 
js⁄_obje˘
 *
js⁄_d©a_¨tiÁ˘_size
 = 
	`js⁄_gë_∑th_key
(

937 
js⁄_d©a_¨tiÁ˘_ôem
, (c⁄° *[]){"size", 
NULL
});

942 
js⁄_obje˘
 *
js⁄_d©a_¨tiÁ˘_uæ_hâps
 = 
	`js⁄_gë_∑th_key
(

943 
js⁄_d©a_¨tiÁ˘_ôem
,

944 (c⁄° *[]){"_löks", "dow∆ﬂd", "hªf", 
NULL
});

945 
js⁄_obje˘
 *
js⁄_d©a_¨tiÁ˘_uæ_hâp
 = 
	`js⁄_gë_∑th_key
(

946 
js⁄_d©a_¨tiÁ˘_ôem
,

947 (c⁄° *[]){"_löks", "dow∆ﬂd-hâp", "hªf", 
NULL
});

948 #i‚de‡
CONFIG_SURICATTA_SSL


949 i‡(
js⁄_d©a_¨tiÁ˘_uæ_hâp
 =
NULL
) {

950 
	`£rvî_hawkbô_îr‹
("Noártifact download HTTP URLÑeported by "

952 
ªsu…
 = 
SERVER_EBADMSG
;

953 
˛ónup
;

957 
js⁄_obje˘
 *
js⁄_d©a_¨tiÁ˘_uæ
 =

958 
js⁄_d©a_¨tiÁ˘_uæ_hâps
 =
NULL


959 ? 
js⁄_d©a_¨tiÁ˘_uæ_hâp


960 : 
js⁄_d©a_¨tiÁ˘_uæ_hâps
;

961 i‡(
js⁄_d©a_¨tiÁ˘_uæ
 =
NULL
) {

962 
	`£rvî_hawkbô_îr‹
("Noártifact download URLÑeported by server.\n");

963 
ªsu…
 = 
SERVER_EBADMSG
;

964 
˛ónup
;

967 i‡(
js⁄_d©a_¨tiÁ˘_fûíame
 =
NULL
 ||

968 
js⁄_d©a_¨tiÁ˘_sha1hash
 =
NULL
 ||

969 
js⁄_d©a_¨tiÁ˘_size
 =
NULL
) {

970 
	`£rvî_hawkbô_îr‹
(

973 
	`DEBUG
("GŸ JSON: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(

974 
js⁄_d©a_¨tiÁ˘_ôem
));

975 
ªsu…
 = 
SERVER_EBADMSG
;

976 
˛ónup
;

978 
	`as£π
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_d©a_¨tiÁ˘_fûíame
) ==

979 
js⁄_ty≥_°rög
);

980 
	`as£π
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_d©a_¨tiÁ˘_sha1hash
) ==

981 
js⁄_ty≥_°rög
);

982 
	`as£π
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_d©a_¨tiÁ˘_size
) ==

983 
js⁄_ty≥_öt
);

984 
	`as£π
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_d©a_¨tiÁ˘_uæ
) ==

985 
js⁄_ty≥_°rög
);

991 c⁄° *
s
 = 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_¨tiÁ˘_fûíame
);

992 
ídfûíame
 = 
	`°æí
(
s
) - strlen(".swu");

993 i‡(
ídfûíame
 <= 0 ||

994 
	`°∫cmp
(&
s
[
ídfûíame
], ".swu", 4)) {

995 
	`DEBUG
("Fûê'%s' i†nŸá SWU image, skùpög", 
s
);

999 
	`DEBUG
("Processing '%s' from '%s'",

1000 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_¨tiÁ˘_fûíame
),

1001 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_¨tiÁ˘_uæ
));

1003 *
fûíame
 = 
NULL
;

1004 
ch™√l_d©a_t
 
ch™√l_d©a
 = 
ch™√l_d©a_deÁu…s
;

1005 
ch™√l_d©a
.
uæ
 =

1006 
	`°rdup
(
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_¨tiÁ˘_uæ
));

1008 c⁄° * c⁄° 
upd©e_öfo
 = 
	`STRINGIFY
(

1017 i‡(
ENOMEM_ASPRINTF
 ==

1018 
	`a•rötf
(&
ch™√l_d©a
.
öfo
, 
upd©e_öfo
,

1019 
upd©e_a˘i⁄
,

1020 
∑π
,

1021 
vîsi⁄
,

1022 
«me
, 
a˘i⁄_id
)) {

1023 
	`ERROR
("hawkBit serverÑeply cannot be sent because of OOM.");

1024 
ªsu…
 = 
SERVER_EBADMSG
;

1025 
˛ónup_lo›
;

1028 
ch™√l_d©a
.
checkdwl
 = 
£rvî_check_durög_dwl
;

1036 
	`£rvî_gë_cuºít_time
(&
£rvî_time
);

1038 
ch™√l_›_ªs_t
 
¸esu…
 =

1039 
ch™√l
->
	`gë_fûe
(ch™√l, (*)&
ch™√l_d©a
);

1040 i‡((
ªsu…
 = 
	`m≠_ch™√l_ªtcode
(
¸esu…
)Ë!
SERVER_OK
) {

1042 
	`ùc_waô_f‹_com∂ëe
(
£rvî_upd©e_°©us_ˇŒback
);

1043 
˛ónup_lo›
;

1046 #ifde‡
CONFIG_SURICATTA_SSL


1047 i‡(
	`°∫cmp
((*)&
ch™√l_d©a
.
sha1hash
,

1048 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_¨tiÁ˘_sha1hash
),

1049 
SWUPDATE_SHA_DIGEST_LENGTH
) != 0) {

1050 
	`ERROR
(

1053 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_¨tiÁ˘_sha1hash
),

1054 
ch™√l_d©a
.
sha1hash
);

1055 
	`ùc_waô_f‹_com∂ëe
(
£rvî_upd©e_°©us_ˇŒback
);

1056 
ªsu…
 = 
SERVER_EBADMSG
;

1057 
˛ónup_lo›
;

1059 
	`DEBUG
("Downloadedártifact's checksum matches server's: "

1061 
ch™√l_d©a
.
sha1hash
);

1064 
	`ùc_waô_f‹_com∂ëe
(
£rvî_upd©e_°©us_ˇŒback
)) {

1065 
DOWNLOAD
:

1066 
IDLE
:

1067 
START
:

1068 
RUN
:

1069 
SUCCESS
:

1070 
ªsu…
 = 
SERVER_OK
;

1071 
js⁄_d©a_¨tiÁ˘_ö°ÆÀd
++;

1073 
FAILURE
:

1074 
ªsu…
 = 
SERVER_EERR
;

1075 
˛ónup_lo›
;

1078 
˛ónup_lo›
:

1079 i‡(
ch™√l_d©a
.
uæ
 !
NULL
) {

1080 
	`‰ì
(
ch™√l_d©a
.
uæ
);

1082 i‡(
fûíame
 !
NULL
) {

1083 
	`‰ì
(
fûíame
);

1085 i‡(
ch™√l_d©a
.
öfo
 !
NULL
) {

1086 
	`‰ì
(
ch™√l_d©a
.
öfo
);

1088 i‡(
ªsu…
 !
SERVER_OK
) {

1092 
˛ónup
:

1094 i‡(!
js⁄_d©a_¨tiÁ˘_ö°ÆÀd
) {

1095 
	`£rvî_hawkbô_îr‹
("No suitable .swu image found");

1096 
ªsu…
 = 
SERVER_EERR
;

1099  
ªsu…
;

1100 
	}
}

1102 
£rvî_›_ªs_t
 
	$£rvî_ö°Æl_upd©e
()

1104 
a˘i⁄_id
;

1105 
ch™√l_d©a_t
 
ch™√l_d©a
 = 
ch™√l_d©a_deÁu…s
;

1106 
£rvî_›_ªs_t
 
ªsu…
 =

1107 
	`£rvî_gë_dïloymít_öfo
(
£rvî_hawkbô
.
ch™√l
, &
ch™√l_d©a
, &
a˘i⁄_id
);

1108 
ªsu…
) {

1109 
SERVER_UPDATE_CANCELED
:

1110 
SERVER_UPDATE_AVAILABLE
:

1111 
SERVER_ID_REQUESTED
:

1112 
SERVER_OK
:

1114 
SERVER_EERR
:

1115 
SERVER_EBADMSG
:

1116 
SERVER_EINIT
:

1117 
SERVER_EACCES
:

1118 
SERVER_EAGAIN
:

1119 
SERVER_NO_UPDATE_AVAILABLE
:

1120 
˛ónup
;

1123 
£rvî_hawkbô
.
upd©e_a˘i⁄
 = 
NULL
;

1124 c⁄° *
upd©e_a˘i⁄
 = 
	`js⁄_gë_dïloymít_upd©e_a˘i⁄
(
ch™√l_d©a
.
js⁄_ª∂y
);

1125 
	`check_a˘i⁄_ch™ged
(
a˘i⁄_id
, 
upd©e_a˘i⁄
);

1126 i‡(
£rvî_hawkbô
.
upd©e_a˘i⁄
 =
dïloymít_upd©e_a˘i⁄
.
skù
) {

1127 c⁄° *
dëaûs
 = "Skipped Update.";

1128 i‡(
	`£rvî_£nd_dïloymít_ª∂y
(

1129 
a˘i⁄_id
, 0, 0, 
ª∂y_°©us_ªsu…_föished
.
suc˚ss
,

1130 
ª∂y_°©us_executi⁄
.
˛o£d
, 1,

1131 &
dëaûs
Ë!
SERVER_OK
) {

1132 
	`ERROR
("Error whileÑeporting installationÖrogressÅo "

1135 
˛ónup
;

1138 
js⁄_obje˘
 *
js⁄_d©a_chunk
 =

1139 
	`js⁄_gë_∑th_key
(
ch™√l_d©a
.
js⁄_ª∂y
,

1140 (c⁄° *[]){"dïloymít", "chunks", 
NULL
});

1141 i‡(
js⁄_d©a_chunk
 =
NULL
) {

1142 
	`£rvî_hawkbô_îr‹
("Got malformed JSON: CouldÇot find field "

1144 
	`DEBUG
("Got JSON: %s",

1145 
	`js⁄_obje˘_to_js⁄_°rög
(
ch™√l_d©a
.
js⁄_ª∂y
));

1146 
ªsu…
 = 
SERVER_EBADMSG
;

1147 
˛ónup
;

1150 
	`as£π
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_d©a_chunk
Ë=
js⁄_ty≥_¨øy
);

1151 
¨øy_li°
 *
js⁄_d©a_chunk_¨øy
 =

1152 
	`js⁄_obje˘_gë_¨øy
(
js⁄_d©a_chunk
);

1153 
js⁄_d©a_chunk_cou¡
 = 0;

1154 
js⁄_d©a_chunk_max
 = 
	`js⁄_obje˘_¨øy_Àngth
(
js⁄_d©a_chunk
);

1155 
js⁄_obje˘
 *
js⁄_d©a_chunk_ôem
 = 
NULL
;

1156 c⁄° *
dëaûs
[] = {"Installing Update Chunk Artifacts.",

1161 
js⁄_d©a_chunk_cou¡
 = 0;

1162 
js⁄_d©a_chunk_cou¡
 < 
js⁄_d©a_chunk_max
;

1163 
js⁄_d©a_chunk_cou¡
++) {

1164 
js⁄_d©a_chunk_ôem
 = 
	`¨øy_li°_gë_idx
(

1165 
js⁄_d©a_chunk_¨øy
, 
js⁄_d©a_chunk_cou¡
);

1166 
	`TRACE
("Iterating over JSON, key=%s",

1167 
	`js⁄_obje˘_to_js⁄_°rög
(
js⁄_d©a_chunk_ôem
));

1168 
js⁄_obje˘
 *
js⁄_d©a_chunk_∑π
 = 
	`js⁄_gë_∑th_key
(

1169 
js⁄_d©a_chunk_ôem
, (c⁄° *[]){"∑π", 
NULL
});

1170 
js⁄_obje˘
 *
js⁄_d©a_chunk_vîsi⁄
 = 
	`js⁄_gë_∑th_key
(

1171 
js⁄_d©a_chunk_ôem
, (c⁄° *[]){"vîsi⁄", 
NULL
});

1172 
js⁄_obje˘
 *
js⁄_d©a_chunk_«me
 = 
	`js⁄_gë_∑th_key
(

1173 
js⁄_d©a_chunk_ôem
, (c⁄° *[]){"«me", 
NULL
});

1174 i‡((
js⁄_d©a_chunk_∑π
 =
NULL
) ||

1175 (
js⁄_d©a_chunk_vîsi⁄
 =
NULL
) ||

1176 (
js⁄_d©a_chunk_«me
 =
NULL
)) {

1177 
	`£rvî_hawkbô_îr‹
("Got malformed JSON: CouldÇot find fields "

1179 
	`DEBUG
("GŸ JSON: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(

1180 
ch™√l_d©a
.
js⁄_ª∂y
));

1181 
ªsu…
 = 
SERVER_EBADMSG
;

1182 
˛ónup
;

1184 
	`as£π
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_d©a_chunk_∑π
) ==

1185 
js⁄_ty≥_°rög
);

1186 
	`as£π
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_d©a_chunk_«me
) ==

1187 
js⁄_ty≥_°rög
);

1188 
	`as£π
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_d©a_chunk_vîsi⁄
) ==

1189 
js⁄_ty≥_°rög
);

1190 
	`DEBUG
("Processing Update Chunk '%s', version %s,Öart %s",

1191 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_chunk_«me
),

1192 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_chunk_vîsi⁄
),

1193 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_chunk_∑π
));

1195 
js⁄_obje˘
 *
js⁄_d©a_chunk_¨tiÁ˘s
 = 
	`js⁄_gë_∑th_key
(

1196 
js⁄_d©a_chunk_ôem
, (c⁄° *[]){"¨tiÁ˘s", 
NULL
});

1197 i‡(
js⁄_d©a_chunk_¨tiÁ˘s
 =
NULL
) {

1198 
	`£rvî_hawkbô_îr‹
("Got malformed JSON: CouldÇot find field "

1200 
	`DEBUG
("GŸ JSON: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(

1201 
ch™√l_d©a
.
js⁄_ª∂y
));

1202 
ªsu…
 = 
SERVER_EBADMSG
;

1203 
˛ónup
;

1206 i‡(
	`£rvî_£nd_dïloymít_ª∂y
(

1207 
a˘i⁄_id
, 
js⁄_d©a_chunk_max
, 
js⁄_d©a_chunk_cou¡
,

1208 
ª∂y_°©us_ªsu…_föished
.
n⁄e
,

1209 
ª∂y_°©us_executi⁄
.
¥o˚edög
, 1,

1210 &
dëaûs
[0]Ë!
SERVER_OK
) {

1211 
	`ERROR
("Error whileÑeporting installationÖrogressÅo "

1213 
˛ónup
;

1215 
	`as£π
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_d©a_chunk_¨tiÁ˘s
) ==

1216 
js⁄_ty≥_¨øy
);

1218 
£rvî_hawkbô
.
ˇn˚lDurögUpd©e
 = 
Ál£
;

1219 
ªsu…
 =

1220 
	`£rvî_¥o˚ss_upd©e_¨tiÁ˘
(
a˘i⁄_id
, 
js⁄_d©a_chunk_¨tiÁ˘s
,

1221 
£rvî_hawkbô
.
upd©e_a˘i⁄
,

1222 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_chunk_∑π
),

1223 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_chunk_vîsi⁄
),

1224 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_chunk_«me
));

1226 i‡(
ªsu…
 !
SERVER_OK
) {

1229 i‡(
£rvî_hawkbô
.
ˇn˚lDurögUpd©e
) {

1230 
	`TRACE
("Acknowledging cancelled update.");

1231 ()
	`£rvî_£nd_ˇn˚l_ª∂y
(
£rvî_hawkbô
.
ch™√l
, 
a˘i⁄_id
);

1237 
	`ERROR
("ErrorÖrocessing update chunkÇamed '%s', "

1239 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_chunk_«me
),

1240 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_chunk_vîsi⁄
),

1241 
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a_chunk_∑π
));

1242 ()
	`£rvî_£nd_dïloymít_ª∂y
(

1243 
a˘i⁄_id
, 
js⁄_d©a_chunk_max
,

1244 
js⁄_d©a_chunk_cou¡
,

1245 
ª∂y_°©us_ªsu…_föished
.
Áûuª
,

1246 
ª∂y_°©us_executi⁄
.
˛o£d
, 
£rvî_hawkbô
.
îr‹˙t
,

1247 (c⁄° **)
£rvî_hawkbô
.
îr‹s
);

1249 
˛ónup
;

1251 i‡(
	`£rvî_£nd_dïloymít_ª∂y
(

1252 
a˘i⁄_id
, 
js⁄_d©a_chunk_max
,

1253 
js⁄_d©a_chunk_cou¡
 + 1,

1254 
ª∂y_°©us_ªsu…_föished
.
n⁄e
,

1255 
ª∂y_°©us_executi⁄
.
¥o˚edög
, 1,

1256 &
dëaûs
[2]Ë!
SERVER_OK
) {

1257 
	`ERROR
("Error whileÑeporting installationÖrogressÅo "

1262 i‡((
ªsu…
 = 
	`ßve_°©e
((*)
STATE_KEY
, 
STATE_INSTALLED
)) !=

1263 
SERVER_OK
) {

1264 
	`ERROR
("CannotÖersistently store update state.");

1265 
˛ónup
;

1268 i‡(
	`£rvî_£nd_dïloymít_ª∂y
(

1269 
a˘i⁄_id
, 
js⁄_d©a_chunk_max
, 
js⁄_d©a_chunk_cou¡
,

1270 
ª∂y_°©us_ªsu…_föished
.
n⁄e
,

1271 
ª∂y_°©us_executi⁄
.
¥o˚edög
, 1,

1272 &
dëaûs
[3]Ë!
SERVER_OK
) {

1273 
	`ERROR
("Error whileÑeporting installation successÅo "

1277 
˛ónup
:

1278 
i
 = 0; i < 
HAWKBIT_MAX_REPORTED_ERRORS
; i++) {

1279 i‡(
£rvî_hawkbô
.
îr‹s
[
i
]) {

1280 
	`‰ì
(
£rvî_hawkbô
.
îr‹s
[
i
]);

1281 
£rvî_hawkbô
.
îr‹s
[
i
] = 
NULL
;

1284 i‡(
ch™√l_d©a
.
js⁄_ª∂y
 !
NULL
 &&

1285 
	`js⁄_obje˘_put
(
ch™√l_d©a
.
js⁄_ª∂y
Ë!
JSON_OBJECT_FREED
) {

1286 
	`ERROR
("JSON object should be freed but wasÇot.");

1288 i‡(
ªsu…
 =
SERVER_OK
) {

1289 
	`INFO
("Update successful,ÉxecutingÖost-updateáctions.");

1290 
ùc_mesßge
 
msg
;

1291 i‡(
	`ùc_po°upd©e
(&
msg
) != 0) {

1292 
ªsu…
 = 
SERVER_EERR
;

1294 
ªsu…
 = 
msg
.
ty≥
 =
ACK
 ? 
SERVER_OK
 : 
SERVER_EERR
;

1295 
	`DEBUG
("%s", 
msg
.
d©a
.msg);

1298  
ªsu…
;

1299 
	}
}

1301 
	$gë_èrgë_d©a_Àngth
()

1303 
Àn
 = 0;

1304 
di˘_íåy
 *
íåy
;

1306 
	`LIST_FOREACH
(
íåy
, &
£rvî_hawkbô
.
c⁄figd©a
, 
√xt
) {

1307 *
key
 = 
	`di˘_íåy_gë_key
(
íåy
);

1308 *
vÆue
 = 
	`di˘_íåy_gë_vÆue
(
íåy
);

1310 
Àn
 +
	`°æí
(
key
Ë+ såÀn(
vÆue
) + strlen (" : ") + 6;

1313  
Àn
;

1314 
	}
}

1316 
£rvî_›_ªs_t
 
	$£rvî_£nd_èrgë_d©a
()

1318 
ch™√l_t
 *
ch™√l
 = 
£rvî_hawkbô
.channel;

1319 
di˘_íåy
 *
íåy
;

1320 
boﬁ
 
fú°
 = 
åue
;

1321 
Àn
 = 0;

1322 
£rvî_›_ªs_t
 
ªsu…
 = 
SERVER_OK
;

1323 *
js⁄_ª∂y_°rög
 = 
NULL
;

1324 *
uæ
 = 
NULL
;

1326 
	`as£π
(
ch™√l
 !
NULL
);

1327 
Àn
 = 
	`gë_èrgë_d©a_Àngth
();

1329 i‡(!
Àn
) {

1330 
£rvî_hawkbô
.
has_to_£nd_c⁄figD©a
 = 
Ál£
;

1331  
SERVER_OK
;

1334 *
c⁄figD©a
 = (*)(
	`mÆloc
(
Àn
 + 16));

1335 
	`mem£t
(
c⁄figD©a
, 0, 
Àn
 + 16);

1337 c⁄° * c⁄° 
c⁄fig_d©a
 = 
	`STRINGIFY
(

1338 %
c
"%s": "%s"

1341 *
keyvÆue
 = 
NULL
;

1342 
	`LIST_FOREACH
(
íåy
, &
£rvî_hawkbô
.
c⁄figd©a
, 
√xt
) {

1343 *
key
 = 
	`di˘_íåy_gë_key
(
íåy
);

1344 *
vÆue
 = 
	`di˘_íåy_gë_vÆue
(
íåy
);

1346 i‡(
ENOMEM_ASPRINTF
 ==

1347 
	`a•rötf
(&
keyvÆue
, 
c⁄fig_d©a
,

1348 ((
fú°
) ? ' ' : ','),

1349 
key
,

1350 
vÆue
)) {

1351 
	`ERROR
("hawkBit serverÑeply cannot be sent because of OOM.");

1352 
ªsu…
 = 
SERVER_EINIT
;

1353 
˛ónup
;

1355 
fú°
 = 
Ál£
;

1356 
	`TRACE
("KEYVALUE=%†%†%s", 
keyvÆue
, 
key
, 
vÆue
);

1357 
	`°rˇt
(
c⁄figD©a
, 
keyvÆue
);

1358 
	`‰ì
(
keyvÆue
);

1362 
	`TRACE
("CONFIGDATA=%s", 
c⁄figD©a
);

1364 c⁄° * c⁄° 
js⁄_hawkbô_c⁄fig_d©a
 = 
	`STRINGIFY
(

1376 %
s


1381 
ch™√l_d©a_t
 
ch™√l_d©a_ª∂y
 = 
ch™√l_d©a_deÁu…s
;

1382 
fd©e
[15 + 1];

1383 
time_t
 
now
 = 
	`time
(
NULL
) == (time_t)-1 ? 0 :Åime(NULL);

1384 ()
	`°r·ime
(
fd©e
, (fd©e), "%Y%m%dT%H%M%S", 
	`loˇ…ime
(&
now
));

1386 i‡(
ENOMEM_ASPRINTF
 ==

1387 
	`a•rötf
(&
js⁄_ª∂y_°rög
, 
js⁄_hawkbô_c⁄fig_d©a
,

1388 "", 
fd©e
, 
ª∂y_°©us_ªsu…_föished
.
suc˚ss
,

1389 
ª∂y_°©us_executi⁄
.
˛o£d
,

1390 "", 
c⁄figD©a
)) {

1391 
	`ERROR
("hawkBit serverÑeply cannot be sent because of OOM.");

1392 
ªsu…
 = 
SERVER_EINIT
;

1393 
˛ónup
;

1395 i‡(
ENOMEM_ASPRINTF
 ==

1396 
	`a•rötf
(&
uæ
, "%s/%s/controller/v1/%s/configData",

1397 
£rvî_hawkbô
.
uæ
, sîvî_hawkbô.
ã«¡
,

1398 
£rvî_hawkbô
.
devi˚_id
)) {

1399 
	`ERROR
("hawkBit serverÑeply cannot be sent because of OOM.");

1400 
ªsu…
 = 
SERVER_EINIT
;

1401 
˛ónup
;

1404 
ch™√l_d©a_ª∂y
.
uæ
 = url;

1405 
ch™√l_d©a_ª∂y
.
ªque°_body
 = 
js⁄_ª∂y_°rög
;

1406 
	`TRACE
("URL=%†JSON=%s", 
ch™√l_d©a_ª∂y
.
uæ
, ch™√l_d©a_ª∂y.
ªque°_body
);

1407 
ch™√l_d©a_ª∂y
.
mëhod
 = 
CHANNEL_PUT
;

1408 
ªsu…
 = 
	`m≠_ch™√l_ªtcode
(
ch™√l
->
	`put
(ch™√l, (*)&
ch™√l_d©a_ª∂y
));

1410 i‡(
ªsu…
 =
SERVER_OK
)

1411 
£rvî_hawkbô
.
has_to_£nd_c⁄figD©a
 = 
Ál£
;

1413 
˛ónup
:

1415 
	`‰ì
(
c⁄figD©a
);

1416 i‡(
uæ
 !
NULL
)

1417 
	`‰ì
(
uæ
);

1419 i‡(
js⁄_ª∂y_°rög
)

1420 
	`‰ì
(
js⁄_ª∂y_°rög
);

1422  
ªsu…
;

1423 
	}
}

1425 
	$£rvî_¥öt_hñp
()

1427 
	`Ârötf
(

1428 
°dîr
,

1448 
CHANNEL_DEFAULT_POLLING_INTERVAL
, 
CHANNEL_DEFAULT_RESUME_TRIES
,

1449 
CHANNEL_DEFAULT_RESUME_DELAY
);

1450 
	}
}

1452 
£rvî_hawkbô_£âögs
(*
ñem
, 
__©åibuã__
 ((
__unu£d__
)Ë*
d©a
)

1454 
	gtmp
[128];

1456 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "ã«¡", 
tmp
);

1457 i‡(
°æí
(
tmp
)) {

1458 
SETSTRING
(
£rvî_hawkbô
.
ã«¡
, 
tmp
);

1459 
	gm™d©‹y_¨gumít_cou¡
 |
TENANT_BIT
;

1461 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "id", 
tmp
);

1462 i‡(
°æí
(
tmp
)) {

1463 
SETSTRING
(
£rvî_hawkbô
.
devi˚_id
, 
tmp
);

1464 
	gm™d©‹y_¨gumít_cou¡
 |
ID_BIT
;

1466 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "uæ", 
tmp
);

1467 i‡(
°æí
(
tmp
)) {

1468 
SETSTRING
(
£rvî_hawkbô
.
uæ
, 
tmp
);

1469 
	gm™d©‹y_¨gumít_cou¡
 |
URL_BIT
;

1472 
gë_fõld
(
LIBCFG_PARSER
, 
ñem
, "polldelay",

1473 &
£rvî_hawkbô
.
pﬁlög_öãrvÆ
);

1475 
suriˇâa_ch™√l_£âögs
(
ñem
, &
ch™√l_d©a_deÁu…s
);

1477 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "èrgëtokí", 
tmp
);

1478 i‡(
°æí
(
tmp
))

1479 
SETSTRING
(
£rvî_hawkbô
.
èrgëtokí
, 
tmp
);

1480 
GET_FIELD_STRING_RESET
(
LIBCFG_PARSER
, 
ñem
, "g©ewaytokí", 
tmp
);

1481 i‡(
°æí
(
tmp
))

1482 
SETSTRING
(
£rvî_hawkbô
.
g©ewaytokí
, 
tmp
);

1488 
£rvî_›_ªs_t
 
	$£rvî_°¨t
(*
‚ame
, 
¨gc
, *
¨gv
[])

1490 
upd©e_°©e_t
 
upd©e_°©e
 = 
STATE_NOT_AVAILABLE
;

1491 
choi˚
 = 0;

1493 
m™d©‹y_¨gumít_cou¡
 = 0;

1495 
	`LIST_INIT
(&
£rvî_hawkbô
.
c⁄figd©a
);

1497 i‡(
‚ame
) {

1501 
	`ªad_moduÀ_£âögs
(
‚ame
, "suriˇâa", 
£rvî_hawkbô_£âögs
,

1502 
NULL
);

1507 
	`ªad_moduÀ_£âögs
(
‚ame
, "hawkbô", 
£rvî_hawkbô_£âögs
,

1508 
NULL
);

1509 
	`ªad_moduÀ_£âögs
(
‚ame
, "idítify", 
£âögs_öto_di˘
,

1510 &
£rvî_hawkbô
.
c⁄figd©a
);

1513 i‡(
logÀvñ
 >
DEBUGLEVEL
) {

1514 
£rvî_hawkbô
.
debug
 = 
åue
;

1516 i‡(
logÀvñ
 >
TRACELEVEL
) {

1517 
ch™√l_d©a_deÁu…s
.
debug
 = 
åue
;

1521 
›töd
 = 1;

1522 (
choi˚
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "t:i:c:u:p:xr:y::w:k:g:",

1523 
l⁄g_›ti⁄s
, 
NULL
)) != -1) {

1524 
choi˚
) {

1526 
	`SETSTRING
(
£rvî_hawkbô
.
ã«¡
, 
›èrg
);

1527 
m™d©‹y_¨gumít_cou¡
 |
TENANT_BIT
;

1530 
	`SETSTRING
(
£rvî_hawkbô
.
devi˚_id
, 
›èrg
);

1531 
m™d©‹y_¨gumít_cou¡
 |
ID_BIT
;

1534 
	`SETSTRING
(
£rvî_hawkbô
.
èrgëtokí
, 
›èrg
);

1537 
	`SETSTRING
(
£rvî_hawkbô
.
g©ewaytokí
, 
›èrg
);

1543 
upd©e_°©e
 = ()*
›èrg
;

1544 
upd©e_°©e
) {

1545 
STATE_INSTALLED
:

1546 
STATE_TESTING
:

1547 
STATE_FAILED
:

1548 
STATE_WAIT
:

1551 
	`Ârötf
(

1552 
°dîr
,

1554 
	`suriˇâa_¥öt_hñp
();

1555 
	`exô
(
EXIT_FAILURE
);

1559 
	`SETSTRING
(
£rvî_hawkbô
.
uæ
, 
›èrg
);

1560 
m™d©‹y_¨gumít_cou¡
 |
URL_BIT
;

1563 
£rvî_hawkbô
.
pﬁlög_öãrvÆ
 =

1564 ()
	`°πoul
(
›èrg
, 
NULL
, 10);

1567 
ch™√l_d©a_deÁu…s
.
°ri˘s¶
 = 
Ál£
;

1570 
ch™√l_d©a_deÁu…s
.
ªåõs
 =

1571 ()
	`°πoul
(
›èrg
, 
NULL
, 10);

1574 i‡((!
›èrg
Ë&& (
›töd
 < 
¨gc
) &&

1575 (
¨gv
[
›töd
] !
NULL
) &&

1576 (
¨gv
[
›töd
][0] != '-')) {

1577 
	`SETSTRING
(
ch™√l_d©a_deÁu…s
.
¥oxy
,

1578 
¨gv
[
›töd
++]);

1581 i‡(
ch™√l_d©a_deÁu…s
.
¥oxy
 =
NULL
) {

1582 i‡((
	`gëív
("hâp_¥oxy"Ë=
NULL
) &&

1583 (
	`gëív
("Æl_¥oxy"Ë=
NULL
)) {

1584 
	`ERROR
("Should useÖroxy butÇo "

1588  
SERVER_EINIT
;

1590 
ch™√l_d©a_deÁu…s
.
¥oxy
 =

1591 
USE_PROXY_ENV
;

1595 
ch™√l_d©a_deÁu…s
.
ªåy_¶ìp
 =

1596 ()
	`°πoul
(
›èrg
, 
NULL
, 10);

1600  
SERVER_EINIT
;

1604 i‡(
m™d©‹y_¨gumít_cou¡
 !
ALL_MANDATORY_SET
) {

1605 
	`Ârötf
(
°dîr
, "Mandatoryárguments missing!\n");

1606 
	`suriˇâa_¥öt_hñp
();

1607  
SERVER_EINIT
;

1609 i‡(
¨gc
 > 
›töd
) {

1610 
	`Ârötf
(
°dîr
, "Unusedárguments.\n");

1611 
	`suriˇâa_¥öt_hñp
();

1612  
SERVER_EINIT
;

1615 i‡(
	`ch™√l_cuæ_öô
(Ë!
CHANNEL_OK
)

1616  
SERVER_EINIT
;

1624 i‡(
£rvî_hawkbô
.
èrgëtokí
 !
NULL
 && sîvî_hawkbô.
g©ewaytokí
 != NULL) {

1625 
	`Ârötf
(
°dîr
, "Error: bothÅargetánd gatewayÅokens have beenÖrovided, "

1627 
	`exô
(
EXIT_FAILURE
);

1629 
	`£rvî_hakwbô_£âokí
("T¨gëTokí", 
£rvî_hawkbô
.
èrgëtokí
);

1630 
	`£rvî_hakwbô_£âokí
("G©ewayTokí", 
£rvî_hawkbô
.
g©ewaytokí
);

1635 
£rvî_hawkbô
.
ch™√l
 = 
	`ch™√l_√w
();

1636 i‡(!
£rvî_hawkbô
.
ch™√l
)

1637  
SERVER_EINIT
;

1639 i‡(
£rvî_hawkbô
.
ch™√l
->
	`›í
(£rvî_hawkbô.ch™√l, &
ch™√l_d©a_deÁu…s
Ë!
CHANNEL_OK
) {

1640  
SERVER_EINIT
;

1646 
£rvî_›_ªs_t
 
°©e_h™dÀd
;

1647 
£rvî_hawkbô
.
upd©e_°©e
 = update_state;

1654 
£rvî_hawkbô
.
has_to_£nd_c⁄figD©a
 = 
åue
;

1660 i‡(
upd©e_°©e
 !
STATE_WAIT
) {

1661 (
°©e_h™dÀd
 = 
	`£rvî_h™dÀ_öôül_°©e
(
upd©e_°©e
)) !=

1662 
SERVER_OK
) {

1663 i‡(
°©e_h™dÀd
 =
SERVER_EAGAIN
) {

1664 
	`INFO
("Sleeping for %ds untilÑetrying...",

1665 
INITIAL_STATUS_REPORT_WAIT_DELAY
);

1666 
	`¶ìp
(
INITIAL_STATUS_REPORT_WAIT_DELAY
);

1669  
°©e_h™dÀd
;

1673  
SERVER_OK
;

1674 
	}
}

1676 
£rvî_›_ªs_t
 
	$£rvî_°›
()

1678 ()
£rvî_hawkbô
.
ch™√l
->
	`˛o£
(server_hawkbit.channel);

1679  
SERVER_OK
;

1680 
	}
}

1686 
js⁄_obje˘
 *
	$£rvî_tokíize_msg
(*
buf
, 
size_t
 
size
)

1689 
js⁄_tokíî
 *
js⁄_tokíizî
 = 
	`js⁄_tokíî_√w
();

1690 
js⁄_tokíî_îr‹
 
js⁄_ªs
;

1691 
js⁄_obje˘
 *
js⁄_roŸ
;

1693 
js⁄_roŸ
 = 
	`js⁄_tokíî_∑r£_ex
(

1694 
js⁄_tokíizî
, 
buf
, 
size
);

1695 } (
js⁄_ªs
 = 
	`js⁄_tokíî_gë_îr‹
(
js⁄_tokíizî
)) ==

1696 
js⁄_tokíî_c⁄töue
);

1697 i‡(
js⁄_ªs
 !
js⁄_tokíî_suc˚ss
) {

1698 
	`ERROR
("Error whileÖarsing channel'sÑeturned JSON data: %s",

1699 
	`js⁄_tokíî_îr‹_desc
(
js⁄_ªs
));

1700 
	`js⁄_tokíî_‰ì
(
js⁄_tokíizî
);

1701  
NULL
;

1704 
	`js⁄_tokíî_‰ì
(
js⁄_tokíizî
);

1706  
js⁄_roŸ
;

1707 
	}
}

1709 
£rvî_›_ªs_t
 
	$£rvî_a˘iv©i⁄_ùc
(
ùc_mesßge
 *
msg
)

1711 
£rvî_›_ªs_t
 
ªsu…
 = 
SERVER_OK
;

1712 
upd©e_°©e_t
 
upd©e_°©e
 = 
STATE_NOT_AVAILABLE
;

1713 
js⁄_obje˘
 *
js⁄_roŸ
;

1715 
js⁄_roŸ
 = 
	`£rvî_tokíize_msg
(
msg
->
d©a
.
ö°msg
.
buf
,

1716 (
msg
->
d©a
.
ö°msg
.
buf
));

1717 i‡(!
js⁄_roŸ
)

1718  
SERVER_EERR
;

1720 
js⁄_obje˘
 *
js⁄_d©a
 = 
	`js⁄_gë_∑th_key
(

1721 
js⁄_roŸ
, (c⁄° *[]){"id", 
NULL
});

1722 i‡(
js⁄_d©a
 =
NULL
) {

1723 
	`ERROR
("Got malformed JSON: CouldÇot findáction id");

1724 
	`DEBUG
("GŸ JSON: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
js⁄_d©a
));

1725  
SERVER_EERR
;

1727 
a˘i⁄_id
 = 
	`js⁄_obje˘_gë_öt
(
js⁄_d©a
);

1729 
js⁄_d©a
 = 
	`js⁄_gë_∑th_key
(

1730 
js⁄_roŸ
, (c⁄° *[]){"°©us", 
NULL
});

1731 i‡(
js⁄_d©a
 =
NULL
) {

1732 
	`ERROR
("Got malformed JSON: CouldÇot find field status");

1733 
	`DEBUG
("GŸ JSON: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
js⁄_d©a
));

1734  
SERVER_EERR
;

1736 
upd©e_°©e
 = ()*
	`js⁄_obje˘_gë_°rög
(
js⁄_d©a
);

1737 
	`DEBUG
("GŸá˘i⁄_id %d sètu†%c", 
a˘i⁄_id
, 
upd©e_°©e
);

1739 c⁄° *
ª∂y_ªsu…
 = 
	`js⁄_gë_vÆue
(
js⁄_roŸ
, "finished");

1740 c⁄° *
ª∂y_executi⁄
 = 
	`js⁄_gë_vÆue
(
js⁄_roŸ
, "execution");

1741 
js⁄_d©a
 = 
	`js⁄_gë_key
(
js⁄_roŸ
, "details");

1743 i‡(!
	`hawkbô_íum_check
("föished", 
ª∂y_ªsu…
) ||

1744 !
	`hawkbô_íum_check
("executi⁄", 
ª∂y_executi⁄
) ||

1745 !
	`is_vÆid_°©e
(
upd©e_°©e
)) {

1746 
	`ERROR
("Wrong values \"execution\" : %s, \"finished\" : %s , \"status\" : %c",

1747 
ª∂y_executi⁄
, 
ª∂y_ªsu…
, 
upd©e_°©e
);

1748  
SERVER_EERR
;

1751 
numdëaûs
 = 
	`js⁄_obje˘_¨øy_Àngth
(
js⁄_d©a
);

1752 c⁄° **
dëaûs
 = (c⁄° **)
	`mÆloc
((
numdëaûs
 + 1) * ( (*)));

1753 i‡(!
numdëaûs
)

1754 
dëaûs
[0] = "";

1756 
i
;

1757 
i
 = 0; i < 
numdëaûs
; i++) {

1758 
dëaûs
[
i
] = 
	`js⁄_obje˘_gë_°rög
(
	`js⁄_obje˘_¨øy_gë_idx
(
js⁄_d©a
, i));

1759 
	`TRACE
("Dëaû %d : %s", 
i
, 
dëaûs
[i]);

1763 
ch™√l_d©a_t
 
ch™√l_d©a
 = 
ch™√l_d©a_deÁu…s
;

1764 
£rvî_a˘i⁄_id
;

1765 
ªsu…
 =

1766 
	`£rvî_gë_dïloymít_öfo
(
£rvî_hawkbô
.
ch™√l
, &
ch™√l_d©a
, &
£rvî_a˘i⁄_id
);

1768 
£rvî_›_ªs_t
 
ª•⁄£
 = 
SERVER_OK
;

1770 i‡(
ªsu…
 =
SERVER_UPDATE_CANCELED
) {

1771 
	`DEBUG
("Acknowledging cancelled update.");

1772 ()
	`£rvî_£nd_ˇn˚l_ª∂y
(
£rvî_hawkbô
.
ch™√l
, 
£rvî_a˘i⁄_id
);

1775 i‡(
a˘i⁄_id
 !
£rvî_a˘i⁄_id
) {

1776 
	`TRACE
("Deployment changed on server: our id %d, on server %d",

1777 
a˘i⁄_id
, 
£rvî_a˘i⁄_id
);

1779 
ª•⁄£
 = 
	`h™dÀ_„edback
(
a˘i⁄_id
, 
ªsu…
, 
upd©e_°©e
, 
ª∂y_ªsu…
,

1780 
ª∂y_executi⁄
,

1781 
numdëaûs
 =0 ? 1 :Çumdëaûs, 
dëaûs
);

1789 i‡((
ª•⁄£
 !
SERVER_UPDATE_AVAILABLE
Ë&& (ª•⁄£ !
SERVER_OK
))

1790 
ªsu…
 = 
SERVER_EERR
;

1792 
£rvî_hawkbô
.
upd©e_°©e
 = 
STATE_OK
;

1797 
	`ßve_°©e
((*)
STATE_KEY
, 
STATE_OK
);

1800 
msg
->
d©a
.
ö°msg
.
Àn
 = 0;

1802  
ªsu…
;

1803 
	}
}

1805 
£rvî_›_ªs_t
 
	$£rvî_c⁄figuøti⁄_ùc
(
ùc_mesßge
 *
msg
)

1807 
js⁄_obje˘
 *
js⁄_roŸ
;

1808 
pﬁlög
;

1809 
js⁄_obje˘
 *
js⁄_d©a
;

1811 
js⁄_roŸ
 = 
	`£rvî_tokíize_msg
(
msg
->
d©a
.
ö°msg
.
buf
,

1812 (
msg
->
d©a
.
ö°msg
.
buf
));

1813 i‡(!
js⁄_roŸ
)

1814  
SERVER_EERR
;

1816 
js⁄_d©a
 = 
	`js⁄_gë_∑th_key
(

1817 
js⁄_roŸ
, (c⁄° *[]){"pﬁlög", 
NULL
});

1818 i‡(
js⁄_d©a
) {

1819 
pﬁlög
 = 
	`js⁄_obje˘_gë_öt
(
js⁄_d©a
);

1820 i‡(
pﬁlög
 > 0) {

1821 
£rvî_hawkbô
.
pﬁlög_öãrvÆ_‰om_£rvî
 = 
Ál£
;

1822 
£rvî_hawkbô
.
pﬁlög_öãrvÆ
 = 
pﬁlög
;

1824 
£rvî_hawkbô
.
pﬁlög_öãrvÆ_‰om_£rvî
 = 
åue
;

1827  
SERVER_OK
;

1828 
	}
}

1830 
£rvî_›_ªs_t
 
	$£rvî_ùc
(
fd
)

1832 
ùc_mesßge
 
msg
;

1833 
£rvî_›_ªs_t
 
ªsu…
 = 
SERVER_OK
;

1834 
ªt
;

1836 
ªt
 = 
	`ªad
(
fd
, &
msg
, (msg));

1837 i‡(
ªt
 !(
msg
))

1838  
SERVER_EERR
;

1840 
msg
.
d©a
.
ö°msg
.
cmd
) {

1841 
CMD_ACTIVATION
:

1842 
ªsu…
 = 
	`£rvî_a˘iv©i⁄_ùc
(&
msg
);

1844 
CMD_CONFIG
:

1845 
ªsu…
 = 
	`£rvî_c⁄figuøti⁄_ùc
(&
msg
);

1848 
ªsu…
 = 
SERVER_EERR
;

1852 i‡(
ªsu…
 =
SERVER_EERR
) {

1853 
msg
.
ty≥
 = 
NACK
;

1855 
msg
.
ty≥
 = 
ACK
;

1857 
msg
.
d©a
.
ö°msg
.
Àn
 = 0;

1859 i‡(
	`wrôe
(
fd
, &
msg
, (msg)) != (msg)) {

1860 
	`TRACE
("IPC ERROR: sending back msg");

1865  
SERVER_OK
;

1866 
	}
}

	@swupdate/suricatta/server_hawkbit.h

8 #¥agm®
⁄˚


9 
	~<°dboﬁ.h
>

10 
	~<°©e.h
>

11 
	~<swupd©e_di˘.h
>

12 
	~<ch™√l.h
>

15 
	#HAWKBIT_MAX_REPORTED_ERRORS
 10

	)

25 *
	muæ
;

26 *
	mdevi˚_id
;

27 *
	mã«¡
;

28 
	mpﬁlög_öãrvÆ
;

29 
boﬁ
 
	mpﬁlög_öãrvÆ_‰om_£rvî
;

30 
boﬁ
 
	mdebug
;

31 
di˘
 
	mc⁄figd©a
;

32 
boﬁ
 
	mhas_to_£nd_c⁄figD©a
;

33 *
	mc⁄figD©a_uæ
;

34 *
	mˇn˚l_uæ
;

35 
upd©e_°©e_t
 
	mupd©e_°©e
;

36 
	m°›_id
;

37 
ch™√l_t
 *
	mch™√l
;

38 
boﬁ
 
	mˇn˚lDurögUpd©e
;

39 *
	mîr‹s
[
HAWKBIT_MAX_REPORTED_ERRORS
];

40 
	mîr‹˙t
;

41 c⁄° *
	mupd©e_a˘i⁄
;

42 *
	mèrgëtokí
;

43 *
	mg©ewaytokí
;

44 } 
	t£rvî_hawkbô_t
;

46 
£rvî_hawkbô_t
 
£rvî_hawkbô
;

49 c⁄° *
	m˛o£d
;

50 c⁄° *
	m¥o˚edög
;

51 c⁄° *
	mˇn˚Àd
;

52 c⁄° *
	mscheduÀd
;

53 c⁄° *
	mªje˘ed
;

54 c⁄° *
	mªsumed
;

55 } 
	gª∂y_°©us_executi⁄
 = {.
˛o£d
 = "closed",

56 .
	g¥o˚edög
 = "proceeding",

57 .
	gˇn˚Àd
 = "canceled",

58 .
	gscheduÀd
 = "scheduled",

59 .
	gªje˘ed
 = "rejected",

60 .
	gªsumed
 = "resumed"};

63 c⁄° *
	msuc˚ss
;

64 c⁄° *
	mÁûuª
;

65 c⁄° *
	mn⁄e
;

66 } 
	gª∂y_°©us_ªsu…_föished
 = {

67 .
suc˚ss
 = "suc˚ss", .
	gÁûuª
 = "Áûuª", .
	gn⁄e
 = "none"};

70 c⁄° *
	mskù
;

71 c⁄° *
	m©ãm±
;

72 c⁄° *
	mf‹˚d
;

73 } 
	gdïloymít_upd©e_a˘i⁄
 = {

74 .
skù
 = "skù", .
	g©ãm±
 = "©ãm±", .
	gf‹˚d
 = "forced"};

	@swupdate/suricatta/suricatta.c

8 
	~<°dboﬁ.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<°dio.h
>

12 
	~<utû.h
>

13 
	~<î∫o.h
>

14 
	~<sig«l.h
>

15 
	~<sys/£À˘.h
>

16 
	~"p˘l.h
"

17 
	~"suriˇâa/suriˇâa.h
"

18 
	~"suriˇâa/£rvî.h
"

20 
	$suriˇâa_¥öt_hñp
()

22 
£rvî
.
	`hñp
();

23 
	}
}

25 
	$suriˇâa_waô
(
£c⁄ds
)

27 
fd_£t
 
ªadfds
;

28 
timevÆ
 
tv
;

29 
ªtvÆ
;

31 
tv
.
tv_£c
 = 
£c⁄ds
;

32 
tv
.
tv_u£c
 = 0;

33 
	`FD_ZERO
(&
ªadfds
);

34 
	`FD_SET
(
sw_sockfd
, &
ªadfds
);

35 
	`DEBUG
("SÀïög f‹ %ld sec⁄ds.", 
tv
.
tv_£c
);

36 
ªtvÆ
 = 
	`£À˘
(
sw_sockfd
 + 1, &
ªadfds
, 
NULL
, NULL, &
tv
);

37 i‡(
ªtvÆ
 < 0) {

38 
	`TRACE
("Suriˇâ®awakíed beˇu£ of: %s", 
	`°ªº‹
(
î∫o
));

41 i‡(
ªtvÆ
 && 
	`FD_ISSET
(
sw_sockfd
, &
ªadfds
)) {

42 
	`TRACE
("Suriˇâ®wokêu∞f‹ IPCáà%ld sec⁄ds", 
tv
.
tv_£c
);

43 i‡(
£rvî
.
	`ùc
(
sw_sockfd
Ë!
SERVER_OK
){

44 
	`DEBUG
("Handling IPC failed!");

46  ()
tv
.
tv_£c
;

49 
	}
}

51 
	$°¨t_suriˇâa
(c⁄° *
cfg‚ame
, 
¨gc
, *
¨gv
[])

53 
a˘i⁄_id
;

54 
sig£t_t
 
sigpùe_mask
;

55 
sig£t_t
 
ßved_mask
;

57 
	`sigem±y£t
(&
sigpùe_mask
);

58 
	`sigadd£t
(&
sigpùe_mask
, 
SIGPIPE
);

59 
	`sig¥ocmask
(
SIG_BLOCK
, &
sigpùe_mask
, &
ßved_mask
);

61 i‡(
£rvî
.
	`°¨t
(
cfg‚ame
, 
¨gc
, 
¨gv
Ë!
SERVER_OK
) {

62 
	`exô
(
EXIT_FAILURE
);

65 
	`TRACE
("Server initialized,Éntering suricatta mainÜoop.");

66 
åue
) {

67 
£rvî
.
	`has_≥ndög_a˘i⁄
(&
a˘i⁄_id
)) {

68 
SERVER_UPDATE_AVAILABLE
:

69 
	`DEBUG
("AboutÅoÖrocessávailable update.");

70 
£rvî
.
	`ö°Æl_upd©e
();

72 
SERVER_ID_REQUESTED
:

73 
£rvî
.
	`£nd_èrgë_d©a
();

75 
SERVER_EINIT
:

77 
SERVER_OK
:

79 
	`DEBUG
("NoÖendingáctionÅoÖrocess.");

83 
waô_£c⁄ds
 = 
£rvî
.
	`gë_pﬁlög_öãrvÆ
();

84 
waô_£c⁄ds
 > 0;

85 
waô_£c⁄ds
 = 
	`mö
(waô_£c⁄ds, ()
£rvî
.
	`gë_pﬁlög_öãrvÆ
())) {

86 
waô_£c⁄ds
 = 
	`suriˇâa_waô
(wait_seconds);

89 
	`TRACE
("Suricattaáwakened.");

91 
	}
}

	@swupdate/suricatta/suricatta_private.h

8 #¥agm®
⁄˚


9 
	~<°dboﬁ.h
>

10 
	~<swupd©e_di˘.h
>

11 
	~<ch™√l_cuæ.h
>

12 
	~<utû.h
>

14 
suriˇâa_ch™√l_£âögs
(*
ñem
, 
ch™√l_d©a_t
 *
ch™
);

15 
£rvî_›_ªs_t
 
m≠_ch™√l_ªtcode
(
ch™√l_›_ªs_t
 
ª•⁄£
);

	@swupdate/suricatta/test/test_json.c

20 
	~<°dlib.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<£tjmp.h
>

24 
	~<cmocka.h
>

25 
	~<js⁄-c/js⁄.h
>

26 
	~"suriˇâa/suriˇâa.h
"

28 
	#JSON_OBJECT_FREED
 1

	)

29 
	#JSONQUOTE
(...Ë#__VA_ARGS__

	)

31 
js⁄_obje˘
 *
js⁄_gë_key
(js⁄_obje˘ *
js⁄_roŸ
, c⁄° *
key
);

32 
js⁄_obje˘
 *
js⁄_gë_∑th_key
(js⁄_obje˘ *
js⁄_roŸ
,

33 c⁄° **
js⁄_∑th
);

35 
	$js⁄_£tup
(**
°©e
)

38 c⁄° *
js⁄_°rög
 = 
	`JSONQUOTE
(

52  (*
°©e
 = 
	`js⁄_tokíî_∑r£
(
js⁄_°rög
)Ë=
NULL
 ? 1 : 0;

53 
	}
}

55 
	$js⁄_ã¨down
(**
°©e
)

57  (
	`js⁄_obje˘_put
(*
°©e
Ë!
JSON_OBJECT_FREED
) ? 1 : 0;

58 
	}
}

60 
js⁄_obje˘
 *
__ªÆ_js⁄_gë_key
(js⁄_obje˘ *
js⁄_roŸ
,

61 c⁄° *
key
);

62 
js⁄_obje˘
 *
__wøp_js⁄_gë_key
(js⁄_obje˘ *
js⁄_roŸ
, c⁄° *
key
);

63 
js⁄_obje˘
 *
	$__wøp_js⁄_gë_key
(
js⁄_obje˘
 *
js⁄_roŸ
, c⁄° *
key
)

65  (
js⁄_obje˘
 *)
	`__ªÆ_js⁄_gë_key
(
js⁄_roŸ
, 
key
);

66 
	}
}

68 
js⁄_obje˘
 *
__ªÆ_js⁄_gë_∑th_key
(js⁄_obje˘ *
js⁄_roŸ
,

69 c⁄° **
js⁄_∑th
);

70 
js⁄_obje˘
 *
__wøp_js⁄_gë_∑th_key
(js⁄_obje˘ *
js⁄_roŸ
,

71 c⁄° **
js⁄_∑th
);

72 
js⁄_obje˘
 *
	$__wøp_js⁄_gë_∑th_key
(
js⁄_obje˘
 *
js⁄_roŸ
,

73 c⁄° **
js⁄_∑th
)

75  
	`__ªÆ_js⁄_gë_∑th_key
(
js⁄_roŸ
, 
js⁄_∑th
);

76 
	}
}

78 
js⁄_boﬁ
 
__ªÆ_js⁄_obje˘_obje˘_gë_ex
(
js⁄_obje˘
 *
obj
,

79 c⁄° *
key
,

80 
js⁄_obje˘
 **
vÆue
);

81 
js⁄_boﬁ
 
__wøp_js⁄_obje˘_obje˘_gë_ex
(
js⁄_obje˘
 *
obj
,

82 c⁄° *
key
,

83 
js⁄_obje˘
 **
vÆue
);

84 
js⁄_boﬁ
 
	$__wøp_js⁄_obje˘_obje˘_gë_ex
(
js⁄_obje˘
 *
obj
,

85 c⁄° *
key
,

86 
js⁄_obje˘
 **
vÆue
)

88  
	`__ªÆ_js⁄_obje˘_obje˘_gë_ex
(
obj
, 
key
, 
vÆue
);

89 
	}
}

91 
	$ã°_js⁄_gë_∑th_key
(**
°©e
)

93 
js⁄_obje˘
 *
js⁄_d©a
 = 
	`js⁄_gë_∑th_key
(

94 *
°©e
, (c⁄° *[]){"¨tiÁ˘s", "cou¡", 
NULL
});

95 
	`as£π_n⁄_nuŒ
(
js⁄_d©a
);

96 
	`as£π_öt_equÆ
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_d©a
), 
js⁄_ty≥_öt
);

97 
	`as£π_öt_equÆ
(
	`js⁄_obje˘_gë_öt
(
js⁄_d©a
), 3);

98 
	}
}

100 
	$ã°_js⁄_gë_key
(**
°©e
)

103 
js⁄_obje˘
 *
js⁄_chûd
 = 
NULL
;

104 
js⁄_chûd
 = 
	`js⁄_gë_key
(*
°©e
, "name");

105 
	`as£π_n⁄_nuŒ
(
js⁄_chûd
);

106 
	`as£π_öt_equÆ
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_chûd
), 
js⁄_ty≥_°rög
);

107 
	`as£π_°rög_equÆ
(
	`js⁄_obje˘_gë_°rög
(
js⁄_chûd
), "hawkBit");

110 
	`as£π_åue
(
	`js⁄_obje˘_obje˘_gë_ex
(*
°©e
, "«me", &
js⁄_chûd
));

111 
	`as£π_öt_equÆ
(
	`js⁄_obje˘_gë_ty≥
(
js⁄_chûd
), 
js⁄_ty≥_°rög
);

112 
	`as£π_°rög_equÆ
(
	`js⁄_obje˘_gë_°rög
(
js⁄_chûd
), "hawkBit");

115 
	`as£π_nuŒ
((
js⁄_chûd
 = 
	`js⁄_gë_key
(*
°©e
, "wrongname")));

116 
	}
}

118 
	$maö
()

120 
îr‹_cou¡
 = 0;

121 c⁄° 
CMUnôTe°
 
js⁄_ã°s
[] = {

122 
	`cmocka_unô_ã°
(
ã°_js⁄_gë_key
),

123 
	`cmocka_unô_ã°
(
ã°_js⁄_gë_∑th_key
),

125 
îr‹_cou¡
 +
	`cmocka_run_group_ã°s_«me
("js⁄", 
js⁄_ã°s
,

126 
js⁄_£tup
, 
js⁄_ã¨down
);

127  
îr‹_cou¡
;

128 
	}
}

	@swupdate/suricatta/test/test_server_hawkbit.c

20 
	~<î∫o.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<°d¨g.h
>

24 
	~<°ddef.h
>

25 
	~<£tjmp.h
>

26 
	~<cmocka.h
>

27 
	~<√tw‹k_ùc.h
>

28 
	~<swupd©e_°©us.h
>

29 
	~"suriˇâa/suriˇâa.h
"

30 
	~"£rvî_hawkbô.h
"

31 
	~"ch™√l.h
"

32 
	~"ch™√l_cuæ.h
"

33 
	~"suriˇâa/°©e.h
"

35 
	#JSON_OBJECT_FREED
 1

	)

36 
	#JSONQUOTE
(...Ë#__VA_ARGS__

	)

39 
ch™√l_›_ªs_t
 
ch™√l_˛o£
(
ch™√l_t
 *
this
);

40 
ch™√l_›_ªs_t
 
ch™√l_›í
(
ch™√l_t
 *
this
, *
cfg
);

41 
ch™√l_›_ªs_t
 
ch™√l_put
(
ch™√l_t
 *
this
, *
d©a
);

42 
ch™√l_›_ªs_t
 
ch™√l_gë_fûe
(
ch™√l_t
 *
this
, *
d©a
, 
fûe_h™dÀ
);

43 
ch™√l_›_ªs_t
 
ch™√l_gë
(
ch™√l_t
 *
this
, *
d©a
);

44 
ch™√l_›_ªs_t
 
ch™√l_cuæ_öô
();

46 
js⁄_obje˘
 *
js⁄_gë_key
(js⁄_obje˘ *
js⁄_roŸ
, c⁄° *
key
);

48 
__ªÆ_ùc_waô_f‹_com∂ëe
(
gë°©us
 
ˇŒback
);

49 
__wøp_ùc_waô_f‹_com∂ëe
(
gë°©us
 
ˇŒback
);

50 
	$__wøp_ùc_waô_f‹_com∂ëe
(
gë°©us
 
ˇŒback
)

52 ()
ˇŒback
;

53  
	`mock_ty≥
(
RECOVERY_STATUS
);

54 
	}
}

56 
__ªÆ_ùc_po°upd©e
(
ùc_mesßge
 *
msg
);

57 
__wøp_ùc_po°upd©e
(
ùc_mesßge
 *
msg
);

58 
	$__wøp_ùc_po°upd©e
(
ùc_mesßge
 *
msg
) {

59 
msg
->
ty≥
 = 
ACK
;

61 
	}
}

63 
ch™√l_›_ªs_t
 
__ªÆ_ch™√l_›í
(
ch™√l_t
 *
this
, *
cfg
);

64 
ch™√l_›_ªs_t
 
__wøp_ch™√l_›í
(
ch™√l_t
 *
this
, *
cfg
);

65 
ch™√l_›_ªs_t
 
	$__wøp_ch™√l_›í
(
ch™√l_t
 *
this
, *
cfg
)

67 ()
this
;

68 ()
cfg
;

69  
	`mock_ty≥
(
ch™√l_›_ªs_t
);

70 
	}
}

72 
ch™√l_›_ªs_t
 
__ªÆ_ch™√l_˛o£
(
ch™√l_t
 *
this
);

73 
ch™√l_›_ªs_t
 
__wøp_ch™√l_˛o£
(
ch™√l_t
 *
this
);

74 
ch™√l_›_ªs_t
 
	$__wøp_ch™√l_˛o£
(
ch™√l_t
 *
this
)

76 ()
this
;

77  
	`mock_ty≥
(
ch™√l_›_ªs_t
);

78 
	}
}

80 
ch™√l_›_ªs_t
 
__ªÆ_ch™√l_put
(
ch™√l_t
 *
this
, *
d©a
);

81 
ch™√l_›_ªs_t
 
__wøp_ch™√l_put
(
ch™√l_t
 *
this
, *
d©a
);

82 
ch™√l_›_ªs_t
 
	$__wøp_ch™√l_put
(
ch™√l_t
 *
this
, *
d©a
)

84 ()
d©a
;

85 ()
this
;

86  
	`mock_ty≥
(
ch™√l_›_ªs_t
);

87 
	}
}

89 
ch™√l_›_ªs_t
 
__ªÆ_ch™√l_gë_fûe
(
ch™√l_t
 *
this
, *
d©a
, 
fûe_h™dÀ
);

90 
ch™√l_›_ªs_t
 
__wøp_ch™√l_gë_fûe
(
ch™√l_t
 *
this
, *
d©a
, 
fûe_h™dÀ
);

91 
ch™√l_›_ªs_t
 
	$__wøp_ch™√l_gë_fûe
(
ch™√l_t
 *
this
, *
d©a
, 
fûe_h™dÀ
)

93 #ifde‡
CONFIG_SURICATTA_SSL


94 
ch™√l_d©a_t
 *
ch™√l_d©a
 = (ch™√l_d©a_à*)
d©a
;

95 
	`°∫˝y
(
ch™√l_d©a
->
sha1hash
, 
	`mock_ty≥
(*),

96 
SWUPDATE_SHA_DIGEST_LENGTH
 * 2 + 1);

98 ()
d©a
;

100 ()
fûe_h™dÀ
;

101 ()
this
;

102  
	`mock_ty≥
(
ch™√l_›_ªs_t
);

103 
	}
}

105 
ch™√l_›_ªs_t
 
__ªÆ_ch™√l_gë
(
ch™√l_t
 *
this
, *
d©a
);

106 
ch™√l_›_ªs_t
 
__wøp_ch™√l_gë
(
ch™√l_t
 *
this
, *
d©a
);

107 
ch™√l_›_ªs_t
 
	$__wøp_ch™√l_gë
(
ch™√l_t
 *
this
, *
d©a
)

109 ()
this
;

110 
ch™√l_d©a_t
 *
ch™√l_d©a
 = (ch™√l_d©a_à*)
d©a
;

111 
ch™√l_d©a
->
js⁄_ª∂y
 = 
	`mock_±r_ty≥
(
js⁄_obje˘
 *);

112  
	`mock_ty≥
(
ch™√l_›_ªs_t
);

113 
	}
}

115 
£rvî_›_ªs_t
 
__ªÆ_ßve_°©e
(*
key
, 
upd©e_°©e_t
 
vÆue
);

116 
£rvî_›_ªs_t
 
__wøp_ßve_°©e
(*
key
, 
upd©e_°©e_t
 *
vÆue
);

117 
£rvî_›_ªs_t
 
	$__wøp_ßve_°©e
(*
key
, 
upd©e_°©e_t
 *
vÆue
)

119 ()
key
;

120 ()
vÆue
;

121  
	`mock_ty≥
(
£rvî_›_ªs_t
);

122 
	}
}

124 
£rvî_›_ªs_t
 
__ªÆ_ªad_°©e
(*
key
, 
upd©e_°©e_t
 *
vÆue
);

125 
£rvî_›_ªs_t
 
__wøp_ªad_°©e
(*
key
, 
upd©e_°©e_t
 *
vÆue
);

126 
£rvî_›_ªs_t
 
	$__wøp_ªad_°©e
(*
key
, 
upd©e_°©e_t
 *
vÆue
)

128 ()
key
;

129 *
vÆue
 = 
	`mock_ty≥
(
upd©e_°©e_t
);

130  
	`mock_ty≥
(
£rvî_›_ªs_t
);

131 
	}
}

133 
£rvî_›_ªs_t
 
£rvî_has_≥ndög_a˘i⁄
(*
a˘i⁄_id
);

134 
	$ã°_£rvî_has_≥ndög_a˘i⁄
(**
°©e
)

136 ()
°©e
;

139 c⁄° *
js⁄_ª∂y_no_upd©e
 = 
	`JSONQUOTE
(

148 c⁄° *
js⁄_ª∂y_upd©e_avaûabÀ
 = 
	`JSONQUOTE
(

162 c⁄° *
js⁄_ª∂y_upd©e_d©a
 = 
	`JSONQUOTE
(

179 c⁄° *
js⁄_ª∂y_ˇn˚l_avaûabÀ
 = 
	`JSONQUOTE
(

193 c⁄° *
js⁄_ª∂y_ˇn˚l_d©a
 = 
	`JSONQUOTE
(

204 
a˘i⁄_id
;

205 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
,

206 
	`js⁄_tokíî_∑r£
(
js⁄_ª∂y_no_upd©e
));

207 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
CHANNEL_OK
);

208 
	`as£π_öt_equÆ
(
SERVER_NO_UPDATE_AVAILABLE
,

209 
	`£rvî_has_≥ndög_a˘i⁄
(&
a˘i⁄_id
));

212 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
,

213 
	`js⁄_tokíî_∑r£
(
js⁄_ª∂y_upd©e_avaûabÀ
));

214 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
CHANNEL_OK
);

215 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
,

216 
	`js⁄_tokíî_∑r£
(
js⁄_ª∂y_upd©e_d©a
));

217 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
CHANNEL_OK
);

218 
	`wûl_ªtu∫
(
__wøp_ªad_°©e
, 
STATE_NOT_AVAILABLE
);

219 
	`wûl_ªtu∫
(
__wøp_ªad_°©e
, 
SERVER_OK
);

220 
	`as£π_öt_equÆ
(
SERVER_UPDATE_AVAILABLE
,

221 
	`£rvî_has_≥ndög_a˘i⁄
(&
a˘i⁄_id
));

224 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
,

225 
	`js⁄_tokíî_∑r£
(
js⁄_ª∂y_upd©e_avaûabÀ
));

226 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
CHANNEL_OK
);

227 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
,

228 
	`js⁄_tokíî_∑r£
(
js⁄_ª∂y_upd©e_d©a
));

229 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
CHANNEL_OK
);

230 
	`wûl_ªtu∫
(
__wøp_ªad_°©e
, 
STATE_INSTALLED
);

231 
	`wûl_ªtu∫
(
__wøp_ªad_°©e
, 
SERVER_OK
);

232 
	`as£π_öt_equÆ
(
SERVER_NO_UPDATE_AVAILABLE
,

233 
	`£rvî_has_≥ndög_a˘i⁄
(&
a˘i⁄_id
));

236 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
,

237 
	`js⁄_tokíî_∑r£
(
js⁄_ª∂y_ˇn˚l_avaûabÀ
));

238 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
CHANNEL_OK
);

239 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
,

240 
	`js⁄_tokíî_∑r£
(
js⁄_ª∂y_ˇn˚l_d©a
));

241 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
CHANNEL_OK
);

242 
	`wûl_ªtu∫
(
__wøp_ch™√l_put
, 
CHANNEL_OK
);

243 
	`as£π_öt_equÆ
(
SERVER_OK
, 
	`£rvî_has_≥ndög_a˘i⁄
(&
a˘i⁄_id
));

244 
	}
}

246 
£rvî_›_ªs_t
 
£rvî_£t_pﬁlög_öãrvÆ
(
js⁄_obje˘
 *
js⁄_roŸ
);

247 
	$ã°_£rvî_£t_pﬁlög_öãrvÆ
(**
°©e
)

249 ()
°©e
;

252 c⁄° *
js⁄_°rög_vÆid
 = 
	`JSONQUOTE
(

261 c⁄° *
js⁄_°rög_övÆid_time
 = 
	`JSONQUOTE
(

272 
	`as£π_öt_equÆ
(
SERVER_EBADMSG
, 
	`£rvî_£t_pﬁlög_öãrvÆ
(
NULL
));

274 
js⁄_obje˘
 *
js⁄_d©a
 = 
NULL
;

275 
	`as£π_n⁄_nuŒ
((
js⁄_d©a
 = 
	`js⁄_tokíî_∑r£
(
js⁄_°rög_vÆid
)));

276 
	`as£π_öt_equÆ
(
SERVER_OK
, 
	`£rvî_£t_pﬁlög_öãrvÆ
(
js⁄_d©a
));

277 
	`as£π_öt_equÆ
(
£rvî_hawkbô
.
pﬁlög_öãrvÆ
, 60);

278 
	`as£π_öt_equÆ
(
	`js⁄_obje˘_put
(
js⁄_d©a
), 
JSON_OBJECT_FREED
);

279 
js⁄_d©a
 = 
NULL
;

281 
	`as£π_n⁄_nuŒ
(

282 (
js⁄_d©a
 = 
	`js⁄_tokíî_∑r£
(
js⁄_°rög_övÆid_time
)));

283 
	`as£π_öt_equÆ
(
SERVER_EBADMSG
,

284 
	`£rvî_£t_pﬁlög_öãrvÆ
(
js⁄_d©a
));

285 
	`as£π_öt_equÆ
(
	`js⁄_obje˘_put
(
js⁄_d©a
), 
JSON_OBJECT_FREED
);

286 
	}
}

288 
£rvî_›_ªs_t


289 
£rvî_£nd_dïloymít_ª∂y
(c⁄° 
a˘i⁄_id
, c⁄° 
job_˙t_max
,

290 c⁄° 
job_˙t_cur
, c⁄° *
föished
,

291 c⁄° *
executi⁄_°©us
, 
numdëaûs
, c⁄° *
dëaûs
[]);

292 
	$ã°_£rvî_£nd_dïloymít_ª∂y
(**
°©e
)

294 ()
°©e
;

295 
a˘i⁄_id
 = 23;

296 c⁄° *
dëaûs
[1] = { "UNIT TEST" };

299 
	`wûl_ªtu∫
(
__wøp_ch™√l_put
, 
CHANNEL_OK
);

300 
	`as£π_öt_equÆ
(
SERVER_OK
,

301 
	`£rvî_£nd_dïloymít_ª∂y
(

302 
a˘i⁄_id
, 5, 5,

303 
ª∂y_°©us_ªsu…_föished
.
suc˚ss
,

304 
ª∂y_°©us_executi⁄
.
˛o£d
, 1, 
dëaûs
));

307 
	`wûl_ªtu∫
(
__wøp_ch™√l_put
, 
CHANNEL_EIO
);

308 
	`as£π_öt_equÆ
(
SERVER_EERR
,

309 
	`£rvî_£nd_dïloymít_ª∂y
(

310 
a˘i⁄_id
, 5, 5,

311 
ª∂y_°©us_ªsu…_föished
.
suc˚ss
,

312 
ª∂y_°©us_executi⁄
.
˛o£d
, 1, 
dëaûs
));

313 
	}
}

315 
£rvî_›_ªs_t
 
£rvî_£nd_ˇn˚l_ª∂y
(
ch™√l_t
 *
ch™√l
, c⁄° 
a˘i⁄_id
);

316 
	$ã°_£rvî_£nd_ˇn˚l_ª∂y
(**
°©e
)

318 ()
°©e
;

319 
a˘i⁄_id
 = 23;

322 
	`wûl_ªtu∫
(
__wøp_ch™√l_put
, 
CHANNEL_OK
);

323 
	`as£π_öt_equÆ
(
SERVER_OK
, 
	`£rvî_£nd_ˇn˚l_ª∂y
(
£rvî_hawkbô
.
ch™√l
, 
a˘i⁄_id
));

326 
	`wûl_ªtu∫
(
__wøp_ch™√l_put
, 
CHANNEL_EIO
);

327 
	`as£π_öt_equÆ
(
SERVER_EERR
, 
	`£rvî_£nd_ˇn˚l_ª∂y
(
£rvî_hawkbô
.
ch™√l
, 
a˘i⁄_id
));

328 
	}
}

330 
£rvî_›_ªs_t


331 
£rvî_¥o˚ss_upd©e_¨tiÁ˘
(
a˘i⁄_id
, 
js⁄_obje˘
 *
js⁄_d©a_¨tiÁ˘
,

332 c⁄° *
upd©e_a˘i⁄
, c⁄° *
∑π
,

333 c⁄° *
vîsi⁄
, c⁄° *
«me
);

335 
	$ã°_£rvî_¥o˚ss_upd©e_¨tiÁ˘
(**
°©e
)

337 ()
°©e
;

338 
a˘i⁄_id
 = 23;

340 c⁄° *
js⁄_¨tiÁ˘
 = 
	`JSONQUOTE
(

364 #i‚de‡
CONFIG_SURICATTA_SSL


366 
js⁄_obje˘
 *
js⁄_d©a_¨tiÁ˘
 = 
	`js⁄_tokíî_∑r£
(
js⁄_¨tiÁ˘
);

367 
	`as£π_öt_equÆ
(
SERVER_EERR
,

368 
	`£rvî_¥o˚ss_upd©e_¨tiÁ˘
(
a˘i⁄_id
,

369 
	`js⁄_gë_key
(
js⁄_d©a_¨tiÁ˘
, "artifacts"),

373 #ifde‡
CONFIG_SURICATTA_SSL


375 
js⁄_obje˘
 *
js⁄_d©a_¨tiÁ˘
 = 
	`js⁄_tokíî_∑r£
(
js⁄_¨tiÁ˘
);

376 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë_fûe
, "CAFFEE");

377 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë_fûe
, 
CHANNEL_OK
);

378 
	`wûl_ªtu∫
(
__wøp_ùc_waô_f‹_com∂ëe
, 
SUCCESS
);

379 
	`as£π_öt_equÆ
(
SERVER_OK
,

380 
	`£rvî_¥o˚ss_upd©e_¨tiÁ˘
(
a˘i⁄_id
,

381 
	`js⁄_gë_key
(
js⁄_d©a_¨tiÁ˘
, "artifacts"),

383 
	`as£π_öt_equÆ
(
	`js⁄_obje˘_put
(
js⁄_d©a_¨tiÁ˘
),

384 
JSON_OBJECT_FREED
);

386 
	}
}

388 
£rvî_›_ªs_t
 
£rvî_ö°Æl_upd©e
();

389 
	$ã°_£rvî_ö°Æl_upd©e
(**
°©e
)

391 ()
°©e
;

394 c⁄° *
js⁄_ª∂y_upd©e_avaûabÀ
 = 
	`JSONQUOTE
(

408 c⁄° *
js⁄_ª∂y_upd©e_övÆid_d©a
 = 
	`JSONQUOTE
(

425 c⁄° *
js⁄_ª∂y_upd©e_vÆid_d©a_hâps
 = 
	`JSONQUOTE
(

459 c⁄° *
js⁄_ª∂y_upd©e_vÆid_d©a_hâp
 = 
	`JSONQUOTE
(

495 
js⁄_obje˘
 *
js⁄_d©a_upd©e_dëaûs_vÆid
 = 
NULL
;

496 
js⁄_obje˘
 *
js⁄_d©a_upd©e_avaûabÀ
 = 
NULL
;

497 
js⁄_obje˘
 *
js⁄_d©a_upd©e_dëaûs_övÆid
 = 
NULL
;

500 
js⁄_d©a_upd©e_avaûabÀ
 =

501 
	`js⁄_tokíî_∑r£
(
js⁄_ª∂y_upd©e_avaûabÀ
);

502 
js⁄_d©a_upd©e_dëaûs_övÆid
 =

503 
	`js⁄_tokíî_∑r£
(
js⁄_ª∂y_upd©e_övÆid_d©a
);

504 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
js⁄_d©a_upd©e_avaûabÀ
);

505 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
CHANNEL_OK
);

506 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
js⁄_d©a_upd©e_dëaûs_övÆid
);

507 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
CHANNEL_OK
);

508 
	`wûl_ªtu∫
(
__wøp_ch™√l_put
, 
CHANNEL_OK
);

509 
	`wûl_ªtu∫
(
__wøp_ch™√l_put
, 
CHANNEL_OK
);

510 
	`£rvî_ö°Æl_upd©e
();

513 
js⁄_d©a_upd©e_avaûabÀ
 =

514 
	`js⁄_tokíî_∑r£
(
js⁄_ª∂y_upd©e_avaûabÀ
);

515 #ifde‡
CONFIG_SURICATTA_SSL


516 
js⁄_d©a_upd©e_dëaûs_vÆid
 =

517 
	`js⁄_tokíî_∑r£
(
js⁄_ª∂y_upd©e_vÆid_d©a_hâps
);

518 ()
js⁄_ª∂y_upd©e_vÆid_d©a_hâp
;

520 
js⁄_d©a_upd©e_dëaûs_vÆid
 =

521 
	`js⁄_tokíî_∑r£
(
js⁄_ª∂y_upd©e_vÆid_d©a_hâp
);

522 ()
js⁄_ª∂y_upd©e_vÆid_d©a_hâps
;

524 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
js⁄_d©a_upd©e_avaûabÀ
);

525 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
CHANNEL_OK
);

526 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
js⁄_d©a_upd©e_dëaûs_vÆid
);

527 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë
, 
CHANNEL_OK
);

528 
	`wûl_ªtu∫
(
__wøp_ch™√l_put
, 
CHANNEL_OK
);

529 #ifde‡
CONFIG_SURICATTA_SSL


530 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë_fûe
, "CAFFEE");

532 
	`wûl_ªtu∫
(
__wøp_ch™√l_gë_fûe
, 
CHANNEL_OK
);

533 
	`wûl_ªtu∫
(
__wøp_ùc_waô_f‹_com∂ëe
, 
SUCCESS
);

534 
	`wûl_ªtu∫
(
__wøp_ch™√l_put
, 
CHANNEL_OK
);

535 
	`wûl_ªtu∫
(
__wøp_ßve_°©e
, 
SERVER_OK
);

536 
	`wûl_ªtu∫
(
__wøp_ch™√l_put
, 
CHANNEL_OK
);

537 
	`as£π_öt_equÆ
(
SERVER_OK
, 
	`£rvî_ö°Æl_upd©e
());

538 
	}
}

540 
	$£rvî_hawkbô_£tup
(**
°©e
)

542 ()
°©e
;

543 
£rvî_hawkbô
.
uæ
 = (*)"http://void.me";

544 
£rvî_hawkbô
.
ã«¡
 = (*)"tenant";

545 
£rvî_hawkbô
.
devi˚_id
 = (*)"deviceID";

546 
£rvî_hawkbô
.
ch™√l
 = 
	`ch™√l_√w
();

547 
£rvî_hawkbô
.
ch™√l
->
›í
 = & 
ch™√l_›í
;

548 
£rvî_hawkbô
.
ch™√l
->
˛o£
 = & 
ch™√l_˛o£
;

549 
£rvî_hawkbô
.
ch™√l
->
gë
 = & 
ch™√l_gë
;

550 
£rvî_hawkbô
.
ch™√l
->
gë_fûe
 = & 
ch™√l_gë_fûe
;

551 
£rvî_hawkbô
.
ch™√l
->
put
 = & 
ch™√l_put
;

553 
	}
}

555 
	$£rvî_hawkbô_ã¨down
(**
°©e
)

557 ()
°©e
;

559 
	}
}

561 
	$maö
()

563 
îr‹_cou¡
 = 0;

564 c⁄° 
CMUnôTe°
 
hawkbô_£rvî_ã°s
[] = {

565 
	`cmocka_unô_ã°
(
ã°_£rvî_ö°Æl_upd©e
),

566 
	`cmocka_unô_ã°
(
ã°_£rvî_£nd_dïloymít_ª∂y
),

567 
	`cmocka_unô_ã°
(
ã°_£rvî_£nd_ˇn˚l_ª∂y
),

568 
	`cmocka_unô_ã°
(
ã°_£rvî_¥o˚ss_upd©e_¨tiÁ˘
),

569 
	`cmocka_unô_ã°
(
ã°_£rvî_£t_pﬁlög_öãrvÆ
),

570 
	`cmocka_unô_ã°
(
ã°_£rvî_has_≥ndög_a˘i⁄
)};

571 
îr‹_cou¡
 +
	`cmocka_run_group_ã°s_«me
(

572 "£rvî_hawkbô", 
hawkbô_£rvî_ã°s
, 
£rvî_hawkbô_£tup
,

573 
£rvî_hawkbô_ã¨down
);

574  
îr‹_cou¡
;

575 
	}
}

	@swupdate/tools/client.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<uni°d.h
>

26 
	~<°rög.h
>

27 
	~<î∫o.h
>

28 
	~<sys/io˘l.h
>

29 
	~<f˙é.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/sockë.h
>

32 
	~<±hªad.h
>

33 
	~<°dboﬁ.h
>

34 
	~"√tw‹k_ùc.h
"

36 
	$ußge
() {

37 
	`¥ötf
("client <image .swuÅo be installed>...\n");

38 
	}
}

40 
	gbuf
[256];

41 
	gfd
;

42 
	gvîbo£
 = 1;

44 
±hªad_muãx_t
 
	gmymuãx
;

52 
	$ªadimage
(**
p
, *
size
) {

53 
ªt
;

55 
ªt
 = 
	`ªad
(
fd
, 
buf
, (buf));

57 *
p
 = 
buf
;

59 *
size
 = 
ªt
;

61  
ªt
;

62 
	}
}

68 
	$¥öt°©us
(
ùc_mesßge
 *
msg
)

70 i‡(
vîbo£
)

71 
	`¥ötf
("Status: %d message: %s\n",

72 
msg
->
d©a
.
°©us
.
cuºít
,

73 
	`°æí
(
msg
->
d©a
.
°©us
.
desc
) > 0 ? msg->data.status.desc : "");

76 
	}
}

82 
	$íd
(
RECOVERY_STATUS
 
°©us
)

84 
	`¥ötf
("Swupdate %s\n",

85 
°©us
 =
FAILURE
 ? "*failed* !" :

88 
	`±hªad_muãx_u∆ock
(&
mymuãx
);

91 
	}
}

96 
	$£nd_fûe
(c⁄° * 
fûíame
) {

97 
rc
;

98 i‡–(
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
)) < 0) {

99 
	`¥ötf
 ("I c™nŸ o≥¿%s\n", 
fûíame
);

104 
	`±hªad_muãx_lock
(&
mymuãx
);

105 
rc
 = 
	`swupd©e_async_°¨t
(
ªadimage
, 
¥öt°©us
,

106 
íd
, 
Ál£
);

107 i‡(
rc
)

108 
	`¥ötf
("swupd©e_async_°¨àªtu∫†%d\n", 
rc
);

111 
	`±hªad_muãx_lock
(&
mymuãx
);

114 
	`±hªad_muãx_u∆ock
(&
mymuãx
);

117 
	}
}

123 
	$maö
(
¨gc
, *
¨gv
[]) {

124 
c
;

126 
	`±hªad_muãx_öô
(&
mymuãx
, 
NULL
);

129 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hqv")Ë!
EOF
) {

130 
c
) {

132 
	`ußge
();

135 
vîbo£
 = 0;

138 
vîbo£
++;

141 
	`ußge
();

145 
¨gc
 -
›töd
;

146 
¨gv
 +
›töd
;

148 i‡(
¨gc
 =0 || (¨g¯=1 && 
	`°rcmp
(
¨gv
[0], "-") == 0)) {

149 i‡(
	`£nd_fûe
(
NULL
)Ë
	`exô
(1);

151 
i
 = 0; i < 
¨gc
; i++) {

152 i‡(
	`£nd_fûe
(
¨gv
[
i
])Ë
	`exô
(1);

156 
	`exô
(0);

157 
	}
}

	@swupdate/tools/hawkbitcfg.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<°rög.h
>

17 
	~<î∫o.h
>

18 
	~<sys/io˘l.h
>

19 
	~<f˙é.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~"√tw‹k_ùc.h
"

24 
	$ußge
(*
¥ogøm
) {

25 
	`¥ötf
("%†<pﬁlög i¡îvÆ 0=‰om sîvî> ..\n", 
¥ogøm
);

26 
	}
}

31 
	$maö
(
¨gc
, *
¨gv
[]) {

32 
rc
;

33 
ùc_mesßge
 
msg
;

34 
size_t
 
size
;

35 *
buf
;

37 i‡(
¨gc
 < 2) {

38 
	`ußge
(
¨gv
[0]);

39 
	`exô
(1);

42 
	`mem£t
(&
msg
, 0, (msg));

43 
msg
.
d©a
.
ö°msg
.
sour˚
 = 
SOURCE_SURICATTA
;

44 
msg
.
d©a
.
ö°msg
.
cmd
 = 
CMD_CONFIG
;

46 
size
 = (
msg
.
d©a
.
ö°msg
.
buf
);

47 
buf
 = 
msg
.
d©a
.
ö°msg
.buf;

57 
	`¢¥ötf
(
buf
, 
size
, "{ \"pﬁlög\" : \"%lu\"}", 
	`°πoul
(
¨gv
[1], 
NULL
, 10));

59 
	`Ârötf
(
°dout
, "Sídög: '%s'", 
msg
.
d©a
.
ö°msg
.
buf
);

61 
rc
 = 
	`ùc_£nd_cmd
(&
msg
);

63 
	`Ârötf
(
°dout
, "Ñëu∫ed %d\n", 
rc
);

64 i‡(!
rc
)

65 
	`Ârötf
(
°dout
, "ServerÑeturns %s\n",

66 (
msg
.
ty≥
 =
ACK
) ? "ACK" : "NACK");

68 
	`exô
(0);

69 
	}
}

	@swupdate/tools/progress.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°dboﬁ.h
>

11 
	~<uni°d.h
>

12 
	~<°rög.h
>

13 
	~<î∫o.h
>

14 
	~<sys/io˘l.h
>

15 
	~<f˙é.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/sockë.h
>

18 
	~<sys/°©.h
>

19 
	~<sys/un.h
>

20 
	~<sys/£À˘.h
>

21 
	~<¨∑/öë.h
>

22 
	~<√töë/ö.h
>

23 
	~<±hªad.h
>

24 
	~<gë›t.h
>

26 
	~<¥ogªss_ùc.h
>

28 
	#PSPLASH_MSG_SIZE
 64

	)

30 
	#RESET
 0

	)

31 
	#BRIGHT
 1

	)

32 
	#DIM
 2

	)

33 
	#UNDERLINE
 3

	)

34 
	#BLINK
 4

	)

35 
	#REVERSE
 7

	)

36 
	#HIDDEN
 8

	)

38 
	#BLACK
 0

	)

39 
	#RED
 1

	)

40 
	#GREEN
 2

	)

41 
	#YELLOW
 3

	)

42 
	#BLUE
 4

	)

43 
	#MAGENTA
 5

	)

44 
	#CYAN
 6

	)

45 
	#WHITE
 7

	)

47 
	$ª£âîm
()

49 
	`Ârötf
(
°dout
, "%c[%dm", 0x1B, 
RESET
);

50 
	}
}

52 
	$ãxtcﬁ‹
(
©å
, 
fg
, 
bg
)

53 { 
comm™d
[13];

56 
	`•rötf
(
comm™d
, "%c[%d;%d;%dm", 0x1B, 
©å
, 
fg
 + 30, 
bg
 + 40);

57 
	`Ârötf
(
°dout
, "%s", 
comm™d
);

58 
	}
}

60 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

61 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

62 {"p•œsh", 
no_¨gumít
, 
NULL
, 'p'},

63 {"ªboŸ", 
no_¨gumít
, 
NULL
, 'r'},

64 {"waô", 
no_¨gumít
, 
NULL
, 'w'},

65 {"cﬁ‹", 
no_¨gumít
, 
NULL
, 'c'},

66 {"sockë", 
ªquúed_¨gumít
, 
NULL
, 's'},

67 {
NULL
, 0, NULL, 0}

70 
	$ußge
(*
¥ogøm«me
)

72 
	`Ârötf
(
°dout
, "%†(compûed %s)\n", 
¥ogøm«me
, 
__DATE__
);

73 
	`Ârötf
(
°dout
, "Usage %s [OPTION]\n",

74 
¥ogøm«me
);

75 
	`Ârötf
(
°dout
,

83 
	}
}

85 
	$p•œsh_öô
(*
pùe
)

87 
p•œsh_pùe_fd
;

88 
pid_p•œsh
;

90 i‡((
p•œsh_pùe_fd
 = 
	`›í
(
pùe
, 
O_WRONLY
 | 
O_NONBLOCK
)) == -1) {

92 
pid_p•œsh
 = 
	`f‹k
();

93 i‡(
pid_p•œsh
 < 0)

95 i‡(
pid_p•œsh
 == 0) {

96 
	`exe˛
("/usr/bin/psplash", "psplash", (*)0);

97 
	`exô
(1);

99 
	`¶ìp
(1);

100 i‡((
p•œsh_pùe_fd
 = 
	`›í
(
pùe
, 
O_WRONLY
 | 
O_NONBLOCK
)) == -1) {

107 
	}
}

109 
	$p•œsh_wrôe_fifo
(*
pùe
, *
buf
)

111 
p•œsh_pùe_fd
, 
ªt
;

113 i‡((
p•œsh_pùe_fd
 = 
	`›í
(
pùe
, 
O_WRONLY
 | 
O_NONBLOCK
)) == -1) {

114 
	`Ârötf
(
°dîr
, "Error unableÅo openÖsplashÖipe, closing...\n");

118 
ªt
 = 
	`wrôe
(
p•œsh_pùe_fd
, 
buf
, 
	`°æí
(buf) + 1);

119 i‡(
ªt
 < 0) {

120 
	`Ârötf
(
°dîr
, "PSPLASHÇotávailableánymore");

123 
	`˛o£
(
p•œsh_pùe_fd
);

124 
	}
}

126 
	$p•œsh_¥ogªss
(*
pùe
, 
¥ogªss_msg
 *
pmsg
)

128 *
buf
;

130 
buf
 = 
	`mÆloc
(
PSPLASH_MSG_SIZE
);

132 i‡(!
buf
)

135 
pmsg
->
°©us
) {

136 
SUCCESS
:

137 
FAILURE
:

138 
	`¢¥ötf
(
buf
, 
PSPLASH_MSG_SIZE
 - 1, "MSG %s",

139 
pmsg
->
°©us
 =
SUCCESS
 ? "SUCCESS" : "FAILURE");

140 
	`p•œsh_wrôe_fifo
(
pùe
, 
buf
);

142 
	`¶ìp
(5);

144 
	`¢¥ötf
(
buf
, 
PSPLASH_MSG_SIZE
 - 1, "QUIT");

145 
	`p•œsh_wrôe_fifo
(
pùe
, 
buf
);

146 
	`‰ì
(
buf
);

149 
DONE
:

150 
	`‰ì
(
buf
);

157 
	`¢¥ötf
(
buf
, 
PSPLASH_MSG_SIZE
 - 1, "MSG step %d of %d",

158 
pmsg
->
cur_°ï
,Ömsg->
n°ïs
);

159 
	`p•œsh_wrôe_fifo
(
pùe
, 
buf
);

161 
	`u¶ìp
(100);

163 
	`¢¥ötf
(
buf
, 
PSPLASH_MSG_SIZE
 - 1, "PROGRESS %d", 
pmsg
->
cur_≥r˚¡
);

164 
	`p•œsh_wrôe_fifo
(
pùe
, 
buf
);

166 
	`‰ì
(
buf
);

167 
	}
}

169 
	$maö
(
¨gc
, **
¨gv
)

171 
c⁄nfd
;

172 
¥ogªss_msg
 
msg
;

173 c⁄° *
tmpdú
;

174 
p•œsh_pùe_∑th
[256];

175 
p•œsh_ok
 = 0;

176 
cur°ï
 = 0;

177 
≥r˚¡
 = 0;

178 
b¨
[60];

179 
fûÀd_Àn
;

180 
›t_c
 = 0;

181 
›t_w
 = 0;

182 
›t_r
 = 0;

183 
›t_p
 = 0;

184 
c
;

185 
RECOVERY_STATUS
 
°©us
 = 
IDLE
;

188 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "cwprhs:",

189 
l⁄g_›ti⁄s
, 
NULL
)Ë!
EOF
) {

190 
c
) {

192 
›t_c
 = 1;

195 
›t_w
 = 1;

198 
›t_p
 = 1;

201 
›t_r
 = 1;

204 
SOCKET_PROGRESS_PATH
 = 
	`°rdup
(
›èrg
);

207 
	`ußge
(
¨gv
[0]);

208 
	`exô
(0);

211 
	`ußge
(
¨gv
[0]);

212 
	`exô
(1);

217 
tmpdú
 = 
	`gëív
("TMPDIR");

218 i‡(!
tmpdú
)

219 
tmpdú
 = "/tmp";

220 
	`¢¥ötf
(
p•œsh_pùe_∑th
, ’•œsh_pùe_∑th), "%s/p•œsh_fifo", 
tmpdú
);

223 
c⁄nfd
 = -1;

225 i‡(
c⁄nfd
 < 0) {

226 
c⁄nfd
 = 
	`¥ogªss_ùc_c⁄√˘
(
›t_w
);

229 i‡(
	`¥ogªss_ùc_ª˚ive
(&
c⁄nfd
, &
msg
) == -1) {

236 i‡((
°©us
 =
IDLE
Ë&& (
msg
.status != IDLE)) {

237 
	`Ârötf
(
°dout
, "\nUpdate started !\n");

238 
	`Ârötf
(
°dout
, "Interface: ");

239 
msg
.
sour˚
) {

240 
SOURCE_UNKNOWN
:

241 
	`Ârötf
(
°dout
, "UNKNOWN\n\n");

243 
SOURCE_WEBSERVER
:

244 
	`Ârötf
(
°dout
, "WEBSERVER\n\n");

246 
SOURCE_SURICATTA
:

247 
	`Ârötf
(
°dout
, "BACKEND\n\n");

249 
SOURCE_DOWNLOADER
:

250 
	`Ârötf
(
°dout
, "DOWNLOADER\n\n");

252 
SOURCE_LOCAL
:

253 
	`Ârötf
(
°dout
, "LOCAL\n\n");

259 i‡(
msg
.
öfﬁí
 > 0)

260 
	`Ârötf
(
°dout
, "INFO : %s\n\n", 
msg
.
öfo
);

262 i‡(!
p•œsh_ok
 && 
›t_p
) {

263 
p•œsh_ok
 = 
	`p•œsh_öô
(
p•œsh_pùe_∑th
);

266 i‡((
msg
.
cur_°ï
 !
cur°ï
) && (curstep != 0))

267 
	`Ârötf
(
°dout
, "\n");

269 
fûÀd_Àn
 = (
b¨
Ë* 
msg
.
cur_≥r˚¡
 / 100;

270 i‡(
fûÀd_Àn
 > (
b¨
))

271 
fûÀd_Àn
 = (
b¨
);

273 
	`mem£t
(
b¨
,'=', 
fûÀd_Àn
);

274 
	`mem£t
(&
b¨
[
fûÀd_Àn
], '-', (bar) - filled_len);

276 
	`Ârötf
(
°dout
, "[ %.60s ] %d of %d %d%% (%s)\r",

277 
b¨
,

278 
msg
.
cur_°ï
, msg.
n°ïs
, msg.
cur_≥r˚¡
,

279 
msg
.
cur_image
);

280 
	`fÊush
(
°dout
);

282 i‡(
p•œsh_ok
 && ((
msg
.
cur_°ï
 !
cur°ï
Ë|| (msg.
cur_≥r˚¡
 !
≥r˚¡
))) {

283 
	`p•œsh_¥ogªss
(
p•œsh_pùe_∑th
, &
msg
);

284 
cur°ï
 = 
msg
.
cur_°ï
;

285 
≥r˚¡
 = 
msg
.
cur_≥r˚¡
;

288 
msg
.
°©us
) {

289 
SUCCESS
:

290 
FAILURE
:

291 
	`Ârötf
(
°dout
, "\n\n");

292 i‡(
›t_c
) {

293 i‡(
msg
.
°©us
 =
FAILURE
)

294 
	`ãxtcﬁ‹
(
BLINK
, 
RED
, 
BLACK
);

296 
	`ãxtcﬁ‹
(
BRIGHT
, 
GREEN
, 
BLACK
);

299 
	`Ârötf
(
°dout
, "%†!\n", 
msg
.
°©us
 =
SUCCESS


302 
	`ª£âîm
();

303 i‡(
p•œsh_ok
)

304 
	`p•œsh_¥ogªss
(
p•œsh_pùe_∑th
, &
msg
);

305 
p•œsh_ok
 = 0;

306 i‡((
msg
.
°©us
 =
SUCCESS
Ë&& 
›t_r
) {

307 
	`¶ìp
(5);

308 i‡(
	`sy°em
("reboot") < 0) {

309 
	`Ârötf
(
°dout
, "PleaseÑesetÅhe board.\n");

313 
DONE
:

314 
	`Ârötf
(
°dout
, "\nDONE.\n");

320 
°©us
 = 
msg
.status;

322 
	}
}

	@swupdate/tools/sendtohawkbit.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<°rög.h
>

17 
	~<î∫o.h
>

18 
	~<sys/io˘l.h
>

19 
	~<f˙é.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~"√tw‹k_ùc.h
"

24 
	$ußge
(*
¥ogøm
) {

25 
	`¥ötf
("%†<a˘i⁄ id> <°©us> <föished> <executi⁄> <dëaû 1> <dëaû 2> ..\n", 
¥ogøm
);

26 
	}
}

28 
	gfd
;

29 
	gvîbo£
 = 1;

34 
	$maö
(
¨gc
, *
¨gv
[]) {

35 
rc
, 
wrôãn
, 
i
;

36 
ùc_mesßge
 
msg
;

37 
size_t
 
size
;

38 *
buf
;

40 i‡(
¨gc
 < 3) {

41 
	`ußge
(
¨gv
[0]);

42 
	`exô
(1);

45 
	`mem£t
(&
msg
, 0, (msg));

46 
msg
.
d©a
.
ö°msg
.
sour˚
 = 
SOURCE_SURICATTA
;

47 
msg
.
d©a
.
ö°msg
.
cmd
 = 
CMD_ACTIVATION
;

49 
size
 = (
msg
.
d©a
.
ö°msg
.
buf
);

50 
buf
 = 
msg
.
d©a
.
ö°msg
.buf;

59 
i
 = 1; i < 
¨gc
; i++) {

60 
i
) {

62 
wrôãn
 = 
	`¢¥ötf
(
buf
, 
size
, "{ \"id\" : \"%lu\"", 
	`°πoul
(
¨gv
[
i
], 
NULL
, 10));

65 
wrôãn
 = 
	`¢¥ötf
(
buf
, 
size
, ", \"°©us\" : \"%s\"", 
¨gv
[
i
]);

68 
wrôãn
 = 
	`¢¥ötf
(
buf
, 
size
, ",\"föished\" : \"%s\"", 
¨gv
[
i
]);

71 
wrôãn
 = 
	`¢¥ötf
(
buf
, 
size
, ",\"executi⁄\" : \"%s\"", 
¨gv
[
i
]);

74 
wrôãn
 = 
	`¢¥ötf
(
buf
, 
size
, ",\"dëaûs\" : [ \"%s\"", 
¨gv
[
i
]);

77 
wrôãn
 = 
	`¢¥ötf
(
buf
, 
size
, ",\"%s\"", 
¨gv
[
i
]);

81 
buf
 +
wrôãn
;

82 
size
 -
wrôãn
;

84 i‡(
size
 <= 0)

88 i‡(
i
 > 4)

89 
wrôãn
 = 
	`¢¥ötf
(
buf
, 
size
, "]}");

91 
wrôãn
 = 
	`¢¥ötf
(
buf
, 
size
, "}");

93 
	`Ârötf
(
°dout
, "Sídög: '%s'", 
msg
.
d©a
.
ö°msg
.
buf
);

95 
rc
 = 
	`ùc_£nd_cmd
(&
msg
);

97 
	`Ârötf
(
°dout
, "Ñëu∫ed %d\n", 
rc
);

98 i‡(!
rc
)

99 
	`Ârötf
(
°dout
, "ServerÑeturns %s\n",

100 (
msg
.
ty≥
 =
ACK
) ? "ACK" : "NACK");

102 
	`exô
(0);

103 
	}
}

	@swupdate_status.h

8 #i‚de‡
_SWUPDATE_STATUS_H


9 
	#_SWUPDATE_STATUS_H


	)

18 
	mIDLE
,

19 
	mSTART
,

20 
	mRUN
,

21 
	mSUCCESS
,

22 
	mFAILURE
,

23 
	mDOWNLOAD
,

24 
	mDONE
,

25 
	mSUBPROCESS
,

26 } 
	tRECOVERY_STATUS
;

29 
	mSOURCE_UNKNOWN
,

30 
	mSOURCE_WEBSERVER
,

31 
	mSOURCE_SURICATTA
,

32 
	mSOURCE_DOWNLOADER
,

33 
	mSOURCE_LOCAL


34 } 
	tsour˚ty≥
;

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/curl/curl.h

1 #i‚de‡
__CURL_CURL_H


2 
	#__CURL_CURL_H


	)

33 
	~"cuævî.h
"

34 
	~"cuæbuûd.h
"

35 
	~"cuæruÀs.h
"

41 #i‡(
deföed
(
_WIN32
Ë|| deföed(
__WIN32__
)) && \

42 !
deföed
(
WIN32
Ë&& !
	$deföed
(
__SYMBIAN32__
)

43 
	#WIN32


	)

46 
	~<°dio.h
>

47 
	~<limôs.h
>

49 #i‡
	`deföed
(
__FªeBSD__
) && (__FreeBSD__ >= 2)

51 
	~<o§ñd©e.h
>

55 
	~<sys/ty≥s.h
>

56 
	~<time.h
>

58 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
_WIN32_WCE
Ë&& !deföed(
__CYGWIN__
)

59 #i‡!(
	`deföed
(
_WINSOCKAPI_
Ë|| deföed(
_WINSOCK_H
) || \

60 
	`deföed
(
__LWIP_OPT_H__
Ë|| 
	$deföed
(
LWIP_HDR_OPT_H
))

63 
	~<wösock2.h
>

64 
	~<ws2t˝ù.h
>

71 #i‡
	`deföed
(
_AIX
Ë|| deföed(
__NOVELL_LIBC__
Ë|| deföed(
__NëBSD__
) || \

72 
	`deföed
(
__möix
Ë|| deföed(
__SYMBIAN32__
Ë|| deföed(
__INTEGRITY
) || \

73 
	`deföed
(
ANDROID
Ë|| deföed(
__ANDROID__
Ë|| deföed(
__O≥nBSD__
) || \

74 (
	`deföed
(
__FªeBSD_vîsi⁄
) && (__FreeBSD_version < 800000))

75 
	~<sys/£À˘.h
>

78 #i‡!
	`deföed
(
WIN32
Ë&& !deföed(
_WIN32_WCE
)

79 
	~<sys/sockë.h
>

82 #i‡!
	`deföed
(
WIN32
Ë&& !deföed(
__WATCOMC__
Ë&& !deföed(
__VXWORKS__
)

83 
	~<sys/time.h
>

86 #ifde‡
__BEOS__


87 
	~<suµ‹t/Suµ‹tDefs.h
>

90 #ifde‡ 
__˝lu•lus


94 
	tCURL
;

100 #ifde‡
CURL_STATICLIB


101 
	#CURL_EXTERN


	)

102 #ñi‡
	`deföed
(
WIN32
Ë|| deföed(
_WIN32
Ë|| deföed(
__SYMBIAN32__
)

103 #i‡
	`deföed
(
BUILDING_LIBCURL
)

104 
	#CURL_EXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

106 
	#CURL_EXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

108 #ñi‡
	`deföed
(
BUILDING_LIBCURL
Ë&& deföed(
CURL_HIDDEN_SYMBOLS
)

109 
	#CURL_EXTERN
 
CURL_EXTERN_SYMBOL


	)

111 
	#CURL_EXTERN


	)

114 #i‚de‡
cuæ_sockë_ty≥def


116 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
__LWIP_OPT_H__
Ë&& !deföed(
LWIP_HDR_OPT_H
)

117 
SOCKET
 
	tcuæ_sockë_t
;

118 
	#CURL_SOCKET_BAD
 
INVALID_SOCKET


	)

120 
	tcuæ_sockë_t
;

121 
	#CURL_SOCKET_BAD
 -1

	)

123 
	#cuæ_sockë_ty≥def


	)

126 
	scuæ_hâµo°
 {

127 
cuæ_hâµo°
 *
√xt
;

128 *
«me
;

129 
«mñígth
;

130 *
c⁄ã¡s
;

131 
c⁄ã¡¶ígth
;

133 *
buf„r
;

134 
buf„æígth
;

135 *
c⁄ã¡ty≥
;

136 
cuæ_¶i°
* 
c⁄ã¡hódî
;

137 
cuæ_hâµo°
 *
m‹e
;

140 
Êags
;

143 
	#CURL_HTTPPOST_FILENAME
 (1<<0)

	)

145 
	#CURL_HTTPPOST_READFILE
 (1<<1)

	)

147 
	#CURL_HTTPPOST_PTRNAME
 (1<<2)

	)

149 
	#CURL_HTTPPOST_PTRCONTENTS
 (1<<3)

	)

151 
	#CURL_HTTPPOST_BUFFER
 (1<<4)

	)

153 
	#CURL_HTTPPOST_PTRBUFFER
 (1<<5)

	)

156 
	#CURL_HTTPPOST_CALLBACK
 (1<<6)

	)

158 
	#CURL_HTTPPOST_LARGE
 (1<<7)

	)

160 *
showfûíame
;

163 *
u£Ω
;

165 
cuæ_off_t
 
c⁄ã¡Àn
;

172 (*
	tcuæ_¥ogªss_ˇŒback
)(*
	t˛õ¡p
,

173 
	td…ŸÆ
,

174 
	td ow
,

175 
	tu…ŸÆ
,

176 
	tu ow
);

180 (*
	tcuæ_x„röfo_ˇŒback
)(*
	t˛õ¡p
,

181 
	tcuæ_off_t
 
	td…ŸÆ
,

182 
	tcuæ_off_t
 
	td ow
,

183 
	tcuæ_off_t
 
	tu…ŸÆ
,

184 
	tcuæ_off_t
 
	tu ow
);

186 #i‚de‡
CURL_MAX_WRITE_SIZE


193 
	#CURL_MAX_WRITE_SIZE
 16384

	)

196 #i‚de‡
CURL_MAX_HTTP_HEADER


200 
	#CURL_MAX_HTTP_HEADER
 (100*1024)

	)

205 
	#CURL_WRITEFUNC_PAUSE
 0x10000001

	)

207 
	`size_t
 (*
	tcuæ_wrôe_ˇŒback
)(*
	tbuf„r
,

208 
	tsize_t
 
	tsize
,

209 
	tsize_t
 
	tnôems
,

210 *
	tout°ªam
);

216 
CURLFILETYPE_FILE
 = 0,

217 
CURLFILETYPE_DIRECTORY
,

218 
CURLFILETYPE_SYMLINK
,

219 
CURLFILETYPE_DEVICE_BLOCK
,

220 
CURLFILETYPE_DEVICE_CHAR
,

221 
CURLFILETYPE_NAMEDPIPE
,

222 
CURLFILETYPE_SOCKET
,

223 
CURLFILETYPE_DOOR
,

225 
CURLFILETYPE_UNKNOWN


226 } 
	tcuæfûëy≥
;

228 
	#CURLFINFOFLAG_KNOWN_FILENAME
 (1<<0)

	)

229 
	#CURLFINFOFLAG_KNOWN_FILETYPE
 (1<<1)

	)

230 
	#CURLFINFOFLAG_KNOWN_TIME
 (1<<2)

	)

231 
	#CURLFINFOFLAG_KNOWN_PERM
 (1<<3)

	)

232 
	#CURLFINFOFLAG_KNOWN_UID
 (1<<4)

	)

233 
	#CURLFINFOFLAG_KNOWN_GID
 (1<<5)

	)

234 
	#CURLFINFOFLAG_KNOWN_SIZE
 (1<<6)

	)

235 
	#CURLFINFOFLAG_KNOWN_HLINKCOUNT
 (1<<7)

	)

241 
	scuæ_fûeöfo
 {

242 *
fûíame
;

243 
cuæfûëy≥
 
fûëy≥
;

244 
time_t
 
time
;

245 
≥rm
;

246 
uid
;

247 
gid
;

248 
cuæ_off_t
 
size
;

249 
h¨dlöks
;

253 *
time
;

254 *
≥rm
;

255 *
u£r
;

256 *
group
;

257 *
èrgë
;

258 } 
°rögs
;

260 
Êags
;

263 * 
b_d©a
;

264 
size_t
 
b_size
;

265 
size_t
 
b_u£d
;

269 
	#CURL_CHUNK_BGN_FUNC_OK
 0

	)

270 
	#CURL_CHUNK_BGN_FUNC_FAIL
 1

	)

271 
	#CURL_CHUNK_BGN_FUNC_SKIP
 2

	)

276 (*
	tcuæ_chunk_bgn_ˇŒback
)(c⁄° *
	tå™s„r_öfo
,

277 *
	t±r
,

278 
	tªmaös
);

281 
	#CURL_CHUNK_END_FUNC_OK
 0

	)

282 
	#CURL_CHUNK_END_FUNC_FAIL
 1

	)

290 (*
	tcuæ_chunk_íd_ˇŒback
)(*
	t±r
);

293 
	#CURL_FNMATCHFUNC_MATCH
 0

	)

294 
	#CURL_FNMATCHFUNC_NOMATCH
 1

	)

295 
	#CURL_FNMATCHFUNC_FAIL
 2

	)

299 (*
	tcuæ_‚m©ch_ˇŒback
)(*
	t±r
,

300 c⁄° *
	t∑âîn
,

301 c⁄° *
	t°rög
);

304 
	#CURL_SEEKFUNC_OK
 0

	)

305 
	#CURL_SEEKFUNC_FAIL
 1

	)

306 
	#CURL_SEEKFUNC_CANTSEEK
 2

	)

308 (*
	tcuæ_£ek_ˇŒback
)(*
	tö°ªam
,

309 
	tcuæ_off_t
 
	toff£t
,

310 
	t‹igö
);

314 
	#CURL_READFUNC_ABORT
 0x10000000

	)

317 
	#CURL_READFUNC_PAUSE
 0x10000001

	)

319 
	`size_t
 (*
	tcuæ_ªad_ˇŒback
)(*
	tbuf„r
,

320 
	tsize_t
 
	tsize
,

321 
	tsize_t
 
	tnôems
,

322 *
	tö°ªam
);

325 
CURLSOCKTYPE_IPCXN
,

326 
CURLSOCKTYPE_ACCEPT
,

327 
CURLSOCKTYPE_LAST


328 } 
	tcuæsockty≥
;

332 
	#CURL_SOCKOPT_OK
 0

	)

333 
	#CURL_SOCKOPT_ERROR
 1

	)

335 
	#CURL_SOCKOPT_ALREADY_CONNECTED
 2

	)

337 (*
	tcuæ_sock›t_ˇŒback
)(*
	t˛õ¡p
,

338 
	tcuæ_sockë_t
 
	tcuæfd
,

339 
	tcuæsockty≥
 
	tpuΩo£
);

341 
	scuæ_sockaddr
 {

342 
Ámûy
;

343 
sockty≥
;

344 
¥Ÿocﬁ
;

345 
addæí
;

348 
sockaddr
 
addr
;

351 
cuæ_sockë_t


352 (*
	tcuæ_›ísockë_ˇŒback
)(*
	t˛õ¡p
,

353 
	tcuæsockty≥
 
	tpuΩo£
,

354 
	tcuæ_sockaddr
 *
	taddªss
);

357 (*
	tcuæ_˛o£sockë_ˇŒback
)(*
	t˛õ¡p
, 
	tcuæ_sockë_t
 
	tôem
);

360 
CURLIOE_OK
,

361 
CURLIOE_UNKNOWNCMD
,

362 
CURLIOE_FAILRESTART
,

363 
CURLIOE_LAST


364 } 
	tcuæi€º
;

367 
CURLIOCMD_NOP
,

368 
CURLIOCMD_RESTARTREAD
,

369 
CURLIOCMD_LAST


370 } 
	tcuæiocmd
;

372 
	`cuæi€º
 (*
	tcuæ_io˘l_ˇŒback
)(
	tCURL
 *
	th™dÀ
,

373 
	tcmd
,

374 *
	t˛õ¡p
);

382 *(*
	tcuæ_mÆloc_ˇŒback
)(
	tsize_t
 
	tsize
);

383 (*
	tcuæ_‰ì_ˇŒback
)(*
	t±r
);

384 *(*
	tcuæ_ªÆloc_ˇŒback
)(*
	t±r
, 
	tsize_t
 
	tsize
);

385 *(*
	tcuæ_°rdup_ˇŒback
)(c⁄° *
	t°r
);

386 *(*
	tcuæ_ˇŒoc_ˇŒback
)(
	tsize_t
 
	tnmemb
, size_à
	tsize
);

390 
CURLINFO_TEXT
 = 0,

391 
CURLINFO_HEADER_IN
,

392 
CURLINFO_HEADER_OUT
,

393 
CURLINFO_DATA_IN
,

394 
CURLINFO_DATA_OUT
,

395 
CURLINFO_SSL_DATA_IN
,

396 
CURLINFO_SSL_DATA_OUT
,

397 
CURLINFO_END


398 } 
	tcuæ_öfŸy≥
;

400 (*
	tcuæ_debug_ˇŒback
)

401 (
	tCURL
 *
	th™dÀ
,

402 
	tcuæ_öfŸy≥
 
	tty≥
,

403 *
	td©a
,

404 
	tsize_t
 
	tsize
,

405 *
	tu£Ωå
);

415 
CURLE_OK
 = 0,

416 
CURLE_UNSUPPORTED_PROTOCOL
,

417 
CURLE_FAILED_INIT
,

418 
CURLE_URL_MALFORMAT
,

419 
CURLE_NOT_BUILT_IN
,

421 
CURLE_COULDNT_RESOLVE_PROXY
,

422 
CURLE_COULDNT_RESOLVE_HOST
,

423 
CURLE_COULDNT_CONNECT
,

424 
CURLE_FTP_WEIRD_SERVER_REPLY
,

425 
CURLE_REMOTE_ACCESS_DENIED
,

428 
CURLE_FTP_ACCEPT_FAILED
,

430 
CURLE_FTP_WEIRD_PASS_REPLY
,

431 
CURLE_FTP_ACCEPT_TIMEOUT
,

434 
CURLE_FTP_WEIRD_PASV_REPLY
,

435 
CURLE_FTP_WEIRD_227_FORMAT
,

436 
CURLE_FTP_CANT_GET_HOST
,

437 
CURLE_HTTP2
,

440 
CURLE_FTP_COULDNT_SET_TYPE
,

441 
CURLE_PARTIAL_FILE
,

442 
CURLE_FTP_COULDNT_RETR_FILE
,

443 
CURLE_OBSOLETE20
,

444 
CURLE_QUOTE_ERROR
,

445 
CURLE_HTTP_RETURNED_ERROR
,

446 
CURLE_WRITE_ERROR
,

447 
CURLE_OBSOLETE24
,

448 
CURLE_UPLOAD_FAILED
,

449 
CURLE_READ_ERROR
,

450 
CURLE_OUT_OF_MEMORY
,

455 
CURLE_OPERATION_TIMEDOUT
,

456 
CURLE_OBSOLETE29
,

457 
CURLE_FTP_PORT_FAILED
,

458 
CURLE_FTP_COULDNT_USE_REST
,

459 
CURLE_OBSOLETE32
,

460 
CURLE_RANGE_ERROR
,

461 
CURLE_HTTP_POST_ERROR
,

462 
CURLE_SSL_CONNECT_ERROR
,

463 
CURLE_BAD_DOWNLOAD_RESUME
,

464 
CURLE_FILE_COULDNT_READ_FILE
,

465 
CURLE_LDAP_CANNOT_BIND
,

466 
CURLE_LDAP_SEARCH_FAILED
,

467 
CURLE_OBSOLETE40
,

468 
CURLE_FUNCTION_NOT_FOUND
,

469 
CURLE_ABORTED_BY_CALLBACK
,

470 
CURLE_BAD_FUNCTION_ARGUMENT
,

471 
CURLE_OBSOLETE44
,

472 
CURLE_INTERFACE_FAILED
,

473 
CURLE_OBSOLETE46
,

474 
CURLE_TOO_MANY_REDIRECTS
 ,

475 
CURLE_UNKNOWN_OPTION
,

476 
CURLE_TELNET_OPTION_SYNTAX
 ,

477 
CURLE_OBSOLETE50
,

478 
CURLE_PEER_FAILED_VERIFICATION
,

480 
CURLE_GOT_NOTHING
,

481 
CURLE_SSL_ENGINE_NOTFOUND
,

482 
CURLE_SSL_ENGINE_SETFAILED
,

484 
CURLE_SEND_ERROR
,

485 
CURLE_RECV_ERROR
,

486 
CURLE_OBSOLETE57
,

487 
CURLE_SSL_CERTPROBLEM
,

488 
CURLE_SSL_CIPHER
,

489 
CURLE_SSL_CACERT
,

490 
CURLE_BAD_CONTENT_ENCODING
,

491 
CURLE_LDAP_INVALID_URL
,

492 
CURLE_FILESIZE_EXCEEDED
,

493 
CURLE_USE_SSL_FAILED
,

494 
CURLE_SEND_FAIL_REWIND
,

496 
CURLE_SSL_ENGINE_INITFAILED
,

497 
CURLE_LOGIN_DENIED
,

499 
CURLE_TFTP_NOTFOUND
,

500 
CURLE_TFTP_PERM
,

501 
CURLE_REMOTE_DISK_FULL
,

502 
CURLE_TFTP_ILLEGAL
,

503 
CURLE_TFTP_UNKNOWNID
,

504 
CURLE_REMOTE_FILE_EXISTS
,

505 
CURLE_TFTP_NOSUCHUSER
,

506 
CURLE_CONV_FAILED
,

507 
CURLE_CONV_REQD
,

512 
CURLE_SSL_CACERT_BADFILE
,

514 
CURLE_REMOTE_FILE_NOT_FOUND
,

515 
CURLE_SSH
,

519 
CURLE_SSL_SHUTDOWN_FAILED
,

521 
CURLE_AGAIN
,

524 
CURLE_SSL_CRL_BADFILE
,

526 
CURLE_SSL_ISSUER_ERROR
,

528 
CURLE_FTP_PRET_FAILED
,

529 
CURLE_RTSP_CSEQ_ERROR
,

530 
CURLE_RTSP_SESSION_ERROR
,

531 
CURLE_FTP_BAD_FILE_LIST
,

532 
CURLE_CHUNK_FAILED
,

533 
CURLE_NO_CONNECTION_AVAILABLE
,

535 
CURLE_SSL_PINNEDPUBKEYNOTMATCH
,

537 
CURLE_SSL_INVALIDCERTSTATUS
,

538 
CURL_LAST


539 } 
	tCURLcode
;

541 #i‚de‡
CURL_NO_OLDIES


545 
	#CURLE_OBSOLETE16
 
CURLE_HTTP2


	)

548 
	#CURLE_OBSOLETE10
 
CURLE_FTP_ACCEPT_FAILED


	)

549 
	#CURLE_OBSOLETE12
 
CURLE_FTP_ACCEPT_TIMEOUT


	)

552 
	#CURLOPT_ENCODING
 
CURLOPT_ACCEPT_ENCODING


	)

555 
	#CURLE_UNKNOWN_TELNET_OPTION
 
CURLE_UNKNOWN_OPTION


	)

559 
	#CURLE_SSL_PEER_CERTIFICATE
 
CURLE_PEER_FAILED_VERIFICATION


	)

563 
	#CURLE_OBSOLETE
 
CURLE_OBSOLETE50


	)

564 
	#CURLE_BAD_PASSWORD_ENTERED
 
CURLE_OBSOLETE46


	)

565 
	#CURLE_BAD_CALLING_ORDER
 
CURLE_OBSOLETE44


	)

566 
	#CURLE_FTP_USER_PASSWORD_INCORRECT
 
CURLE_OBSOLETE10


	)

567 
	#CURLE_FTP_CANT_RECONNECT
 
CURLE_OBSOLETE16


	)

568 
	#CURLE_FTP_COULDNT_GET_SIZE
 
CURLE_OBSOLETE32


	)

569 
	#CURLE_FTP_COULDNT_SET_ASCII
 
CURLE_OBSOLETE29


	)

570 
	#CURLE_FTP_WEIRD_USER_REPLY
 
CURLE_OBSOLETE12


	)

571 
	#CURLE_FTP_WRITE_ERROR
 
CURLE_OBSOLETE20


	)

572 
	#CURLE_LIBRARY_NOT_FOUND
 
CURLE_OBSOLETE40


	)

573 
	#CURLE_MALFORMAT_USER
 
CURLE_OBSOLETE24


	)

574 
	#CURLE_SHARE_IN_USE
 
CURLE_OBSOLETE57


	)

575 
	#CURLE_URL_MALFORMAT_USER
 
CURLE_NOT_BUILT_IN


	)

577 
	#CURLE_FTP_ACCESS_DENIED
 
CURLE_REMOTE_ACCESS_DENIED


	)

578 
	#CURLE_FTP_COULDNT_SET_BINARY
 
CURLE_FTP_COULDNT_SET_TYPE


	)

579 
	#CURLE_FTP_QUOTE_ERROR
 
CURLE_QUOTE_ERROR


	)

580 
	#CURLE_TFTP_DISKFULL
 
CURLE_REMOTE_DISK_FULL


	)

581 
	#CURLE_TFTP_EXISTS
 
CURLE_REMOTE_FILE_EXISTS


	)

582 
	#CURLE_HTTP_RANGE_ERROR
 
CURLE_RANGE_ERROR


	)

583 
	#CURLE_FTP_SSL_FAILED
 
CURLE_USE_SSL_FAILED


	)

587 
	#CURLE_OPERATION_TIMEOUTED
 
CURLE_OPERATION_TIMEDOUT


	)

589 
	#CURLE_HTTP_NOT_FOUND
 
CURLE_HTTP_RETURNED_ERROR


	)

590 
	#CURLE_HTTP_PORT_FAILED
 
CURLE_INTERFACE_FAILED


	)

591 
	#CURLE_FTP_COULDNT_STOR_FILE
 
CURLE_UPLOAD_FAILED


	)

593 
	#CURLE_FTP_PARTIAL_FILE
 
CURLE_PARTIAL_FILE


	)

594 
	#CURLE_FTP_BAD_DOWNLOAD_RESUME
 
CURLE_BAD_DOWNLOAD_RESUME


	)

599 
	#CURLE_ALREADY_COMPLETE
 99999

	)

602 
	#CURLOPT_FILE
 
CURLOPT_WRITEDATA


	)

603 
	#CURLOPT_INFILE
 
CURLOPT_READDATA


	)

604 
	#CURLOPT_WRITEHEADER
 
CURLOPT_HEADERDATA


	)

608 
	#CURLOPT_WRITEINFO
 
CURLOPT_OBSOLETE40


	)

609 
	#CURLOPT_CLOSEPOLICY
 
CURLOPT_OBSOLETE72


	)

614 
	`CURLcode
 (*
	tcuæ_c⁄v_ˇŒback
)(*
	tbuf„r
, 
	tsize_t
 
	tÀngth
);

616 
	`CURLcode
 (*
	tcuæ_s¶_˘x_ˇŒback
)(
	tCURL
 *
	tcuæ
,

617 *
	ts¶_˘x
,

619 *
	tu£Ωå
);

622 
CURLPROXY_HTTP
 = 0,

624 
CURLPROXY_HTTP_1_0
 = 1,

626 
CURLPROXY_SOCKS4
 = 4,

628 
CURLPROXY_SOCKS5
 = 5,

629 
CURLPROXY_SOCKS4A
 = 6,

630 
CURLPROXY_SOCKS5_HOSTNAME
 = 7

633 } 
	tcuæ_¥oxyty≥
;

652 
	#CURLAUTH_NONE
 (()0)

	)

653 
	#CURLAUTH_BASIC
 ((()1)<<0)

	)

654 
	#CURLAUTH_DIGEST
 ((()1)<<1)

	)

655 
	#CURLAUTH_NEGOTIATE
 ((()1)<<2)

	)

657 
	#CURLAUTH_GSSNEGOTIATE
 
CURLAUTH_NEGOTIATE


	)

658 
	#CURLAUTH_NTLM
 ((()1)<<3)

	)

659 
	#CURLAUTH_DIGEST_IE
 ((()1)<<4)

	)

660 
	#CURLAUTH_NTLM_WB
 ((()1)<<5)

	)

661 
	#CURLAUTH_ONLY
 ((()1)<<31)

	)

662 
	#CURLAUTH_ANY
 (~
CURLAUTH_DIGEST_IE
)

	)

663 
	#CURLAUTH_ANYSAFE
 (~(
CURLAUTH_BASIC
|
CURLAUTH_DIGEST_IE
))

	)

665 
	#CURLSSH_AUTH_ANY
 ~0

	)

666 
	#CURLSSH_AUTH_NONE
 0

	)

667 
	#CURLSSH_AUTH_PUBLICKEY
 (1<<0Ë

	)

668 
	#CURLSSH_AUTH_PASSWORD
 (1<<1Ë

	)

669 
	#CURLSSH_AUTH_HOST
 (1<<2Ë

	)

670 
	#CURLSSH_AUTH_KEYBOARD
 (1<<3Ë

	)

671 
	#CURLSSH_AUTH_AGENT
 (1<<4Ë

	)

672 
	#CURLSSH_AUTH_DEFAULT
 
CURLSSH_AUTH_ANY


	)

674 
	#CURLGSSAPI_DELEGATION_NONE
 0

	)

675 
	#CURLGSSAPI_DELEGATION_POLICY_FLAG
 (1<<0Ë

	)

676 
	#CURLGSSAPI_DELEGATION_FLAG
 (1<<1Ë

	)

678 
	#CURL_ERROR_SIZE
 256

	)

680 
	ecuæ_khty≥
 {

681 
CURLKHTYPE_UNKNOWN
,

682 
CURLKHTYPE_RSA1
,

683 
CURLKHTYPE_RSA
,

684 
CURLKHTYPE_DSS


687 
	scuæ_khkey
 {

688 c⁄° *
key
;

690 
size_t
 
Àn
;

691 
cuæ_khty≥
 
keyty≥
;

696 
	ecuæ_kh°©
 {

697 
CURLKHSTAT_FINE_ADD_TO_FILE
,

698 
CURLKHSTAT_FINE
,

699 
CURLKHSTAT_REJECT
,

700 
CURLKHSTAT_DEFER
,

703 
CURLKHSTAT_LAST


707 
	ecuæ_khm©ch
 {

708 
CURLKHMATCH_OK
,

709 
CURLKHMATCH_MISMATCH
,

710 
CURLKHMATCH_MISSING
,

711 
CURLKHMATCH_LAST


715 (*
	tcuæ_sshkeyˇŒback
Ë(
	tCURL
 *
	tósy
,

716 c⁄° 
	tcuæ_khkey
 *
	tknownkey
,

717 c⁄° 
	tcuæ_khkey
 *
	tfoundkey
,

718 
	tcuæ_khm©ch
,

719 *
	t˛õ¡p
);

723 
CURLUSESSL_NONE
,

724 
CURLUSESSL_TRY
,

725 
CURLUSESSL_CONTROL
,

726 
CURLUSESSL_ALL
,

727 
CURLUSESSL_LAST


728 } 
	tcuæ_u£s¶
;

737 
	#CURLSSLOPT_ALLOW_BEAST
 (1<<0)

	)

741 
	#CURLSSLOPT_NO_REVOKE
 (1<<1)

	)

743 #i‚de‡
CURL_NO_OLDIES


749 
	#CURLFTPSSL_NONE
 
CURLUSESSL_NONE


	)

750 
	#CURLFTPSSL_TRY
 
CURLUSESSL_TRY


	)

751 
	#CURLFTPSSL_CONTROL
 
CURLUSESSL_CONTROL


	)

752 
	#CURLFTPSSL_ALL
 
CURLUSESSL_ALL


	)

753 
	#CURLFTPSSL_LAST
 
CURLUSESSL_LAST


	)

754 
	#cuæ_·ps¶
 
cuæ_u£s¶


	)

759 
CURLFTPSSL_CCC_NONE
,

760 
CURLFTPSSL_CCC_PASSIVE
,

761 
CURLFTPSSL_CCC_ACTIVE
,

762 
CURLFTPSSL_CCC_LAST


763 } 
	tcuæ_·pccc
;

767 
CURLFTPAUTH_DEFAULT
,

768 
CURLFTPAUTH_SSL
,

769 
CURLFTPAUTH_TLS
,

770 
CURLFTPAUTH_LAST


771 } 
	tcuæ_·∑uth
;

775 
CURLFTP_CREATE_DIR_NONE
,

776 
CURLFTP_CREATE_DIR
,

779 
CURLFTP_CREATE_DIR_RETRY
,

781 
CURLFTP_CREATE_DIR_LAST


782 } 
	tcuæ_·p¸óãdú
;

786 
CURLFTPMETHOD_DEFAULT
,

787 
CURLFTPMETHOD_MULTICWD
,

788 
CURLFTPMETHOD_NOCWD
,

789 
CURLFTPMETHOD_SINGLECWD
,

790 
CURLFTPMETHOD_LAST


791 } 
	tcuæ_·pmëhod
;

794 
	#CURLHEADER_UNIFIED
 0

	)

795 
	#CURLHEADER_SEPARATE
 (1<<0)

	)

798 
	#CURLPROTO_HTTP
 (1<<0)

	)

799 
	#CURLPROTO_HTTPS
 (1<<1)

	)

800 
	#CURLPROTO_FTP
 (1<<2)

	)

801 
	#CURLPROTO_FTPS
 (1<<3)

	)

802 
	#CURLPROTO_SCP
 (1<<4)

	)

803 
	#CURLPROTO_SFTP
 (1<<5)

	)

804 
	#CURLPROTO_TELNET
 (1<<6)

	)

805 
	#CURLPROTO_LDAP
 (1<<7)

	)

806 
	#CURLPROTO_LDAPS
 (1<<8)

	)

807 
	#CURLPROTO_DICT
 (1<<9)

	)

808 
	#CURLPROTO_FILE
 (1<<10)

	)

809 
	#CURLPROTO_TFTP
 (1<<11)

	)

810 
	#CURLPROTO_IMAP
 (1<<12)

	)

811 
	#CURLPROTO_IMAPS
 (1<<13)

	)

812 
	#CURLPROTO_POP3
 (1<<14)

	)

813 
	#CURLPROTO_POP3S
 (1<<15)

	)

814 
	#CURLPROTO_SMTP
 (1<<16)

	)

815 
	#CURLPROTO_SMTPS
 (1<<17)

	)

816 
	#CURLPROTO_RTSP
 (1<<18)

	)

817 
	#CURLPROTO_RTMP
 (1<<19)

	)

818 
	#CURLPROTO_RTMPT
 (1<<20)

	)

819 
	#CURLPROTO_RTMPE
 (1<<21)

	)

820 
	#CURLPROTO_RTMPTE
 (1<<22)

	)

821 
	#CURLPROTO_RTMPS
 (1<<23)

	)

822 
	#CURLPROTO_RTMPTS
 (1<<24)

	)

823 
	#CURLPROTO_GOPHER
 (1<<25)

	)

824 
	#CURLPROTO_SMB
 (1<<26)

	)

825 
	#CURLPROTO_SMBS
 (1<<27)

	)

826 
	#CURLPROTO_ALL
 (~0Ë

	)

830 
	#CURLOPTTYPE_LONG
 0

	)

831 
	#CURLOPTTYPE_OBJECTPOINT
 10000

	)

832 
	#CURLOPTTYPE_STRINGPOINT
 10000

	)

833 
	#CURLOPTTYPE_FUNCTIONPOINT
 20000

	)

834 
	#CURLOPTTYPE_OFF_T
 30000

	)

842 #ifde‡
CINIT


843 #unde‡
CINIT


846 #ifde‡
CURL_ISOCPP


847 
	#CINIT
(
«
,
t
,
nu
Ë
CURLOPT_
 ##Ç®
CURLOPTTYPE_
 ##Å + 
	)
nu

850 
	#LONG
 
CURLOPTTYPE_LONG


	)

851 
	#OBJECTPOINT
 
CURLOPTTYPE_OBJECTPOINT


	)

852 
	#STRINGPOINT
 
CURLOPTTYPE_OBJECTPOINT


	)

853 
	#FUNCTIONPOINT
 
CURLOPTTYPE_FUNCTIONPOINT


	)

854 
	#OFF_T
 
CURLOPTTYPE_OFF_T


	)

855 
	#CINIT
(
«me
,
ty≥
,
numbî
Ë
CURLOPT_
Çamêty≥ + 
	)
number

866 
	`CINIT
(
WRITEDATA
, 
OBJECTPOINT
, 1),

869 
	`CINIT
(
URL
, 
STRINGPOINT
, 2),

872 
	`CINIT
(
PORT
, 
LONG
, 3),

875 
	`CINIT
(
PROXY
, 
STRINGPOINT
, 4),

878 
	`CINIT
(
USERPWD
, 
STRINGPOINT
, 5),

881 
	`CINIT
(
PROXYUSERPWD
, 
STRINGPOINT
, 6),

884 
	`CINIT
(
RANGE
, 
STRINGPOINT
, 7),

889 
	`CINIT
(
READDATA
, 
OBJECTPOINT
, 9),

893 
	`CINIT
(
ERRORBUFFER
, 
OBJECTPOINT
, 10),

897 
	`CINIT
(
WRITEFUNCTION
, 
FUNCTIONPOINT
, 11),

901 
	`CINIT
(
READFUNCTION
, 
FUNCTIONPOINT
, 12),

904 
	`CINIT
(
TIMEOUT
, 
LONG
, 13),

915 
	`CINIT
(
INFILESIZE
, 
LONG
, 14),

918 
	`CINIT
(
POSTFIELDS
, 
OBJECTPOINT
, 15),

921 
	`CINIT
(
REFERER
, 
STRINGPOINT
, 16),

925 
	`CINIT
(
FTPPORT
, 
STRINGPOINT
, 17),

928 
	`CINIT
(
USERAGENT
, 
STRINGPOINT
, 18),

937 
	`CINIT
(
LOW_SPEED_LIMIT
, 
LONG
, 19),

940 
	`CINIT
(
LOW_SPEED_TIME
, 
LONG
, 20),

948 
	`CINIT
(
RESUME_FROM
, 
LONG
, 21),

951 
	`CINIT
(
COOKIE
, 
STRINGPOINT
, 22),

955 
	`CINIT
(
HTTPHEADER
, 
OBJECTPOINT
, 23),

958 
	`CINIT
(
HTTPPOST
, 
OBJECTPOINT
, 24),

961 
	`CINIT
(
SSLCERT
, 
STRINGPOINT
, 25),

964 
	`CINIT
(
KEYPASSWD
, 
STRINGPOINT
, 26),

967 
	`CINIT
(
CRLF
, 
LONG
, 27),

970 
	`CINIT
(
QUOTE
, 
OBJECTPOINT
, 28),

974 
	`CINIT
(
HEADERDATA
, 
OBJECTPOINT
, 29),

978 
	`CINIT
(
COOKIEFILE
, 
STRINGPOINT
, 31),

982 
	`CINIT
(
SSLVERSION
, 
LONG
, 32),

985 
	`CINIT
(
TIMECONDITION
, 
LONG
, 33),

989 
	`CINIT
(
TIMEVALUE
, 
LONG
, 34),

997 
	`CINIT
(
CUSTOMREQUEST
, 
STRINGPOINT
, 36),

1000 
	`CINIT
(
STDERR
, 
OBJECTPOINT
, 37),

1005 
	`CINIT
(
POSTQUOTE
, 
OBJECTPOINT
, 39),

1007 
	`CINIT
(
OBSOLETE40
, 
OBJECTPOINT
, 40),

1009 
	`CINIT
(
VERBOSE
, 
LONG
, 41),

1010 
	`CINIT
(
HEADER
, 
LONG
, 42),

1011 
	`CINIT
(
NOPROGRESS
, 
LONG
, 43),

1012 
	`CINIT
(
NOBODY
, 
LONG
, 44),

1013 
	`CINIT
(
FAILONERROR
, 
LONG
, 45),

1014 
	`CINIT
(
UPLOAD
, 
LONG
, 46),

1015 
	`CINIT
(
POST
, 
LONG
, 47),

1016 
	`CINIT
(
DIRLISTONLY
, 
LONG
, 48),

1018 
	`CINIT
(
APPEND
, 
LONG
, 50),

1022 
	`CINIT
(
NETRC
, 
LONG
, 51),

1024 
	`CINIT
(
FOLLOWLOCATION
, 
LONG
, 52),

1026 
	`CINIT
(
TRANSFERTEXT
, 
LONG
, 53),

1027 
	`CINIT
(
PUT
, 
LONG
, 54),

1035 
	`CINIT
(
PROGRESSFUNCTION
, 
FUNCTIONPOINT
, 56),

1039 
	`CINIT
(
PROGRESSDATA
, 
OBJECTPOINT
, 57),

1040 
	#CURLOPT_XFERINFODATA
 
CURLOPT_PROGRESSDATA


	)

1043 
	`CINIT
(
AUTOREFERER
, 
LONG
, 58),

1047 
	`CINIT
(
PROXYPORT
, 
LONG
, 59),

1050 
	`CINIT
(
POSTFIELDSIZE
, 
LONG
, 60),

1053 
	`CINIT
(
HTTPPROXYTUNNEL
, 
LONG
, 61),

1056 
	`CINIT
(
INTERFACE
, 
STRINGPOINT
, 62),

1061 
	`CINIT
(
KRBLEVEL
, 
STRINGPOINT
, 63),

1064 
	`CINIT
(
SSL_VERIFYPEER
, 
LONG
, 64),

1068 
	`CINIT
(
CAINFO
, 
STRINGPOINT
, 65),

1074 
	`CINIT
(
MAXREDIRS
, 
LONG
, 68),

1078 
	`CINIT
(
FILETIME
, 
LONG
, 69),

1081 
	`CINIT
(
TELNETOPTIONS
, 
OBJECTPOINT
, 70),

1084 
	`CINIT
(
MAXCONNECTS
, 
LONG
, 71),

1086 
	`CINIT
(
OBSOLETE72
, 
LONG
, 72),

1093 
	`CINIT
(
FRESH_CONNECT
, 
LONG
, 74),

1098 
	`CINIT
(
FORBID_REUSE
, 
LONG
, 75),

1102 
	`CINIT
(
RANDOM_FILE
, 
STRINGPOINT
, 76),

1105 
	`CINIT
(
EGDSOCKET
, 
STRINGPOINT
, 77),

1109 
	`CINIT
(
CONNECTTIMEOUT
, 
LONG
, 78),

1113 
	`CINIT
(
HEADERFUNCTION
, 
FUNCTIONPOINT
, 79),

1118 
	`CINIT
(
HTTPGET
, 
LONG
, 80),

1123 
	`CINIT
(
SSL_VERIFYHOST
, 
LONG
, 81),

1127 
	`CINIT
(
COOKIEJAR
, 
STRINGPOINT
, 82),

1130 
	`CINIT
(
SSL_CIPHER_LIST
, 
STRINGPOINT
, 83),

1134 
	`CINIT
(
HTTP_VERSION
, 
LONG
, 84),

1139 
	`CINIT
(
FTP_USE_EPSV
, 
LONG
, 85),

1142 
	`CINIT
(
SSLCERTTYPE
, 
STRINGPOINT
, 86),

1145 
	`CINIT
(
SSLKEY
, 
STRINGPOINT
, 87),

1148 
	`CINIT
(
SSLKEYTYPE
, 
STRINGPOINT
, 88),

1151 
	`CINIT
(
SSLENGINE
, 
STRINGPOINT
, 89),

1156 
	`CINIT
(
SSLENGINE_DEFAULT
, 
LONG
, 90),

1159 
	`CINIT
(
DNS_USE_GLOBAL_CACHE
, 
LONG
, 91),

1162 
	`CINIT
(
DNS_CACHE_TIMEOUT
, 
LONG
, 92),

1165 
	`CINIT
(
PREQUOTE
, 
OBJECTPOINT
, 93),

1168 
	`CINIT
(
DEBUGFUNCTION
, 
FUNCTIONPOINT
, 94),

1171 
	`CINIT
(
DEBUGDATA
, 
OBJECTPOINT
, 95),

1174 
	`CINIT
(
COOKIESESSION
, 
LONG
, 96),

1178 
	`CINIT
(
CAPATH
, 
STRINGPOINT
, 97),

1181 
	`CINIT
(
BUFFERSIZE
, 
LONG
, 98),

1186 
	`CINIT
(
NOSIGNAL
, 
LONG
, 99),

1189 
	`CINIT
(
SHARE
, 
OBJECTPOINT
, 100),

1193 
	`CINIT
(
PROXYTYPE
, 
LONG
, 101),

1198 
	`CINIT
(
ACCEPT_ENCODING
, 
STRINGPOINT
, 102),

1201 
	`CINIT
(
PRIVATE
, 
OBJECTPOINT
, 103),

1204 
	`CINIT
(
HTTP200ALIASES
, 
OBJECTPOINT
, 104),

1209 
	`CINIT
(
UNRESTRICTED_AUTH
, 
LONG
, 105),

1214 
	`CINIT
(
FTP_USE_EPRT
, 
LONG
, 106),

1219 
	`CINIT
(
HTTPAUTH
, 
LONG
, 107),

1224 
	`CINIT
(
SSL_CTX_FUNCTION
, 
FUNCTIONPOINT
, 108),

1228 
	`CINIT
(
SSL_CTX_DATA
, 
OBJECTPOINT
, 109),

1234 
	`CINIT
(
FTP_CREATE_MISSING_DIRS
, 
LONG
, 110),

1239 
	`CINIT
(
PROXYAUTH
, 
LONG
, 111),

1245 
	`CINIT
(
FTP_RESPONSE_TIMEOUT
, 
LONG
, 112),

1246 
	#CURLOPT_SERVER_RESPONSE_TIMEOUT
 
CURLOPT_FTP_RESPONSE_TIMEOUT


	)

1251 
	`CINIT
(
IPRESOLVE
, 
LONG
, 113),

1258 
	`CINIT
(
MAXFILESIZE
, 
LONG
, 114),

1263 
	`CINIT
(
INFILESIZE_LARGE
, 
OFF_T
, 115),

1268 
	`CINIT
(
RESUME_FROM_LARGE
, 
OFF_T
, 116),

1273 
	`CINIT
(
MAXFILESIZE_LARGE
, 
OFF_T
, 117),

1279 
	`CINIT
(
NETRC_FILE
, 
STRINGPOINT
, 118),

1286 
	`CINIT
(
USE_SSL
, 
LONG
, 119),

1289 
	`CINIT
(
POSTFIELDSIZE_LARGE
, 
OFF_T
, 120),

1292 
	`CINIT
(
TCP_NODELAY
, 
LONG
, 121),

1312 
	`CINIT
(
FTPSSLAUTH
, 
LONG
, 129),

1314 
	`CINIT
(
IOCTLFUNCTION
, 
FUNCTIONPOINT
, 130),

1315 
	`CINIT
(
IOCTLDATA
, 
OBJECTPOINT
, 131),

1322 
	`CINIT
(
FTP_ACCOUNT
, 
STRINGPOINT
, 134),

1325 
	`CINIT
(
COOKIELIST
, 
STRINGPOINT
, 135),

1328 
	`CINIT
(
IGNORE_CONTENT_LENGTH
, 
LONG
, 136),

1334 
	`CINIT
(
FTP_SKIP_PASV_IP
, 
LONG
, 137),

1338 
	`CINIT
(
FTP_FILEMETHOD
, 
LONG
, 138),

1341 
	`CINIT
(
LOCALPORT
, 
LONG
, 139),

1346 
	`CINIT
(
LOCALPORTRANGE
, 
LONG
, 140),

1350 
	`CINIT
(
CONNECT_ONLY
, 
LONG
, 141),

1354 
	`CINIT
(
CONV_FROM_NETWORK_FUNCTION
, 
FUNCTIONPOINT
, 142),

1358 
	`CINIT
(
CONV_TO_NETWORK_FUNCTION
, 
FUNCTIONPOINT
, 143),

1363 
	`CINIT
(
CONV_FROM_UTF8_FUNCTION
, 
FUNCTIONPOINT
, 144),

1367 
	`CINIT
(
MAX_SEND_SPEED_LARGE
, 
OFF_T
, 145),

1368 
	`CINIT
(
MAX_RECV_SPEED_LARGE
, 
OFF_T
, 146),

1371 
	`CINIT
(
FTP_ALTERNATIVE_TO_USER
, 
STRINGPOINT
, 147),

1374 
	`CINIT
(
SOCKOPTFUNCTION
, 
FUNCTIONPOINT
, 148),

1375 
	`CINIT
(
SOCKOPTDATA
, 
OBJECTPOINT
, 149),

1379 
	`CINIT
(
SSL_SESSIONID_CACHE
, 
LONG
, 150),

1382 
	`CINIT
(
SSH_AUTH_TYPES
, 
LONG
, 151),

1385 
	`CINIT
(
SSH_PUBLIC_KEYFILE
, 
STRINGPOINT
, 152),

1386 
	`CINIT
(
SSH_PRIVATE_KEYFILE
, 
STRINGPOINT
, 153),

1389 
	`CINIT
(
FTP_SSL_CCC
, 
LONG
, 154),

1392 
	`CINIT
(
TIMEOUT_MS
, 
LONG
, 155),

1393 
	`CINIT
(
CONNECTTIMEOUT_MS
, 
LONG
, 156),

1397 
	`CINIT
(
HTTP_TRANSFER_DECODING
, 
LONG
, 157),

1398 
	`CINIT
(
HTTP_CONTENT_DECODING
, 
LONG
, 158),

1402 
	`CINIT
(
NEW_FILE_PERMS
, 
LONG
, 159),

1403 
	`CINIT
(
NEW_DIRECTORY_PERMS
, 
LONG
, 160),

1407 
	`CINIT
(
POSTREDIR
, 
LONG
, 161),

1410 
	`CINIT
(
SSH_HOST_PUBLIC_KEY_MD5
, 
STRINGPOINT
, 162),

1416 
	`CINIT
(
OPENSOCKETFUNCTION
, 
FUNCTIONPOINT
, 163),

1417 
	`CINIT
(
OPENSOCKETDATA
, 
OBJECTPOINT
, 164),

1420 
	`CINIT
(
COPYPOSTFIELDS
, 
OBJECTPOINT
, 165),

1423 
	`CINIT
(
PROXY_TRANSFER_MODE
, 
LONG
, 166),

1426 
	`CINIT
(
SEEKFUNCTION
, 
FUNCTIONPOINT
, 167),

1427 
	`CINIT
(
SEEKDATA
, 
OBJECTPOINT
, 168),

1430 
	`CINIT
(
CRLFILE
, 
STRINGPOINT
, 169),

1433 
	`CINIT
(
ISSUERCERT
, 
STRINGPOINT
, 170),

1436 
	`CINIT
(
ADDRESS_SCOPE
, 
LONG
, 171),

1440 
	`CINIT
(
CERTINFO
, 
LONG
, 172),

1443 
	`CINIT
(
USERNAME
, 
STRINGPOINT
, 173),

1444 
	`CINIT
(
PASSWORD
, 
STRINGPOINT
, 174),

1447 
	`CINIT
(
PROXYUSERNAME
, 
STRINGPOINT
, 175),

1448 
	`CINIT
(
PROXYPASSWORD
, 
STRINGPOINT
, 176),

1457 
	`CINIT
(
NOPROXY
, 
STRINGPOINT
, 177),

1460 
	`CINIT
(
TFTP_BLKSIZE
, 
LONG
, 178),

1463 
	`CINIT
(
SOCKS5_GSSAPI_SERVICE
, 
STRINGPOINT
, 179),

1466 
	`CINIT
(
SOCKS5_GSSAPI_NEC
, 
LONG
, 180),

1472 
	`CINIT
(
PROTOCOLS
, 
LONG
, 181),

1478 
	`CINIT
(
REDIR_PROTOCOLS
, 
LONG
, 182),

1481 
	`CINIT
(
SSH_KNOWNHOSTS
, 
STRINGPOINT
, 183),

1485 
	`CINIT
(
SSH_KEYFUNCTION
, 
FUNCTIONPOINT
, 184),

1488 
	`CINIT
(
SSH_KEYDATA
, 
OBJECTPOINT
, 185),

1491 
	`CINIT
(
MAIL_FROM
, 
STRINGPOINT
, 186),

1494 
	`CINIT
(
MAIL_RCPT
, 
OBJECTPOINT
, 187),

1497 
	`CINIT
(
FTP_USE_PRET
, 
LONG
, 188),

1500 
	`CINIT
(
RTSP_REQUEST
, 
LONG
, 189),

1503 
	`CINIT
(
RTSP_SESSION_ID
, 
STRINGPOINT
, 190),

1506 
	`CINIT
(
RTSP_STREAM_URI
, 
STRINGPOINT
, 191),

1509 
	`CINIT
(
RTSP_TRANSPORT
, 
STRINGPOINT
, 192),

1512 
	`CINIT
(
RTSP_CLIENT_CSEQ
, 
LONG
, 193),

1515 
	`CINIT
(
RTSP_SERVER_CSEQ
, 
LONG
, 194),

1518 
	`CINIT
(
INTERLEAVEDATA
, 
OBJECTPOINT
, 195),

1521 
	`CINIT
(
INTERLEAVEFUNCTION
, 
FUNCTIONPOINT
, 196),

1524 
	`CINIT
(
WILDCARDMATCH
, 
LONG
, 197),

1528 
	`CINIT
(
CHUNK_BGN_FUNCTION
, 
FUNCTIONPOINT
, 198),

1532 
	`CINIT
(
CHUNK_END_FUNCTION
, 
FUNCTIONPOINT
, 199),

1535 
	`CINIT
(
FNMATCH_FUNCTION
, 
FUNCTIONPOINT
, 200),

1538 
	`CINIT
(
CHUNK_DATA
, 
OBJECTPOINT
, 201),

1541 
	`CINIT
(
FNMATCH_DATA
, 
OBJECTPOINT
, 202),

1544 
	`CINIT
(
RESOLVE
, 
OBJECTPOINT
, 203),

1547 
	`CINIT
(
TLSAUTH_USERNAME
, 
STRINGPOINT
, 204),

1550 
	`CINIT
(
TLSAUTH_PASSWORD
, 
STRINGPOINT
, 205),

1553 
	`CINIT
(
TLSAUTH_TYPE
, 
STRINGPOINT
, 206),

1565 
	`CINIT
(
TRANSFER_ENCODING
, 
LONG
, 207),

1569 
	`CINIT
(
CLOSESOCKETFUNCTION
, 
FUNCTIONPOINT
, 208),

1570 
	`CINIT
(
CLOSESOCKETDATA
, 
OBJECTPOINT
, 209),

1573 
	`CINIT
(
GSSAPI_DELEGATION
, 
LONG
, 210),

1576 
	`CINIT
(
DNS_SERVERS
, 
STRINGPOINT
, 211),

1580 
	`CINIT
(
ACCEPTTIMEOUT_MS
, 
LONG
, 212),

1583 
	`CINIT
(
TCP_KEEPALIVE
, 
LONG
, 213),

1586 
	`CINIT
(
TCP_KEEPIDLE
, 
LONG
, 214),

1587 
	`CINIT
(
TCP_KEEPINTVL
, 
LONG
, 215),

1590 
	`CINIT
(
SSL_OPTIONS
, 
LONG
, 216),

1593 
	`CINIT
(
MAIL_AUTH
, 
STRINGPOINT
, 217),

1596 
	`CINIT
(
SASL_IR
, 
LONG
, 218),

1601 
	`CINIT
(
XFERINFOFUNCTION
, 
FUNCTIONPOINT
, 219),

1604 
	`CINIT
(
XOAUTH2_BEARER
, 
STRINGPOINT
, 220),

1609 
	`CINIT
(
DNS_INTERFACE
, 
STRINGPOINT
, 221),

1613 
	`CINIT
(
DNS_LOCAL_IP4
, 
STRINGPOINT
, 222),

1617 
	`CINIT
(
DNS_LOCAL_IP6
, 
STRINGPOINT
, 223),

1620 
	`CINIT
(
LOGIN_OPTIONS
, 
STRINGPOINT
, 224),

1623 
	`CINIT
(
SSL_ENABLE_NPN
, 
LONG
, 225),

1626 
	`CINIT
(
SSL_ENABLE_ALPN
, 
LONG
, 226),

1630 
	`CINIT
(
EXPECT_100_TIMEOUT_MS
, 
LONG
, 227),

1634 
	`CINIT
(
PROXYHEADER
, 
OBJECTPOINT
, 228),

1637 
	`CINIT
(
HEADEROPT
, 
LONG
, 229),

1641 
	`CINIT
(
PINNEDPUBLICKEY
, 
STRINGPOINT
, 230),

1644 
	`CINIT
(
UNIX_SOCKET_PATH
, 
STRINGPOINT
, 231),

1647 
	`CINIT
(
SSL_VERIFYSTATUS
, 
LONG
, 232),

1650 
	`CINIT
(
SSL_FALSESTART
, 
LONG
, 233),

1653 
	`CINIT
(
PATH_AS_IS
, 
LONG
, 234),

1656 
	`CINIT
(
PROXY_SERVICE_NAME
, 
STRINGPOINT
, 235),

1659 
	`CINIT
(
SERVICE_NAME
, 
STRINGPOINT
, 236),

1662 
	`CINIT
(
PIPEWAIT
, 
LONG
, 237),

1665 
	`CINIT
(
DEFAULT_PROTOCOL
, 
STRINGPOINT
, 238),

1668 
	`CINIT
(
STREAM_WEIGHT
, 
LONG
, 239),

1671 
	`CINIT
(
STREAM_DEPENDS
, 
OBJECTPOINT
, 240),

1674 
	`CINIT
(
STREAM_DEPENDS_E
, 
OBJECTPOINT
, 241),

1676 
CURLOPT_LASTENTRY


1677 } 
	tCURL›ti⁄
;

1679 #i‚de‡
CURL_NO_OLDIES


1686 
	#CURLOPT_POST301
 
CURLOPT_POSTREDIR


	)

1691 
	#CURLOPT_SSLKEYPASSWD
 
CURLOPT_KEYPASSWD


	)

1692 
	#CURLOPT_FTPAPPEND
 
CURLOPT_APPEND


	)

1693 
	#CURLOPT_FTPLISTONLY
 
CURLOPT_DIRLISTONLY


	)

1694 
	#CURLOPT_FTP_SSL
 
CURLOPT_USE_SSL


	)

1698 
	#CURLOPT_SSLCERTPASSWD
 
CURLOPT_KEYPASSWD


	)

1699 
	#CURLOPT_KRB4LEVEL
 
CURLOPT_KRBLEVEL


	)

1703 #unde‡
CURLOPT_DNS_USE_GLOBAL_CACHE


1710 
	#CURL_IPRESOLVE_WHATEVER
 0

	)

1712 
	#CURL_IPRESOLVE_V4
 1

	)

1713 
	#CURL_IPRESOLVE_V6
 2

	)

1716 
	#CURLOPT_RTSPHEADER
 
CURLOPT_HTTPHEADER


	)

1720 
CURL_HTTP_VERSION_NONE
,

1723 
CURL_HTTP_VERSION_1_0
,

1724 
CURL_HTTP_VERSION_1_1
,

1725 
CURL_HTTP_VERSION_2_0
,

1726 
CURL_HTTP_VERSION_2TLS
,

1728 
CURL_HTTP_VERSION_LAST


1734 
	#CURL_HTTP_VERSION_2
 
CURL_HTTP_VERSION_2_0


	)

1740 
CURL_RTSPREQ_NONE
,

1741 
CURL_RTSPREQ_OPTIONS
,

1742 
CURL_RTSPREQ_DESCRIBE
,

1743 
CURL_RTSPREQ_ANNOUNCE
,

1744 
CURL_RTSPREQ_SETUP
,

1745 
CURL_RTSPREQ_PLAY
,

1746 
CURL_RTSPREQ_PAUSE
,

1747 
CURL_RTSPREQ_TEARDOWN
,

1748 
CURL_RTSPREQ_GET_PARAMETER
,

1749 
CURL_RTSPREQ_SET_PARAMETER
,

1750 
CURL_RTSPREQ_RECORD
,

1751 
CURL_RTSPREQ_RECEIVE
,

1752 
CURL_RTSPREQ_LAST


1756 
	eCURL_NETRC_OPTION
 {

1757 
CURL_NETRC_IGNORED
,

1759 
CURL_NETRC_OPTIONAL
,

1761 
CURL_NETRC_REQUIRED
,

1764 
CURL_NETRC_LAST


1768 
CURL_SSLVERSION_DEFAULT
,

1769 
CURL_SSLVERSION_TLSv1
,

1770 
CURL_SSLVERSION_SSLv2
,

1771 
CURL_SSLVERSION_SSLv3
,

1772 
CURL_SSLVERSION_TLSv1_0
,

1773 
CURL_SSLVERSION_TLSv1_1
,

1774 
CURL_SSLVERSION_TLSv1_2
,

1776 
CURL_SSLVERSION_LAST


1779 
	eCURL_TLSAUTH
 {

1780 
CURL_TLSAUTH_NONE
,

1781 
CURL_TLSAUTH_SRP
,

1782 
CURL_TLSAUTH_LAST


1790 
	#CURL_REDIR_GET_ALL
 0

	)

1791 
	#CURL_REDIR_POST_301
 1

	)

1792 
	#CURL_REDIR_POST_302
 2

	)

1793 
	#CURL_REDIR_POST_303
 4

	)

1794 
	#CURL_REDIR_POST_ALL
 \

1795 (
CURL_REDIR_POST_301
|
CURL_REDIR_POST_302
|
CURL_REDIR_POST_303
)

	)

1798 
CURL_TIMECOND_NONE
,

1800 
CURL_TIMECOND_IFMODSINCE
,

1801 
CURL_TIMECOND_IFUNMODSINCE
,

1802 
CURL_TIMECOND_LASTMOD
,

1804 
CURL_TIMECOND_LAST


1805 } 
	tcuæ_TimeC⁄d
;

1810 
CURL_EXTERN
 (
cuæ_°ªquÆ
)(c⁄° *
s1
, c⁄° *
s2
);

1811 
CURL_EXTERN
 (
cuæ_°∫equÆ
)(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

1814 #ifde‡
CFINIT


1815 #unde‡
CFINIT


1818 #ifde‡
CURL_ISOCPP


1819 
	#CFINIT
(
«me
Ë
CURLFORM_
 ## 
	)
name

1822 
	#CFINIT
(
«me
Ë
CURLFORM_
 
	)
name

1826 
	`CFINIT
(
NOTHING
),

1829 
	`CFINIT
(
COPYNAME
),

1830 
	`CFINIT
(
PTRNAME
),

1831 
	`CFINIT
(
NAMELENGTH
),

1832 
	`CFINIT
(
COPYCONTENTS
),

1833 
	`CFINIT
(
PTRCONTENTS
),

1834 
	`CFINIT
(
CONTENTSLENGTH
),

1835 
	`CFINIT
(
FILECONTENT
),

1836 
	`CFINIT
(
ARRAY
),

1837 
	`CFINIT
(
OBSOLETE
),

1838 
	`CFINIT
(
FILE
),

1840 
	`CFINIT
(
BUFFER
),

1841 
	`CFINIT
(
BUFFERPTR
),

1842 
	`CFINIT
(
BUFFERLENGTH
),

1844 
	`CFINIT
(
CONTENTTYPE
),

1845 
	`CFINIT
(
CONTENTHEADER
),

1846 
	`CFINIT
(
FILENAME
),

1847 
	`CFINIT
(
END
),

1848 
	`CFINIT
(
OBSOLETE2
),

1850 
	`CFINIT
(
STREAM
),

1851 
	`CFINIT
(
CONTENTLEN
),

1853 
CURLFORM_LASTENTRY


1854 } 
	tCURLf‹m›ti⁄
;

1856 #unde‡
CFINIT


1859 
	scuæ_f‹ms
 {

1860 
CURLf‹m›ti⁄
 
›ti⁄
;

1861 c⁄° *
vÆue
;

1881 
CURL_FORMADD_OK
,

1883 
CURL_FORMADD_MEMORY
,

1884 
CURL_FORMADD_OPTION_TWICE
,

1885 
CURL_FORMADD_NULL
,

1886 
CURL_FORMADD_UNKNOWN_OPTION
,

1887 
CURL_FORMADD_INCOMPLETE
,

1888 
CURL_FORMADD_ILLEGAL_ARRAY
,

1889 
CURL_FORMADD_DISABLED
,

1891 
CURL_FORMADD_LAST


1892 } 
	tCURLFORMcode
;

1903 
CURL_EXTERN
 
CURLFORMcode
 
	`cuæ_f‹madd
(
cuæ_hâµo°
 **
hâµo°
,

1904 
cuæ_hâµo°
 **
œ°_po°
,

1915 
	`size_t
 (*
	tcuæ_f‹mgë_ˇŒback
)(*
	t¨g
, c⁄° *
	tbuf
,

1916 
	tsize_t
 
	tÀn
);

1928 
CURL_EXTERN
 
	`cuæ_f‹mgë
(
cuæ_hâµo°
 *
f‹m
, *
¨g
,

1929 
cuæ_f‹mgë_ˇŒback
 
≠≥nd
);

1937 
CURL_EXTERN
 
	`cuæ_f‹m‰ì
(
cuæ_hâµo°
 *
f‹m
);

1947 
CURL_EXTERN
 *
	`cuæ_gëív
(c⁄° *
v¨übÀ
);

1956 
CURL_EXTERN
 *
	`cuæ_vîsi⁄
();

1967 
CURL_EXTERN
 *
	`cuæ_ósy_esˇ≥
(
CURL
 *
h™dÀ
,

1968 c⁄° *
°rög
,

1969 
Àngth
);

1972 
CURL_EXTERN
 *
	`cuæ_esˇ≥
(c⁄° *
°rög
,

1973 
Àngth
);

1987 
CURL_EXTERN
 *
	`cuæ_ósy_u√sˇ≥
(
CURL
 *
h™dÀ
,

1988 c⁄° *
°rög
,

1989 
Àngth
,

1990 *
ouéígth
);

1993 
CURL_EXTERN
 *
	`cuæ_u√sˇ≥
(c⁄° *
°rög
,

1994 
Àngth
);

2004 
CURL_EXTERN
 
	`cuæ_‰ì
(*
p
);

2016 
CURL_EXTERN
 
CURLcode
 
	`cuæ_globÆ_öô
(
Êags
);

2031 
CURL_EXTERN
 
CURLcode
 
	`cuæ_globÆ_öô_mem
(
Êags
,

2032 
cuæ_mÆloc_ˇŒback
 
m
,

2033 
cuæ_‰ì_ˇŒback
 
f
,

2034 
cuæ_ªÆloc_ˇŒback
 
r
,

2035 
cuæ_°rdup_ˇŒback
 
s
,

2036 
cuæ_ˇŒoc_ˇŒback
 
c
);

2046 
CURL_EXTERN
 
	`cuæ_globÆ_˛ónup
();

2049 
	scuæ_¶i°
 {

2050 *
d©a
;

2051 
cuæ_¶i°
 *
√xt
;

2062 
CURL_EXTERN
 
cuæ_¶i°
 *
	`cuæ_¶i°_≠≥nd
(curl_slist *,

2072 
CURL_EXTERN
 
	`cuæ_¶i°_‰ì_Æl
(
cuæ_¶i°
 *);

2083 
CURL_EXTERN
 
time_t
 
	`cuæ_gëd©e
(c⁄° *
p
, c⁄°Åime_à*
unu£d
);

2087 
	scuæ_˚πöfo
 {

2088 
num_of_˚πs
;

2089 
cuæ_¶i°
 **
˚πöfo
;

2096 
CURLSSLBACKEND_NONE
 = 0,

2097 
CURLSSLBACKEND_OPENSSL
 = 1,

2098 
CURLSSLBACKEND_GNUTLS
 = 2,

2099 
CURLSSLBACKEND_NSS
 = 3,

2100 
CURLSSLBACKEND_OBSOLETE4
 = 4,

2101 
CURLSSLBACKEND_GSKIT
 = 5,

2102 
CURLSSLBACKEND_POLARSSL
 = 6,

2103 
CURLSSLBACKEND_CYASSL
 = 7,

2104 
CURLSSLBACKEND_SCHANNEL
 = 8,

2105 
CURLSSLBACKEND_DARWINSSL
 = 9,

2106 
CURLSSLBACKEND_AXTLS
 = 10,

2107 
CURLSSLBACKEND_MBEDTLS
 = 11

2108 } 
	tcuæ_s¶backíd
;

2113 
	scuæ_és£ssi⁄öfo
 {

2114 
cuæ_s¶backíd
 
backíd
;

2115 *
öã∫Æs
;

2118 
	#CURLINFO_STRING
 0x100000

	)

2119 
	#CURLINFO_LONG
 0x200000

	)

2120 
	#CURLINFO_DOUBLE
 0x300000

	)

2121 
	#CURLINFO_SLIST
 0x400000

	)

2122 
	#CURLINFO_SOCKET
 0x500000

	)

2123 
	#CURLINFO_MASK
 0x0fffff

	)

2124 
	#CURLINFO_TYPEMASK
 0xf00000

	)

2127 
CURLINFO_NONE
,

2128 
CURLINFO_EFFECTIVE_URL
 = 
CURLINFO_STRING
 + 1,

2129 
CURLINFO_RESPONSE_CODE
 = 
CURLINFO_LONG
 + 2,

2130 
CURLINFO_TOTAL_TIME
 = 
CURLINFO_DOUBLE
 + 3,

2131 
CURLINFO_NAMELOOKUP_TIME
 = 
CURLINFO_DOUBLE
 + 4,

2132 
CURLINFO_CONNECT_TIME
 = 
CURLINFO_DOUBLE
 + 5,

2133 
CURLINFO_PRETRANSFER_TIME
 = 
CURLINFO_DOUBLE
 + 6,

2134 
CURLINFO_SIZE_UPLOAD
 = 
CURLINFO_DOUBLE
 + 7,

2135 
CURLINFO_SIZE_DOWNLOAD
 = 
CURLINFO_DOUBLE
 + 8,

2136 
CURLINFO_SPEED_DOWNLOAD
 = 
CURLINFO_DOUBLE
 + 9,

2137 
CURLINFO_SPEED_UPLOAD
 = 
CURLINFO_DOUBLE
 + 10,

2138 
CURLINFO_HEADER_SIZE
 = 
CURLINFO_LONG
 + 11,

2139 
CURLINFO_REQUEST_SIZE
 = 
CURLINFO_LONG
 + 12,

2140 
CURLINFO_SSL_VERIFYRESULT
 = 
CURLINFO_LONG
 + 13,

2141 
CURLINFO_FILETIME
 = 
CURLINFO_LONG
 + 14,

2142 
CURLINFO_CONTENT_LENGTH_DOWNLOAD
 = 
CURLINFO_DOUBLE
 + 15,

2143 
CURLINFO_CONTENT_LENGTH_UPLOAD
 = 
CURLINFO_DOUBLE
 + 16,

2144 
CURLINFO_STARTTRANSFER_TIME
 = 
CURLINFO_DOUBLE
 + 17,

2145 
CURLINFO_CONTENT_TYPE
 = 
CURLINFO_STRING
 + 18,

2146 
CURLINFO_REDIRECT_TIME
 = 
CURLINFO_DOUBLE
 + 19,

2147 
CURLINFO_REDIRECT_COUNT
 = 
CURLINFO_LONG
 + 20,

2148 
CURLINFO_PRIVATE
 = 
CURLINFO_STRING
 + 21,

2149 
CURLINFO_HTTP_CONNECTCODE
 = 
CURLINFO_LONG
 + 22,

2150 
CURLINFO_HTTPAUTH_AVAIL
 = 
CURLINFO_LONG
 + 23,

2151 
CURLINFO_PROXYAUTH_AVAIL
 = 
CURLINFO_LONG
 + 24,

2152 
CURLINFO_OS_ERRNO
 = 
CURLINFO_LONG
 + 25,

2153 
CURLINFO_NUM_CONNECTS
 = 
CURLINFO_LONG
 + 26,

2154 
CURLINFO_SSL_ENGINES
 = 
CURLINFO_SLIST
 + 27,

2155 
CURLINFO_COOKIELIST
 = 
CURLINFO_SLIST
 + 28,

2156 
CURLINFO_LASTSOCKET
 = 
CURLINFO_LONG
 + 29,

2157 
CURLINFO_FTP_ENTRY_PATH
 = 
CURLINFO_STRING
 + 30,

2158 
CURLINFO_REDIRECT_URL
 = 
CURLINFO_STRING
 + 31,

2159 
CURLINFO_PRIMARY_IP
 = 
CURLINFO_STRING
 + 32,

2160 
CURLINFO_APPCONNECT_TIME
 = 
CURLINFO_DOUBLE
 + 33,

2161 
CURLINFO_CERTINFO
 = 
CURLINFO_SLIST
 + 34,

2162 
CURLINFO_CONDITION_UNMET
 = 
CURLINFO_LONG
 + 35,

2163 
CURLINFO_RTSP_SESSION_ID
 = 
CURLINFO_STRING
 + 36,

2164 
CURLINFO_RTSP_CLIENT_CSEQ
 = 
CURLINFO_LONG
 + 37,

2165 
CURLINFO_RTSP_SERVER_CSEQ
 = 
CURLINFO_LONG
 + 38,

2166 
CURLINFO_RTSP_CSEQ_RECV
 = 
CURLINFO_LONG
 + 39,

2167 
CURLINFO_PRIMARY_PORT
 = 
CURLINFO_LONG
 + 40,

2168 
CURLINFO_LOCAL_IP
 = 
CURLINFO_STRING
 + 41,

2169 
CURLINFO_LOCAL_PORT
 = 
CURLINFO_LONG
 + 42,

2170 
CURLINFO_TLS_SESSION
 = 
CURLINFO_SLIST
 + 43,

2171 
CURLINFO_ACTIVESOCKET
 = 
CURLINFO_SOCKET
 + 44,

2174 
CURLINFO_LASTONE
 = 44

2175 } 
	tCURLINFO
;

2179 
	#CURLINFO_HTTP_CODE
 
CURLINFO_RESPONSE_CODE


	)

2182 
CURLCLOSEPOLICY_NONE
,

2184 
CURLCLOSEPOLICY_OLDEST
,

2185 
CURLCLOSEPOLICY_LEAST_RECENTLY_USED
,

2186 
CURLCLOSEPOLICY_LEAST_TRAFFIC
,

2187 
CURLCLOSEPOLICY_SLOWEST
,

2188 
CURLCLOSEPOLICY_CALLBACK
,

2190 
CURLCLOSEPOLICY_LAST


2191 } 
	tcuæ_˛o£pﬁicy
;

2193 
	#CURL_GLOBAL_SSL
 (1<<0)

	)

2194 
	#CURL_GLOBAL_WIN32
 (1<<1)

	)

2195 
	#CURL_GLOBAL_ALL
 (
CURL_GLOBAL_SSL
|
CURL_GLOBAL_WIN32
)

	)

2196 
	#CURL_GLOBAL_NOTHING
 0

	)

2197 
	#CURL_GLOBAL_DEFAULT
 
CURL_GLOBAL_ALL


	)

2198 
	#CURL_GLOBAL_ACK_EINTR
 (1<<2)

	)

2207 
CURL_LOCK_DATA_NONE
 = 0,

2212 
CURL_LOCK_DATA_SHARE
,

2213 
CURL_LOCK_DATA_COOKIE
,

2214 
CURL_LOCK_DATA_DNS
,

2215 
CURL_LOCK_DATA_SSL_SESSION
,

2216 
CURL_LOCK_DATA_CONNECT
,

2217 
CURL_LOCK_DATA_LAST


2218 } 
	tcuæ_lock_d©a
;

2222 
CURL_LOCK_ACCESS_NONE
 = 0,

2223 
CURL_LOCK_ACCESS_SHARED
 = 1,

2224 
CURL_LOCK_ACCESS_SINGLE
 = 2,

2225 
CURL_LOCK_ACCESS_LAST


2226 } 
	tcuæ_lock_ac˚ss
;

2228 (*
	tcuæ_lock_fun˘i⁄
)(
	tCURL
 *
	th™dÀ
,

2229 
	tcuæ_lock_d©a
 
	td©a
,

2230 
	tcuæ_lock_ac˚ss
 
	tlockty≥
,

2231 *
	tu£Ωå
);

2232 (*
	tcuæ_u∆ock_fun˘i⁄
)(
	tCURL
 *
	th™dÀ
,

2233 
	tcuæ_lock_d©a
 
	td©a
,

2234 *
	tu£Ωå
);

2236 
	tCURLSH
;

2239 
CURLSHE_OK
,

2240 
CURLSHE_BAD_OPTION
,

2241 
CURLSHE_IN_USE
,

2242 
CURLSHE_INVALID
,

2243 
CURLSHE_NOMEM
,

2244 
CURLSHE_NOT_BUILT_IN
,

2245 
CURLSHE_LAST


2246 } 
	tCURLSHcode
;

2249 
CURLSHOPT_NONE
,

2250 
CURLSHOPT_SHARE
,

2251 
CURLSHOPT_UNSHARE
,

2252 
CURLSHOPT_LOCKFUNC
,

2253 
CURLSHOPT_UNLOCKFUNC
,

2254 
CURLSHOPT_USERDATA
,

2256 
CURLSHOPT_LAST


2257 } 
	tCURLSH›ti⁄
;

2259 
CURL_EXTERN
 
CURLSH
 *
	`cuæ_sh¨e_öô
();

2260 
CURL_EXTERN
 
CURLSHcode
 
	`cuæ_sh¨e_£t›t
(
CURLSH
 *, 
CURLSH›ti⁄
 
›ti⁄
, ...);

2261 
CURL_EXTERN
 
CURLSHcode
 
	`cuæ_sh¨e_˛ónup
(
CURLSH
 *);

2268 
CURLVERSION_FIRST
,

2269 
CURLVERSION_SECOND
,

2270 
CURLVERSION_THIRD
,

2271 
CURLVERSION_FOURTH
,

2272 
CURLVERSION_LAST


2273 } 
	tCURLvîsi⁄
;

2280 
	#CURLVERSION_NOW
 
CURLVERSION_FOURTH


	)

2283 
CURLvîsi⁄
 
age
;

2284 c⁄° *
vîsi⁄
;

2285 
vîsi⁄_num
;

2286 c⁄° *
ho°
;

2287 
„©uªs
;

2288 c⁄° *
s¶_vîsi⁄
;

2289 
s¶_vîsi⁄_num
;

2290 c⁄° *
libz_vîsi⁄
;

2292 c⁄° * c⁄° *
¥Ÿocﬁs
;

2295 c⁄° *
¨es
;

2296 
¨es_num
;

2299 c⁄° *
libidn
;

2304 
ic⁄v_vî_num
;

2306 c⁄° *
libssh_vîsi⁄
;

2308 } 
	tcuæ_vîsi⁄_öfo_d©a
;

2310 
	#CURL_VERSION_IPV6
 (1<<0Ë

	)

2311 
	#CURL_VERSION_KERBEROS4
 (1<<1Ë

	)

2313 
	#CURL_VERSION_SSL
 (1<<2Ë

	)

2314 
	#CURL_VERSION_LIBZ
 (1<<3Ë

	)

2315 
	#CURL_VERSION_NTLM
 (1<<4Ë

	)

2316 
	#CURL_VERSION_GSSNEGOTIATE
 (1<<5Ë

	)

2318 
	#CURL_VERSION_DEBUG
 (1<<6Ë

	)

2319 
	#CURL_VERSION_ASYNCHDNS
 (1<<7Ë

	)

2320 
	#CURL_VERSION_SPNEGO
 (1<<8Ë

	)

2321 
	#CURL_VERSION_LARGEFILE
 (1<<9Ë

	)

2322 
	#CURL_VERSION_IDN
 (1<<10Ë

	)

2324 
	#CURL_VERSION_SSPI
 (1<<11Ë

	)

2325 
	#CURL_VERSION_CONV
 (1<<12Ë

	)

2326 
	#CURL_VERSION_CURLDEBUG
 (1<<13Ë

	)

2327 
	#CURL_VERSION_TLSAUTH_SRP
 (1<<14Ë

	)

2328 
	#CURL_VERSION_NTLM_WB
 (1<<15Ë

	)

2330 
	#CURL_VERSION_HTTP2
 (1<<16Ë

	)

2331 
	#CURL_VERSION_GSSAPI
 (1<<17Ë

	)

2332 
	#CURL_VERSION_KERBEROS5
 (1<<18Ë

	)

2333 
	#CURL_VERSION_UNIX_SOCKETS
 (1<<19Ë

	)

2334 
	#CURL_VERSION_PSL
 (1<<20Ë

	)

2345 
CURL_EXTERN
 
cuæ_vîsi⁄_öfo_d©a
 *
	`cuæ_vîsi⁄_öfo
(
CURLvîsi⁄
);

2356 
CURL_EXTERN
 c⁄° *
	`cuæ_ósy_°ªº‹
(
CURLcode
);

2367 
CURL_EXTERN
 c⁄° *
	`cuæ_sh¨e_°ªº‹
(
CURLSHcode
);

2378 
CURL_EXTERN
 
CURLcode
 
	`cuæ_ósy_∑u£
(
CURL
 *
h™dÀ
, 
bômask
);

2380 
	#CURLPAUSE_RECV
 (1<<0)

	)

2381 
	#CURLPAUSE_RECV_CONT
 (0)

	)

2383 
	#CURLPAUSE_SEND
 (1<<2)

	)

2384 
	#CURLPAUSE_SEND_CONT
 (0)

	)

2386 
	#CURLPAUSE_ALL
 (
CURLPAUSE_RECV
|
CURLPAUSE_SEND
)

	)

2387 
	#CURLPAUSE_CONT
 (
CURLPAUSE_RECV_CONT
|
CURLPAUSE_SEND_CONT
)

	)

2389 #ifde‡ 
__˝lu•lus


2390 
	}
}

2395 
	~"ósy.h
"

2396 
	~"mu…i.h
"

2399 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__GNUC_MINOR__
) && \

2400 ((
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 3)) && \

2401 !
deföed
(
__˝lu•lus
Ë&& !
	$deföed
(
CURL_DISABLE_TYPECHECK
)

2402 
	~"ty≥check-gcc.h
"

2404 #i‡
	`deföed
(
__STDC__
) && (__STDC__ >= 1)

2408 
	#cuæ_ósy_£t›t
(
h™dÀ
,
›t
,
∑øm
Ë
	`cuæ_ósy_£t›t
(h™dÀ,›t,∑øm)

	)

2409 
	#cuæ_ósy_gëöfo
(
h™dÀ
,
öfo
,
¨g
Ë
	`cuæ_ósy_gëöfo
(h™dÀ,öfo,¨g)

	)

2410 
	#cuæ_sh¨e_£t›t
(
sh¨e
,
›t
,
∑øm
Ë
	`cuæ_sh¨e_£t›t
(sh¨e,›t,∑øm)

	)

2411 
	#cuæ_mu…i_£t›t
(
h™dÀ
,
›t
,
∑øm
Ë
	`cuæ_mu…i_£t›t
(h™dÀ,›t,∑øm)

	)

	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #ifde‡
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #ifde‡
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	$sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	$sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	$sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	$sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #ifde‡
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/err.h

19 #i‚def 
_ERR_H


20 
	#_ERR_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed___va_li°


	)

25 
	~<°d¨g.h
>

26 #i‚def 
__GNUC_VA_LIST


27 
	#__gnuc_va_li°
 
__±r_t


	)

30 
__BEGIN_DECLS


34 
	$w¨n
 (c⁄° *
__f‹m©
, ...)

35 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

36 
	$vw¨n
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

37 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

40 
	$w¨nx
 (c⁄° *
__f‹m©
, ...)

41 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

42 
	$vw¨nx
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

43 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

46 
	$îr
 (
__°©us
, c⁄° *
__f‹m©
, ...)

47 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

48 
	$vîr
 (
__°©us
, c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

49 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

50 
	$îrx
 (
__°©us
, c⁄° *
__f‹m©
, ...)

51 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

52 
	$vîrx
 (
__°©us
, c⁄° *, 
__gnuc_va_li°
)

53 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

55 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/fnmatch.h

18 #i‚def 
_FNMATCH_H


19 
	#_FNMATCH_H
 1

	)

21 #ifdef 
__˝lu•lus


27 #unde‡
FNM_PATHNAME


28 #unde‡
FNM_NOESCAPE


29 #unde‡
FNM_PERIOD


32 
	#FNM_PATHNAME
 (1 << 0Ë

	)

33 
	#FNM_NOESCAPE
 (1 << 1Ë

	)

34 
	#FNM_PERIOD
 (1 << 2Ë

	)

36 #i‡!
deföed
 
_POSIX_C_SOURCE
 || _POSIX_C_SOURCE < 2 || deföed 
_GNU_SOURCE


37 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

38 
	#FNM_LEADING_DIR
 (1 << 3Ë

	)

39 
	#FNM_CASEFOLD
 (1 << 4Ë

	)

40 
	#FNM_EXTMATCH
 (1 << 5Ë

	)

44 
	#FNM_NOMATCH
 1

	)

50 #ifde‡
_XOPEN_SOURCE


51 
	#FNM_NOSYS
 (-1)

	)

56 
‚m©ch
 (c⁄° *
__∑âîn
, c⁄° *
__«me
, 
__Êags
);

58 #ifdef 
__˝lu•lus


	@/usr/include/ftw.h

22 #i‚de‡
_FTW_H


23 
	#_FTW_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/°©.h
>

31 
__BEGIN_DECLS


37 
	mFTW_F
,

38 
	#FTW_F
 
FTW_F


	)

39 
	mFTW_D
,

40 
	#FTW_D
 
FTW_D


	)

41 
	mFTW_DNR
,

42 
	#FTW_DNR
 
FTW_DNR


	)

43 
	mFTW_NS
,

44 
	#FTW_NS
 
FTW_NS


	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


48 
	mFTW_SL
,

49 
	#FTW_SL
 
FTW_SL


	)

52 #ifde‡
__USE_XOPEN_EXTENDED


54 
	mFTW_DP
,

55 
	#FTW_DP
 
FTW_DP


	)

56 
	mFTW_SLN


57 
	#FTW_SLN
 
FTW_SLN


	)

63 #ifde‡
__USE_XOPEN_EXTENDED


67 
	mFTW_PHYS
 = 1,

68 
	#FTW_PHYS
 
FTW_PHYS


	)

69 
	mFTW_MOUNT
 = 2,

71 
	#FTW_MOUNT
 
FTW_MOUNT


	)

72 
	mFTW_CHDIR
 = 4,

73 
	#FTW_CHDIR
 
FTW_CHDIR


	)

74 
	mFTW_DEPTH
 = 8

75 
	#FTW_DEPTH
 
FTW_DEPTH


	)

76 #ifde‡
__USE_GNU


78 
	mFTW_ACTIONRETVAL
 = 16

80 
	#FTW_ACTIONRETVAL
 
FTW_ACTIONRETVAL


	)

84 #ifde‡
__USE_GNU


88 
	mFTW_CONTINUE
 = 0,

90 
	#FTW_CONTINUE
 
FTW_CONTINUE


	)

91 
	mFTW_STOP
 = 1,

93 
	#FTW_STOP
 
FTW_STOP


	)

94 
	mFTW_SKIP_SUBTREE
 = 2,

97 
	#FTW_SKIP_SUBTREE
 
FTW_SKIP_SUBTREE


	)

98 
	mFTW_SKIP_SIBLINGS
 = 3,

100 
	#FTW_SKIP_SIBLINGS
 
FTW_SKIP_SIBLINGS


	)

105 
	sFTW


107 
	mba£
;

108 
	mÀvñ
;

114 (*
	t__·w_func_t
Ë(c⁄° *
	t__fûíame
,

115 c⁄° 
	t°©
 *
	t__°©us
, 
	t__Êag
);

116 #ifde‡
__USE_LARGEFILE64


117 (*
	t__·w64_func_t
Ë(c⁄° *
	t__fûíame
,

118 c⁄° 
	t°©64
 *
	t__°©us
, 
	t__Êag
);

120 #ifde‡
__USE_XOPEN_EXTENDED


121 (*
	t__n·w_func_t
Ë(c⁄° *
	t__fûíame
,

122 c⁄° 
	t°©
 *
	t__°©us
, 
	t__Êag
,

123 
	tFTW
 *
	t__öfo
);

124 #ifde‡
__USE_LARGEFILE64


125 (*
	t__n·w64_func_t
Ë(c⁄° *
	t__fûíame
,

126 c⁄° 
	t°©64
 *
	t__°©us
,

127 
	t__Êag
, 
	tFTW
 *
	t__öfo
);

135 #i‚de‡
__USE_FILE_OFFSET64


136 
	$·w
 (c⁄° *
__dú
, 
__·w_func_t
 
__func
, 
__des¸ùt‹s
)

137 
	`__n⁄nuŒ
 ((1, 2));

139 #ifde‡
__REDIRECT


140 
	`__REDIRECT
 (
·w
, (c⁄° *
__dú
, 
__·w_func_t
 
__func
,

141 
__des¸ùt‹s
), 
·w64
Ë
	`__n⁄nuŒ
 ((1, 2));

143 
	#·w
 
·w64


	)

146 #ifde‡
__USE_LARGEFILE64


147 
	$·w64
 (c⁄° *
__dú
, 
__·w64_func_t
 
__func
,

148 
__des¸ùt‹s
Ë
	`__n⁄nuŒ
 ((1, 2));

151 #ifde‡
__USE_XOPEN_EXTENDED


157 #i‚de‡
__USE_FILE_OFFSET64


158 
	$n·w
 (c⁄° *
__dú
, 
__n·w_func_t
 
__func
, 
__des¸ùt‹s
,

159 
__Êag
Ë
	`__n⁄nuŒ
 ((1, 2));

161 #ifde‡
__REDIRECT


162 
	`__REDIRECT
 (
n·w
, (c⁄° *
__dú
, 
__n·w_func_t
 
__func
,

163 
__des¸ùt‹s
, 
__Êag
), 
n·w64
)

164 
	`__n⁄nuŒ
 ((1, 2));

166 
	#n·w
 
n·w64


	)

169 #ifde‡
__USE_LARGEFILE64


170 
	$n·w64
 (c⁄° *
__dú
, 
__n·w64_func_t
 
__func
,

171 
__des¸ùt‹s
, 
__Êag
Ë
	`__n⁄nuŒ
 ((1, 2));

175 
__END_DECLS


	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/ifaddrs.h

19 #i‚de‡
_IFADDRS_H


20 
	#_IFADDRS_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/sockë.h
>

25 
__BEGIN_DECLS


29 
	siÁddrs


31 
iÁddrs
 *
	miÁ_√xt
;

33 *
	miÁ_«me
;

34 
	miÁ_Êags
;

36 
sockaddr
 *
	miÁ_addr
;

37 
sockaddr
 *
	miÁ_√tmask
;

44 
sockaddr
 *
	mifu_brﬂdaddr
;

45 
sockaddr
 *
	mifu_d°addr
;

46 } 
	miÁ_ifu
;

49 #i‚de‡
iÁ_brﬂdaddr


50 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

52 #i‚de‡
iÁ_d°addr


53 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

56 *
	miÁ_d©a
;

66 
	$gëiÁddrs
 (
iÁddrs
 **
__iÁp
Ë
__THROW
;

69 
	$‰ìiÁddrs
 (
iÁddrs
 *
__iÁ
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/libintl.h

20 #i‚de‡
_LIBINTL_H


21 
	#_LIBINTL_H
 1

	)

23 
	~<„©uªs.h
>

27 
	#__USE_GNU_GETTEXT
 1

	)

31 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

32 ((
maj‹
Ë=0 ? 1 : -1)

	)

34 
__BEGIN_DECLS


39 *
	$gëãxt
 (c⁄° *
__msgid
)

40 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

44 *
	$dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

45 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

46 *
	$__dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

47 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

51 *
	$dcgëãxt
 (c⁄° *
__domaö«me
,

52 c⁄° *
__msgid
, 
__ˇãg‹y
)

53 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

54 *
	$__dcgëãxt
 (c⁄° *
__domaö«me
,

55 c⁄° *
__msgid
, 
__ˇãg‹y
)

56 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

61 *
	$ngëãxt
 (c⁄° *
__msgid1
, c⁄° *
__msgid2
,

62 
__n
)

63 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

67 *
	$dngëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

68 c⁄° *
__msgid2
, 
__n
)

69 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

73 *
	$d˙gëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

74 c⁄° *
__msgid2
, 
__n
,

75 
__ˇãg‹y
)

76 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

82 *
	$ãxtdomaö
 (c⁄° *
__domaö«me
Ë
__THROW
;

86 *
	$bödãxtdomaö
 (c⁄° *
__domaö«me
,

87 c⁄° *
__dú«me
Ë
__THROW
;

91 *
	$böd_ãxtdomaö_code£t
 (c⁄° *
__domaö«me
,

92 c⁄° *
__code£t
Ë
__THROW
;

96 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


99 
	#__√ed_NULL


	)

100 
	~<°ddef.h
>

103 
	~<loˇÀ.h
>

109 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

111 
	#dgëãxt
(
domaö«me
, 
msgid
) \

112 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

114 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

116 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

117 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

121 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠
 {

75 
__u64
 
	mmem_°¨t
;

76 
__u64
 
	mmem_íd
;

77 
__u64
 
	mba£_addr
;

78 
__u16
 
	múq
;

79 
__u8
 
	mdma
;

80 
__u8
 
	mp‹t
;

102 
	mIFLA_UNSPEC
,

103 
	mIFLA_ADDRESS
,

104 
	mIFLA_BROADCAST
,

105 
	mIFLA_IFNAME
,

106 
	mIFLA_MTU
,

107 
	mIFLA_LINK
,

108 
	mIFLA_QDISC
,

109 
	mIFLA_STATS
,

110 
	mIFLA_COST
,

111 
	#IFLA_COST
 
IFLA_COST


	)

112 
	mIFLA_PRIORITY
,

113 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

114 
	mIFLA_MASTER
,

115 
	#IFLA_MASTER
 
IFLA_MASTER


	)

116 
	mIFLA_WIRELESS
,

117 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

118 
	mIFLA_PROTINFO
,

119 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

120 
	mIFLA_TXQLEN
,

121 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

122 
	mIFLA_MAP
,

123 
	#IFLA_MAP
 
IFLA_MAP


	)

124 
	mIFLA_WEIGHT
,

125 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

126 
	mIFLA_OPERSTATE
,

127 
	mIFLA_LINKMODE
,

128 
	mIFLA_LINKINFO
,

129 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

130 
	mIFLA_NET_NS_PID
,

131 
	mIFLA_IFALIAS
,

132 
	mIFLA_NUM_VF
,

133 
	mIFLA_VFINFO_LIST
,

134 
	mIFLA_STATS64
,

135 
	mIFLA_VF_PORTS
,

136 
	mIFLA_PORT_SELF
,

137 
	mIFLA_AF_SPEC
,

138 
	mIFLA_GROUP
,

139 
	mIFLA_NET_NS_FD
,

140 
	mIFLA_EXT_MASK
,

141 
	mIFLA_PROMISCUITY
,

142 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

143 
	mIFLA_NUM_TX_QUEUES
,

144 
	mIFLA_NUM_RX_QUEUES
,

145 
	mIFLA_CARRIER
,

146 
	mIFLA_PHYS_PORT_ID
,

147 
	mIFLA_CARRIER_CHANGES
,

148 
	mIFLA_PHYS_SWITCH_ID
,

149 
	mIFLA_LINK_NETNSID
,

150 
	mIFLA_PHYS_PORT_NAME
,

151 
	mIFLA_PROTO_DOWN
,

152 
	m__IFLA_MAX


156 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

159 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

160 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

163 
	mIFLA_INET_UNSPEC
,

164 
	mIFLA_INET_CONF
,

165 
	m__IFLA_INET_MAX
,

168 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

201 
	mIFLA_INET6_UNSPEC
,

202 
	mIFLA_INET6_FLAGS
,

203 
	mIFLA_INET6_CONF
,

204 
	mIFLA_INET6_STATS
,

205 
	mIFLA_INET6_MCAST
,

206 
	mIFLA_INET6_CACHEINFO
,

207 
	mIFLA_INET6_ICMP6STATS
,

208 
	mIFLA_INET6_TOKEN
,

209 
	mIFLA_INET6_ADDR_GEN_MODE
,

210 
	m__IFLA_INET6_MAX


213 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

215 
	eö6_addr_gí_mode
 {

216 
	mIN6_ADDR_GEN_MODE_EUI64
,

217 
	mIN6_ADDR_GEN_MODE_NONE
,

218 
	mIN6_ADDR_GEN_MODE_STABLE_PRIVACY
,

224 
	mIFLA_BR_UNSPEC
,

225 
	mIFLA_BR_FORWARD_DELAY
,

226 
	mIFLA_BR_HELLO_TIME
,

227 
	mIFLA_BR_MAX_AGE
,

228 
	mIFLA_BR_AGEING_TIME
,

229 
	mIFLA_BR_STP_STATE
,

230 
	mIFLA_BR_PRIORITY
,

231 
	mIFLA_BR_VLAN_FILTERING
,

232 
	mIFLA_BR_VLAN_PROTOCOL
,

233 
	mIFLA_BR_GROUP_FWD_MASK
,

234 
	mIFLA_BR_ROOT_ID
,

235 
	mIFLA_BR_BRIDGE_ID
,

236 
	mIFLA_BR_ROOT_PORT
,

237 
	mIFLA_BR_ROOT_PATH_COST
,

238 
	mIFLA_BR_TOPOLOGY_CHANGE
,

239 
	mIFLA_BR_TOPOLOGY_CHANGE_DETECTED
,

240 
	mIFLA_BR_HELLO_TIMER
,

241 
	mIFLA_BR_TCN_TIMER
,

242 
	mIFLA_BR_TOPOLOGY_CHANGE_TIMER
,

243 
	mIFLA_BR_GC_TIMER
,

244 
	mIFLA_BR_GROUP_ADDR
,

245 
	mIFLA_BR_FDB_FLUSH
,

246 
	mIFLA_BR_MCAST_ROUTER
,

247 
	mIFLA_BR_MCAST_SNOOPING
,

248 
	mIFLA_BR_MCAST_QUERY_USE_IFADDR
,

249 
	mIFLA_BR_MCAST_QUERIER
,

250 
	mIFLA_BR_MCAST_HASH_ELASTICITY
,

251 
	mIFLA_BR_MCAST_HASH_MAX
,

252 
	mIFLA_BR_MCAST_LAST_MEMBER_CNT
,

253 
	mIFLA_BR_MCAST_STARTUP_QUERY_CNT
,

254 
	mIFLA_BR_MCAST_LAST_MEMBER_INTVL
,

255 
	mIFLA_BR_MCAST_MEMBERSHIP_INTVL
,

256 
	mIFLA_BR_MCAST_QUERIER_INTVL
,

257 
	mIFLA_BR_MCAST_QUERY_INTVL
,

258 
	mIFLA_BR_MCAST_QUERY_RESPONSE_INTVL
,

259 
	mIFLA_BR_MCAST_STARTUP_QUERY_INTVL
,

260 
	mIFLA_BR_NF_CALL_IPTABLES
,

261 
	mIFLA_BR_NF_CALL_IP6TABLES
,

262 
	mIFLA_BR_NF_CALL_ARPTABLES
,

263 
	mIFLA_BR_VLAN_DEFAULT_PVID
,

264 
	m__IFLA_BR_MAX
,

267 
	#IFLA_BR_MAX
 (
__IFLA_BR_MAX
 - 1)

	)

269 
	siÊa_bridge_id
 {

270 
__u8
 
	m¥io
[2];

271 
__u8
 
	maddr
[6];

275 
	mBRIDGE_MODE_UNSPEC
,

276 
	mBRIDGE_MODE_HAIRPIN
,

280 
	mIFLA_BRPORT_UNSPEC
,

281 
	mIFLA_BRPORT_STATE
,

282 
	mIFLA_BRPORT_PRIORITY
,

283 
	mIFLA_BRPORT_COST
,

284 
	mIFLA_BRPORT_MODE
,

285 
	mIFLA_BRPORT_GUARD
,

286 
	mIFLA_BRPORT_PROTECT
,

287 
	mIFLA_BRPORT_FAST_LEAVE
,

288 
	mIFLA_BRPORT_LEARNING
,

289 
	mIFLA_BRPORT_UNICAST_FLOOD
,

290 
	mIFLA_BRPORT_PROXYARP
,

291 
	mIFLA_BRPORT_LEARNING_SYNC
,

292 
	mIFLA_BRPORT_PROXYARP_WIFI
,

293 
	mIFLA_BRPORT_ROOT_ID
,

294 
	mIFLA_BRPORT_BRIDGE_ID
,

295 
	mIFLA_BRPORT_DESIGNATED_PORT
,

296 
	mIFLA_BRPORT_DESIGNATED_COST
,

297 
	mIFLA_BRPORT_ID
,

298 
	mIFLA_BRPORT_NO
,

299 
	mIFLA_BRPORT_TOPOLOGY_CHANGE_ACK
,

300 
	mIFLA_BRPORT_CONFIG_PENDING
,

301 
	mIFLA_BRPORT_MESSAGE_AGE_TIMER
,

302 
	mIFLA_BRPORT_FORWARD_DELAY_TIMER
,

303 
	mIFLA_BRPORT_HOLD_TIMER
,

304 
	mIFLA_BRPORT_FLUSH
,

305 
	mIFLA_BRPORT_MULTICAST_ROUTER
,

306 
	m__IFLA_BRPORT_MAX


308 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

310 
	siÊa_ˇcheöfo
 {

311 
__u32
 
	mmax_ªasm_Àn
;

312 
__u32
 
	mt°amp
;

313 
__u32
 
	mªachabÀ_time
;

314 
__u32
 
	mªå™s_time
;

318 
	mIFLA_INFO_UNSPEC
,

319 
	mIFLA_INFO_KIND
,

320 
	mIFLA_INFO_DATA
,

321 
	mIFLA_INFO_XSTATS
,

322 
	mIFLA_INFO_SLAVE_KIND
,

323 
	mIFLA_INFO_SLAVE_DATA
,

324 
	m__IFLA_INFO_MAX
,

327 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

332 
	mIFLA_VLAN_UNSPEC
,

333 
	mIFLA_VLAN_ID
,

334 
	mIFLA_VLAN_FLAGS
,

335 
	mIFLA_VLAN_EGRESS_QOS
,

336 
	mIFLA_VLAN_INGRESS_QOS
,

337 
	mIFLA_VLAN_PROTOCOL
,

338 
	m__IFLA_VLAN_MAX
,

341 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

343 
	siÊa_vœn_Êags
 {

344 
__u32
 
	mÊags
;

345 
__u32
 
	mmask
;

349 
	mIFLA_VLAN_QOS_UNSPEC
,

350 
	mIFLA_VLAN_QOS_MAPPING
,

351 
	m__IFLA_VLAN_QOS_MAX


354 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

356 
	siÊa_vœn_qos_m≠pög
 {

357 
__u32
 
	m‰om
;

358 
__u32
 
	mto
;

363 
	mIFLA_MACVLAN_UNSPEC
,

364 
	mIFLA_MACVLAN_MODE
,

365 
	mIFLA_MACVLAN_FLAGS
,

366 
	mIFLA_MACVLAN_MACADDR_MODE
,

367 
	mIFLA_MACVLAN_MACADDR
,

368 
	mIFLA_MACVLAN_MACADDR_DATA
,

369 
	mIFLA_MACVLAN_MACADDR_COUNT
,

370 
	m__IFLA_MACVLAN_MAX
,

373 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

375 
	emacvœn_mode
 {

376 
	mMACVLAN_MODE_PRIVATE
 = 1,

377 
	mMACVLAN_MODE_VEPA
 = 2,

378 
	mMACVLAN_MODE_BRIDGE
 = 4,

379 
	mMACVLAN_MODE_PASSTHRU
 = 8,

380 
	mMACVLAN_MODE_SOURCE
 = 16,

383 
	emacvœn_maˇddr_mode
 {

384 
	mMACVLAN_MACADDR_ADD
,

385 
	mMACVLAN_MACADDR_DEL
,

386 
	mMACVLAN_MACADDR_FLUSH
,

387 
	mMACVLAN_MACADDR_SET
,

390 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

394 
	mIFLA_VRF_UNSPEC
,

395 
	mIFLA_VRF_TABLE
,

396 
	m__IFLA_VRF_MAX


399 
	#IFLA_VRF_MAX
 (
__IFLA_VRF_MAX
 - 1)

	)

403 
	mIFLA_IPVLAN_UNSPEC
,

404 
	mIFLA_IPVLAN_MODE
,

405 
	m__IFLA_IPVLAN_MAX


408 
	#IFLA_IPVLAN_MAX
 (
__IFLA_IPVLAN_MAX
 - 1)

	)

410 
	eùvœn_mode
 {

411 
	mIPVLAN_MODE_L2
 = 0,

412 
	mIPVLAN_MODE_L3
,

413 
	mIPVLAN_MODE_MAX


418 
	mIFLA_VXLAN_UNSPEC
,

419 
	mIFLA_VXLAN_ID
,

420 
	mIFLA_VXLAN_GROUP
,

421 
	mIFLA_VXLAN_LINK
,

422 
	mIFLA_VXLAN_LOCAL
,

423 
	mIFLA_VXLAN_TTL
,

424 
	mIFLA_VXLAN_TOS
,

425 
	mIFLA_VXLAN_LEARNING
,

426 
	mIFLA_VXLAN_AGEING
,

427 
	mIFLA_VXLAN_LIMIT
,

428 
	mIFLA_VXLAN_PORT_RANGE
,

429 
	mIFLA_VXLAN_PROXY
,

430 
	mIFLA_VXLAN_RSC
,

431 
	mIFLA_VXLAN_L2MISS
,

432 
	mIFLA_VXLAN_L3MISS
,

433 
	mIFLA_VXLAN_PORT
,

434 
	mIFLA_VXLAN_GROUP6
,

435 
	mIFLA_VXLAN_LOCAL6
,

436 
	mIFLA_VXLAN_UDP_CSUM
,

437 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_TX
,

438 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_RX
,

439 
	mIFLA_VXLAN_REMCSUM_TX
,

440 
	mIFLA_VXLAN_REMCSUM_RX
,

441 
	mIFLA_VXLAN_GBP
,

442 
	mIFLA_VXLAN_REMCSUM_NOPARTIAL
,

443 
	mIFLA_VXLAN_COLLECT_METADATA
,

444 
	mIFLA_VXLAN_FAN_MAP
 = 33,

445 
	m__IFLA_VXLAN_MAX


447 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

449 
	siÊa_vxœn_p‹t_ønge
 {

450 
__be16
 
	mlow
;

451 
__be16
 
	mhigh
;

456 
	mIFLA_GENEVE_UNSPEC
,

457 
	mIFLA_GENEVE_ID
,

458 
	mIFLA_GENEVE_REMOTE
,

459 
	mIFLA_GENEVE_TTL
,

460 
	mIFLA_GENEVE_TOS
,

461 
	mIFLA_GENEVE_PORT
,

462 
	mIFLA_GENEVE_COLLECT_METADATA
,

463 
	mIFLA_GENEVE_REMOTE6
,

464 
	mIFLA_GENEVE_UDP_CSUM
,

465 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_TX
,

466 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_RX
,

467 
	m__IFLA_GENEVE_MAX


469 
	#IFLA_GENEVE_MAX
 (
__IFLA_GENEVE_MAX
 - 1)

	)

474 
	mIFLA_BOND_UNSPEC
,

475 
	mIFLA_BOND_MODE
,

476 
	mIFLA_BOND_ACTIVE_SLAVE
,

477 
	mIFLA_BOND_MIIMON
,

478 
	mIFLA_BOND_UPDELAY
,

479 
	mIFLA_BOND_DOWNDELAY
,

480 
	mIFLA_BOND_USE_CARRIER
,

481 
	mIFLA_BOND_ARP_INTERVAL
,

482 
	mIFLA_BOND_ARP_IP_TARGET
,

483 
	mIFLA_BOND_ARP_VALIDATE
,

484 
	mIFLA_BOND_ARP_ALL_TARGETS
,

485 
	mIFLA_BOND_PRIMARY
,

486 
	mIFLA_BOND_PRIMARY_RESELECT
,

487 
	mIFLA_BOND_FAIL_OVER_MAC
,

488 
	mIFLA_BOND_XMIT_HASH_POLICY
,

489 
	mIFLA_BOND_RESEND_IGMP
,

490 
	mIFLA_BOND_NUM_PEER_NOTIF
,

491 
	mIFLA_BOND_ALL_SLAVES_ACTIVE
,

492 
	mIFLA_BOND_MIN_LINKS
,

493 
	mIFLA_BOND_LP_INTERVAL
,

494 
	mIFLA_BOND_PACKETS_PER_SLAVE
,

495 
	mIFLA_BOND_AD_LACP_RATE
,

496 
	mIFLA_BOND_AD_SELECT
,

497 
	mIFLA_BOND_AD_INFO
,

498 
	mIFLA_BOND_AD_ACTOR_SYS_PRIO
,

499 
	mIFLA_BOND_AD_USER_PORT_KEY
,

500 
	mIFLA_BOND_AD_ACTOR_SYSTEM
,

501 
	mIFLA_BOND_TLB_DYNAMIC_LB
,

502 
	m__IFLA_BOND_MAX
,

505 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

508 
	mIFLA_BOND_AD_INFO_UNSPEC
,

509 
	mIFLA_BOND_AD_INFO_AGGREGATOR
,

510 
	mIFLA_BOND_AD_INFO_NUM_PORTS
,

511 
	mIFLA_BOND_AD_INFO_ACTOR_KEY
,

512 
	mIFLA_BOND_AD_INFO_PARTNER_KEY
,

513 
	mIFLA_BOND_AD_INFO_PARTNER_MAC
,

514 
	m__IFLA_BOND_AD_INFO_MAX
,

517 
	#IFLA_BOND_AD_INFO_MAX
 (
__IFLA_BOND_AD_INFO_MAX
 - 1)

	)

520 
	mIFLA_BOND_SLAVE_UNSPEC
,

521 
	mIFLA_BOND_SLAVE_STATE
,

522 
	mIFLA_BOND_SLAVE_MII_STATUS
,

523 
	mIFLA_BOND_SLAVE_LINK_FAILURE_COUNT
,

524 
	mIFLA_BOND_SLAVE_PERM_HWADDR
,

525 
	mIFLA_BOND_SLAVE_QUEUE_ID
,

526 
	mIFLA_BOND_SLAVE_AD_AGGREGATOR_ID
,

527 
	mIFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE
,

528 
	mIFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE
,

529 
	m__IFLA_BOND_SLAVE_MAX
,

532 
	#IFLA_BOND_SLAVE_MAX
 (
__IFLA_BOND_SLAVE_MAX
 - 1)

	)

537 
	mIFLA_VF_INFO_UNSPEC
,

538 
	mIFLA_VF_INFO
,

539 
	m__IFLA_VF_INFO_MAX
,

542 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

545 
	mIFLA_VF_UNSPEC
,

546 
	mIFLA_VF_MAC
,

547 
	mIFLA_VF_VLAN
,

548 
	mIFLA_VF_TX_RATE
,

549 
	mIFLA_VF_SPOOFCHK
,

550 
	mIFLA_VF_LINK_STATE
,

551 
	mIFLA_VF_RATE
,

552 
	mIFLA_VF_RSS_QUERY_EN
,

555 
	mIFLA_VF_STATS
,

556 
	mIFLA_VF_TRUST
,

557 
	m__IFLA_VF_MAX
,

560 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

562 
	siÊa_vf_mac
 {

563 
__u32
 
	mvf
;

564 
__u8
 
	mmac
[32];

567 
	siÊa_vf_vœn
 {

568 
__u32
 
	mvf
;

569 
__u32
 
	mvœn
;

570 
__u32
 
	mqos
;

573 
	siÊa_vf_tx_øã
 {

574 
__u32
 
	mvf
;

575 
__u32
 
	møã
;

578 
	siÊa_vf_øã
 {

579 
__u32
 
	mvf
;

580 
__u32
 
	mmö_tx_øã
;

581 
__u32
 
	mmax_tx_øã
;

584 
	siÊa_vf_•oofchk
 {

585 
__u32
 
	mvf
;

586 
__u32
 
	m£âög
;

590 
	mIFLA_VF_LINK_STATE_AUTO
,

591 
	mIFLA_VF_LINK_STATE_ENABLE
,

592 
	mIFLA_VF_LINK_STATE_DISABLE
,

593 
	m__IFLA_VF_LINK_STATE_MAX
,

596 
	siÊa_vf_lök_°©e
 {

597 
__u32
 
	mvf
;

598 
__u32
 
	mlök_°©e
;

601 
	siÊa_vf_rss_quîy_í
 {

602 
__u32
 
	mvf
;

603 
__u32
 
	m£âög
;

607 
	mIFLA_VF_STATS_RX_PACKETS
,

608 
	mIFLA_VF_STATS_TX_PACKETS
,

609 
	mIFLA_VF_STATS_RX_BYTES
,

610 
	mIFLA_VF_STATS_TX_BYTES
,

611 
	mIFLA_VF_STATS_BROADCAST
,

612 
	mIFLA_VF_STATS_MULTICAST
,

613 
	m__IFLA_VF_STATS_MAX
,

616 
	#IFLA_VF_STATS_MAX
 (
__IFLA_VF_STATS_MAX
 - 1)

	)

618 
	siÊa_vf_åu°
 {

619 
__u32
 
	mvf
;

620 
__u32
 
	m£âög
;

639 
	mIFLA_VF_PORT_UNSPEC
,

640 
	mIFLA_VF_PORT
,

641 
	m__IFLA_VF_PORT_MAX
,

644 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

647 
	mIFLA_PORT_UNSPEC
,

648 
	mIFLA_PORT_VF
,

649 
	mIFLA_PORT_PROFILE
,

650 
	mIFLA_PORT_VSI_TYPE
,

651 
	mIFLA_PORT_INSTANCE_UUID
,

652 
	mIFLA_PORT_HOST_UUID
,

653 
	mIFLA_PORT_REQUEST
,

654 
	mIFLA_PORT_RESPONSE
,

655 
	m__IFLA_PORT_MAX
,

658 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

660 
	#PORT_PROFILE_MAX
 40

	)

661 
	#PORT_UUID_MAX
 16

	)

662 
	#PORT_SELF_VF
 -1

	)

665 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

666 
	mPORT_REQUEST_PREASSOCIATE_RR
,

667 
	mPORT_REQUEST_ASSOCIATE
,

668 
	mPORT_REQUEST_DISASSOCIATE
,

672 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

673 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

674 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

675 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

676 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

677 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

678 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

680 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

681 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

682 
	mPORT_PROFILE_RESPONSE_INVALID
,

683 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

684 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

685 
	mPORT_PROFILE_RESPONSE_ERROR
,

688 
	siÊa_p‹t_vsi
 {

689 
__u8
 
	mvsi_mgr_id
;

690 
__u8
 
	mvsi_ty≥_id
[3];

691 
__u8
 
	mvsi_ty≥_vîsi⁄
;

692 
__u8
 
	m∑d
[3];

699 
	mIFLA_IPOIB_UNSPEC
,

700 
	mIFLA_IPOIB_PKEY
,

701 
	mIFLA_IPOIB_MODE
,

702 
	mIFLA_IPOIB_UMCAST
,

703 
	m__IFLA_IPOIB_MAX


707 
	mIPOIB_MODE_DATAGRAM
 = 0,

708 
	mIPOIB_MODE_CONNECTED
 = 1,

711 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

717 
	mIFLA_HSR_UNSPEC
,

718 
	mIFLA_HSR_SLAVE1
,

719 
	mIFLA_HSR_SLAVE2
,

720 
	mIFLA_HSR_MULTICAST_SPEC
,

721 
	mIFLA_HSR_SUPERVISION_ADDR
,

722 
	mIFLA_HSR_SEQ_NR
,

723 
	m__IFLA_HSR_MAX
,

726 
	#IFLA_HSR_MAX
 (
__IFLA_HSR_MAX
 - 1)

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 263335

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/mtd/mtd-user.h

20 #i‚de‡
__MTD_USER_H__


21 
	#__MTD_USER_H__


	)

24 
	~<mtd/mtd-abi.h
>

26 
mtd_öfo_u£r
 
	tmtd_öfo_t
;

27 
îa£_öfo_u£r
 
	tîa£_öfo_t
;

28 
ªgi⁄_öfo_u£r
 
	tªgi⁄_öfo_t
;

29 
«nd_ooböfo
 
	t«nd_ooböfo_t
;

30 
«nd_ec˛ayout_u£r
 
	t«nd_ec˛ayout_t
;

	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #ifde‡
__USE_MISC


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #ifde‡
__USE_MISC


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_MISC


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifde‡
__USE_XOPEN2K


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‚de‡
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‚de‡
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #ifde‡
__USE_MISC


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #ifde‡
__USE_MISC


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‚de‡
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #ifde‡
__USE_MISC


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‚de‡
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #ifde‡
__USE_MISC


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
s6_addr32
[0] == 0 \

415 && 
__a
->
s6_addr32
[1] == 0 \

416 && 
__a
->
s6_addr32
[2] == 0 \

417 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
s6_addr32
[0] == 0 \

423 && 
__a
->
s6_addr32
[1] == 0 \

424 && 
__a
->
s6_addr32
[2] == 0 \

425 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
s6_addr32
[0] == 0 \

441 && 
__a
->
s6_addr32
[1] == 0 \

442 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
s6_addr32
[0] == 0 \

448 && 
__a
->
s6_addr32
[1] == 0 \

449 && 
__a
->
s6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

457 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

458 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

459 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‚de‡
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/regex.h

20 #i‚de‡
_REGEX_H


21 
	#_REGEX_H
 1

	)

23 
	~<sys/ty≥s.h
>

26 #ifde‡
__˝lu•lus


34 
	ts_ªg_t
;

35 
	ta˘ive_ªg_t
;

42 
	tªg_sy¡ax_t
;

44 #ifde‡
__USE_GNU


47 
	#RE_BACKSLASH_ESCAPE_IN_LISTS
 ((Ë1)

	)

52 
	#RE_BK_PLUS_QM
 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 << 1)

	)

58 
	#RE_CHAR_CLASSES
 (
RE_BK_PLUS_QM
 << 1)

	)

72 
	#RE_CONTEXT_INDEP_ANCHORS
 (
RE_CHAR_CLASSES
 << 1)

	)

80 
	#RE_CONTEXT_INDEP_OPS
 (
RE_CONTEXT_INDEP_ANCHORS
 << 1)

	)

84 
	#RE_CONTEXT_INVALID_OPS
 (
RE_CONTEXT_INDEP_OPS
 << 1)

	)

88 
	#RE_DOT_NEWLINE
 (
RE_CONTEXT_INVALID_OPS
 << 1)

	)

92 
	#RE_DOT_NOT_NULL
 (
RE_DOT_NEWLINE
 << 1)

	)

96 
	#RE_HAT_LISTS_NOT_NEWLINE
 (
RE_DOT_NOT_NULL
 << 1)

	)

101 
	#RE_INTERVALS
 (
RE_HAT_LISTS_NOT_NEWLINE
 << 1)

	)

105 
	#RE_LIMITED_OPS
 (
RE_INTERVALS
 << 1)

	)

109 
	#RE_NEWLINE_ALT
 (
RE_LIMITED_OPS
 << 1)

	)

114 
	#RE_NO_BK_BRACES
 (
RE_NEWLINE_ALT
 << 1)

	)

118 
	#RE_NO_BK_PARENS
 (
RE_NO_BK_BRACES
 << 1)

	)

122 
	#RE_NO_BK_REFS
 (
RE_NO_BK_PARENS
 << 1)

	)

126 
	#RE_NO_BK_VBAR
 (
RE_NO_BK_REFS
 << 1)

	)

132 
	#RE_NO_EMPTY_RANGES
 (
RE_NO_BK_VBAR
 << 1)

	)

136 
	#RE_UNMATCHED_RIGHT_PAREN_ORD
 (
RE_NO_EMPTY_RANGES
 << 1)

	)

140 
	#RE_NO_POSIX_BACKTRACKING
 (
RE_UNMATCHED_RIGHT_PAREN_ORD
 << 1)

	)

144 
	#RE_NO_GNU_OPS
 (
RE_NO_POSIX_BACKTRACKING
 << 1)

	)

152 
	#RE_DEBUG
 (
RE_NO_GNU_OPS
 << 1)

	)

157 
	#RE_INVALID_INTERVAL_ORD
 (
RE_DEBUG
 << 1)

	)

161 
	#RE_ICASE
 (
RE_INVALID_INTERVAL_ORD
 << 1)

	)

166 
	#RE_CARET_ANCHORS_HERE
 (
RE_ICASE
 << 1)

	)

170 
	#RE_CONTEXT_INVALID_DUP
 (
RE_CARET_ANCHORS_HERE
 << 1)

	)

174 
	#RE_NO_SUB
 (
RE_CONTEXT_INVALID_DUP
 << 1)

	)

181 
ªg_sy¡ax_t
 
ª_sy¡ax_›ti⁄s
;

183 #ifde‡
__USE_GNU


188 
	#RE_SYNTAX_EMACS
 0

	)

190 
	#RE_SYNTAX_AWK
 \

191 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DOT_NOT_NULL
 \

192 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

193 | 
RE_NO_BK_VBAR
 | 
RE_NO_EMPTY_RANGES
 \

194 | 
RE_DOT_NEWLINE
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

195 | 
RE_CHAR_CLASSES
 \

196 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
 | 
RE_NO_GNU_OPS
)

	)

198 
	#RE_SYNTAX_GNU_AWK
 \

199 ((
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

200 | 
RE_INVALID_INTERVAL_ORD
) \

201 & ~(
RE_DOT_NOT_NULL
 | 
RE_CONTEXT_INDEP_OPS
 \

202 | 
RE_CONTEXT_INVALID_OPS
 ))

	)

204 
	#RE_SYNTAX_POSIX_AWK
 \

205 (
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

206 | 
RE_INTERVALS
 | 
RE_NO_GNU_OPS
 \

207 | 
RE_INVALID_INTERVAL_ORD
)

	)

209 
	#RE_SYNTAX_GREP
 \

210 (
RE_BK_PLUS_QM
 | 
RE_CHAR_CLASSES
 \

211 | 
RE_HAT_LISTS_NOT_NEWLINE
 | 
RE_INTERVALS
 \

212 | 
RE_NEWLINE_ALT
)

	)

214 
	#RE_SYNTAX_EGREP
 \

215 (
RE_CHAR_CLASSES
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

216 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_HAT_LISTS_NOT_NEWLINE
 \

217 | 
RE_NEWLINE_ALT
 | 
RE_NO_BK_PARENS
 \

218 | 
RE_NO_BK_VBAR
)

	)

220 
	#RE_SYNTAX_POSIX_EGREP
 \

221 (
RE_SYNTAX_EGREP
 | 
RE_INTERVALS
 | 
RE_NO_BK_BRACES
 \

222 | 
RE_INVALID_INTERVAL_ORD
)

	)

225 
	#RE_SYNTAX_ED
 
RE_SYNTAX_POSIX_BASIC


	)

227 
	#RE_SYNTAX_SED
 
RE_SYNTAX_POSIX_BASIC


	)

230 
	#_RE_SYNTAX_POSIX_COMMON
 \

231 (
RE_CHAR_CLASSES
 | 
RE_DOT_NEWLINE
 | 
RE_DOT_NOT_NULL
 \

232 | 
RE_INTERVALS
 | 
RE_NO_EMPTY_RANGES
)

	)

234 
	#RE_SYNTAX_POSIX_BASIC
 \

235 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
 | 
RE_CONTEXT_INVALID_DUP
)

	)

240 
	#RE_SYNTAX_POSIX_MINIMAL_BASIC
 \

241 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_LIMITED_OPS
)

	)

243 
	#RE_SYNTAX_POSIX_EXTENDED
 \

244 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

245 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_NO_BK_BRACES
 \

246 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_VBAR
 \

247 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

251 
	#RE_SYNTAX_POSIX_MINIMAL_EXTENDED
 \

252 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

253 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_NO_BK_BRACES
 \

254 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

255 | 
RE_NO_BK_VBAR
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

261 #ifde‡
RE_DUP_MAX


262 #unde‡
RE_DUP_MAX


265 
	#RE_DUP_MAX
 (0x7fff)

	)

273 
	#REG_EXTENDED
 1

	)

277 
	#REG_ICASE
 (
REG_EXTENDED
 << 1)

	)

282 
	#REG_NEWLINE
 (
REG_ICASE
 << 1)

	)

286 
	#REG_NOSUB
 (
REG_NEWLINE
 << 1)

	)

296 
	#REG_NOTBOL
 1

	)

299 
	#REG_NOTEOL
 (1 << 1)

	)

303 
	#REG_STARTEND
 (1 << 2)

	)

310 #i‡
deföed
 
_XOPEN_SOURCE
 || deföed 
__USE_XOPEN2K


311 
	gREG_ENOSYS
 = -1,

314 
	gREG_NOERROR
 = 0,

315 
	gREG_NOMATCH
,

319 
	gREG_BADPAT
,

320 
	gREG_ECOLLATE
,

321 
	gREG_ECTYPE
,

322 
	gREG_EESCAPE
,

323 
	gREG_ESUBREG
,

324 
	gREG_EBRACK
,

325 
	gREG_EPAREN
,

326 
	gREG_EBRACE
,

327 
	gREG_BADBR
,

328 
	gREG_ERANGE
,

329 
	gREG_ESPACE
,

330 
	gREG_BADRPT
,

333 
	gREG_EEND
,

334 
	gREG_ESIZE
,

335 
	gREG_ERPAREN


336 } 
	tªg_îrcode_t
;

344 #i‚de‡
RE_TRANSLATE_TYPE


345 
	#__RE_TRANSLATE_TYPE
 *

	)

346 #ifde‡
__USE_GNU


347 
	#RE_TRANSLATE_TYPE
 
__RE_TRANSLATE_TYPE


	)

351 #ifde‡
__USE_GNU


352 
	#__REPB_PREFIX
(
«me
Ë
	)
name

354 
	#__REPB_PREFIX
(
«me
Ë
__
##
	)
name

357 
	sª_∑âîn_buf„r


362 *
__REPB_PREFIX
(
buf„r
);

365 
__REPB_PREFIX
(
Æloˇãd
);

368 
__REPB_PREFIX
(
u£d
);

371 
ªg_sy¡ax_t
 
__REPB_PREFIX
(
sy¡ax
);

376 *
__REPB_PREFIX
(
Á°m≠
);

382 
__RE_TRANSLATE_TYPE
 
__REPB_PREFIX
(
å™¶©e
);

385 
size_t
 
	gª_nsub
;

391 
__REPB_PREFIX
(
ˇn_be_nuŒ
) : 1;

397 #ifde‡
__USE_GNU


398 
	#REGS_UNALLOCATED
 0

	)

399 
	#REGS_REALLOCATE
 1

	)

400 
	#REGS_FIXED
 2

	)

402 
__REPB_PREFIX
(
ªgs_Æloˇãd
) : 2;

406 
__REPB_PREFIX
(
Á°m≠_accuøã
) : 1;

410 
__REPB_PREFIX
(
no_sub
) : 1;

414 
__REPB_PREFIX
(
nŸ_bﬁ
) : 1;

417 
__REPB_PREFIX
(
nŸ_eﬁ
) : 1;

420 
__REPB_PREFIX
(
√wlöe_™ch‹
) : 1;

423 
ª_∑âîn_buf„r
 
	tªgex_t
;

426 
	tªgoff_t
;

429 #ifde‡
__USE_GNU


432 
	sª_ªgi°îs


434 
	gnum_ªgs
;

435 
ªgoff_t
 *
	g°¨t
;

436 
ªgoff_t
 *
	gíd
;

443 #i‚de‡
RE_NREGS


444 
	#RE_NREGS
 30

	)

454 
ªgoff_t
 
	grm_so
;

455 
ªgoff_t
 
	grm_eo
;

456 } 
	tªgm©ch_t
;

460 #ifde‡
__USE_GNU


463 
ªg_sy¡ax_t
 
ª_£t_sy¡ax
 (ªg_sy¡ax_à
__sy¡ax
);

473 c⁄° *
ª_compûe_∑âîn
 (c⁄° *
__∑âîn
, 
size_t
 
__Àngth
,

474 
ª_∑âîn_buf„r
 *
__buf„r
);

480 
ª_compûe_Á°m≠
 (
ª_∑âîn_buf„r
 *
__buf„r
);

488 
ª_£¨ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

489 
__Àngth
, 
__°¨t
, 
__ønge
,

490 
ª_ªgi°îs
 *
__ªgs
);

495 
ª_£¨ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

496 c⁄° *
__°rög1
, 
__Àngth1
,

497 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

498 
__ønge
, 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

503 
ª_m©ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

504 
__Àngth
, 
__°¨t
, 
ª_ªgi°îs
 *
__ªgs
);

508 
ª_m©ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

509 c⁄° *
__°rög1
, 
__Àngth1
,

510 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

511 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

526 
ª_£t_ªgi°îs
 (
ª_∑âîn_buf„r
 *
__buf„r
,

527 
ª_ªgi°îs
 *
__ªgs
,

528 
__num_ªgs
,

529 
ªgoff_t
 *
__°¨ts
,Ñegoff_à*
__íds
);

532 #i‡
deföed
 
_REGEX_RE_COMP
 || (deföed 
_LIBC
 && deföed 
__USE_MISC
)

533 #i‚de‡
_CRAY


535 *
ª_comp
 (const *);

536 
ª_exec
 (const *);

542 #i‚de‡
__ª°ri˘


543 #i‡! (2 < 
__GNUC__
 || (2 =__GNUC__ && 95 <
__GNUC_MINOR__
))

544 #i‡
deföed
 
ª°ri˘
 || 199901L <
__STDC_VERSION__


545 
	#__ª°ri˘
 
ª°ri˘


	)

547 
	#__ª°ri˘


	)

552 #i‚de‡
__ª°ri˘_¨r


553 #i‡(
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 >= 1)) \

554 && !
deföed
 
	g__GNUG__


555 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

557 
	#__ª°ri˘_¨r


	)

562 
ªgcomp
 (
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

563 c⁄° *
__ª°ri˘
 
__∑âîn
,

564 
__cÊags
);

566 
ªgexec
 (c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

567 c⁄° *
__ª°ri˘
 
__°rög
, 
size_t
 
__nm©ch
,

568 
ªgm©ch_t
 
__pm©ch
[
__ª°ri˘_¨r
],

569 
__eÊags
);

571 
size_t
 
ªgîr‹
 (
__îrcode
, c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

572 *
__ª°ri˘
 
__îrbuf
, 
size_t
 
__îrbuf_size
);

574 
ªg‰ì
 (
ªgex_t
 *
__¥eg
);

577 #ifde‡
__˝lu•lus


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/kî√l.h
>

5 
	~<löux/sockë.h
>

6 
	~<löux/ty≥s.h
>

8 
	#NETLINK_ROUTE
 0

	)

9 
	#NETLINK_UNUSED
 1

	)

10 
	#NETLINK_USERSOCK
 2

	)

11 
	#NETLINK_FIREWALL
 3

	)

12 
	#NETLINK_SOCK_DIAG
 4

	)

13 
	#NETLINK_NFLOG
 5

	)

14 
	#NETLINK_XFRM
 6

	)

15 
	#NETLINK_SELINUX
 7

	)

16 
	#NETLINK_ISCSI
 8

	)

17 
	#NETLINK_AUDIT
 9

	)

18 
	#NETLINK_FIB_LOOKUP
 10

	)

19 
	#NETLINK_CONNECTOR
 11

	)

20 
	#NETLINK_NETFILTER
 12

	)

21 
	#NETLINK_IP6_FW
 13

	)

22 
	#NETLINK_DNRTMSG
 14

	)

23 
	#NETLINK_KOBJECT_UEVENT
 15

	)

24 
	#NETLINK_GENERIC
 16

	)

26 
	#NETLINK_SCSITRANSPORT
 18

	)

27 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#NETLINK_RDMA
 20

	)

29 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

33 
	#MAX_LINKS
 32

	)

35 
	ssockaddr_∆
 {

36 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

37 
	m∆_∑d
;

38 
__u32
 
	m∆_pid
;

39 
__u32
 
	m∆_groups
;

42 
	s∆msghdr
 {

43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

56 
	#NLM_F_DUMP_INTR
 16

	)

57 
	#NLM_F_DUMP_FILTERED
 32

	)

60 
	#NLM_F_ROOT
 0x100

	)

61 
	#NLM_F_MATCH
 0x200

	)

62 
	#NLM_F_ATOMIC
 0x400

	)

63 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

66 
	#NLM_F_REPLACE
 0x100

	)

67 
	#NLM_F_EXCL
 0x200

	)

68 
	#NLM_F_CREATE
 0x400

	)

69 
	#NLM_F_APPEND
 0x800

	)

80 
	#NLMSG_ALIGNTO
 4U

	)

81 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

82 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

83 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

84 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

85 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

86 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

87 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

88 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

89 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

90 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

91 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

93 
	#NLMSG_NOOP
 0x1

	)

94 
	#NLMSG_ERROR
 0x2

	)

95 
	#NLMSG_DONE
 0x3

	)

96 
	#NLMSG_OVERRUN
 0x4

	)

98 
	#NLMSG_MIN_TYPE
 0x10

	)

100 
	s∆msgîr
 {

101 
	mîr‹
;

102 
∆msghdr
 
	mmsg
;

105 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

106 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

107 
	#NETLINK_PKTINFO
 3

	)

108 
	#NETLINK_BROADCAST_ERROR
 4

	)

109 
	#NETLINK_NO_ENOBUFS
 5

	)

110 
	#NETLINK_RX_RING
 6

	)

111 
	#NETLINK_TX_RING
 7

	)

112 
	#NETLINK_LISTEN_ALL_NSID
 8

	)

113 
	#NETLINK_LIST_MEMBERSHIPS
 9

	)

114 
	#NETLINK_CAP_ACK
 10

	)

116 
	s∆_pktöfo
 {

117 
__u32
 
	mgroup
;

120 
	s∆_mm≠_ªq
 {

121 
	mnm_block_size
;

122 
	mnm_block_ƒ
;

123 
	mnm_‰ame_size
;

124 
	mnm_‰ame_ƒ
;

127 
	s∆_mm≠_hdr
 {

128 
	mnm_°©us
;

129 
	mnm_Àn
;

130 
__u32
 
	mnm_group
;

132 
__u32
 
	mnm_pid
;

133 
__u32
 
	mnm_uid
;

134 
__u32
 
	mnm_gid
;

137 
	e∆_mm≠_°©us
 {

138 
	mNL_MMAP_STATUS_UNUSED
,

139 
	mNL_MMAP_STATUS_RESERVED
,

140 
	mNL_MMAP_STATUS_VALID
,

141 
	mNL_MMAP_STATUS_COPY
,

142 
	mNL_MMAP_STATUS_SKIP
,

145 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

146 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

147 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

149 
	#NET_MAJOR
 36

	)

152 
	mNETLINK_UNCONNECTED
 = 0,

153 
	mNETLINK_CONNECTED
,

165 
	s∆©å
 {

166 
__u16
 
	m∆a_Àn
;

167 
__u16
 
	m∆a_ty≥
;

180 
	#NLA_F_NESTED
 (1 << 15)

	)

181 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

182 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

184 
	#NLA_ALIGNTO
 4

	)

185 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

186 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/mtd/mtd-abi.h

20 #i‚de‡
__MTD_ABI_H__


21 
	#__MTD_ABI_H__


	)

23 
	~<löux/ty≥s.h
>

25 
	sîa£_öfo_u£r
 {

26 
__u32
 
	m°¨t
;

27 
__u32
 
	mÀngth
;

30 
	sîa£_öfo_u£r64
 {

31 
__u64
 
	m°¨t
;

32 
__u64
 
	mÀngth
;

35 
	smtd_oob_buf
 {

36 
__u32
 
	m°¨t
;

37 
__u32
 
	mÀngth
;

38 *
	m±r
;

41 
	smtd_oob_buf64
 {

42 
__u64
 
	m°¨t
;

43 
__u32
 
	m∑d
;

44 
__u32
 
	mÀngth
;

45 
__u64
 
	mu§_±r
;

62 
	mMTD_OPS_PLACE_OOB
 = 0,

63 
	mMTD_OPS_AUTO_OOB
 = 1,

64 
	mMTD_OPS_RAW
 = 2,

83 
	smtd_wrôe_ªq
 {

84 
__u64
 
	m°¨t
;

85 
__u64
 
	mÀn
;

86 
__u64
 
	moobÀn
;

87 
__u64
 
	mu§_d©a
;

88 
__u64
 
	mu§_oob
;

89 
__u8
 
	mmode
;

90 
__u8
 
	m∑ddög
[7];

93 
	#MTD_ABSENT
 0

	)

94 
	#MTD_RAM
 1

	)

95 
	#MTD_ROM
 2

	)

96 
	#MTD_NORFLASH
 3

	)

97 
	#MTD_NANDFLASH
 4

	)

98 
	#MTD_DATAFLASH
 6

	)

99 
	#MTD_UBIVOLUME
 7

	)

100 
	#MTD_MLCNANDFLASH
 8

	)

102 
	#MTD_WRITEABLE
 0x400

	)

103 
	#MTD_BIT_WRITEABLE
 0x800

	)

104 
	#MTD_NO_ERASE
 0x1000

	)

105 
	#MTD_POWERUP_LOCK
 0x2000

	)

108 
	#MTD_CAP_ROM
 0

	)

109 
	#MTD_CAP_RAM
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
 | 
MTD_NO_ERASE
)

	)

110 
	#MTD_CAP_NORFLASH
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
)

	)

111 
	#MTD_CAP_NANDFLASH
 (
MTD_WRITEABLE
)

	)

112 
	#MTD_CAP_NVRAM
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
 | 
MTD_NO_ERASE
)

	)

115 
	#MTD_NANDECC_OFF
 0

116 
	#MTD_NANDECC_PLACE
 1

117 
	#MTD_NANDECC_AUTOPLACE
 2

118 
	#MTD_NANDECC_PLACEONLY
 3

119 
	#MTD_NANDECC_AUTOPL_USR
 4

120 

	)

122 
	#MTD_OTP_OFF
 0

	)

123 
	#MTD_OTP_FACTORY
 1

	)

124 
	#MTD_OTP_USER
 2

	)

126 
	smtd_öfo_u£r
 {

127 
__u8
 
	mty≥
;

128 
__u32
 
	mÊags
;

129 
__u32
 
	msize
;

130 
__u32
 
	mîa£size
;

131 
__u32
 
	mwrôesize
;

132 
__u32
 
	moobsize
;

133 
__u64
 
	m∑ddög
;

136 
	sªgi⁄_öfo_u£r
 {

137 
__u32
 
	moff£t
;

139 
__u32
 
	mîa£size
;

140 
__u32
 
	mnumblocks
;

141 
__u32
 
	mªgi⁄ödex
;

144 
	sŸp_öfo
 {

145 
__u32
 
	m°¨t
;

146 
__u32
 
	mÀngth
;

147 
__u32
 
	mlocked
;

157 
	#MEMGETINFO
 
	`_IOR
('M', 1, 
mtd_öfo_u£r
)

	)

159 
	#MEMERASE
 
	`_IOW
('M', 2, 
îa£_öfo_u£r
)

	)

161 
	#MEMWRITEOOB
 
	`_IOWR
('M', 3, 
mtd_oob_buf
)

	)

163 
	#MEMREADOOB
 
	`_IOWR
('M', 4, 
mtd_oob_buf
)

	)

165 
	#MEMLOCK
 
	`_IOW
('M', 5, 
îa£_öfo_u£r
)

	)

167 
	#MEMUNLOCK
 
	`_IOW
('M', 6, 
îa£_öfo_u£r
)

	)

169 
	#MEMGETREGIONCOUNT
 
	`_IOR
('M', 7, )

	)

171 
	#MEMGETREGIONINFO
 
	`_IOWR
('M', 8, 
ªgi⁄_öfo_u£r
)

	)

173 
	#MEMGETOOBSEL
 
	`_IOR
('M', 10, 
«nd_ooböfo
)

	)

175 
	#MEMGETBADBLOCK
 
	`_IOW
('M', 11, 
__kî√l_loff_t
)

	)

177 
	#MEMSETBADBLOCK
 
	`_IOW
('M', 12, 
__kî√l_loff_t
)

	)

179 
	#OTPSELECT
 
	`_IOR
('M', 13, )

	)

181 
	#OTPGETREGIONCOUNT
 
	`_IOW
('M', 14, )

	)

183 
	#OTPGETREGIONINFO
 
	`_IOW
('M', 15, 
Ÿp_öfo
)

	)

185 
	#OTPLOCK
 
	`_IOR
('M', 16, 
Ÿp_öfo
)

	)

187 
	#ECCGETLAYOUT
 
	`_IOR
('M', 17, 
«nd_ec˛ayout_u£r
)

	)

189 
	#ECCGETSTATS
 
	`_IOR
('M', 18, 
mtd_ecc_°©s
)

	)

191 
	#MTDFILEMODE
 
	`_IO
('M', 19)

	)

193 
	#MEMERASE64
 
	`_IOW
('M', 20, 
îa£_öfo_u£r64
)

	)

195 
	#MEMWRITEOOB64
 
	`_IOWR
('M', 21, 
mtd_oob_buf64
)

	)

197 
	#MEMREADOOB64
 
	`_IOWR
('M', 22, 
mtd_oob_buf64
)

	)

199 
	#MEMISLOCKED
 
	`_IOR
('M', 23, 
îa£_öfo_u£r
)

	)

205 
	#MEMWRITE
 
	`_IOWR
('M', 24, 
mtd_wrôe_ªq
)

	)

211 
	s«nd_ooböfo
 {

212 
__u32
 
	mu£ecc
;

213 
__u32
 
	meccbyãs
;

214 
__u32
 
	moob‰ì
[8][2];

215 
__u32
 
	mec˝os
[32];

218 
	s«nd_oob‰ì
 {

219 
__u32
 
	moff£t
;

220 
__u32
 
	mÀngth
;

223 
	#MTD_MAX_OOBFREE_ENTRIES
 8

	)

224 
	#MTD_MAX_ECCPOS_ENTRIES
 64

	)

233 
	s«nd_ec˛ayout_u£r
 {

234 
__u32
 
	meccbyãs
;

235 
__u32
 
	mec˝os
[
MTD_MAX_ECCPOS_ENTRIES
];

236 
__u32
 
	moobavaû
;

237 
«nd_oob‰ì
 
	moob‰ì
[
MTD_MAX_OOBFREE_ENTRIES
];

248 
	smtd_ecc_°©s
 {

249 
__u32
 
	mc‹ª˘ed
;

250 
__u32
 
	mÁûed
;

251 
__u32
 
	mbadblocks
;

252 
__u32
 
	mbbtblocks
;

272 
	emtd_fûe_modes
 {

273 
	mMTD_FILE_MODE_NORMAL
 = 
MTD_OTP_OFF
,

274 
	mMTD_FILE_MODE_OTP_FACTORY
 = 
MTD_OTP_FACTORY
,

275 
	mMTD_FILE_MODE_OTP_USER
 = 
MTD_OTP_USER
,

276 
	mMTD_FILE_MODE_RAW
,

279 
__ölöe__
 
	$mtd_ty≥_is_«nd_u£r
(c⁄° 
mtd_öfo_u£r
 *
mtd
)

281  
mtd
->
ty≥
 =
MTD_NANDFLASH
 || mtd->ty≥ =
MTD_MLCNANDFLASH
;

282 
	}
}

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/stddef.h

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
204
5848
jsmn.c
jsmn.h
main.c
ota_app.c
ota_download.c
ota_download.h
ota_indicator.c
ota_indicator.h
ota_update.c
ota_update.h
ota_utils.c
ota_utils.h
progress.h
progress_ipc.h
swupdate/bindings/auxiliar.c
swupdate/bindings/auxiliar.h
swupdate/bindings/lua_compat_shared.c
swupdate/bindings/lua_swupdate.c
swupdate/bootloader/ebg.c
swupdate/bootloader/grub.c
swupdate/bootloader/grub.h
swupdate/bootloader/none.c
swupdate/bootloader/uboot.c
swupdate/bootloader/uboot.h
swupdate/core/cpio_utils.c
swupdate/core/handler.c
swupdate/core/notifier.c
swupdate/core/parser.c
swupdate/core/pctl.c
swupdate/core/state.c
swupdate/core/swupdate.c
swupdate/core/syslog.c
swupdate/core/util.c
swupdate/corelib/artifacts_versions.c
swupdate/corelib/channel_curl.c
swupdate/corelib/downloader.c
swupdate/corelib/installer.c
swupdate/corelib/lua_compat.c
swupdate/corelib/lua_interface.c
swupdate/corelib/mtd-interface.c
swupdate/corelib/network_thread.c
swupdate/corelib/parsing_library.c
swupdate/corelib/parsing_library_libconfig.c
swupdate/corelib/parsing_library_libjson.c
swupdate/corelib/progress_thread.c
swupdate/corelib/stream_interface.c
swupdate/corelib/swupdate_cms_verify.c
swupdate/corelib/swupdate_decrypt.c
swupdate/corelib/swupdate_dict.c
swupdate/corelib/swupdate_rsa_verify.c
swupdate/corelib/swupdate_settings.c
swupdate/corelib/swupdate_verify_private.h
swupdate/corelib/test/test_crypt.c
swupdate/corelib/verify_signature.c
swupdate/handlers/archive_handler.c
swupdate/handlers/boot_handler.c
swupdate/handlers/dummy_handler.c
swupdate/handlers/flash_hamming1_handler.c
swupdate/handlers/flash_handler.c
swupdate/handlers/lua_scripthandler.c
swupdate/handlers/raw_handler.c
swupdate/handlers/rdiff_handler.c
swupdate/handlers/remote_handler.c
swupdate/handlers/shell_scripthandler.c
swupdate/handlers/swuforward_handler.c
swupdate/handlers/ubivol_handler.c
swupdate/handlers/ucfw_handler.c
swupdate/include/bootloader.h
swupdate/include/bsdqueue.h
swupdate/include/channel.h
swupdate/include/channel_curl.h
swupdate/include/channel_op_res.h
swupdate/include/compat.h
swupdate/include/cpiohdr.h
swupdate/include/download_interface.h
swupdate/include/flash.h
swupdate/include/globals.h
swupdate/include/handler.h
swupdate/include/installer.h
swupdate/include/lua_util.h
swupdate/include/mongoose_interface.h
swupdate/include/network_interface.h
swupdate/include/network_ipc.h
swupdate/include/parselib.h
swupdate/include/parsers.h
swupdate/include/pctl.h
swupdate/include/progress.h
swupdate/include/progress_ipc.h
swupdate/include/sslapi.h
swupdate/include/state.h
swupdate/include/suricatta/server.h
swupdate/include/suricatta/suricatta.h
swupdate/include/swupdate.h
swupdate/include/swupdate_dict.h
swupdate/include/swupdate_settings.h
swupdate/include/swupdate_status.h
swupdate/include/util.h
swupdate/ipc/network_ipc.c
swupdate/ipc/progress_ipc.c
swupdate/mongoose/mongoose.c
swupdate/mongoose/mongoose.h
swupdate/mongoose/mongoose_interface.c
swupdate/parser/parse_external.c
swupdate/parser/parser.c
swupdate/scripts/basic/fixdep.c
swupdate/scripts/kconfig/conf.c
swupdate/scripts/kconfig/confdata.c
swupdate/scripts/kconfig/expr.c
swupdate/scripts/kconfig/expr.h
swupdate/scripts/kconfig/gconf.c
swupdate/scripts/kconfig/images.c
swupdate/scripts/kconfig/kxgettext.c
swupdate/scripts/kconfig/list.h
swupdate/scripts/kconfig/lkc.h
swupdate/scripts/kconfig/lkc_defs.h
swupdate/scripts/kconfig/lkc_proto.h
swupdate/scripts/kconfig/lxdialog/checklist.c
swupdate/scripts/kconfig/lxdialog/dialog.h
swupdate/scripts/kconfig/lxdialog/inputbox.c
swupdate/scripts/kconfig/lxdialog/menubox.c
swupdate/scripts/kconfig/lxdialog/textbox.c
swupdate/scripts/kconfig/lxdialog/util.c
swupdate/scripts/kconfig/lxdialog/yesno.c
swupdate/scripts/kconfig/mconf.c
swupdate/scripts/kconfig/menu.c
swupdate/scripts/kconfig/nconf.c
swupdate/scripts/kconfig/nconf.gui.c
swupdate/scripts/kconfig/nconf.h
swupdate/scripts/kconfig/qconf.cc
swupdate/scripts/kconfig/qconf.h
swupdate/scripts/kconfig/symbol.c
swupdate/scripts/kconfig/util.c
swupdate/scripts/kconfig/zconf.l
swupdate/scripts/kconfig/zconf.y
swupdate/suricatta/common.c
swupdate/suricatta/server_general.c
swupdate/suricatta/server_general.h
swupdate/suricatta/server_hawkbit.c
swupdate/suricatta/server_hawkbit.h
swupdate/suricatta/suricatta.c
swupdate/suricatta/suricatta_private.h
swupdate/suricatta/test/test_json.c
swupdate/suricatta/test/test_server_hawkbit.c
swupdate/tools/client.c
swupdate/tools/hawkbitcfg.c
swupdate/tools/progress.c
swupdate/tools/sendtohawkbit.c
swupdate_status.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/curl/curl.h
/usr/include/dirent.h
/usr/include/err.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/fnmatch.h
/usr/include/ftw.h
/usr/include/getopt.h
/usr/include/ifaddrs.h
/usr/include/inttypes.h
/usr/include/libgen.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/linux/if_link.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/locale.h
/usr/include/math.h
/usr/include/mtd/mtd-user.h
/usr/include/net/if.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/pthread.h
/usr/include/regex.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/syslog.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/netlink.h
/usr/include/linux/posix_types.h
/usr/include/mtd/mtd-abi.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/linux/kernel.h
/usr/include/linux/socket.h
/usr/include/linux/stddef.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/linux/sysinfo.h
/usr/include/wchar.h
/usr/include/wctype.h
